{"root":"0:0:1800","crate_version":"1.4.0","includes_private":false,"index":{"1:12941:27096":{"id":"1:12941:27096","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42352:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12563:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12578:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12897:25609":{"id":"1:12897:25609","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44493:3559","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12923:27089":{"id":"1:12923:27089","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12558:3530","`DoubleEndedIterator`":"1:7942:128","prim@char":"4:12055:457","str::split":"1:12917:25608"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:44257:3490","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12563:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12578:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12963:29782":{"id":"1:12963:29782","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12889:27085":{"id":"1:12889:27085","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:12890:27086"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42352:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12898:29772":{"id":"1:12898:29772","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44503:3561","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12887:27081":{"id":"1:12887:27081","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:12889:27085","str::split_at_mut":"1:12888:27082"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5572:3366":{"id":"5:5572:3366","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7571:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12874:29769":{"id":"1:12874:29769","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12929:29774":{"id":"1:12929:29774","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12558:3530","str::split":"1:12917:25608","prim@char":"4:12055:457","str::split_terminator":"1:12926:29773"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:44307:3562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12563:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12578:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12990:26266":{"id":"1:12990:26266","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12950:29776":{"id":"1:12950:29776","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12558:3530","`DoubleEndedIterator`":"1:7942:128","prim@char":"4:12055:457","str::rmatch_indices":"1:12953:29777"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44389:3566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12877:1805":{"id":"1:12877:1805","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42354:198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42352:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12903:27097":{"id":"1:12903:27097","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:12055:457","self::pattern":"1:12558:3530"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12875:339":{"id":"1:12875:339","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12876:27062","`u8`":"4:12072:1652"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12997:3284":{"id":"1:12997:3284","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4739:3284"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44547:3285","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12873:25330":{"id":"1:12873:25330","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12106:3550"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12960:29780":{"id":"1:12960:29780","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12893:21237":{"id":"1:12893:21237","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12055:457"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:44215:3557","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29:1806":{"id":"0:29:1806","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[185,0],"end":[188,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"1:12962:29781":{"id":"1:12962:29781","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12900:21997":{"id":"1:12900:21997","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12055:457","self::pattern":"1:12558:3530"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12973:27099":{"id":"1:12973:27099","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12055:457","self::pattern":"1:12558:3530"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42352:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12563:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12578:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12909:2326":{"id":"1:12909:2326","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42354:198","prim@char":"4:12055:457","self::pattern":"1:12558:3530"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42352:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12886:29771":{"id":"1:12886:29771","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12061:1548","crate::ops::IndexMut":"1:3220:2196","str::slice_unchecked":"1:12885:29770"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12899:21324":{"id":"1:12899:21324","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44531:3568","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12870:29768":{"id":"1:12870:29768","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12868:29767"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12976:29785":{"id":"1:12976:29785","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12055:457","self::pattern":"1:12558:3530"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12563:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12578:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5555:30478":{"id":"5:5555:30478","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2105","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:281:2105","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5556:3211":{"id":"5:5556:3211","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7571:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5573:26263":{"id":"5:5573:26263","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12990:26266"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5574:26264":{"id":"5:5574:26264","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12991:26267"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12864":{"id":"1:12864","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12865:882","1:12866:2285","1:12867:29766","1:12868:29767","1:12870:29768","1:12873:25330","1:12874:29769","1:12875:339","1:12876:27062","1:12877:1805","1:12879:21888","1:12881:21889","1:12883:21890","1:12885:29770","1:12886:29771","1:12887:27081","1:12888:27082","1:12889:27085","1:12890:27086","1:12892:21322","1:12893:21237","1:12894:23321","1:12895:21389","1:12896:21384","1:12897:25609","1:12898:29772","1:12899:21324","1:12900:21997","1:12903:27097","1:12906:27098","1:12909:2326","1:12913:2284","1:12917:25608","1:12920:21381","1:12923:27089","1:12926:29773","1:12929:29774","1:12932:27091","1:12935:27093","1:12938:27095","1:12941:27096","1:12944:2006","1:12947:29775","1:12950:29776","1:12953:29777","1:12956:29778","1:12958:29779","1:12960:29780","1:12962:29781","1:12963:29782","1:12964:29783","1:12967:29784","1:12970:25405","1:12973:27099","1:12976:29785","1:12979:29786","1:12982:29787","1:12985:29788","1:12987:26261","1:12988:26981","1:12989:26265","1:12990:26266","1:12991:26267","1:12992:26984","1:12993:26985","1:12994:26986","1:12995:29789","1:12997:3284","1:12998:29790"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12866:2285":{"id":"1:12866:2285","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12892:21322":{"id":"1:12892:21322","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12055:457"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:44209:3558","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12895:21389":{"id":"1:12895:21389","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12896:21384"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44513:3560","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12982:29787":{"id":"1:12982:29787","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12055:457","self::pattern":"1:12558:3530"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12563:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12578:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5571:30482":{"id":"5:5571:30482","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:281:2105","`String`":"5:7571:250"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2105","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12967:29784":{"id":"1:12967:29784","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12055:457","self::pattern":"1:12558:3530"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12970:25405":{"id":"1:12970:25405","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12055:457","self::pattern":"1:12558:3530"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42352:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12989:26265":{"id":"1:12989:26265","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12879:21888":{"id":"1:12879:21888","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42354:198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42352:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12932:27091":{"id":"1:12932:27091","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12055:457","self::pattern":"1:12558:3530","str::rsplitn":"1:12935:27093"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44343:3488","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12881:21889":{"id":"1:12881:21889","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12979:29786":{"id":"1:12979:29786","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12055:457","self::pattern":"1:12558:3530"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12876:27062":{"id":"1:12876:27062","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12072:1652"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28:1800":{"id":"0:28:1800","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[167,0],"end":[179,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"inner":{"macro":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"}},"1:12865:882":{"id":"1:12865:882","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12055:457"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12868:29767":{"id":"1:12868:29767","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12917:25608":{"id":"1:12917:25608","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12558:3530","`DoubleEndedIterator`":"1:7942:128","prim@char":"4:12055:457","str::split_whitespace":"1:12895:21389","str::rsplit":"1:12923:27089"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:44239:3486","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12991:26267":{"id":"1:12991:26267","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5570:30481":{"id":"5:5570:30481","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7571:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12894:23321":{"id":"1:12894:23321","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:44225:3556","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12993:26985":{"id":"1:12993:26985","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:910:33612"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5559:30479":{"id":"5:5559:30479","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7571:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12947:29775":{"id":"1:12947:29775","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12558:3530","`DoubleEndedIterator`":"1:7942:128","prim@char":"4:12055:457","str::matches":"1:12944:2006"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44461:3565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12563:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12578:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12958:29779":{"id":"1:12958:29779","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12964:29783":{"id":"1:12964:29783","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12055:457","self::pattern":"1:12558:3530"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12563:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12583:3545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12896:21384":{"id":"1:12896:21384","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12895:21389"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44522:3569","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12944:2006":{"id":"1:12944:2006","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12558:3530","`DoubleEndedIterator`":"1:7942:128","prim@char":"4:12055:457","str::rmatches":"1:12947:29775"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44443:3564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12926:29773":{"id":"1:12926:29773","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12558:3530","str::split":"1:12917:25608","prim@char":"4:12055:457","`DoubleEndedIterator`":"1:7942:128","str::rsplit_terminator":"1:12929:29774"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:44289:3563","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5562:30480":{"id":"5:5562:30480","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7571:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1800":{"id":"0:0:1800","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[215,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\n# #[macro_use]\n# extern crate lazy_static;\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.4.0\")]","#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:29:1806","0:31:1807","0:28:1800"],"is_stripped":false}}},"1:12885:29770":{"id":"1:12885:29770","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12061:1548","str::slice_mut_unchecked":"1:12886:29771","crate::ops::Index":"1:39955:2195"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12987:26261":{"id":"1:12987:26261","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12994:26986":{"id":"1:12994:26986","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:910:33612"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12883:21890":{"id":"1:12883:21890","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12938:27095":{"id":"1:12938:27095","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42352:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5554":{"id":"5:5554","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5555:30478","5:5556:3211","5:5559:30479","5:5562:30480","5:5570:30481","5:5571:30482","5:5572:3366","5:5573:26263","5:5574:26264"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:31:1807":{"id":"0:31:1807","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[213,0],"end":[215,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["lazy",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"LazyStatic","id":"0:29:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12920:21381":{"id":"1:12920:21381","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12055:457","self::pattern":"1:12558:3530"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12374:3499","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12956:29778":{"id":"1:12956:29778","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12935:27093":{"id":"1:12935:27093","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12055:457","str::splitn":"1:12932:27091","self::pattern":"1:12558:3530"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44361:3484","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12563:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12578:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12992:26984":{"id":"1:12992:26984","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:910:33612"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12995:29789":{"id":"1:12995:29789","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4738:29789"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44538:3307","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12890:27086":{"id":"1:12890:27086","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:12889:27085"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42352:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12988:26981":{"id":"1:12988:26981","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:40309:21109","Self::is_ascii":"1:12987:26261"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42352:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:40309:21109","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12985:29788":{"id":"1:12985:29788","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12519:134","`FromStr`":"1:12518:3049"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42495:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12518:3049","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12518:3049","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12953:29777":{"id":"1:12953:29777","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12558:3530","`DoubleEndedIterator`":"1:7942:128","prim@char":"4:12055:457","str::match_indices":"1:12950:29776"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44407:3567","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12563:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12578:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12888:27082":{"id":"1:12888:27082","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12887:27081","str::split_at_mut_checked":"1:12890:27086"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12906:27098":{"id":"1:12906:27098","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12055:457","self::pattern":"1:12558:3530"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12563:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12578:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12913:2284":{"id":"1:12913:2284","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42354:198","prim@char":"4:12055:457","self::pattern":"1:12558:3530"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42352:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12563:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12563:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12578:3546","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12998:29790":{"id":"1:12998:29790","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4736:29790"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44556:3306","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12867:29766":{"id":"1:12867:29766","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"14:214:15213":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:9472:92":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:11051:16450":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:15836:20696":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"16:4813:15943":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"11:2151:9031":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:13581:19379":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"4:6318:2801":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:11567:16524":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"5:4107:2960":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:15390:20665":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:16198:20864":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"1:45151:226":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"17:11242:16458":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:5910:14029":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"4:4769:9240":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"4:9181:9301":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:3416:21804":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:15814:20694":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:11537:16488":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"4:11288:26128":{"crate_id":4,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"16:7118:2265":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"5:1024:2718":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:41022:3389":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:40986:3356":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"6:4878:13337":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:10888:3499":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:5982:14034":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:1604:10684":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:15324:20658":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"0:28:1800":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"4:4236:9206":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:15301:20656":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:3406:15312":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"4:4049:9176":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:12127:16549":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:46751:8692":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"4:12067:806":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"1:45223:178":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:40833:3309":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"4:4890:9188":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:4364:13285":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:1546:10678":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:7702:15029":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:4764:13323":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:1514:10674":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"18:581:3251":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:48515:8658":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:44209:3558":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"5:2998:28990":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:5867:14025":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:2553:15290":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:1914:21367":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:15822:20695":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:4572:2123":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:4955:13346":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:34026:2178":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"4:8283:3559":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"1:44538:3307":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"5:1487:9022":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:403:16380":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:7900:143":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:6927:14467":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"11:2369:15198":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:8360:3286":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"16:4355:15807":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:12824:16406":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:2971:2129":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:8407:22310":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"4:11158:26105":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:13485:19372":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:13272:19358":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:11674:16527":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"4:7602:16382":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:12584:16401":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"4:4119:9183":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:3993:15491":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"4:8855:206":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"1:42174:21434":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"4:2666:2787":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:44979:3536":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:12671:16677":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:40814:3307":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"18:548:150":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:46797:8747":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:12454:16634":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:9799:3464":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"4:588:8997":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:21339:22402":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"9:446:15074":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"4:5484:9279":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"4:1607:9036":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:14147:19888":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:3376:2199":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"4:3233:26640":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"4:10886:9287":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1:40136:3280":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:6868:14463":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:4449:13292":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"4:8900:2959":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:10651:246":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:45202:3626":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"4:9002:2153":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:4093:2746":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"16:7444:16283":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"4:12076:1648":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"19:0:1142":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:5794:16220":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:4902:13340":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:23985:3053":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:43074:3449":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"4:1585:2760":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"13:110:31473":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:44513:3560":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:23891:187":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"16:2509:15288":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:15473:20674":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"4:2271:2782":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"16:2375:15282":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:5878:16224":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:43324:3241":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:10573:32598":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:44123:3495":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:11121:3485":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"4:11541:9168":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:41053:3390":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:11038:3491":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:14189:19890":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"4:11478:2821":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"16:2355:15281":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:34800:2185":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:5238:16184":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"3:0:2028":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"17:12851:16407":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"6:6913:14466":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"11:673:2959":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:22295:8801":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"2:234:233":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"18:531:20907":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:14847:20626":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"4:415:182":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"4:1862:9063":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"1:2504:208":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:46150:8677":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"4:482:2783":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:11107:3489":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:2319:15279":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"14:0:2035":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"4:3906:9170":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:46575:8720":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:4977:13348":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:40066:223":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"11:2469:2760":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"4:7968:9020":{"crate_id":4,"path":["std","hash","random","RandomState"],"kind":"struct"},"5:7492:2751":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:15197:20647":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:32802:22254":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:15778:20692":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:6691:14455":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:42476:2269":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:4426:2746":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:40309:21109":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:12789:118":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"5:7361:29093":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"11:875:9028":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"4:10440:9153":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"4:867:9021":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:47465:8699":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:40798:3306":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:527:9781":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"4:5120:26195":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"8:0:2030":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:12030:16546":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:5852:3394":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:22348:3227":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"0:31:1807":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"1:46972:21420":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:7913:2104":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:10720:32369":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:6079:14040":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:7951:16301":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:5316:16203":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"4:557:2968":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:8055:16307":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:10419:16356":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"5:6713:2718":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:44734:3588":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:42560:203":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"14:31:15204":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:16138:20859":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"6:1913:10859":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"4:12022:26755":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"5:3245:29142":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:11166:16438":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"4:9033:25419":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:3044:2193":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"17:15410:20667":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:5829:13960":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:11016:16423":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"5:6011:2148":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:15249:20651":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"4:8463:9266":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"6:1703:9199":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:7355:16277":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:12508:16638":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"4:11630:26177":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:15126:20641":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:6895:31699":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:5015:13353":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:16249:20868":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:41565:1947":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:23065:193":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"6:5140:13366":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:13844:19869":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:10997:16422":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:23155:194":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"5:7548:9085":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"11:1160:9032":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:40910:3352":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:11788:16580":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:22334:8802":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"16:5006:15998":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"5:1506:9024":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"11:1142:15195":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:10769:32574":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:12189:16625":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:13412:19367":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"16:5645:16215":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:21514:8672":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:33967:2180":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:15521:20675":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"4:7912:9107":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"5:2718:28965":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:14560:19915":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:40956:2829":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"5:7038:2777":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"4:5033:9248":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"6:6804:14459":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:6781:10799":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"4:5640:9283":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"16:4937:15975":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"4:12079:1258":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"17:597:16382":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:6100:14042":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:40966:3351":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:42435:2265":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"17:11661:16497":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:2351:3227":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:7227:2297":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:23797:190":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:44655:3585":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:11493:16481":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"4:4063:9178":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:15426:20669":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"4:11056:9286":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:2459:15286":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"4:533:2784":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"1:4194:108":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"16:8109:135":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"4:1581:2740":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:10170:16204":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:12683:16646":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"1:41167:3399":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:3468:2133":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:5616:16213":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:4399:15828":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"4:1939:9081":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"4:12075:1651":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"5:2987:2353":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:15078:16439":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:16259:19365":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"17:13015:16370":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:574:9788":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:14855:20627":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:10641:9112":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:14402:19904":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:12969:16358":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"5:790:2721":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:44053:2987":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"4:3463:2746":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"11:2383:2959":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:9858:16384":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:11595:16525":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"6:1632:10685":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:15799:20693":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"4:11110:25432":{"crate_id":4,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"18:670:20897":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"5:4381:270":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:21565:9112":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"5:7341:2730":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:4893:13339":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"11:1025:2946":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:10068:16368":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:15176:20645":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"4:7056:26509":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:22256:8800":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"6:7657:13535":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:13832:19868":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"4:10944:2817":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:9984:16388":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:44987:3599":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"6:1591:10682":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:11634:16496":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:46375:8679":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:6813:14460":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:6858:16266":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:6128:14046":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:41216:3386":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"4:12056:1668":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"1:3386:260":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:4738:9172":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:3391:144":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"4:9284:2433":{"crate_id":4,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"16:7971:16302":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:7645:13533":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:3170:2132":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:10927:3487":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:14723:20623":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"11:2562:31410":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:6584:3384":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:15760:20690":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:2789:15301":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:16165:20861":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"16:3600:15314":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"18:0:2039":{"crate_id":18,"path":["memchr"],"kind":"module"},"5:1440:2960":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:11915:16585":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"6:4488:13296":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:10524:16396":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:42332:3419":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:21512:9112":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"6:6798:14458":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:12711:135":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:3001:3268":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"4:922:9026":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:2341:642":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:11877:16540":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:41589:2836":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:41082:3393":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"14:160:15204":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:13325:19361":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:4814:13329":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:886:2726":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"5:903:2959":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"16:5846:16222":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:21684:9112":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:42487:3423":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:4302:2134":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:21341:22397":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"5:1456:2289":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"5:7571:250":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:6590:21472":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"5:7560:2756":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"6:5891:14027":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:7679:13537":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"16:2617:15293":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:4987:22857":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:7388:14841":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:44640:3584":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:21695:8668":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"4:10746:25445":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"11:2443:2740":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:44798:3590":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:44823:3592":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"4:11396:25420":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:33488:2171":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"17:12408:16623":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:4755:13322":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:32809:2122":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"17:11367:16440":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:12707:16404":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:14449:19907":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"4:8534:9268":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:5146:13367":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:26425:272":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:16032:19357":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"4:9445:136":{"crate_id":4,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"17:14968:20632":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"4:4220:9204":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"7:78:15052":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"4:8370:9212":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"4:6966:2805":{"crate_id":4,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:41192:3401":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"4:8879:9286":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:14066:19883":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:11269:16460":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"9:329:15130":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"16:6215:16235":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"16:4871:15955":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:44812:3591":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"5:1790:2760":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"4:8270:3556":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"4:2434:9095":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"4:1072:9032":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:45040:3601":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:22864:3055":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:6394:16248":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:46326:8725":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:13375:19364":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:41574:3365":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:4789:13326":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"4:10155:9289":{"crate_id":4,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"17:16187:20863":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"16:6331:16244":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"4:637:9000":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:12629:3577":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"4:3268:9154":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:4676:13316":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"4:7209:26714":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:42258:21497":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"18:515:20906":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:12238:16599":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:5681:2746":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"4:0:1540":{"crate_id":4,"path":["std"],"kind":"module"},"1:22791:21387":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"4:7823:9071":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:12201:16626":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:22013:22405":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:44951:3535":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"1:46445:8697":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"5:1496:9023":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"16:6908:31640":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:14912:20630":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"11:2124:9030":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"4:12069:804":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"1:13356:114":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"17:15596:20678":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:6934:14468":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"4:1578:2289":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:32791:21831":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:7332:3387":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1:22402:3227":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"17:13046:16367":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:42292:3417":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"4:8916:2289":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"5:2487:2954":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:42857:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:44493:3559":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:42092:168":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:10612:16397":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:16050:19358":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"4:8599:2959":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"4:7962:126":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"4:9452:9107":{"crate_id":4,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"11:687:2960":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"5:4267:2959":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:13526:19375":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"11:1887:2289":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"5:1316:9032":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:6120:14045":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"5:1537:9040":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"4:4097:9179":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"4:4638:9231":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"4:12078:1707":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"17:15383:20664":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:16212:20865":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"6:5104:13361":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"16:4283:15758":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:14284:19896":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:14414:19905":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"4:6366:227":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:48458:8653":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:11392:16471":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:13387:19365":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"5:830:2724":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:9659:23584":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:4595:13309":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:15944:19355":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"17:14325:19899":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:12768:16362":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"11:1728:153":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"5:6893:2770":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:2917:15306":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"6:1528:10676":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:9995:118":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"18:481:20904":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:7633:13531":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:11214:16431":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"4:11644:15237":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:43984:22251":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:1795:641":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:4376:1944":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"16:4907:15968":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:13899:19872":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"18:754:20902":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"4:12055:457":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"17:14079:19884":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:4932:13344":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"4:9107:25345":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"4:12062:1633":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"17:15445:20671":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:4496:13297":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:42477:2268":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"9:501:15077":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:32816:3265":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"16:7537:16288":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:3709:15322":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:21567:8667":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:10185:16359":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"11:2542:21797":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"5:3596:180":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:15222:20650":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:7684:16295":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:15678:20685":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"11:1051:9031":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"11:2231:15190":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"4:7735:8986":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"6:4870:13336":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:44185:3555":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:15931:19354":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"1:22853:3051":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:43088:3450":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"4:6040:2801":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"11:1007:9030":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:5085:13360":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:39296:2191":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:41558:3363":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"5:4881:224":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:41599:3370":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:9916:16386":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"4:2652:2789":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"4:11093:9116":{"crate_id":4,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"4:1054:2946":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"5:2167:29099":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:13877:19871":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:44110:3379":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:12089:16542":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:6077:16228":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:119:9457":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"16:2573:15291":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:42740:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:46721:8686":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"4:4708:25481":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:43369:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:12572:3547":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"5:4197:2746":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:11497:16468":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:11853:16583":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:12557:16440":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"5:6631:2289":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:41607:3372":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"16:7194:31779":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:11773:16579":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:10965:3500":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"4:12070:805":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"6:7556:15000":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:14386:19903":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:4649:15917":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:46242:8684":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:13173:16685":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"16:7491:16286":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:42623:97":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:42410:2959":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"17:11715:16529":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"16:5555:16209":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:4666:13315":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:16151:20860":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"1:6395:3407":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:6462:16252":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:5759:16219":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:10000:127":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"4:5450:9277":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"17:11825:16561":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:14356:19901":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:12289:16593":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:15010:20635":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"6:6228:13200":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:14012:19879":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"4:7924:9108":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"11:742:9025":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"4:8951:9297":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:11227:16430":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:38717:2190":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:13538:19376":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"16:7400:16281":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:31032:3241":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"11:1891:2740":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:6071:14039":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:13461:3629":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:21573:8671":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"4:11618:9316":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"5:4459:2749":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"4:10846:9071":{"crate_id":4,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"4:4975:9238":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:437:15253":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:3597:16566":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"4:2266:136":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"1:45148:147":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"17:13146:16684":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:12563:3544":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"4:7907:9106":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"18:80:20880":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:15190:20646":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:4702:15924":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"4:4452:9203":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"4:9220:26122":{"crate_id":4,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"9:356:15090":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:23245:195":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:4805:3299":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"5:7383:217":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"4:849:2960":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"14:165:15205":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"6:4461:13293":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:5130:13365":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:14876:20629":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:10431:2840":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"4:2977:2792":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:45169:214":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"17:11313:16462":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"4:5464:9278":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"1:4182:21965":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:45250:3630":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"6:5941:13988":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:1802:3191":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"4:10246:2975":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"16:6362:16246":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:6268:16240":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"11:856:2942":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:2721:142":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"6:580:9789":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"4:8076:9147":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"4:9066:26210":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:13455:19370":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:6134:16231":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"4:7934:9105":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"16:7932:16300":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"5:1131:2953":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:12808:16365":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:12225:16600":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"16:7176:31816":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:12443:16624":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"14:7:15204":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:5346:31672":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:9755:16353":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:3049:2194":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"4:4249:9207":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"4:3349:9152":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:2979:15307":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:14868:20628":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:31601:3251":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"17:14489:19910":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:40123:3266":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"6:5009:13352":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:7306:16273":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"5:6136:2746":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"0:29:1806":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"4:4380:9209":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:12900:16410":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"5:3702:2718":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:2074:9041":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"17:15039:20637":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:16223:20866":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"4:1590:9033":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:0:539":{"crate_id":1,"path":["core"],"kind":"module"},"17:13674:19862":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"4:5151:26195":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:21976:8674":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"6:1650:10687":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:40749:21247":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:4603:13310":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:4473:13294":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"4:12071:801":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"16:7452:16284":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:12659:16641":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"4:10054:9063":{"crate_id":4,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"17:13509:19374":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"6:4529:13301":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:654:9838":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"9:423:15076":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:9952:3318":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"4:928:9027":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:45029:3600":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:42701:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:22806:21508":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"17:14298:19897":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:8012:16305":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"5:634:28986":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"4:48:1942":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"6:5921:14030":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:38607:2188":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"4:5815:2150":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:12300:16629":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"16:6803:16263":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:3403:2203":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"4:5515:112":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"1:10463:2845":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:15748:20689":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:7598:13526":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:15400:20666":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:12494:16601":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"4:2688:9137":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:1708:2746":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"16:0:2037":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:13999:19878":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"4:2275:9088":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"4:9457:2812":{"crate_id":4,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"1:44389:3566":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"10:36:31407":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"16:149:2702":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"4:12060:1515":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"5:692:117":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:46773:8698":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:542:9783":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:10008:3451":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"4:6665:2161":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"6:569:9787":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"11:1107:2948":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:2715:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"17:14788:20625":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:42535:2959":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"6:4401:13288":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:43631:21327":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:4333:2135":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:4628:13313":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"4:2436:9096":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"4:8616:9272":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"6:1691:10691":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:44443:3564":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"5:6503:2740":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:42130:3414":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:46627:8732":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:44307:3562":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"4:9074:16268":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:13753:19865":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"6:6741:10816":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"4:6535:2160":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:22975:196":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"6:5004:13351":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"4:9949:21494":{"crate_id":4,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"1:48478:8655":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"18:680:20898":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"5:0:313":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:11102:16434":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:6376:16247":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:32827:251":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:46130:8712":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:46605:8726":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"4:7099:2806":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"6:4506:13298":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:7324:16274":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:12572:16400":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"11:1896:2760":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"13:226:31474":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:33908:2176":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"4:4706:25479":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"16:6221:16236":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:40086:2198":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"17:13986:19877":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"4:909:9023":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:15701:20686":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:48393:8734":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:14436:19906":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:9671:16357":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:16105:20857":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"17:15418:20668":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:11639:3498":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"17:15624:20681":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"4:12059:338":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"17:13568:19378":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"4:4005:9173":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:46482:8752":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:7610:13528":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:43378:3241":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:10254:3466":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:14933:20631":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:15281:20654":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"6:1710:10693":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:44503:3561":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:46843:8754":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:12597:16649":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"11:102:31415":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:0:887":{"crate_id":6,"path":["libc"],"kind":"module"},"1:40847:3311":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"15:306:15229":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:47499:8748":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:6764:10801":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"4:3494:9109":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"6:6819:14461":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:22482:8794":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"4:1975:712":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"17:10457:136":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:12578:3546":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:22211:8799":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"16:5038:16007":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:10259:3467":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:5859:14024":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:2439:15285":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"4:2492:1968":{"crate_id":4,"path":["std","io"],"kind":"module"},"1:40046:221":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"5:1528:217":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:10710:16399":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:42543:2960":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:22125:8670":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"4:2268:9087":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"17:12464:16635":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:11293:16461":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"4:9198:26241":{"crate_id":4,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"1:46427:8691":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:13774:16586":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:43835:3504":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:12792:16364":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"5:3622:2960":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:22001:3480":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"11:123:2706":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"18:608:32726":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"4:2032:205":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:1990:186":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:7609:16292":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:588:9790":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:22771:21220":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:44547:3285":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:15342:20660":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"18:735:20894":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"0:0:1800":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"1:41341:3403":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"4:12027:9007":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:39959:2197":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:45239:3632":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:44136:3493":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:2966:253":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"5:3232:9035":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:30749:3010":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:44971:3541":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"16:7376:16279":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"4:12058:1162":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"4:12038:25362":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:48568:8661":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:6941:16267":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"4:7716:9112":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"1:11606:3497":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"5:5404:9339":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:14529:19913":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:13211:19355":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"4:11318:2819":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"4:8276:3486":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"18:573:32700":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:15168:20644":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:44407:3567":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:3188:139":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:2540:202":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:46894:21228":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"11:396:2710":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"4:10675:9104":{"crate_id":4,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"4:3227:25993":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:40116:2200":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:15582:20677":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:9039:2267":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"4:12054:1044":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"12:0:2034":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:43601:154":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:6408:16249":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"11:299:2939":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:4628:2126":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:2835:15303":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:13064:16366":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"16:7565:16290":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"16:5541:16208":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"11:2326:2946":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"17:12264:16597":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"4:8221:2971":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"1:42426:2289":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:42401:171":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:43623:21392":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"18:589:21440":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:12336:3574":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:43081:3448":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"16:2729:15298":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:12399:16632":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"4:12068:803":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"17:10671:32404":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"16:7103:31766":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"4:880:9022":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:4844:15951":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:44215:3557":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:1501:10672":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:5865:16223":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:7365:14839":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:10622:32596":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:13406:149":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"5:4396:2749":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:36676:2186":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:14463:19908":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:12949:16412":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:14516:19912":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:4516:13299":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"18:635:32709":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:10251:16391":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"4:10443:9155":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"4:7453:26750":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"17:10317:16393":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"11:351:31419":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"6:6012:14036":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:3139:2204":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"4:8300:9164":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"17:15206:20648":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:23609:188":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:46405:8685":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"11:787:9022":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"6:4745:13321":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"4:5708:9291":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:5959:15250":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:4776:13324":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:40787:3315":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:40764:3312":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:4841:13332":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"16:6230:16237":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:4462:15845":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"4:1063:9031":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"4:10486:2814":{"crate_id":4,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"1:10820:2960":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:2489:15287":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"5:281:2105":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:43584:21467":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"4:3804:9168":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:6898:14465":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"4:11228:26224":{"crate_id":4,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"4:5377:127":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"1:46174:8713":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"6:6159:14047":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"5:4035:2740":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:13497:19373":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"5:2049:2961":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"6:7622:13530":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"9:52:15093":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"4:8981:9298":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"11:1883:2959":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"18:521:20903":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"18:623:32707":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:22433:9112":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"17:10439:16395":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"5:2994:28991":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"5:3199:2959":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"4:9015:26218":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:3017:2175":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:10137:16354":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:6152:16232":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"6:62:9403":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:483:9776":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:1521:10675":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:22755:21426":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:12328:16594":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:7343:9736":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:475:9775":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"4:12074:1650":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"1:3665:2740":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"4:903:2760":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:33302:2172":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:12518:3049":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:4698:13318":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:13165:162":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:12074:3477":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:11026:16424":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:12260:3573":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:13187:19354":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"16:6045:213":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:10915:32634":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"10:0:2032":{"crate_id":10,"path":["adler"],"kind":"module"},"17:12371:16411":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:44864:3549":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:14177:19889":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:40727:3290":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"16:5485:16205":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:10155:16203":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"4:8922:9296":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:23425:197":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:12362:16631":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:563:9786":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"6:4884:13338":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:4821:16648":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"16:4491:15851":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:42280:3416":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"4:8343:9210":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:6222:14075":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"4:7740:8988":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"4:4057:9177":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:47311:8681":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"18:507:32700":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:42662:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:6263:14077":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"4:1826:9053":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"6:4968:13347":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"16:5726:16218":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"11:2140:2946":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:4581:2124":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:44073:2989":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"5:5170:2148":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"4:3512:2970":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"4:8387:9241":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:1832:1199":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"6:7371:14840":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:4543:13303":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"11:2548:31414":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:41044:3381":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:15456:20672":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:32882:2101":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"4:8589:9270":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"4:893:2740":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:15289:20655":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"5:6370:9303":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"4:10854:9281":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"1:48247:8728":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"15:288:15228":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"5:6870:2758":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:48309:8749":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:4647:13314":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:11142:16400":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"4:3579:9132":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"17:13024:16414":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:42478:2362":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:13239:3624":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:7604:13527":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:11647:16526":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"4:3435:3367":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"1:40738:3313":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:13473:19371":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"4:9020:114":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:11605:16520":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"5:7319:9037":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"4:4228:9205":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:11730:16530":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"9:391:15075":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"4:8549:9269":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"5:2269:29091":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"18:491:32701":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"18:598:32716":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"4:5822:2151":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"4:8446:9252":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:12887:16409":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:123:9458":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"4:8866:9285":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"17:11115:16433":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:5521:16207":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:3556:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"17:11557:16523":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:3313:218":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"4:11637:15237":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"4:7653:2808":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:24025:243":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:13797:19866":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:12076:16541":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:11042:16425":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:7507:217":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:44963:3539":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"4:8908:9299":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:44761:3589":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"4:11368:25243":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"4:11382:25241":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:1734:10695":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:45161:234":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"17:15023:20636":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"5:3211:29134":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:495:9778":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:2203:16469":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:41157:3398":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:4761:15937":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:6692:16258":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:11467:16474":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:32883:3270":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:7386:16280":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:7914:16299":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:10219:154":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"5:6032:2965":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:43353:21402":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"5:212:2716":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:5066:863":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:12106:3550":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"5:1478:9021":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:15616:20680":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:46464:8746":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"11:832:9023":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:6248:14076":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"4:8511:9267":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"5:5669:2758":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"5:3266:9036":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"4:10950:2818":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"4:8289:9167":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:4733:15932":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:42495:233":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"4:12073:1649":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"6:596:9791":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:3008:3240":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"17:13594:19380":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:11443:16476":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:3260:15311":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:13214:212":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"17:14599:19917":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:5075:13359":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:4440:13291":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:3039:2192":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"4:6495:1947":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"16:6188:16233":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"4:5694:227":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:43576:3469":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:4433:15839":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"4:6426:183":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:7869:16297":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:48489:8656":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:9807:16369":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:7904:163":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:4922:13343":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:9970:141":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"17:12043:16544":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:5974:14033":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"9:481:15073":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:555:9785":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:1032:1946":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"17:14111:19886":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"16:2709:15297":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:2883:15305":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"4:3266:9153":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:15116:20640":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:4236:3289":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"11:1923:9036":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"5:1271:9030":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:13437:19369":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:15266:20652":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:2175:16509":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:22346:21690":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"4:2446:9101":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"1:40806:3285":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"4:2035:204":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"5:40:2714":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"11:710:9024":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:1718:10694":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"4:3801:9169":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"4:7982:26230":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"11:2423:2289":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1:3157:124":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:11075:16440":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:43314:21408":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:39875:2206":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"4:11335:26112":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"4:6880:9302":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"4:3569:9110":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"4:1887:2969":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"16:6882:31533":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"4:11841:2825":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:3397:2201":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"11:2536:31416":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"5:7331:2740":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:6595:2835":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:44967:3543":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:7482:16285":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:12318:16412":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:12297:3575":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"18:765:20895":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"5:3240:9033":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"16:2665:15295":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:13308:19360":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:13785:16587":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:43095:3451":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"16:5825:16221":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:41144:3383":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:2037:16475":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"18:706:3547":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"4:859:2289":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:46196:8718":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"11:774:9021":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:11189:16436":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:45210:3627":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:48107:8722":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"5:5980:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:12251:16598":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"4:5637:9282":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"1:22833:21459":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:13922:19873":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"4:4538:9213":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:10350:16394":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"4:621:8998":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:47435:8693":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:6682:9659":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:13855:19870":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:13116:16683":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:15992:20853":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"6:5969:14032":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:11324:16487":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"4:11413:26089":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:6773:16262":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:42584:90":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:44257:3490":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"11:844:9027":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:15734:20688":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:6320:16243":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"4:6139:2795":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:12213:16627":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"5:7411:2289":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"5:7391:28926":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:7523:16287":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:12543:16643":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"17:12342:16596":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:4584:13308":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:2304:15278":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"16:2336:15280":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:11093:3484":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"4:5849:2152":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:5955:13989":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:46819:8753":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:44669:3586":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"11:1676:2712":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:46529:8666":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"4:1809:665":{"crate_id":4,"path":["std","env"],"kind":"module"},"1:44239:3486":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:47649:8682":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"5:1115:29184":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:6030:16227":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:6965:16268":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:11405:16470":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"4:10688:25350":{"crate_id":4,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"16:7984:16303":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"4:6499:2154":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:7619:3362":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:40879:107":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:4375:13286":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:6141:31658":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:4998:13350":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"6:1682:10690":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:6837:14462":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:12175:16613":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"6:5044:13356":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:4:1125":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"4:4111:9181":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:32755:3256":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"5:3768:2964":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:9150:3544":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"6:4578:13307":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:4686:13317":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"4:4035:9175":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:5052:13357":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"4:7808:9070":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"1:10012:3452":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:30979:3215":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"4:9087:25431":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:41580:3367":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:6099:16229":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:4860:13335":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:42466:2266":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:47389:8687":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"14:202:9345":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:11898:16560":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:3799:2289":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:46220:8678":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:40895:21242":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"4:6612:2157":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"4:3347:9151":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:21358:22403":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"4:6679:2162":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:10796:2959":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:44959:3540":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:44361:3484":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:46344:8731":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"4:6263:26243":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:11079:3488":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:40923:3327":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"16:3010:15309":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"5:7063:2781":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:15608:20679":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:5630:16214":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:11841:16582":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:22562:21354":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:1207:16445":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:14994:20622":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"6:4428:13289":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:4434:13290":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:15376:20663":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:42146:3415":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:44975:3542":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:40721:3285":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:10448:2787":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:8051:176":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"4:4984:9239":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"4:8892:9287":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"4:7672:2810":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:32795:16307":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"4:8849:9284":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"6:6889:14464":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:3027:2173":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:11063:16444":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"5:7584:9346":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"5:7508:9086":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:40777:3314":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:15333:20659":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:3177:15310":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:5885:14026":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"5:7477:9018":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:1507:10673":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"10:44:15184":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:13946:19874":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"4:6508:1948":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"4:10229:112":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"1:40840:3310":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"4:12066:701":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"6:1496:10671":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:2712:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:41114:3396":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:4808:13328":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:14503:19911":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"4:914:9024":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:10004:3449":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:2438:104":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:10092:16390":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"11:328:31417":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"4:7973:9019":{"crate_id":4,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"16:6788:31763":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"5:7419:2289":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:5331:16204":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"4:6231:2800":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:22:739":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"4:7760:2814":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"4:363:8995":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:48355:8700":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:6811:16264":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:7397:22017":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:12621:16647":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"5:7653:2760":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:48583:8662":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"16:6254:16239":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:7998:16304":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:12929:16411":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:2529:15289":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:6169:14048":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"4:3560:25561":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:13252:19357":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:40008:219":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:10010:213":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:46304:8719":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:4724:13320":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:48553:8660":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:4616:13312":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:4908:13341":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:5152:13368":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:16069:20854":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"1:48645:8664":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:6107:14043":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"4:8233:9111":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"1:12583:3545":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:5117:13363":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"6:7668:13536":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:12353:16630":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"16:5897:16225":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:44833:3593":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:13766:16588":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"5:7594:9347":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"11:2352:9031":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"17:11865:16584":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"11:811:2760":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"16:6599:15222":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:5568:16210":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"4:4813:9193":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:6114:14044":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:14235:19892":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"4:10718:126":{"crate_id":4,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"17:15720:20687":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"11:1582:2951":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:43816:3527":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:1900:3244":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:6282:16241":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:32825:244":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"6:4610:13311":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:4480:13295":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"18:659:20896":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"4:8354:9202":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:2806:135":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"4:4772:9213":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"4:8201:3362":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"5:7375:2289":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:11256:16459":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:21586:8668":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:22319:9112":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:10845:3486":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:22722:3050":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"5:3609:2959":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:13424:19368":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"11:2569:9017":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:40026:222":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"11:1066:15194":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:4824:13330":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"11:1917:9035":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:6047:14037":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:5776:2746":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"16:8097:16308":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"4:1040:9030":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:44619:3583":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:41351:3404":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:4455:13133":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"4:3308:9155":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:21302:3251":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"18:698:20900":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:41176:3400":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:31100:21403":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"5:7536:9084":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:2728:263":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:41365:3405":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"4:8263:3403":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"4:8939:9294":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"4:3551:3318":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"1:22615:21342":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:10284:16392":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:7429:31539":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:2819:15302":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:10534:32447":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:536:31697":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:42937:98":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"4:10646:9242":{"crate_id":4,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"1:31574:203":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"16:7225:16270":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:10006:3450":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:7863:3378":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:34627:2183":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"18:96:20881":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:16121:20858":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"4:11067:25356":{"crate_id":4,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"18:538:20908":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"5:7669:2764":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"11:1603:15197":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:7651:13534":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"6:548:9784":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"5:4065:2718":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"11:1566:15196":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:10661:16398":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:14575:16370":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:39911:2205":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"11:1910:9034":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:11621:16498":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"4:2728:9146":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:15769:20691":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"4:7946:137":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"17:10905:16403":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"18:689:20899":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:47229:8733":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"11:2403:2960":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:47153:8721":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:15102:20639":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:41551:21466":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:31205:21319":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"4:7917:9104":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:10018:16361":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"4:10737:25427":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"11:364:2708":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"4:11562:9170":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:15356:20661":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"5:5360:2718":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"11:0:2033":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:44155:3494":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:44846:3548":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:12320:3572":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:13814:19867":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:4566:13306":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:507:9780":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"4:12077:857":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"16:4572:15863":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"4:918:9025":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:7619:16293":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:14545:19914":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:14986:20634":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"4:11043:9285":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"4:645:9002":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"4:1574:2959":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:22840:3054":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:5966:3382":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"4:3392:9141":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"16:5713:31764":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:6700:14456":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"4:4811:9192":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:13399:19366":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:7311:2289":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:44289:3563":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"4:8336:3417":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"4:8362:9167":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:10218:16360":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"5:4227:2746":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"6:4523:13300":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:13606:19381":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:14752:20624":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:6610:16255":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:15646:20683":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:21356:22395":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"5:5896:2740":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"5:3833:2760":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"5:6549:2718":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:42314:3418":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"4:12053:407":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"1:2724:264":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"17:15138:20642":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"5:1686:2718":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:44531:3568":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:10887:32641":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:2961:116":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:3012:2170":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"16:6422:2705":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:11743:16531":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"6:6136:30928":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:14212:19891":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"4:4198:26711":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:3741:15331":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:39955:2195":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"16:2749:15299":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:1576:10681":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:11799:16581":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"5:7521:21242":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:16235:20867":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"17:15151:20643":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"4:836:2959":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"4:1596:9034":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:3185:138":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"4:8605:9271":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"4:9135:241":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"4:10933:2816":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:43592:3468":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:11547:16522":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"4:9130:184":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"4:4300:9208":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:7653:16294":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:4448:2113":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"16:6759:16261":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:7867:3377":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:11089:16435":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:2284:15251":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"4:1602:9035":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:44522:3569":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"14:187:15212":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:12433:16370":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"4:9163:9116":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"4:2420:9091":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:34085:2177":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"16:6555:15223":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:10014:3453":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"4:4694:9178":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"15:394:15240":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:10818:16401":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:3431:2131":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:2675:9112":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"4:10670:26129":{"crate_id":4,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"16:6431:16250":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:4601:2125":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"11:1903:9033":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:46941:21326":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:22699:21476":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"4:9026:8982":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"4:3310:9156":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"4:504:2737":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:4947:13345":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"4:3012:135":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"1:42352:201":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:32914:113":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:32912:3161":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"1:23515:191":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:47199:8727":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:533:9782":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:6711:14457":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:15:2007":{"crate_id":1,"path":["core","write"],"kind":"macro"},"4:3010:233":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"5:2063:2964":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:11419:16400":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:45005:129":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"16:3856:15377":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"16:7345:16276":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"4:10446:9151":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"1:38662:2189":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:2718:160":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"17:1098:16437":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:45262:21450":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:11755:16532":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"16:3773:15340":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:4545:15859":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:15092:20638":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:4914:13342":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:22747:21391":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:48449:8652":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:44686:3587":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:9886:16385":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:7333:3388":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"4:10075:26213":{"crate_id":4,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"6:4556:13305":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:3206:9034":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:4800:13327":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"4:6713:240":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:15434:20670":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:48530:8659":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"11:2304:9030":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"16:6348:16245":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"16:7335:16275":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:13344:19362":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"4:10869:25439":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"5:1287:9031":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"4:8071:26249":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"17:9938:16387":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"4:1824:9052":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"16:6929:31661":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:16079:20855":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:12278:16628":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:11583:16495":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"13:0:2029":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:6201:16234":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:22683:21329":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:44955:3538":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:13553:19377":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:6669:16257":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:7995:2103":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:22477:8796":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:4170:21979":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:11764:16533":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:11128:16432":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"6:5068:13358":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:8022:16306":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"4:3230:26638":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:12107:16400":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"4:10709:137":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"4:8966:9295":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:15273:20653":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:9737:16355":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"16:5580:16211":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:6244:16238":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:23335:192":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"4:11128:159":{"crate_id":4,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"17:16176:20862":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"5:6994:269":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:14038:19881":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"4:7998:2961":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"16:2995:15308":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:21370:22400":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"6:7616:13529":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"4:10665:26110":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"16:6292:16242":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:11702:16528":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:14091:19885":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"4:357:8994":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:10002:3448":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"4:10073:2974":{"crate_id":4,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"15:0:2036":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:41013:3380":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:12478:16636":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:44044:3482":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"4:2584:9144":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:1570:10680":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:261:32370":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:47997:8688":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"11:2554:31413":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:7414:16282":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"4:10699:9108":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"17:10399:3556":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:43613:9267":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"11:490:151":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:41063:3391":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"4:5197:211":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"1:42779:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"4:7802:9006":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"5:1151:29182":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:21693:8669":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"18:643:32700":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:4517:2121":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:22123:9112":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:11524:16521":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"18:113:20882":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:9654:22272":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:10759:16400":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:12090:3479":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"4:640:9001":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:41035:2977":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"4:5894:2159":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"5:3358:2760":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"4:7788:9005":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"4:9061:26194":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:3220:2196":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:42818:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:44084:3496":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:44343:3488":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:7889:16298":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:5826:257":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"5:2157:2737":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:16093:20856":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"1:42898:91":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:39986:217":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:47855:8716":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:2110:2984":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:42114:3413":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:42551:2289":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"18:718:20893":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:15058:20621":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:13187:22767":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:48606:8663":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:13723:19863":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:6646:16256":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:34454:2182":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"5:3753:2961":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:2959:2130":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:4453:2114":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:44145:2990":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"11:800:2740":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:11812:16539":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:7679:2112":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:41091:21252":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:13738:19864":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:2676:3009":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"16:6445:16251":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"4:8391:9243":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:14341:19900":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:10982:16421":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:8369:3376":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:5025:3355":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"17:11153:16401":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"5:2249:29098":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:31017:3182":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:14372:19902":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"18:726:20901":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:5123:13364":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:6658:9826":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:11341:16473":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:2419:15284":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:39971:220":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"9:177:15179":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:5298:16202":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"16:7270:16271":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:12647:16642":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"16:5662:16216":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:46995:21355":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:4968:15983":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:12530:16644":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"4:5309:210":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"5:3170:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:8363:3375":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:22388:8803":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"6:4388:13287":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"4:12006:25410":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"9:0:2031":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"4:10728:2971":{"crate_id":4,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"17:15214:20649":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:4854:13334":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:5919:16226":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:41123:3406":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"5:1302:2946":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:6943:14469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:16269:19367":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"4:8413:9191":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:501:9779":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"4:5701:2801":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:1596:10683":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:1558:10679":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:12422:16633":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"6:6961:14470":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:7152:16269":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:2641:15294":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:46675:8680":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:12516:16653":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:11574:15190":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:9781:16383":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"4:951:9029":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:11510:16467":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"4:4809:9189":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:34144:2179":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:42976:2149":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:48504:8657":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:14246:19893":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"4:10381:2813":{"crate_id":4,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"1:41135:3397":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"4:6609:2156":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:7294:16272":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:4847:13333":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"5:266:2718":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:5992:14035":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:33674:2174":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:48431:8755":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:13367:2797":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"16:5278:16201":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:11688:16493":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"4:6215:2797":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"14:220:15214":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:12374:3499":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:21312:22391":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"16:4674:15919":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:6666:10631":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"4:1446:153":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:15635:20682":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:0:484":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"16:7551:16289":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:6059:14038":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:15368:20662":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"16:6546:16253":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:2457:111":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:22668:21474":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:4444:228":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"17:14260:19894":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"4:9145:159":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"18:613:32713":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:22733:21239":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"4:12080:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"17:13292:19359":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:14025:19880":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:43395:135":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"16:6745:16260":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:6086:14041":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:4787:15940":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"5:2988:28988":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:4783:13325":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:4966:425":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:23703:189":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"4:8253:3389":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"17:14587:19916":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"4:6056:227":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"4:5569:9281":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"17:256:32672":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"16:3830:15374":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:4986:16654":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"6:1664:10688":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:44165:2991":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:4351:13284":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:10828:32147":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:513:16381":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"4:11407:26136":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:6849:16265":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:7639:13532":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"5:6903:2772":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"16:2399:15283":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:12993:16413":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"4:11341:9290":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"4:12065:699":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"6:4939:1112":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:1923:2981":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:44556:3306":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"4:4867:2793":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:1639:10686":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:41105:3395":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:1697:10692":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:40993:3379":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:12695:16645":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:48469:8654":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:2234:16494":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:14977:20633":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"4:9140:242":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:3080:2184":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"6:5897:14028":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"4:12072:1652":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"6:4830:13331":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"5:2990:28995":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"4:10338:9284":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"4:5500:9280":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"4:8066:26192":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:1674:10689":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:4535:13302":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"4:8348:9211":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:3181:2102":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"4:7717:8996":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"16:5696:16217":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:41073:3392":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:40884:3353":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"5:1425:2959":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:11680:3242":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"4:4107:9180":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"7:0:1697":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:10211:150":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"16:6724:16259":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:9467:85":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"16:2689:15296":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:12056:16545":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:40821:3308":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:15957:20852":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:34281:2181":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"4:1885:2433":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"17:14131:19887":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"5:7302:9038":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:2847:3261":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"17:12485:16637":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:14475:19909":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:6737:31593":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"4:4704:25477":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"4:7990:9145":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:3191:140":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:12724:16405":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"9:237:9267":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"5:2196:29095":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:6116:16230":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:2769:15300":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"5:1388:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"5:5408:9340":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:6579:16254":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:44225:3556":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"14:40:19356":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:44063:3492":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:7942:128":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:13972:19876":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:4217:3288":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:47075:8715":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:5601:16212":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:2509:132":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:48185:8694":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:5928:14031":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:12863:16408":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:7366:16278":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:44983:3537":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:43341:21487":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:12558:3530":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"4:3739:9165":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"16:2593:15292":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:2795:123":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"7:31:15045":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"11:1087:31427":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:13235:19356":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:10365:2838":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:14051:19882":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:7449:3359":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"6:4549:13304":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:10044:16389":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"5:5020:2746":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:6062:31615":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"4:11075:3599":{"crate_id":4,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"5:7351:9042":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"16:2859:15304":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"4:8210:9158":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"1:41206:3402":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"4:1968:9082":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"1:40866:3305":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:10954:16420":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:11000:3490":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:13089:16682":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:15569:20676":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"4:939:2942":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:44461:3565":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:2353:3228":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"5:683:256":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"4:7613:26221":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"5:7466:9017":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"4:8295:9166":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:0:2038":{"crate_id":17,"path":["object"],"kind":"module"},"1:42418:2960":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:44035:3483":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:3545:15313":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:7706:16296":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:32826:2100":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"4:11501:9169":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:31043:21436":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"6:7692:15028":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:13959:19875":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:13363:19363":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:10877:16402":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"18:563:20909":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:3264:16543":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:2546:209":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:4710:13319":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:31011:3216":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:14311:19898":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:5111:13362":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"6:489:9777":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:15313:20657":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"11:700:2289":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"11:434:31423":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"11:430:31422":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:3473:16548":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:1537:10677":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:5033:13355":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"11:837:9026":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:15463:20673":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:46274:8714":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"11:883:9029":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"4:945:9028":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"5:1517:9025":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"4:9054:26229":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"18:651:32700":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:43831:21363":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:2435:103":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"4:3999:9174":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:22448:8795":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"4:12061:1548":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"4:723:151":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:11354:16472":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:43416:3458":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"17:12150:16547":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:4527:2122":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"17:12388:16622":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"15:327:15233":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:6718:9243":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:15655:20684":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:21971:9112":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:21324:22391":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"1:38552:2187":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:5023:13354":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"4:2418:3218":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"1:44198:3554":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"16:4518:15855":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:5499:16206":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"4:4560:9214":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:7595:16291":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:14271:19895":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"5:786:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:4989:13349":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}