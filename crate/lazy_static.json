{"root":"0:0:1577","crate_version":"1.4.0","includes_private":false,"index":{"1:13781:150":{"id":"1:13781:150","crate_id":1,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13782:181","1:13783:150","1:13784:767"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13493:1762":{"id":"1:13493:1762","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"str::matches":"4:16011:1740","self::pattern":"1:13053:2453","`DoubleEndedIterator`":"1:8447:120","prim@char":"4:16005:1735"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"1:49663:2752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13063:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13542:3059":{"id":"1:13542:3059","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"4:16005:1735"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"1:49767:2760","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13431:53261":{"id":"1:13431:53261","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:47492:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13072:2455":{"id":"1:13072:2455","crate_id":1,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:13074:2475","1:13075:922","1:13076:53062","1:13077:53063"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13427:304":{"id":"1:13427:304","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"4:16022:1749","str::as_mut_ptr":"4:16011:1740"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23134:2537":{"id":"1:23134:2537","crate_id":1,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"1:23771:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:23125:2450","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3739:1971":{"id":"1:3739:1971","crate_id":1,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3741:52168"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3276:218":{"id":"1:3276:218","crate_id":1,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3491:116":{"id":"1:3491:116","crate_id":1,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3492:221","1:3493:543"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3416:1959":{"id":"1:3416:1959","crate_id":1,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3418:181","1:3419:1235"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5731:2953":{"id":"4:5731:2953","crate_id":4,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5732:54620","4:5733:54927","4:5734:54928"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13444:5101":{"id":"1:13444:5101","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"4:16011:1740"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"1:49733:2756","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6411:223":{"id":"5:6411:223","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6412:1396"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3728:224":{"id":"1:3728:224","crate_id":1,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3729:181","1:3730:1971","1:3731:686","1:3732:369"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"1:3733:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"1:3728:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:23771:2371":{"id":"1:23771:2371","crate_id":1,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:23772:2534"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:23767:2450","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"1:3278:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:4:1566":{"id":"0:4:1566","crate_id":0,"name":"lazy","span":{"filename":"src/inline_lazy.rs","begin":[8,0],"end":[57,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(not(feature = \"spin_no_std\"))]","#[path = \"inline_lazy.rs\"]","#[doc(hidden)]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:20:1711","0:17"],"is_stripped":true}},"4:5789:2956":{"id":"4:5789:2956","crate_id":4,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5790:57090"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3439:1964":{"id":"1:3439:1964","crate_id":1,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3441:1236"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6791:3046":{"id":"4:6791:3046","crate_id":4,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6792:54739","4:6793:54740"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10569:2450","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:4670:2971":{"id":"4:4670:2971","crate_id":4,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4671:2876","4:4672:54760","4:4674:54761","4:4675:54762","4:4676:2988","4:4677:5394","4:4678:5393","4:4680:54763","4:4681:2088","4:4682:3110","4:4683:2070","4:4685:2082"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3811:1976":{"id":"1:3811:1976","crate_id":1,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13475:57945":{"id":"1:13475:57945","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"prim@char":"4:16005:1735","str::split":"4:16011:1740","self::pattern":"1:13053:2453","str::rsplit_terminator":"4:16011:1740","`DoubleEndedIterator`":"1:8447:120"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"1:49509:2745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13063:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3504:1894":{"id":"1:3504:1894","crate_id":1,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3505:545"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"1:3491:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13442:2482":{"id":"1:13442:2482","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:16005:1735"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"1:49435:2740","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12992:2282":{"id":"1:12992:2282","crate_id":1,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:12993:126","1:12994:54128"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12500:2943":{"id":"1:12500:2943","crate_id":1,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:12501:2062","1:12502:53603"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4782:2446":{"id":"1:4782:2446","crate_id":1,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4783:2062","1:4784:52950","1:4785:2065"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13490:57948":{"id":"1:13490:57948","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13063:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13063:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13078:2456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10933:214":{"id":"1:10933:214","crate_id":1,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:10935:181","1:10936:1582","1:10937:53261","1:10938:53262","1:10939:53263","1:10940:753","1:10941:754"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3273:1863","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10924:2450","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:9347:3056":{"id":"4:9347:3056","crate_id":4,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:9348:56733","4:9349:56734","4:9350:56735","4:9351:56736","4:9352:56737","4:9353:29599","4:9354:56732"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10569:2450","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13428:55297":{"id":"1:13428:55297","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:16022:1749"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13496:57949":{"id":"1:13496:57949","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:13053:2453","prim@char":"4:16005:1735","`DoubleEndedIterator`":"1:8447:120","str::matches":"4:16011:1740"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"1:49681:2753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13063:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13063:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13078:2456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10241:2391":{"id":"1:10241:2391","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10242:1532","1:10243:54016","1:10245:54017"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3395:1954":{"id":"1:3395:1954","crate_id":1,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3397:181","1:3398:351"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6463:3062":{"id":"4:6463:3062","crate_id":4,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6464:54981","4:6465:37353","4:6466:54982","4:6467:54983","4:6468:54984","4:6469:54985"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10569:2450","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3371:1953":{"id":"1:3371:1953","crate_id":1,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3373:1355"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6091:58589":{"id":"5:6091:58589","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8472:1866":{"id":"1:8472:1866","crate_id":1,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8473:793","1:8474:2058"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13452:55333":{"id":"1:13452:55333","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:16005:1735","self::pattern":"1:13053:2453"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13063:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13446:3707":{"id":"1:13446:3707","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"1:49713:2754","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13511:57955":{"id":"1:13511:57955","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5657:3036":{"id":"4:5657:3036","crate_id":4,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5658:4177","4:5659:54600"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10569:2450","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10298:119":{"id":"1:10298:119","crate_id":1,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10299:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3177:228":{"id":"1:3177:228","crate_id":1,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3179:127","1:3180:1416"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13438:57943":{"id":"1:13438:57943","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"1:3580:1966","`str`":"4:16011:1740","str::slice_unchecked":"4:16011:1740"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:14239:2588":{"id":"1:14239:2588","crate_id":1,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:14240:53957","1:14241:53958","1:14242:53959","1:14243:53960","1:14244:53961","1:14245:53962","1:14246:2088"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:14165:141":{"id":"1:14165:141","crate_id":1,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:14166:277","1:14167:518","1:14168:280","1:14169:1079"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13512:57956":{"id":"1:13512:57956","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2966:184":{"id":"1:2966:184","crate_id":1,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2968:997","1:2969:826","1:2970:792","1:2971:713","1:2972:696"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3273:1863","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"1:2920:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3181:227":{"id":"1:3181:227","crate_id":1,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3183:127","1:3184:1415"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3357:1947":{"id":"1:3357:1947","crate_id":1,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3359:181","1:3360:1102"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2920:183":{"id":"1:2920:183","crate_id":1,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2922:604","1:2923:907"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3273:1863","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"4:5739:2951":{"id":"4:5739:2951","crate_id":4,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5740:54620","4:5741:54641"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13422:57941":{"id":"1:13422:57941","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"4:16011:1740"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13445:5099":{"id":"1:13445:5099","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"4:16011:1740"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"1:49742:2757","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10310:2400":{"id":"1:10310:2400","crate_id":1,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10311:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13439:55316":{"id":"1:13439:55316","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"4:16011:1740"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8879:2350":{"id":"1:8879:2350","crate_id":1,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13455:55334":{"id":"1:13455:55334","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"1:13053:2453","prim@char":"4:16005:1735"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13063:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13063:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13078:2456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13083:2457":{"id":"1:13083:2457","crate_id":1,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13078:2456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3273:1863":{"id":"1:3273:1863","crate_id":1,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13416":{"id":"1:13416","crate_id":1,"name":null,"span":null,"visibility":{"restricted":{"parent":"1:12513:1339","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["1:13417:793","1:13418:2058","1:13419:4879","1:13420:57940","1:13422:57941","1:13425:54600","1:13426:57942","1:13427:304","1:13428:55297","1:13429:1582","1:13431:53261","1:13433:53262","1:13435:53263","1:13437:3107","1:13438:57943","1:13439:55316","1:13440:55317","1:13441:2779","1:13442:2482","1:13443:3110","1:13444:5101","1:13445:5099","1:13446:3707","1:13447:57944","1:13448:4818","1:13449:54060","1:13452:55333","1:13455:55334","1:13458:2099","1:13462:2057","1:13466:55324","1:13469:5100","1:13472:55327","1:13475:57945","1:13478:57946","1:13481:55329","1:13484:55331","1:13487:57947","1:13490:57948","1:13493:1762","1:13496:57949","1:13499:57950","1:13502:57951","1:13505:57952","1:13507:57953","1:13509:57954","1:13511:57955","1:13512:57956","1:13513:57957","1:13516:57958","1:13519:5430","1:13522:55335","1:13525:57959","1:13528:57960","1:13531:57961","1:13534:2648","1:13536:2950","1:13537:54555","1:13538:54556","1:13539:54557","1:13540:57962","1:13542:3059","1:13543:57963"],"negative":false,"synthetic":false,"blanket_impl":null}},"4:6794:3048":{"id":"4:6794:3048","crate_id":4,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6795:54704"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10569:2450","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13418:2058":{"id":"1:13418:2058","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13539:54557":{"id":"1:13539:54557","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6867:3042":{"id":"4:6867:3042","crate_id":4,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6868:57161"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:38:1577":{"id":"0:38:1577","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[167,0],"end":[179,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"kind":"macro","inner":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"},"1:9258:2040":{"id":"1:9258:2040","crate_id":1,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:22748:2586":{"id":"1:22748:2586","crate_id":1,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:22749:2534","1:22750:51439","1:22751:51440","1:22752:51441","1:22753:51442","1:22754:40228","1:22755:51443","1:22756:51444","1:22757:51445","1:22758:51446","1:22759:51447","1:22760:51448","1:22761:51449","1:22762:51450","1:22763:4881","1:22764:51451","1:22765:51452","1:22766:5214","1:22767:51453","1:22768:51454","1:22769:51455","1:22770:51456","1:22771:51457","1:22772:51458","1:22773:51459"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"1:3278:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22850:2450","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6107:54554":{"id":"5:6107:54554","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"4:16011:1740"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10306:2399":{"id":"1:10306:2399","crate_id":1,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10307:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3999:68":{"id":"1:3999:68","crate_id":1,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4000:1428"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"1:13462:2057":{"id":"1:13462:2057","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:47492:176","prim@char":"4:16005:1735","self::pattern":"1:13053:2453"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13063:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13063:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13078:2456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10291:109":{"id":"1:10291:109","crate_id":1,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10292:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13522:55335":{"id":"1:13522:55335","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"1:13053:2453","prim@char":"4:16005:1735"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13063:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13063:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13078:2456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10304:2398":{"id":"1:10304:2398","crate_id":1,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10305:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6088:58588":{"id":"5:6088:58588","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13063:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13441:2779":{"id":"1:13441:2779","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:16005:1735"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"1:49429:2739","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10539:146":{"id":"1:10539:146","crate_id":1,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10540:652","1:10541:1763","1:10542:51328","1:10543:51329","1:10544:51330","1:10545:51331","1:10546:51332","1:10547:51333","1:10548:51334","1:10549:51335","1:10550:51336","1:10551:51337","1:10552:51338","1:10553:51339","1:10554:51340","1:10555:1532"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3521:131":{"id":"1:3521:131","crate_id":1,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3523:377"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"1:3524:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6106:54553":{"id":"5:6106:54553","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"4:16011:1740"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3405:1956":{"id":"1:3405:1956","crate_id":1,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3407:181","1:3408:356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3383:1952":{"id":"1:3383:1952","crate_id":1,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3385:1103"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13417:793":{"id":"1:13417:793","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:16005:1735"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3524:132":{"id":"1:3524:132","crate_id":1,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3526:181","1:3527:378"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:23086:29200":{"id":"1:23086:29200","crate_id":1,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23087:51523","1:23088:54257","1:23089:54258"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:23079:2450","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:7799:3168":{"id":"4:7799:3168","crate_id":4,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:7800:57086"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:22801:2533":{"id":"1:22801:2533","crate_id":1,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:22802:2534","1:22803:51439","1:22804:1226","1:22805:1227","1:22806:40228","1:22807:54439","1:22808:5055","1:22809:54440","1:22810:54441","1:22811:51452","1:22812:51456","1:22813:51457","1:22814:51458","1:22815:51459","1:22816:54364","1:22817:54365","1:22818:54366"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"1:3278:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22850:2450","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3388:1957":{"id":"1:3388:1957","crate_id":1,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3389:181","1:3390:952"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:20:1711":{"id":"0:20:1711","crate_id":0,"name":"Lazy","span":{"filename":"src/inline_lazy.rs","begin":[19,0],"end":[19,48]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"1:3280:220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"5:6084:58587":{"id":"5:6084:58587","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1868","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:3360","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1868","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:3360","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13425:54600":{"id":"1:13425:54600","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12524:2905"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"src/inline_lazy.rs","begin":[16,0],"end":[16,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"import","inner":{"source":"self::std::sync::ONCE_INIT","name":"ONCE_INIT","id":"4:8919:1710","glob":false}},"1:3716:1969":{"id":"1:3716:1969","crate_id":1,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3273:1863","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"1:3647:1968","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3367:1949":{"id":"1:3367:1949","crate_id":1,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3369:266"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3515:1865":{"id":"1:3515:1865","crate_id":1,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3516:578"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:783:222":{"id":"5:783:222","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:784:2124","5:785:2125","5:786:2126"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2865:2430":{"id":"1:2865:2430","crate_id":1,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2867:51304"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3273:1863","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"1:2862:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6083":{"id":"5:6083","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5903:1339","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6084:58587","5:6085:2875","5:6088:58588","5:6091:58589","5:6103:58590","5:6104:58591","5:6105:3016","5:6106:54553","5:6107:54554"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:3336:1943":{"id":"1:3336:1943","crate_id":1,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3338:181","1:3339:265"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13078:2456":{"id":"1:13078:2456","crate_id":1,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:13080:2052","1:13081:54263","1:13082:54264"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"1:13072:2455","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3400:1955":{"id":"1:3400:1955","crate_id":1,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3402:181","1:3403:353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8403:151":{"id":"1:8403:151","crate_id":1,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8404:2062","1:8405:2063","1:8406:768"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5012:3069":{"id":"4:5012:3069","crate_id":4,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5013:2606","4:5014:54946"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:39:1583":{"id":"0:39:1583","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[185,0],"end":[188,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8882:2351":{"id":"1:8882:2351","crate_id":1,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:8886:2352":{"id":"1:8886:2352","crate_id":1,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"1:7927:2353","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:41:1584":{"id":"0:41:1584","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[213,0],"end":[215,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["lazy",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"LazyStatic","id":"0:39:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"1:3341:1948":{"id":"1:3341:1948","crate_id":1,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3343:181","1:3344:1354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3410:1958":{"id":"1:3410:1958","crate_id":1,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3412:181","1:3413:1232"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13449:54060":{"id":"1:13449:54060","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"1:13053:2453","prim@char":"4:16005:1735"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13063:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2956:177":{"id":"1:2956:177","crate_id":1,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2957:415","1:2958:2103","1:2959:2104","1:2960:2123"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"1:2925:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"1:2966:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:5723:2952":{"id":"4:5723:2952","crate_id":4,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5724:57594","4:5725:57596","4:5726:57595","4:5727:57597"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3280:220":{"id":"1:3280:220","crate_id":1,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:22937:2372":{"id":"1:22937:2372","crate_id":1,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22927:2450","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13525:57959":{"id":"1:13525:57959","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"1:13053:2453","prim@char":"4:16005:1735"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13063:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13063:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13078:2456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13426:57942":{"id":"1:13426:57942","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:3268:211":{"id":"1:3268:211","crate_id":1,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3434:1963":{"id":"1:3434:1963","crate_id":1,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3436:1233"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4050:2438":{"id":"1:4050:2438","crate_id":1,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4051:57175"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13447:57944":{"id":"1:13447:57944","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"1:49723:2755","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5837:3354":{"id":"5:5837:3354","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5839:181","5:5840:15281"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6105:3016":{"id":"5:6105:3016","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13435:53263":{"id":"1:13435:53263","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:13443:3110":{"id":"1:13443:3110","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"1:49445:2741","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13528:57960":{"id":"1:13528:57960","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:16005:1735","self::pattern":"1:13053:2453"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13063:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23467:29219":{"id":"1:23467:29219","crate_id":1,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23468:51454","1:23469:51453","1:23470:51455"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialOrd","id":"1:23462:2535","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:22874:2587":{"id":"1:22874:2587","crate_id":1,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:22875:2534","1:22876:1246","1:22877:1271"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13429:1582":{"id":"1:13429:1582","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:47492:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:22837:2524":{"id":"1:22837:2524","crate_id":1,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:22838:51439","1:22839:1226","1:22840:1227","1:22841:51456","1:22842:51457","1:22843:51458","1:22844:51459","1:22845:54364","1:22846:54365","1:22847:54366"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"1:3278:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22850:2450","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13507:57953":{"id":"1:13507:57953","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:4745:2991":{"id":"4:4745:2991","crate_id":4,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4746:55140","4:4747:37205","4:4748:55141","4:4749:55142"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3375:1951":{"id":"1:3375:1951","crate_id":1,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3377:893"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6104:58591":{"id":"5:6104:58591","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:8368:216","`Box<str>`":"5:432:1868"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1868","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:3360","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3379:1950":{"id":"1:3379:1950","crate_id":1,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3381:559"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5801:2959":{"id":"4:5801:2959","crate_id":4,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5802:54620"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13433:53262":{"id":"1:13433:53262","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:3309:1864":{"id":"1:3309:1864","crate_id":1,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10529:142":{"id":"1:10529:142","crate_id":1,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10530:715","1:10532:4855"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13519:5430":{"id":"1:13519:5430","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"1:13053:2453","prim@char":"4:16005:1735"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13063:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10574:2517":{"id":"1:10574:2517","crate_id":1,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10575:146","1:10576:4526","1:10577:53606"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2887:104":{"id":"1:2887:104","crate_id":1,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2888:408","1:2889:410"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3774:1893":{"id":"1:3774:1893","crate_id":1,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3273:1863","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:13509:57954":{"id":"1:13509:57954","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13540:57962":{"id":"1:13540:57962","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"4:16005:1735"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"1:49758:2759","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3168:74":{"id":"1:3168:74","crate_id":1,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3170:2050"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3273:1863","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"4:6441:3048":{"id":"4:6441:3048","crate_id":4,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6442:3325","4:6443:3326","4:6444:54703","4:6445:57396","4:6447:57400","4:6449:57397","4:6450:57398","4:6452:57399"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10569:2450","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:8362:2333":{"id":"1:8362:2333","crate_id":1,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8364:2114"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13481:55329":{"id":"1:13481:55329","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"1:13053:2453","str::rsplitn":"4:16011:1740","prim@char":"4:16005:1735"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"1:49563:2717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13063:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13478:57946":{"id":"1:13478:57946","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split_terminator":"4:16011:1740","str::split":"4:16011:1740","self::pattern":"1:13053:2453","prim@char":"4:16005:1735"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"1:49527:2746","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13063:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13063:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13078:2456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13448:4818":{"id":"1:13448:4818","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"1:49751:2758","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13466:55324":{"id":"1:13466:55324","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"prim@char":"4:16005:1735","`DoubleEndedIterator`":"1:8447:120","str::rsplit":"4:16011:1740","str::split_whitespace":"4:16011:1740","self::pattern":"1:13053:2453"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"1:49459:2710","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13063:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2862:97":{"id":"1:2862:97","crate_id":1,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2864:1725"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3273:1863","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:8412:1867":{"id":"1:8412:1867","crate_id":1,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8414:2059","1:8416:2060","1:8417:2061"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:4752:2994":{"id":"4:4752:2994","crate_id":4,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4753:57220","4:4754:57221","4:4755:57223","4:4757:2993","4:4758:57222","4:4760:55324","4:4761:3707"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"4:4670:2971","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:8399:136":{"id":"1:8399:136","crate_id":1,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8401:684"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3351:1944":{"id":"1:3351:1944","crate_id":1,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3353:181","1:3354:558"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13538:54556":{"id":"1:13538:54556","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5833:3356":{"id":"5:5833:3356","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5835:181","5:5836:432"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3273:1863","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:13543:57963":{"id":"1:13543:57963","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"4:16005:1735"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"1:49776:2761","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:4727:2391":{"id":"4:4727:2391","crate_id":4,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4728:1763","4:4729:56971","4:4731:56972","4:4732:3630","4:4733:56973","4:4734:5471","4:4735:54017","4:4744:2088"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13502:57951":{"id":"1:13502:57951","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"`DoubleEndedIterator`":"1:8447:120","self::pattern":"1:13053:2453","prim@char":"4:16005:1735","str::match_indices":"4:16011:1740"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"1:49627:2750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13063:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13063:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13078:2456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3246:115":{"id":"1:3246:115","crate_id":1,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3247:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13536:2950":{"id":"1:13536:2950","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:2576:127":{"id":"4:2576:127","crate_id":4,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:2577:52724","4:2579:57173","4:2580:57174","4:2581:57175"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"1:10291:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"1:10298:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:7927:2353":{"id":"1:7927:2353","crate_id":1,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7928:54187","1:7929:54188","1:7930:54185","1:7931:54183","1:7932:54189","1:7933:54186","1:7934:54184"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"1:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"1:2966:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10300:2396":{"id":"1:10300:2396","crate_id":1,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10301:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2925:124":{"id":"1:2925:124","crate_id":1,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"1:2920:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3103:2356":{"id":"1:3103:2356","crate_id":1,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:3102:2450","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3576:1965":{"id":"1:3576:1965","crate_id":1,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3578:181","1:3579:753"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3273:1863","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:13420:57940":{"id":"1:13420:57940","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8447:120":{"id":"1:8447:120","crate_id":1,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8448:2052","1:8449:2053","1:8450:2054","1:8451:2055","1:8455:2056","1:8458:2057"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:8366:2331":{"id":"1:8366:2331","crate_id":1,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8368:2115"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5779:2955":{"id":"4:5779:2955","crate_id":4,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5780:54720","4:5781:54721","4:5782:54722","4:5783:54723"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13531:57961":{"id":"1:13531:57961","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"1:13053:2453","prim@char":"4:16005:1735"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13063:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13063:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13078:2456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13766:138":{"id":"1:13766:138","crate_id":1,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13767:181","1:13768:1013"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13440:55317":{"id":"1:13440:55317","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"4:16011:1740"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9259:2039":{"id":"1:9259:2039","crate_id":1,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5745:2954":{"id":"4:5745:2954","crate_id":4,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5746:57089","4:5747:57090","4:5748:54620","4:5749:57091","4:5750:3325","4:5751:3326","4:5752:57092","4:5753:1303","4:5754:57093","4:5755:57094","4:5756:57095","4:5757:57096","4:5758:57097","4:5759:57098","4:5760:57099","4:5761:57100"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5651:3034":{"id":"4:5651:3034","crate_id":4,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5652:54717","4:5653:3422"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10569:2450","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13537:54555":{"id":"1:13537:54555","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13419:4879":{"id":"1:13419:4879","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3422:1960":{"id":"1:3422:1960","crate_id":1,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3424:352"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3518:130":{"id":"1:3518:130","crate_id":1,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3520:376"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"1:3521:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:23462:2535":{"id":"1:23462:2535","crate_id":1,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23463:1269","1:23464:1268","1:23465:1266","1:23466:1265"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialEq","id":"1:22874:2587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3346:1945":{"id":"1:3346:1945","crate_id":1,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3348:181","1:3349:892"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6863:2967":{"id":"4:6863:2967","crate_id":4,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6864:57636"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3430:1962":{"id":"1:3430:1962","crate_id":1,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3432:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3171:149":{"id":"1:3171:149","crate_id":1,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3173:2051"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13499:57950":{"id":"1:13499:57950","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"`DoubleEndedIterator`":"1:8447:120","str::rmatch_indices":"4:16011:1740","prim@char":"4:16005:1735","self::pattern":"1:13053:2453"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"1:49609:2749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13063:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13484:55331":{"id":"1:13484:55331","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"str::splitn":"4:16011:1740","self::pattern":"1:13053:2453","prim@char":"4:16005:1735"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"1:49581:2718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13063:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13063:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13078:2456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13513:57957":{"id":"1:13513:57957","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"1:13053:2453","prim@char":"4:16005:1735"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13063:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13063:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"1:13083:2457","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3733:137":{"id":"1:3733:137","crate_id":1,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3735:687"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"1:3728:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6689:2954":{"id":"4:6689:2954","crate_id":4,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6690:55036","4:6691:55037","4:6692:55038","4:6693:55039","4:6694:55040","4:6695:55041","4:6696:55042","4:6697:55043","4:6698:55044","4:6699:55045","4:6700:55046","4:6701:55047","4:6702:55048","4:6703:55049","4:6704:55050","4:6705:55051","4:6706:55052"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10312:2389":{"id":"1:10312:2389","crate_id":1,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10313:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3647:1968":{"id":"1:3647:1968","crate_id":1,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3649:54058","1:3650:54059","1:3651:54060"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3273:1863","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:3426:1961":{"id":"1:3426:1961","crate_id":1,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3428:354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5793:2957":{"id":"4:5793:2957","crate_id":4,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5794:55028"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10569:2450","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13437:3107":{"id":"1:13437:3107","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"1:3576:1965","str::slice_mut_unchecked":"4:16011:1740","`str`":"4:16011:1740"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:13469:5100":{"id":"1:13469:5100","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:16005:1735","self::pattern":"1:13053:2453"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"1:12845:2711","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13063:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13487:57947":{"id":"1:13487:57947","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13063:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13458:2099":{"id":"1:13458:2099","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:47492:176","self::pattern":"1:13053:2453","prim@char":"4:16005:1735"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13063:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10302:2397":{"id":"1:10302:2397","crate_id":1,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10303:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6865:3041":{"id":"4:6865:3041","crate_id":4,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6866:54953"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13516:57958":{"id":"1:13516:57958","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"1:13053:2453","prim@char":"4:16005:1735"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13063:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6561:3065":{"id":"4:6561:3065","crate_id":4,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6562:55102","4:6563:55103"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6103:58590":{"id":"5:6103:58590","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:1079:3057":{"id":"4:1079:3057","crate_id":4,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:1080:2124","4:1081:2950","4:1082:54553","4:1083:54554","4:1084:54555","4:1085:54556","4:1086:54557"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13505:57952":{"id":"1:13505:57952","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3278:106":{"id":"1:3278:106","crate_id":1,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"1:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3277:217":{"id":"1:3277:217","crate_id":1,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:0:1577":{"id":"0:0:1577","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[215,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\n# #[macro_use]\n# extern crate lazy_static;\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.4.0\")]","#![no_std]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:39:1583","0:41:1584","0:38:1577"],"is_stripped":false}},"1:3165:75":{"id":"1:3165:75","crate_id":1,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3167:305"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3273:1863","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"4:6963:2966":{"id":"4:6963:2966","crate_id":4,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6964:55004"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10308:189":{"id":"1:10308:189","crate_id":1,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10309:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8601:157":{"id":"1:8601:157","crate_id":1,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8602:2062","1:8603:922","1:8604:2064","1:8607:2065","1:8608:495","1:8610:2066","1:8613:2067","1:8614:2068","1:8615:2069","1:8616:2070","1:8618:2071","1:8620:2072","1:8621:2073","1:8623:841","1:8626:2074","1:8633:2075","1:8635:2076","1:8638:2077","1:8639:2078","1:8640:2079","1:8642:2080","1:8644:2081","1:8647:1307","1:8648:2082","1:8649:2083","1:8653:2084","1:8656:2085","1:8657:2086","1:8658:2087","1:8660:2088","1:8661:1873","1:8663:2089","1:8666:2090","1:8668:2091","1:8678:2092","1:8693:2093","1:8695:2094","1:8699:2095","1:8708:2096","1:8711:2097","1:8713:2098","1:8716:276","1:8723:294","1:8730:2099","1:8737:2100","1:8746:2101","1:8756:1014","1:8763:2102","1:8770:2103","1:8771:2104","1:8772:2105","1:8784:2106","1:8791:2107","1:8803:2108","1:8810:2109","1:8811:2110","1:8816:2111","1:8819:2112","1:8822:2113","1:8823:2114","1:8825:2115","1:8827:415","1:8830:2116","1:8833:997","1:8836:2117","1:8839:604","1:8842:2118","1:8845:907","1:8847:826","1:8849:792","1:8851:713","1:8853:696","1:8855:2119","1:8856:2120","1:8864:2121"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3558:1974":{"id":"1:3558:1974","crate_id":1,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3560:237","1:3561:206","1:3562:54386"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3580:1966":{"id":"1:3580:1966","crate_id":1,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3582:754"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3273:1863","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"1:3576:1965","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13472:55327":{"id":"1:13472:55327","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"prim@char":"4:16005:1735","self::pattern":"1:13053:2453","`DoubleEndedIterator`":"1:8447:120","str::split":"4:16011:1740"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"1:49477:2714","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13063:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13063:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13078:2456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6085:2875":{"id":"5:6085:2875","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13063:2452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13534:2648":{"id":"1:13534:2648","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"1:12992:2282","FromStr::Err":"1:12992:2282"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"1:12992:2282","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"1:12992:2282","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3174:135":{"id":"1:3174:135","crate_id":1,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3176:681"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13063:2452":{"id":"1:13063:2452","crate_id":1,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13065:2455","1:13066:52731","1:13067:52732","1:13068:52733","1:13069:52735","1:13070:52734","1:13071:52736"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3363:1946":{"id":"1:3363:1946","crate_id":1,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3364:181","1:3365:913"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"paths":{"1:3518:130":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"16:7158:3910":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:2956:177":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"6:5548:41162":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"12:2253:3191":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:3580:1966":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"4:8929:2255":{"crate_id":4,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"4:9722:3296":{"crate_id":4,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"6:531:37477":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"4:12401:4436":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"5:4699:4316":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"4:6203:3321":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:10041:44698":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:4073:40479":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"15:248:3680":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:12373:49520":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:12699:49603":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:24836:164":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:46758:2304":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:3422:1960":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:50167:2767":{"crate_id":1,"path":["core","str","LinesAnyMap"],"kind":"struct"},"17:3743:4083":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"5:432:1868":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"12:2066:3090":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"4:8384:3250":{"crate_id":4,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"1:51489:2570":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"4:2166:3086":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:46970:12391":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:11499:45268":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:3774:1893":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:6812:42062":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:9649:44637":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"11:46:59770":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"5:3882:3004":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:4133:40486":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:9933:44642":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"4:14239:3013":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:13986:50779":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:49742:2757":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:4431:40516":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"4:1522:3188":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:3990:40468":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:670:37518":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:49751:2758":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:24632:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:11186:44649":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:13119:50130":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:5110:1885":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:57675:53241":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"4:6791:3046":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:50404:2783":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:7279:4065":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"4:12061:57355":{"crate_id":4,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"18:745:60671":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:12040:49435":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:48847:53002":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:9729:60637":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"16:7146:3909":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:47688:178":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"12:764:2607":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"4:1306:143":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:5346:3842":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"12:750:2606":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:5221:41116":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:46325:2627":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:46309:2625":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"4:1419:2606":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:13063:2452":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:12442:49524":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"4:5862:3342":{"crate_id":4,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"6:5292:41121":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"4:12049:3165":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"16:3429:3768":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:51442:2582":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:49527:2746":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:11993:49332":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:32337:2845":{"crate_id":1,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"1:50238:2840":{"crate_id":1,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"1:3174:135":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:3168:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"12:933:3186":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"18:0:1798":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:46768:2310":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:11026:44644":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:7467:3845":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:8929:44626":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"19:117:60678":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"1:49681:2753":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:9896:60640":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:51144:2548":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:52129:2575":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"4:11152:3071":{"crate_id":4,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"6:5210:41115":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"16:7884:3851":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:13816:52936":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"4:5956:3347":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"18:721:53130":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:3287:4026":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:3416:1959":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:2843:4015":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:4046:40475":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:4478:40521":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:6085:41531":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"4:11228:3076":{"crate_id":4,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"6:4033:40473":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:14129:201":{"crate_id":1,"path":["core","task","ready","Ready"],"kind":"struct"},"4:3327:2376":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"6:578:5291":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"4:11405:3346":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:14068:2448":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"5:2777:3461":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:13180:50178":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:3276:218":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:10864:44832":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"4:5972:3350":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"4:2159:2606":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"4:1153:31049":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:13154:50134":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:10306:2399":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:2291:2382":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:8399:136":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"4:11449:3047":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:5563:41163":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:3939:43171":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"5:1597:2606":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"5:8176:3366":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:13574:50676":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:5029:1877":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"4:3662:4333":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:11304:44651":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:23136:2534":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:32345:53150":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"16:5707:3746":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"6:6200:41539":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:25240:2631":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:48519:133":{"crate_id":1,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"1:52003:2583":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:4023:40472":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"4:12298:3116":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:11001:44914":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:5255:41097":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:4350:43507":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:12431:49523":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:10458:44756":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:5583:12109":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"16:4641:43598":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:9849:60645":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"4:12134:3213":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"4:7336:186":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"12:979:3190":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:46424:2928":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"17:13331:50295":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"4:3686:2996":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:45857:196":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:10558:44856":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"0:38:1577":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"1:46995:3019":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:49266:2723":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"4:15354:3302":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"4:14589:54698":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:10926:44938":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"4:7979:4335":{"crate_id":4,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"6:3868:40458":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:24103:2651":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:53451:20649":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:13547:50673":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:49509:2745":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"18:611:4216":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:11147:44647":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:13318:50294":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:46748:2303":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:12262:49512":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"5:8344:3421":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:13842:50735":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:11410:2718":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:49368:2731":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:7226:3916":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:24182:6198":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"4:1161:31052":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:1690:38376":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"4:15987:55115":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:46779:2305":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"4:10805:2964":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:48616:2395":{"crate_id":1,"path":["core","fmt","FlagV1"],"kind":"enum"},"18:897:4214":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:13377:50310":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"4:16021:1748":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"17:10912:44929":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"4:11350:3304":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:6176:3890":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:49581:2718":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"4:12248:1923":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"4:6323:3322":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:10353:4135":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:12771:44652":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:4410:40513":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:3181:227":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"4:10812:3261":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"1:47593:2037":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:4920:1897":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:542:3776":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:22533:2358":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"4:8912:1709":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"1:22546:52801":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"6:5282:41120":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"15:269:3684":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"4:8843:54634":{"crate_id":4,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"12:466:59777":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:11696:45380":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:3363:1946":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:13898:50762":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:7119:3773":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:9404:44634":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:24065:6153":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"5:1441:3191":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"4:12128:2063":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"16:6554:3900":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"5:6652:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:51639:2550":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:1311:4194":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:53189:2576":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:46287:11729":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"5:5875:4320":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"6:6155:41536":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"18:867:4212":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"4:2163:2063":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"4:11356:3305":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"5:3040:57657":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"12:1784:4309":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"6:1729:3316":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"12:432:3662":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"4:5651:3034":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:6614:37433":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"4:5789:2956":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:4884:1896":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:6510:2311":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"16:6072:3862":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:1658:38373":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:5407:41129":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:624:37488":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:12783:49675":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:50351:4448":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"5:3375:3374":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"12:2040:3086":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"4:5934:3345":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:45873:194":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:11424:2719":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"4:7653:3158":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"1:47797:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:2218:1050":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:49767:2760":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:12507:49529":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:11378:4090":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:24768:166":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"4:12019:3163":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"1:3103:2356":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"5:2200:4313":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"4:14551:3049":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"16:4535:43542":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"4:15046:57494":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:5975:3885":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"5:4643:4316":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:46056:2532":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"18:830:4209":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"4:1655:3194":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"5:920:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:5184:1888":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"13:0:1788":{"crate_id":13,"path":["std_detect"],"kind":"module"},"6:5953:38298":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:12208:49508":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:10516:4171":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"4:11246:3077":{"crate_id":4,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"1:22931:2369":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:53338:2579":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:5185:41112":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"4:1156:31051":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:11604:45339":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"4:1045:3068":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:9689:60649":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"4:1623:3191":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"4:3196:128":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"1:50448:2590":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:3346:1945":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:4300:40499":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"4:11293:55116":{"crate_id":4,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"4:12731:128":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:49323:2727":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:510:44622":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"12:1162:3657":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"16:3118:4031":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:3862:40457":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:23125:2450":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:50418:158":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"5:7849:4331":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"5:3341:3373":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:6100:41533":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:5159:41110":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"4:5657:3036":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:50225:2839":{"crate_id":1,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"5:1607:2607":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"16:5505:3738":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"4:1442:2063":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:2768:579":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:11118:44646":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:1617:38370":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:46647:2295":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"4:10706:2291":{"crate_id":4,"path":["std","error","Chain"],"kind":"struct"},"4:11398:3071":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"4:12183:3216":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:0:1796":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:50171:2770":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:3277:217":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:6923:42088":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:12741:49611":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:6999:3907":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"4:16026:1753":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"4:10591:3232":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"16:3195:4022":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:3918:40462":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"4:1646:3193":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"5:2262:3459":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:2966:184":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"5:6672:1910":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"18:755:60677":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:53462:20650":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:57696:53207":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"4:4475:3013":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:13609:50680":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:46628:2293":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"4:1501:3185":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:9971:60652":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:10827:4087":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:47713:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:12095:49443":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:3351:1944":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:46578:2308":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:4364:40507":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:53477:20651":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:2866:4016":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:13370:50298":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"4:16010:1739":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"1:46063:1885":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"16:6731:4053":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:6633:54044":{"crate_id":1,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"17:11678:45379":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"4:11475:3039":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:12275:49513":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"4:4611:3019":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"12:2269:3192":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:0:430":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"17:0:1797":{"crate_id":17,"path":["object"],"kind":"module"},"16:5488:3737":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"4:10680:32004":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"4:4727:2391":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"16:2912:4017":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:53416:20646":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"4:13957:3162":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"4:12769:54697":{"crate_id":4,"path":["std","sys","unix","fs","TimespecDebugAdapter"],"kind":"struct"},"12:1183:3658":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"12:1121:3192":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:9600:60651":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:12056:4371":{"crate_id":1,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"4:10569:2450":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"6:4272:40496":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"12:1666:3670":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:10435:44755":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"4:14805:32011":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:10844:4144":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"4:1497:3184":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:13788:50729":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"16:4852:43634":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"4:7511:119":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"12:2072:3091":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"1:49723:2755":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:157:37165":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"4:11094:2992":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"4:16029:1756":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"4:10456:4356":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:294:60648":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"18:678:142":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:10308:189":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:22601:52871":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:5433:3732":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"5:3362:3090":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"6:1723:38380":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:1547:38363":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:12795:49678":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:12408:49522":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:9210:44632":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"4:7619:3156":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"1:52369:2555":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"16:6152:3843":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"12:1238:3660":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:51355:53253":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:49445:2741":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:9809:60638":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:7571:3840":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:591:37483":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"12:2052:3088":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:11277:44614":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"4:8031:3250":{"crate_id":4,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"1:53553:20655":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"5:8121:3497":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:13098:50129":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:10304:4130":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:10071:4193":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:5197:41114":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:2396:1895":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:46799:2307":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:12118:49444":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:4955:43662":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:12845:2711":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:5632:3744":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:4387:40510":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:50179:2771":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"4:10642:31047":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:8886:2352":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"16:7216:3915":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"5:1457:3193":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:10529:44758":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:9961:44643":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"16:7333:3863":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"4:10862:3281":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"4:5380:3303":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"0:41:1584":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"4:12258:3114":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"6:4317:40501":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:28051:2336":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:6864:40650":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"4:11424:3304":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:13041:50074":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:11199:44650":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"5:8379:3368":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:24564:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"16:6577:3901":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"9:603:42411":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:6518:3899":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:10599:44858":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:48133:1911":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:4183:40489":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"4:2576:127":{"crate_id":4,"path":["std","error","Error"],"kind":"trait"},"14:231:3371":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"4:15475:35910":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"6:5469:41134":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:51818:53132":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:14165:141":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"5:7642:3405":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:48269:2398":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"4:13655:3126":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:53530:20654":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:46363:2761":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:24118:6177":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:10298:119":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:46699:2299":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"4:11670:3142":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"5:923:3495":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"16:7549:3852":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:3375:1951":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"16:6032:3772":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:13296:50230":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:24870:2800":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"5:8263:3198":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"4:11313:54714":{"crate_id":4,"path":["std","net","parser","AddrKind"],"kind":"enum"},"6:6028:38325":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"5:7620:3404":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:3757:2357":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:4193:40490":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:11254:4116":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:49417:2284":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"5:8368:216":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:4120:40484":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:11355:2715":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:13564:50675":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"12:1203:3659":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:511:37474":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"5:8330:3420":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:56387:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"4:11502:34216":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:4395:40511":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:12155:49504":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:4095:40481":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"18:802:4206":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:5420:41131":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:4494:40522":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:6238:3846":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:9088:44630":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:8902:44625":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:12734:2744":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"4:9638:4350":{"crate_id":4,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"4:12120:3210":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:49257:2722":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"18:621:60668":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"4:15131:3172":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:11835:45574":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"14:216:42936":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:6357:3895":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:3274:1892":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:3430:1962":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:13429:50657":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:4052:40476":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:11434:45051":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:11981:44863":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:51073:2580":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"4:16011:1740":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"6:4241:40494":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:32331:2605":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:3733:137":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"16:7073:3908":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:13799:50730":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:7843:3922":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:52243:2563":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"4:4514:3009":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:1708:38378":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:7928:2531":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"5:8463:3400":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"4:8136:3250":{"crate_id":4,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"4:11664:2606":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"12:2036:2063":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:2920:183":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:23661:2370":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:10801:44828":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:11665:45378":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:3177:228":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:3410:1958":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:300:205":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:46977:1709":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"5:8146:57675":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"9:776:3573":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"1:3388:1957":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:11137:2607":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"5:3488:3087":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"16:6620:4047":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:3728:224":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:6101:3839":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:53500:20652":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:12810:2751":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"4:4438:3012":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"5:1215:3456":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:10160:44714":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:5207:1889":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:7823:3855":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"4:2437:32009":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"16:5736:3749":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"4:8742:1925":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:49563:2717":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"4:10878:3004":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"5:7257:4311":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:23079:2450":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:9065:44629":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:3716:1969":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:4347:40505":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"4:14953:4361":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:5167:41111":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"4:2797:3051":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"4:7736:3162":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"1:3491:116":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"4:16008:1737":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"1:52435:2540":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"4:4643:2980":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"17:9245:4088":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:47923:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"4:11126:2305":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"17:10001:44696":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:6068:38302":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:12794:2748":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"4:3565:3000":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:10933:214":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:13582:50677":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:6644:41903":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"18:886:4213":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"4:12057:57587":{"crate_id":4,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"16:5855:3756":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"12:843:3181":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:3102:2450":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:13402:50655":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:4293:40498":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"12:2412:59771":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:9258:2040":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:4425:40515":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:5400:41128":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:47671:2607":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:50045:2470":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:4511:40524":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"5:1011:2606":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"4:14236:3011":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:23086:29200":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"6:3966:40466":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:4050:2438":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"17:10149:44641":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:13780:50728":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:5960:3761":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"18:775:60660":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:46679:2298":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:4304:43486":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:5927:3759":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"4:7796:3166":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"1:5407:2922":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:13962:52939":{"crate_id":1,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"17:13810:50731":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:11317:2714":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"12:1147:3193":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"4:9631:4441":{"crate_id":4,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"6:1527:38360":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:7250:3918":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:53436:20648":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"4:6463:3062":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:3264:4025":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:5753:3752":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:6021:4014":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"4:3201:2876":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"1:11282:2713":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:11616:45340":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:12168:49505":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"13:232:59782":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"4:2941:179":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:12552:49532":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:50195:2768":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"12:2045:3087":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"6:6185:41538":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"16:6605:3858":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"4:5504:3310":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"4:11594:3138":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:48495:67":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"16:5996:3886":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:13733:50690":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:13857:187":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"4:4436:3011":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"4:11453:34214":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:53396:20644":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:10052:44699":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:11406:45043":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:13892:15285":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:3558:1974":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"4:15976:31053":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"4:699:3223":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:46281:2760":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"4:13935:4444":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"4:8392:3137":{"crate_id":4,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"16:4417:43524":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"4:10701:3465":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"17:11767:45555":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"16:4230:43437":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"12:1256:3194":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:12712:49604":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:24032:2655":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"4:16019:1746":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"1:11244:2712":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:11923:2733":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:3367:1949":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"4:5739:2951":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:5386:41127":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"5:1195:57695":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:13520:50668":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:49758:2759":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:10331:4144":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"4:9347:3056":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"5:8298:3419":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"12:777:2063":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"5:3759:2606":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:38868:2264":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:13446:50658":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"9:469:42306":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"4:5779:2955":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:13760:50692":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:51027:53133":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"12:1103:3191":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"12:0:1793":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"6:4517:40525":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:56400:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"9:900:42334":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"5:6764:2980":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:10310:2400":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"4:11204:3075":{"crate_id":4,"path":["std","net","ip","IpAddr"],"kind":"enum"},"4:8293:3250":{"crate_id":4,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"1:47525:2062":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:2193:8646":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"4:7936:4439":{"crate_id":4,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"4:16018:1745":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"1:46371:2925":{"crate_id":1,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"14:0:1794":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"5:792:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"12:2404:59775":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:13497:50665":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:6110:3882":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"5:4599:4314":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"17:9551:4115":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"4:1136:3052":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:9767:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"4:16024:1751":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"16:5595:3743":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"4:4036:3180":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"5:1685:194":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"4:14610:129":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:2507:2447":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:4066:40478":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:12610:49549":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:5315:200":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:56335:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"4:9064:1919":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"4:12167:3215":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:13963:50772":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:8472:1866":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:7738:3920":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:11750:45547":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"5:3048:57656":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:12247:49511":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:10106:4188":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:9943:60639":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"4:15413:3310":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:6636:3860":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:13590:50678":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:3395:1954":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:46986:12393":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:10407:4127":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:14:1763":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:48513:70":{"crate_id":1,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"4:2401:31998":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"16:4762:43619":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:7406:3847":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:24802:167":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:13258:50225":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:50175:2772":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"3:0:1785":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"18:821:4208":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:11809:45560":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:6239:41542":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"4:11073:3020":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"4:2460:4436":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"5:994:3496":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:10302:2397":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:10312:2389":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:10128:4190":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:3524:132":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:1091:4311":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:9280:43006":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:13933:50770":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:3357:1947":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:47550:2063":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"17:13272:50227":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"5:5833:3356":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:3739:1971":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:22937:2372":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:299:60646":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:7804:3853":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:49435:2740":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"18:783:60660":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:55964:2365":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:13078:2456":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"16:6780:3905":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:24212:6197":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"16:3506:4027":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:9799:44640":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:2543:4167":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"4:16015:1742":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"1:51096:2568":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"18:740:60662":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"16:5314:43007":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"5:3839:4311":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:4614:43596":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:13172:50136":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:10539:146":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"17:9162:4117":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:9380:2452":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:56374:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:7212:3086":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:5100:1884":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:46388:2760":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:49248:2721":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:53592:20656":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:537:37478":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"4:7259:54613":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:3434:1963":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:13072:2455":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:49627:2750":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:13772:50727":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"9:0:1790":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:3365:3764":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"4:16003:1733":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"6:3978:40467":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"4:5377:3302":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:9332:4165":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:9973:2696":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:50203:121":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"17:13819:50734":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"4:15123:54635":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:7755:2317":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"16:7894:3880":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"4:16012:1741":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"5:1235:3457":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:4751:102":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:8882:2351":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:24598:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:7174:3911":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:11738:45546":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"4:2031:145":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"12:114:59776":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"10:0:1791":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:5029:43686":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:5407:3730":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:32497:53199":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"16:7295:3861":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"5:3329:2606":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"4:6865:3041":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:24700:168":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:24010:6165":{"crate_id":1,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"12:815:3185":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:6124:41535":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:53299:2559":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:48528:67":{"crate_id":1,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"6:4523:40526":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"4:11681:3143":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"6:5978:41528":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:10950:44940":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:53405:20645":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"16:5421:3731":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:11205:2711":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:9574:4120":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"6:4501:40523":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:4704:43611":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"16:4671:43603":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:46500:2827":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"4:15510:3688":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:49459:2710":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"16:4386:43518":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"4:3345:3269":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"17:13062:50128":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"4:2755:3050":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"4:823:4353":{"crate_id":4,"path":["std","thread","local","os","Key"],"kind":"struct"},"16:6691:3904":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"5:1635:3181":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:2865:2430":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"14:189:42927":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"4:4688:2989":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:13488:50664":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"4:12199:3217":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:10988:44915":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"4:11264:3123":{"crate_id":4,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"1:3286:1891":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"4:15499:3688":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:22580:52868":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:12028:49379":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:10574:2517":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"4:14103:4359":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"16:2754:3765":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:1563:38365":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:2186:578":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"4:11066:3018":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"16:3320:4079":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:4449:40518":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:13394:50628":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:3972:40313":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:5436:59383":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:5987:41529":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:7042:4064":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"4:12738:3259":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"12:880:3087":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"6:6091:41532":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:5766:3753":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:8412:1867":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:22874:2587":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"4:16017:1744":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"1:46717:2300":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:569:37481":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:11628:45375":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:2991:4029":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"4:6963:2966":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:9528:2741":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"4:11520:3127":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"6:5969:37355":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:12598:49535":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"4:14576:2964":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"5:3772:2607":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:12982:50073":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:32693:2511":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:49776:2761":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"5:1843:4311":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"5:8197:2063":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"5:4242:4311":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"4:2399:31997":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"17:13865:50738":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:5241:41096":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:13283:15036":{"crate_id":1,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"6:161:37166":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:10673:44861":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:13598:50679":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:37648:2358":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"17:10224:44716":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"12:379:3664":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:6949:4060":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:6892:2314":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:519:37475":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:46450:2629":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:21:672":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"6:5191:41113":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:32156:2855":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:48007:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"4:897:3227":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:46727:2301":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"5:6688:3432":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"12:559:143":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"4:1450:3181":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:38805:2355":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"16:6491:3898":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:1665:38374":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"4:2187:3090":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"4:9471:57356":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"4:9143:1922":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"5:4628:235":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:24144:6196":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:4727:2426":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:1676:38375":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:10924:2450":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:12234:49510":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"4:12278:3115":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"16:2816:4034":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:49286:2725":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:49043:2947":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:53047:2572":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"4:5745:2954":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"12:2392:59773":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:7264:3859":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"4:12223:1915":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:7669:2071":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:4164:40488":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:12685:49602":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:49349:2729":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"0:0:1577":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"16:3522:43010":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:4065:2442":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"16:7514:3864":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:13453:50661":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"4:10663:3095":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"16:7024:4063":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"4:5801:2959":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"4:4398:3287":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:45942:197":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"4:11082:2990":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"1:32397:53206":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"4:3652:3001":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:0:798":{"crate_id":6,"path":["libc"],"kind":"module"},"6:4325:40502":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:13465:50662":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:1236:44713":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"16:5231:43863":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"4:10673:3195":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"18:661:4219":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"4:8977:1926":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"4:11416:3315":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"4:16005:1735":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"1:3400:1955":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:4127:40485":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"18:705:60660":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"5:3370:3088":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:49983:2467":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"4:14809:3037":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:45898:195":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:12537:49531":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:9034:44628":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:11482:45053":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:9719:44638":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:9264:43007":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:5580:3742":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"14:194:42928":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"9:692:3526":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"4:9770:4351":{"crate_id":4,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"16:3714:43021":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:49877:2461":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:13306:50292":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"4:14634:2990":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"4:16009:1738":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"4:8492:3212":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"9:234:3551":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"4:11139:2710":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"1:10241:2391":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:49956:2466":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"4:8643:1912":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:10211:44710":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:1744:38382":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:2773:4041":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"4:14937:4360":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"4:14627:118":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"4:2175:3088":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"16:5941:189":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"5:8138:3498":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:49713:2754":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"17:12645:49599":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:10477:4168":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:12480:49527":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"4:7633:3157":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"1:50199:2769":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"4:11430:3324":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"16:4823:43630":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:46600:2309":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:11015:44941":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"15:230:3679":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:8366:2331":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:6366:3677":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:24234:2814":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:12385:49521":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:24734:165":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:48817:146":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"4:9865:4353":{"crate_id":4,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"17:2512:4128":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:24530:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"5:1560:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"4:4084:127":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"5:3748:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:9659:60653":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:53126:2556":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:10140:4144":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:7927:2353":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"16:6166:3889":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"4:16020:1747":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"4:10948:3177":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:11962:44864":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:4083:40480":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:46049:2531":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"1:51177:2581":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:24049:52987":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:3278:106":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"4:11189:3073":{"crate_id":4,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"5:1694:3454":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:51520:2574":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:10448:4160":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:10236:4113":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"4:7681:3160":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"1:49402:2830":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:12917:50071":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:52400:2558":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:1622:38371":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"12:2032:2606":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"5:1618:2063":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:45988:1967":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:3745:1973":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"5:3970:4311":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:3488:4028":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"4:12243:1917":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"12:2059:3089":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:50068:15037":{"crate_id":1,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"12:162:3661":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:1533:38361":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"4:10581:55112":{"crate_id":4,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"4:7799:3168":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"4:16004:1734":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"17:11932:49326":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:632:37489":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:4262:40495":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:49297:2726":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"4:4304:3021":{"crate_id":4,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"16:6718:4052":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:50341:201":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"4:12112:2606":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:49336:2728":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:49609:2749":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"5:7111:4325":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"1:48800:52992":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:11726:45437":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:547:3750":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"16:7392:3849":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"4:16025:1752":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"1:9978:2697":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:10656:44842":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:47015:12396":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"4:2462:4437":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"16:6252:3893":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:10571:44857":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:12195:49507":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:5273:3770":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:7857:2288":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"16:7477:3866":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:4:979":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"6:1602:38369":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:12051:49436":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"5:5889:4323":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"1:48839:53017":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"4:13919:3160":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:11555:45330":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:7453:3844":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:22927:2450":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:46618:2292":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:4782:2446":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:5269:41118":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:11328:44652":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:11458:45052":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:11588:45338":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:4371:40508":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:47619:205":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"6:599:37484":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:48829:3137":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"17:9886:44641":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:22837:2524":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"4:2938:180":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:5312:41122":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:5164:1887":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"17:12456:49525":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:3504:1894":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"18:812:4207":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:4013:40471":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:5330:43006":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:11100:4121":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"9:722:3527":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"1:6437:2296":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:7236:3917":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:14078:2784":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"12:856:3182":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"4:1463:3182":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"11:0:1792":{"crate_id":11,"path":["adler"],"kind":"module"},"17:11794:45559":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"4:11361:3306":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"6:5522:41161":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:4255:3323":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"4:10570:3224":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:22801:2533":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"9:927:42300":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:10938:44939":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:12182:49506":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"4:6703:55049":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:3309:1864":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"4:8694:1914":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"4:12000:3161":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"4:1079:3057":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:52082:2571":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:46736:2302":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:46350:2931":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"5:374:3452":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:24126:6195":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:1760:38383":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:6569:4049":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:610:37486":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"12:183:3665":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:47663:2606":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"7:85:42188":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:5359:41124":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:12946:50072":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:6126:3888":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"4:786:4353":{"crate_id":4,"path":["std","thread","local","fast","Key"],"kind":"struct"},"17:9769:60644":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"18:152:51134":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:11779:45556":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"9:809:3137":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:22599:52873":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:3515:1865":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"5:8115:2063":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:2484:44744":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:10200:44711":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:2062:2980":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"6:4101:40482":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"12:895:3649":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"4:16030:1757":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"4:16027:1754":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"6:6051:38299":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:51282:2561":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"4:10697:32011":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"4:15971:57375":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:9186:4095":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"6:5347:41123":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"4:8650:1913":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"6:3881:40459":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:8601:157":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"19:0:994":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:10489:4170":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"4:1486:3087":{"crate_id":4,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"16:6219:3892":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:0:488":{"crate_id":1,"path":["core"],"kind":"module"},"17:11947:49327":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:11653:45377":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:49862:2458":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:24666:2663":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:13083:2457":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"14:47:42927":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:22578:52870":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:2862:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:49039:2948":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"4:4670:2971":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"17:9440:44635":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:50395:2782":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"4:1505:3186":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:3997:40469":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"4:1534:3190":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:4040:40474":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:56322:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:46394:2926":{"crate_id":1,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"1:49276:2724":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"7:0:1480":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:48091:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"18:645:4218":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"5:1653:3183":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:51394:53129":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"9:963:3591":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:6136:3883":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:4470:40520":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"4:4752:2994":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"1:51922:53240":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:13386:50627":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"4:6794:3048":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:5130:41068":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:51543:2577":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:11082:4096":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:13282:50228":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:49839:2454":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:56361:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"12:869:3086":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:51898:53252":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"16:4506:43538":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"4:70:1491":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"1:10529:142":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:32296:2821":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:3273:1863":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"6:1908:38518":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:3341:1948":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"4:6086:3312":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"4:16022:1749":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"4:9775:4352":{"crate_id":4,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"16:3392:4032":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"4:10870:3002":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"9:996:3592":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:4964:1706":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"17:10814:4086":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"4:16023:1750":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"15:0:1795":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:12632:49598":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:4922:43654":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"16:7971:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:3405:1956":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:4377:40509":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:10279:4142":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:10579:2518":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"4:2181:3089":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"4:10800:3259":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"1:3280:220":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:48808:2519":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"16:4890:43647":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"5:2330:3458":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"4:6941:3040":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:13506:50666":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"18:651:4215":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:46708:2315":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:3336:1943":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"4:10614:2257":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"6:4401:40512":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:8879:2350":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:52586:2564":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"4:11571:3137":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"6:6005:34214":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:5274:41119":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"4:15230:3108":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"4:903:3228":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:12568:49533":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:13554:50674":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"12:1703:3672":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"4:2192:3091":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"9:1075:3594":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:49358:2730":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:14239:2588":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"16:3145:4030":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:13348:50296":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"4:8197:4335":{"crate_id":4,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"16:7420:3865":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"6:3905:40461":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:10403:4140":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:46431:2929":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"16:7856:3923":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:46558:12110":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:9259:2039":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:13685:50689":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:9296:44615":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:2945:4040":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"4:5731:2953":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"13:120:42882":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:7185:3912":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"5:7379:2063":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:11956:2734":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"4:11176:3072":{"crate_id":4,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"4:12006:181":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"16:6964:2036":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:24166:6187":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:10788:44829":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"4:6863:2967":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:46021:1970":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:53425:20647":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"4:11133:2741":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"14:250:42935":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:8849:4114":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:12521:49530":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"5:3894:3426":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"4:11116:2291":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"16:3172:4021":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:3091:4078":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"5:3396:3091":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"0:39:1583":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"1:23673:52804":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:51693:2557":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"5:4215:3086":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:3576:1965":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:10291:109":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"6:4215:40492":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"4:11146:2754":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"18:730:60667":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:4419:40514":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:9762:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:48792:2520":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:563:37480":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"18:858:4211":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"16:7786:3854":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"4:10953:3178":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"4:12238:1916":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:10117:4189":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:46688:2313":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:49429:2739":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:47881:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"9:1020:3593":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:10253:4132":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:13884:50744":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:6870:40651":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"4:6867:3042":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:50055:2471":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"5:783:222":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:51048:53250":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"5:8280:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:12467:49526":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:5630:779":{"crate_id":1,"path":["core","iter"],"kind":"module"},"17:13942:50771":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:4112:40483":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:7870:3850":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:10543:44855":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"16:3018:4019":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"6:6214:41540":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:12073:49437":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"4:1194:4434":{"crate_id":4,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"16:6208:3891":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"4:4516:3010":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"7:38:42181":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:46587:2291":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:48632:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"16:7195:3913":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"4:15020:3163":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:46410:2759":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:13477:50663":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"4:14566:55137":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"4:12072:54612":{"crate_id":4,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"6:1596:38368":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"5:8203:2063":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"6:6636:41902":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:46638:2294":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:48255:2397":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:13221:50182":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"5:8362:57702":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"17:13620:50686":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:11640:45376":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"4:9178:54634":{"crate_id":4,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"16:6807:3906":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"4:8485:3211":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:13924:50769":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:5155:1886":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:9592:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"4:2366:600":{"crate_id":4,"path":["std","env"],"kind":"module"},"6:584:37482":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:1540:38362":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:2925:124":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"4:11611:3139":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"6:6910:40656":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:2889:4035":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"4:6441:3048":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"11:54:3647":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"17:12582:49534":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:9005:44627":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:11159:44648":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:13637:50688":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:23767:2450":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:47602:2127":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"16:6464:3856":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"4:5793:2957":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:13240:50184":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:49197:2716":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"5:8130:3086":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:616:37487":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:24247:2813":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:10304:2398":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:6852:40648":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:69:3399":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:4459:40519":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:11572:45337":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:23467:29219":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"6:3892:40460":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"4:15217:3103":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:5038:1879":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:12756:49612":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"18:850:4210":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:10266:4131":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"4:11654:3140":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"1:3426:1961":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:3772:43054":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"4:11336:33633":{"crate_id":4,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"5:3300:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"4:6699:55045":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:12992:2282":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"12:940:3187":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:51866:53254":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:53252:2541":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"4:14959:4362":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:8179:1876":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:53515:20653":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"18:791:4205":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:47965:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:45809:1975":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:5033:1878":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"4:12253:1924":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:11915:49325":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:49378:2732":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"4:16028:1755":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"5:8250:3093":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"4:4404:3289":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"4:15054:3115":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"6:6893:40654":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:10635:44827":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"9:41:3576":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"6:6221:41541":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:3439:1964":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:6899:40655":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:5604:2522":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"4:10657:31050":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:5945:37396":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"5:4306:2607":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:10584:4099":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:4739:2427":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:45919:198":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:50034:2469":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"4:14571:57588":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:50187:2773":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"4:15332:3078":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:12771:2747":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:6014:3887":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"4:15392:3303":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:6106:41534":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:11438:2720":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:47534:2606":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:1455:1708":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"17:13540:50672":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:46108:2598":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"5:1472:3192":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:6591:3902":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:12494:49528":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:22850:2450":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:47004:12394":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"4:11410:3349":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:51718:2539":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"16:3604:43012":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:6768:4056":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:681:44624":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"5:4443:2606":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"5:3336:3089":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:3521:131":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:6391:3896":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:11113:2606":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:46028:2436":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"4:4477:3014":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:23771:2371":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:5228:41117":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:51375:2538":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"4:3355:3274":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"1:48558:127":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"16:3041:4020":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"12:787:3184":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:24090:2650":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"5:8168:194":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:1700:38377":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"4:16016:1743":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"5:2310:3505":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:22561:52801":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:12221:49509":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"5:1939:3087":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"4:12079:54926":{"crate_id":4,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"4:4745:2991":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"17:12142:49503":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:46670:2297":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"5:8446:3087":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"12:971:3189":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"5:2553:3462":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"16:5561:3741":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"5:3951:3087":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"1:8447:120":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"16:6424:3897":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:543:37479":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:9133:44631":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:13912:50768":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:10887:44830":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:50436:2592":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"5:8106:3360":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"16:4448:43530":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"4:6701:55047":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"12:472:59778":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"12:1881:145":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"4:10370:44624":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:13129:2460":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:53377:2544":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:10294:109":{"crate_id":1,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"5:8313:2826":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:10468:4169":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"4:1528:3189":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"4:1432:2607":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:6935:42089":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:24219:2860":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:4358:40506":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"16:4734:43616":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"4:15093:3114":{"crate_id":4,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"17:13532:50671":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:3379:1950":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:48262:2396":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:48580:71":{"crate_id":1,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"17:11231:4118":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:5360:3728":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:7303:3919":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"4:10795:3064":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"8:0:1789":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"4:8919:1710":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"16:7761:3921":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:46340:2930":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:46483:2826":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"4:6689:2954":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"4:9737:3297":{"crate_id":4,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:3957:40465":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"12:2398:51523":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:10081:4142":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"4:14644:57490":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"5:5415:2980":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:8954:4097":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:13746:50691":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"4:12034:3164":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:6269:3894":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:49733:2756":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"4:10854:118":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:12500:2943":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:52322:2551":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"16:7205:3914":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"5:5536:1910":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"4:15236:3109":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"4:0:1330":{"crate_id":4,"path":["std"],"kind":"module"},"1:3371:1953":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:605:37485":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:13781:150":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:3241:4024":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:4477:43534":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:13356:50297":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:22748:2586":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:47492:176":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"6:525:37476":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:13205:50181":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"4:3343:3268":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"4:14822:3165":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"6:4341:40504":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:8362:2333":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"4:5012:3069":{"crate_id":4,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"1:23939:2797":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:49477:2714":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:49908:2465":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:12343:49517":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:3171:149":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:51250:53208":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"18:767:60674":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:13163:50135":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"4:10822:2965":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"6:3951:40464":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:10028:44697":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:3338:3763":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"4:10381:54686":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:23134:2537":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:9260:2038":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:46548:4365":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:47839:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:4439:40517":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"4:12154:3214":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:3383:1952":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"4:3740:3003":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"4:4736:54590":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:48546:107":{"crate_id":1,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"6:4227:40493":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:12671:49601":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:4377:2063":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:7780:234":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:6413:3676":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:10317:4129":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"12:1682:3671":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:6881:40652":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:10300:2396":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"17:9368:44633":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"4:10596:3248":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"17:10179:44712":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:51670:2554":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"5:3044:57658":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:607:44623":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"12:952:3188":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"4:14242:3009":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"4:15033:3164":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:12287:49514":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:12659:49600":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:46470:2825":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:5522:3739":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:6682:3857":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"5:6411:223":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:3549:43011":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"4:10836:129":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"6:5371:41125":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:4005:40470":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:46296:2624":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"4:12740:4358":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"5:2218:3376":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"14:56:45053":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"9:749:3528":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"1:46656:52720":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:49663:2752":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:4669:2980":{"crate_id":1,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"6:1736:38381":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:4203:40491":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"18:668:4220":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:52936:2552":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"4:7121:34215":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"1:13766:138":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"4:8478:202":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:13053:2453":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"16:6644:3903":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"16:5384:3729":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"5:8391:3369":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:8106:3018":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:9839:4144":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:12524:2905":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"5:1486:3194":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:5428:41132":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"5:5788:4311":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:10975:44916":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"4:7667:3159":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"1:45965:199":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:51313:2549":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"4:15073:54923":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"16:5672:3745":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"4:1021:3250":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"17:11519:45269":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"12:928:3183":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"18:695:4221":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"4:1492:3183":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"4:7931:3249":{"crate_id":4,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"1:22990:2534":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:5717:3748":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:23462:2535":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:12307:49515":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:1584:38367":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:4008:44831":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:10623:44860":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:47559:2036":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"6:1717:38379":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:50183:2775":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:9759:44639":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"4:5964:3348":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"16:2794:3767":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"9:686:3524":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"16:6087:3841":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:10962:44917":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:9476:44636":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"18:169:51135":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"4:7445:185":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"1:51208:2569":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:7342:3877":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:10502:44757":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"5:3038:2124":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:3218:4023":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:4281:40497":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:5379:41126":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:52793:2584":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:3800:43057":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:2282:2381":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:6176:41537":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:8163:52710":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"14:244:42929":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"16:5456:3733":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:3999:68":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"16:5815:3755":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:14000:50813":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:56348:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"4:13418:3317":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"5:3039:57655":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:1554:38364":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"4:1637:3192":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:11396:2717":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:3165:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:45781:1977":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"12:353:4428":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"9:1056:3586":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:3811:1976":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:11847:45575":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"4:9598:4349":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:12010:49335":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:2733:3766":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:10061:44715":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:12327:49516":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:13978:50777":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"18:637:60660":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:4157:4100":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:2314:4134":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"4:15186:3101":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:24496:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:46465:100":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"4:3198:3260":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"17:11045:44645":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"18:136:51133":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:13054:50126":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"4:2170:3087":{"crate_id":4,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"5:6954:3361":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"5:7453:4311":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"4:7290:54613":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:10095:4187":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:1522:38359":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"12:2419:3093":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:50191:2774":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:48049:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"4:9067:1920":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"12:399:3663":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:6887:40653":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"4:14030:3161":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:3945:40463":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:51592:2562":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:47542:2607":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"4:5985:3351":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:13627:50687":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:11970:44862":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"9:27:3575":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"1:48276:2399":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"18:713:2358":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:47679:2063":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"17:12725:49610":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"18:838:2455":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"5:5837:3354":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"4:16006:1736":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"6:6858:40649":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"5:1644:3182":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:4790:43622":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:4060:40477":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:47755:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:10420:4126":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:46789:2306":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"5:6257:3404":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"9:157:3543":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"5:1663:3184":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"4:10431:4354":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"4:8414:3425":{"crate_id":4,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"6:5414:41130":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:11030:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"16:5295:43009":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:11162:2710":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"4:1476:3086":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"4:2598:54628":{"crate_id":4,"path":["std","error","from","StringError"],"kind":"struct"},"6:4145:40487":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:3064:4077":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"4:4401:3288":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:5528:40373":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:13278:15035":{"crate_id":1,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"4:13583:4443":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:10251:134":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:37624:178":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"17:10611:44859":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"16:5790:3754":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:5459:41133":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"4:9643:4442":{"crate_id":4,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"4:3329:3264":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"16:7360:194":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"5:8160:2063":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:23868:2794":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:51231:2573":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"5:7824:4325":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:1630:38372":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:50020:2468":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:11337:4166":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:49891:2464":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:51766:2543":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:10377:4133":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"5:0:277":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:3296:2263":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"4:8807:162":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:13192:50180":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"4:13564:32009":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:51336:2553":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:1572:38366":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:4306:40500":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:3647:1968":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:50359:190":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"4:15755:4363":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"5:4515:3485":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"4:5723:2952":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"4:14602:3261":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"6:4331:40503":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:2887:104":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:51121:2560":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:8403:151":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:4995:43677":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"4:15202:3102":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:51741:2542":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"4:4082:205":{"crate_id":4,"path":["std","io","error","Result"],"kind":"typedef"},"1:3246:115":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"17:11822:45561":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:3268:211":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"17:11539:45329":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"4:13782:3170":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:47611:188":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"17:11358:4091":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"4:14317:2257":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:52160:2578":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"5:6475:3086":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"14:11:42927":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:10446:54096":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"16:7378:3848":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:5998:41530":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:2968:4018":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"4:6561:3065":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"4:1511:3187":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"4:15484:55113":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"5:1674:3185":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"4:10958:3005":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"4:3204:2988":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"16:6744:4054":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:46417:2927":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:46609:2312":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:11714:45436":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"12:2280:3193":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:5472:3736":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:2268:2375":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:88:37099":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"}},"external_crates":{"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":16}