{"root":"0:0:2321","crate_version":"1.4.0","includes_private":false,"index":{"1:13301:23112":{"id":"1:13301:23112","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12341:471","self::pattern":"1:12955:3850"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:3864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13336:28146":{"id":"1:13336:28146","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12341:471","str::splitn":"1:13333:28144","self::pattern":"1:12955:3850"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44087:3802","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:3864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12961:3864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12976:3866","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2321":{"id":"0:0:2321","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[215,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\n# #[macro_use]\n# extern crate lazy_static;\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.4.0\")]","#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:29:2327","0:31:2328","0:28:2321"],"is_stripped":false}}},"1:13274:26608":{"id":"1:13274:26608","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12502:3870"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13268:30711":{"id":"1:13268:30711","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13324:28142":{"id":"1:13324:28142","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12955:3850","`DoubleEndedIterator`":"1:8333:129","prim@char":"4:12341:471","str::split":"1:13318:26689"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43983:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:3864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12961:3864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12976:3866","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13278:2326":{"id":"1:13278:2326","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42075:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42073:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13354:30722":{"id":"1:13354:30722","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12955:3850","`DoubleEndedIterator`":"1:8333:129","prim@char":"4:12341:471","str::match_indices":"1:13351:30721"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44133:3886","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:3864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12961:3864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12976:3866","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13345:2534":{"id":"1:13345:2534","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12955:3850","`DoubleEndedIterator`":"1:8333:129","prim@char":"4:12341:471","str::rmatches":"1:13348:30720"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44169:3883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:3864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5621:31432":{"id":"5:5621:31432","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:3864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5633:31435":{"id":"5:5633:31435","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:304:2635","`String`":"5:7645:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:304:2635","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13377:30730":{"id":"1:13377:30730","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12341:471","self::pattern":"1:12955:3850"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:3864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12961:3864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12976:3866","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5635:26628":{"id":"5:5635:26628","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13391:26631"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13393:29317":{"id":"1:13393:29317","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1061:36852"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13288:28134":{"id":"1:13288:28134","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:13290:28138","str::split_at_mut":"1:13289:28135"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31:2328":{"id":"0:31:2328","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[213,0],"end":[215,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["lazy",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"LazyStatic","id":"0:29:2327","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13296:22452":{"id":"1:13296:22452","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13297:22427"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44239:3879","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13351:30721":{"id":"1:13351:30721","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12955:3850","`DoubleEndedIterator`":"1:8333:129","prim@char":"4:12341:471","str::rmatch_indices":"1:13354:30722"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44115:3885","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:3864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13390:26630":{"id":"1:13390:26630","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5617:31431":{"id":"5:5617:31431","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:304:2635","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:304:2635","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13298:26690":{"id":"1:13298:26690","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44219:3878","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13321:22411":{"id":"1:13321:22411","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12341:471","self::pattern":"1:12955:3850"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12770:3817","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:3864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13386:30733":{"id":"1:13386:30733","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12916:136","`FromStr`":"1:12915:3357"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42206:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12915:3357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12915:3357","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13359:30724":{"id":"1:13359:30724","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5618:3527":{"id":"5:5618:3527","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:3864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13291:28139":{"id":"1:13291:28139","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13290:28138"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42073:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13357:30723":{"id":"1:13357:30723","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13371:26255":{"id":"1:13371:26255","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12341:471","self::pattern":"1:12955:3850"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42073:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:3864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13294:23192":{"id":"1:13294:23192","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12341:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43941:3876","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13310:2861":{"id":"1:13310:2861","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42075:191","prim@char":"4:12341:471","self::pattern":"1:12955:3850"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42073:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:3864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5636:26629":{"id":"5:5636:26629","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13392:26632"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13389:29314":{"id":"1:13389:29314","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39974:3581","Self::is_ascii":"1:13388:26626"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42073:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39974:3581","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5632:31434":{"id":"5:5632:31434","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13395:29319":{"id":"1:13395:29319","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1061:36852"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13304:28150":{"id":"1:13304:28150","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"4:12341:471","self::pattern":"1:12955:3850"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:3864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13277:28115":{"id":"1:13277:28115","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12360:1852"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29:2327":{"id":"0:29:2327","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[185,0],"end":[188,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"1:13394:29318":{"id":"1:13394:29318","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1061:36852"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13271:30713":{"id":"1:13271:30713","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:13269:30712"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13327:30718":{"id":"1:13327:30718","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12955:3850","str::split":"1:13318:26689","prim@char":"4:12341:471","`DoubleEndedIterator`":"1:8333:129","str::rsplit_terminator":"1:13330:30719"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:44015:3882","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:3864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5624:31433":{"id":"5:5624:31433","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5634:3688":{"id":"5:5634:3688","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13391:26631":{"id":"1:13391:26631","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13286:30715":{"id":"1:13286:30715","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12347:1722","str::slice_mut_unchecked":"1:13287:30716","crate::ops::Index":"1:39619:2728"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13289:28135":{"id":"1:13289:28135","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:13288:28134","str::split_at_mut_checked":"1:13291:28139"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13363:30726":{"id":"1:13363:30726","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13380:30731":{"id":"1:13380:30731","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12341:471","self::pattern":"1:12955:3850"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:3864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13297:22427":{"id":"1:13297:22427","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13296:22452"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44248:3888","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13365:30728":{"id":"1:13365:30728","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12341:471","self::pattern":"1:12955:3850"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:3864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12961:3864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12981:3865","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13280:23517":{"id":"1:13280:23517","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42075:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42073:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13348:30720":{"id":"1:13348:30720","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12955:3850","`DoubleEndedIterator`":"1:8333:129","prim@char":"4:12341:471","str::matches":"1:13345:2534"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44187:3884","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:3864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12961:3864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12976:3866","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13293:23331":{"id":"1:13293:23331","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12341:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43935:3877","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13299:30717":{"id":"1:13299:30717","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44229:3880","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28:2321":{"id":"0:28:2321","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[167,0],"end":[179,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"inner":{"macro":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"}},"1:13266:997":{"id":"1:13266:997","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12341:471"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13275:30714":{"id":"1:13275:30714","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13276:336":{"id":"1:13276:336","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13277:28115","`u8`":"4:12360:1852"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13284:23519":{"id":"1:13284:23519","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13290:28138":{"id":"1:13290:28138","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13291:28139"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42073:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13307:28151":{"id":"1:13307:28151","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12341:471","self::pattern":"1:12955:3850"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:3864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12961:3864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12976:3866","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13374:28152":{"id":"1:13374:28152","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12341:471","self::pattern":"1:12955:3850"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42073:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:3864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12961:3864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12976:3866","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13388:26626":{"id":"1:13388:26626","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13318:26689":{"id":"1:13318:26689","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12955:3850","`DoubleEndedIterator`":"1:8333:129","prim@char":"4:12341:471","str::split_whitespace":"1:13296:22452","str::rsplit":"1:13324:28142"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43965:3804","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:3864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13295:22820":{"id":"1:13295:22820","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43951:3675","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13368:30729":{"id":"1:13368:30729","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12341:471","self::pattern":"1:12955:3850"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:3864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13339:28148":{"id":"1:13339:28148","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42073:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:3864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13392:26632":{"id":"1:13392:26632","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13396:30734":{"id":"1:13396:30734","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:5021:30734"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44264:3633","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5616":{"id":"5:5616","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5617:31431","5:5618:3527","5:5621:31432","5:5624:31433","5:5632:31434","5:5633:31435","5:5634:3688","5:5635:26628","5:5636:26629"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13333:28144":{"id":"1:13333:28144","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12341:471","self::pattern":"1:12955:3850","str::rsplitn":"1:13336:28146"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44069:3806","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:3864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13361:30725":{"id":"1:13361:30725","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13383:30732":{"id":"1:13383:30732","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12341:471","self::pattern":"1:12955:3850"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:3864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12961:3864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12976:3866","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13314:2819":{"id":"1:13314:2819","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42075:191","prim@char":"4:12341:471","self::pattern":"1:12955:3850"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42073:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:3864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12961:3864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12976:3866","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13282:23518":{"id":"1:13282:23518","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13399:30735":{"id":"1:13399:30735","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:5019:30735"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44282:3632","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13287:30716":{"id":"1:13287:30716","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12347:1722","crate::ops::IndexMut":"1:3487:2729","str::slice_unchecked":"1:13286:30715"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13269:30712":{"id":"1:13269:30712","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13398:3611":{"id":"1:13398:3611","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:5022:3611"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44273:3612","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13300:23333":{"id":"1:13300:23333","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44257:3887","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13267:2820":{"id":"1:13267:2820","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13330:30719":{"id":"1:13330:30719","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12955:3850","str::split":"1:13318:26689","prim@char":"4:12341:471","str::split_terminator":"1:13327:30718"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:44033:3881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:3864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12961:3864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12976:3866","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13342:28149":{"id":"1:13342:28149","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42073:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12961:3864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12961:3864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12976:3866","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13364:30727":{"id":"1:13364:30727","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13265":{"id":"1:13265","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13266:997","1:13267:2820","1:13268:30711","1:13269:30712","1:13271:30713","1:13274:26608","1:13275:30714","1:13276:336","1:13277:28115","1:13278:2326","1:13280:23517","1:13282:23518","1:13284:23519","1:13286:30715","1:13287:30716","1:13288:28134","1:13289:28135","1:13290:28138","1:13291:28139","1:13293:23331","1:13294:23192","1:13295:22820","1:13296:22452","1:13297:22427","1:13298:26690","1:13299:30717","1:13300:23333","1:13301:23112","1:13304:28150","1:13307:28151","1:13310:2861","1:13314:2819","1:13318:26689","1:13321:22411","1:13324:28142","1:13327:30718","1:13330:30719","1:13333:28144","1:13336:28146","1:13339:28148","1:13342:28149","1:13345:2534","1:13348:30720","1:13351:30721","1:13354:30722","1:13357:30723","1:13359:30724","1:13361:30725","1:13363:30726","1:13364:30727","1:13365:30728","1:13368:30729","1:13371:26255","1:13374:28152","1:13377:30730","1:13380:30731","1:13383:30732","1:13386:30733","1:13388:26626","1:13389:29314","1:13390:26630","1:13391:26631","1:13392:26632","1:13393:29317","1:13394:29318","1:13395:29319","1:13396:30734","1:13398:3611","1:13399:30735"],"negative":false,"synthetic":false,"blanket_impl":null}}}},"paths":{"11:123:3196":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"16:8118:17148":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"4:128:2468":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"1:3826:70":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"4:9142:9623":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:1686:11038":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"4:6847:2694":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"16:5995:17068":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"5:2102:3233":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:41062:3722":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:4449:24072":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:3285:2726":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"16:2878:16152":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"11:102:32646":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:5624:14166":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"4:6712:2693":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:8202:17153":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"11:875:9358":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"4:11654:26266":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:4803:2652":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"5:2127:9375":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"6:6471:14860":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"18:623:33917":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"11:2562:32649":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:33945:2714":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"4:4811:27332":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"17:13753:20713":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:40461:3640":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:2838:16150":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"4:4161:9518":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"4:3480:9478":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:40765:3703":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:6417:14855":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:44115:3885":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"4:10718:9493":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"1:44397:3905":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"5:1540:9351":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"4:11787:9509":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:3458:142":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"4:8548:3878":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"5:6968:9708":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"16:4502:16687":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:3038:123":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"17:12213:17475":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:43118:137":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:42198:3741":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"17:15769:21539":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"5:6775:30113":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:4811:14082":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"5:7132:30155":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:6435:14856":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:5598:14164":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:13959:20723":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:7539:17124":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:3204:117":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"17:14271:20743":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:6976:17111":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:11510:17315":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:46017:9051":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:11242:17306":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:12189:17473":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"4:1855:9388":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"1:21741:8998":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"5:1570:9355":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"4:6352:3293":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"6:6874:14917":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"4:4481:9553":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"5:304:2635":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"16:4940:16803":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"4:9112:9621":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"6:6478:14861":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:1699:11039":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"4:11931:16085":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:13581:20227":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:11324:17335":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"11:2352:9361":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"16:7052:17114":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"4:4348:9551":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:14529:20761":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"18:491:33925":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:7429:11145":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:10671:33873":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:43354:23036":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:13173:17533":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"16:4856:16788":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"7:79:15899":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:10284:17240":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:10877:17250":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"18:613:33910":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:10391:3766":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"4:5959:2681":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"6:5314:14133":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:41895:23056":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"4:7875:17230":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"18:659:21743":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"4:9350:26274":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"4:2070:197":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:44703:3862":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"4:5083:9575":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:43911:3875":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"4:8650:9579":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:4587:16703":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:3446:2632":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"4:968:3207":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"4:5441:203":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"1:47108:9026":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"4:3553:3604":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"17:14977:21481":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:2035:3509":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:44687:3860":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"6:1485:11017":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:40505:3634":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:40756:3278":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:14341:20748":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:12408:17471":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:513:17229":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:16138:21707":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"1:13577:24438":{"crate_id":1,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"4:1625:9364":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:3699:2660":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:11755:17380":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:13509:20222":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"16:4352:16606":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:32306:2630":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:43790:3810":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:46192:9052":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"4:9317:27547":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:44961:24570":{"crate_id":1,"path":["core","task","wake","ExtData"],"kind":"enum"},"4:12364:1828":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"1:13029:3896":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:43771:3800":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:10661:17246":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"5:7385:2824":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:13252:20205":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:39673:212":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:8247:3700":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"16:6231:17075":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:10185:17207":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:23181:22769":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"1:10825:24327":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"6:5134:14114":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:44551:3911":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"5:956:3231":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:42373:86":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:46209:9058":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"14:160:16052":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:44882:150":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"4:7944:26517":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:44489:3908":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"4:6916:233":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:3899:16222":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"11:396:3205":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:2593:672":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"4:6400:26348":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"11:299:3199":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:4614:16707":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:3430:2661":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:40422:3639":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:5020:14104":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:4881:2655":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:7389:11162":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"9:330:15977":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:40687:3670":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"9:0:2560":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:7780:23131":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"4:10353:3269":{"crate_id":4,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"16:2612:16140":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:14356:20749":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:15778:21540":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:10170:17052":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:47207:8982":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:9886:17233":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"4:586:3254":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"4:1619:9363":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"16:7580:17128":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"4:9425:2691":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"17:15957:21700":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"17:11051:17298":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"4:11648:9627":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:13325:20209":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:3455:141":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"5:3263:30604":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:5457:14149":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"16:867:33107":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"16:6504:17091":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:42529:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"16:6342:33132":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"4:7988:9450":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"1:45979:9040":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"4:11923:16085":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:43892:3292":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:46549:9007":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:12201:17474":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"18:515:21753":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:3196:16158":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"5:680:30194":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:15092:21486":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"5:7668:9686":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:7452:15297":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:10622:33896":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:10600:153":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"17:10317:17241":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"4:9129:9622":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"4:2477:9433":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"6:6447:14858":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:15678:21533":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:12074:3561":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"4:8617:9544":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:14079:20732":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:5756:17057":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:8253:14332":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:9858:17232":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"4:4801:9518":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:47248:8985":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:44069:3806":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"9:502:15924":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:11788:17428":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"4:10724:9491":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"11:351:32656":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"17:12659:17489":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:13797:20714":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:11497:17316":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:8251:3699":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:6300:17077":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"3:0:2557":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"4:6276:26509":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"5:7634:9676":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"6:0:1002":{"crate_id":6,"path":["libc"],"kind":"module"},"17:11042:17273":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:5677:14173":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:13146:17532":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:5565:14161":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"4:4097:9514":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:39651:210":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"17:14284:20744":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"5:3674:3232":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"11:1603:16044":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:12887:17257":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:7602:15307":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"9:424:15923":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:3417:124":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:2708:16144":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:42117:2824":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"18:706:3867":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:15799:21541":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"5:3820:3236":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"16:6398:17082":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"14:187:16060":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:10393:3767":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"17:14933:21479":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:11898:17408":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:10092:17238":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:44699:3861":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:586:10135":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"4:5509:128":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"9:238:9604":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:14847:21474":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:5630:14167":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"1:45915:9039":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"11:673:3231":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:6412:17083":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"17:16032:20205":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"16:6802:16070":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"5:7435:30587":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"18:765:21742":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"4:9451:9453":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"16:5831:17062":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"4:1838:696":{"crate_id":4,"path":["std","env"],"kind":"module"},"18:608:33936":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:11501:3807":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:12328:17442":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:6268:3704":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:8006:15676":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:12724:17253":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"11:1676:32659":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"4:6676:2685":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"4:3900:9508":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:6689:14877":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"17:11730:17378":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"11:364:3203":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:5244:14124":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:43554:22775":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"4:10976:3259":{"crate_id":4,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"16:7888:17144":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"4:12367:1419":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"17:11841:17430":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:12494:17449":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:44239:3879":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:9984:17236":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"5:3805:3233":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:1503:11020":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"5:4515:30136":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"5:1739:30113":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:13308:20208":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:12486:3797":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"5:2302:30547":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"4:12352:738":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"17:12969:17206":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:43711:24566":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"4:12365:966":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"16:3014:16156":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:497:10124":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:15301:21504":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"4:3026:3257":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:40743:3709":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"4:1853:9387":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"4:10938:26308":{"crate_id":4,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"4:12347:1722":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"17:11016:17271":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:43850:3813":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:4066:2824":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:30720:22188":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"17:14386:20751":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:2936:16154":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:46437:9041":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:40386:3612":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:8247:14331":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:12851:17255":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:14298:20745":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:14986:21482":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:2966:258":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"17:15748:21537":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:15931:20202":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"1:43315:3786":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"11:2231:16037":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"5:1478:3231":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:2338:16127":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:15197:21495":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"6:465:10119":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"4:4002:9510":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:5344:14137":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"5:7493:2824":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"13:0:2558":{"crate_id":13,"path":["std_detect"],"kind":"module"},"11:2326:3213":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"4:11699:27361":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:2037:17323":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:10137:17202":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:7355:17118":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:4531:16693":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"4:1610:3237":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:41072:3723":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:21908:9450":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"4:11286:162":{"crate_id":4,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"1:6972:23216":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"17:13674:20710":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:22191:9450":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:42189:2895":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:15418:21516":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:4942:14094":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:39974:3581":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:44940:3952":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"16:2636:16141":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"4:674:9331":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"16:6895:17107":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:8093:17147":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"11:1107:3215":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"4:8344:26376":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"17:12056:17393":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:15390:21513":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:4992:14101":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:12516:17501":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"11:1025:3213":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:9781:17231":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:6714:14880":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"1:46000:9045":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:14235:20740":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:5415:33067":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:2153:3282":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"4:974:9358":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:16187:21711":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:15356:21509":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:43872:3291":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:6721:14881":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"16:6160:16097":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:22351:8996":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"5:5729:9706":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"4:12361:1834":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"17:15473:21522":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"4:11682:26285":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:40734:3702":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:11089:17283":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:39539:2739":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:13046:17215":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:10710:17247":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:5781:17059":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:3654:254":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:7306:10172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:7098:32988":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:10818:17249":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:4824:14083":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"4:4880:9556":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:15383:21512":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:4986:17502":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"4:11668:26304":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"5:1493:3232":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:4924:14092":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:5671:14172":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:46046:9005":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"5:1559:9354":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"4:3430:9491":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"4:4209:9521":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"11:2542:23137":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:15368:21510":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:42648:97":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:9916:17234":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:22708:9120":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:7716:3647":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:38216:2720":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:43324:157":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"4:8852:9607":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"1:10648:3785":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:44383:3904":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:11189:17284":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:4729:2644":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:21918:8995":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:40433:22122":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"18:573:33904":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"4:9265:2683":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:15102:21487":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"11:837:9356":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:7144:17116":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:2572:16138":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"4:12358:903":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"17:14587:20764":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:22575:23064":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"1:22788:22208":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:5219:14121":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"4:1997:9417":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"11:883:9359":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"16:2748:16146":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:11341:17321":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"13:229:32675":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:46482:9047":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"4:6793:2688":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:45021:23270":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"6:5502:14155":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"4:8257:9485":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:3452:140":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"11:800:3237":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:10350:17242":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"5:5934:3237":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"18:563:21756":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:0:563":{"crate_id":1,"path":["core"],"kind":"module"},"4:1603:3231":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:7561:15304":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:5266:14127":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"18:635:33911":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:819:190":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"16:6480:17089":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:10403:3771":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:6353:17080":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"4:10994:26548":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"4:980:9359":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:14012:20727":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"4:11848:9510":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"4:4666:9556":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"4:5162:9585":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"17:12485:17485":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"4:12339:417":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"16:5897:17065":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:12792:17212":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"5:5230:2678":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:6278:17076":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"5:3042:30104":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"4:9202:9631":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"9:482:15920":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"4:10495:113":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"17:15646:21531":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"5:2770:30559":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:46405:22761":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:14994:21470":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"6:8306:14340":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:7485:15300":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"5:7743:9703":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:12175:17461":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"6:5536:14158":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:4468:16676":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:15116:21488":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"4:12342:1874":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"1:3671:2736":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:46422:22770":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:8197:15839":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:8301:17157":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"4:3432:9492":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:42001:3735":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:15190:21494":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:5415:14145":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:11419:17248":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"18:735:21741":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:12089:17390":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:6900:14918":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"4:3671:9470":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"16:5846:17063":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"4:10334:9398":{"crate_id":4,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"1:3933:3237":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"6:5557:14160":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"5:1355:3213":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:8294:14338":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:46623:9019":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:15249:21499":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:7823:17142":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:2963:144":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:33666:2711":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:43924:3874":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:13089:17530":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:9938:17235":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:7528:17123":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"5:1509:2824":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"18:113:21730":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:15445:21519":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:8003:3684":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:42206:226":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"17:12278:17476":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"4:669:9330":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:2933:9450":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:13877:20719":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:40865:3705":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"4:4400:9552":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:2805:202":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"4:9433:162":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"1:40498:3633":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"4:4688:9557":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:15608:21527":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:42568:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"18:698:21747":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:6532:17092":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:4743:16767":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:6966:3706":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"4:5329:204":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"17:13785:17435":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:46777:9008":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:5191:14118":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:12251:17446":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:5370:14140":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:15434:21518":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:12557:17288":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"5:7582:9419":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"4:8182:9445":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"17:12107:17248":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:44592:3869":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:11605:17368":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"18:598:33914":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"11:1923:9366":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"16:6940:32887":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"5:6934:9706":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:12353:17478":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"4:2489:9439":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"1:47167:8978":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:46682:22723":{"crate_id":1,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"17:12150:17395":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:8012:15677":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"4:2479:9434":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"1:10399:206":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"4:6861:2695":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"17:11115:17281":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:44033:3881":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:2957:76":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:13617:3714":{"crate_id":1,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"17:11026:17272":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:12388:17470":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:12371:17259":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:46644:9025":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:12443:17472":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:45964:9010":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:4909:14090":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:7397:33125":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:3684:22674":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:6788:31992":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:14051:20730":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:8029:15678":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:12621:17495":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"11:742:9355":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"4:8249:27500":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"4:2316:9426":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"16:5307:17032":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"16:2998:16155":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"11:2403:3232":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:13884:3293":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"16:2438:16132":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:3260:2708":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:31094:3575":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:42806:3769":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:13211:20203":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:11583:17343":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:44679:3855":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"17:14212:20739":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:32305:237":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:43539:3847":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:40714:3701":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:44273:3612":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"4:8216:139":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"1:40897:3719":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:11595:17373":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"4:9296:26205":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:10184:3782":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"5:7610:9420":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:816:3360":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"17:10759:17248":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"4:8541:3804":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"1:11045:239":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:44691:3859":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:12716:3891":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:43307:22996":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"4:0:1714":{"crate_id":4,"path":["std"],"kind":"module"},"1:21800:8997":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"4:367:9323":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"4:9469:9638":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:1707:11040":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:5445:14148":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"6:6491:14817":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:43558:3823":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"5:7376:9372":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"4:3059:226":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"6:6519:14862":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:22487:9126":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"6:5236:14123":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:8753:3645":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"4:12360:1852":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"4:8862:3231":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"17:1207:17293":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"11:687:3232":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"4:12362:1840":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"1:44087:3802":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:11321:3805":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:5336:14136":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"5:3251:3231":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:16198:21712":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"4:9393:187":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:4602:2665":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:11256:17307":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"4:10355:27514":{"crate_id":4,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"16:5006:16823":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"4:10947:9446":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"17:11557:17371":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"4:12344:1314":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"1:40794:3711":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:42271:196":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:7132:32852":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"5:3292:9363":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:22577:3545":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"11:811:9352":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"5:4451:30136":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:33599:2713":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"4:3604:3258":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:7516:15301":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:11915:17433":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"4:8654:9581":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:15324:21506":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:1593:11030":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:1098:17285":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"4:10227:22259":{"crate_id":4,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"4:957:9357":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:2728:16145":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"4:8797:9605":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:7549:17125":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"5:7465:30031":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:26121:267":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"4:5632:9617":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"6:5296:14131":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"4:2309:9425":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"4:11225:26545":{"crate_id":4,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:16105:21705":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:5286:24500":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:3244:3593":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"17:12707:17252":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:13344:20210":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:4837:14084":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:10905:17251":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"14:202:9684":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:3255:2703":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"17:9737:17203":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"17:15720:21535":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:42168:2800":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"4:617:9326":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"4:943:9354":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:0:505":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"17:11269:17308":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:13941:152":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:46032:9057":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"4:8078:9405":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"17:12422:17481":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"18:581:3575":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:13015:17218":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"4:4133:9515":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:40826:3714":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:39751:2731":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"5:839:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:13946:20722":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"5:7393:9370":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:15616:21528":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"4:8599:3736":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:14599:20765":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:8288:14337":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:11214:17279":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:32364:2631":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"9:392:15922":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"5:3046:30103":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:12362:17479":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"11:1087:32667":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"11:2569:9346":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:5200:14119":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"5:7645:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"4:3835:9505":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:47187:8980":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:8300:14339":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:46084:9017":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:7831:3681":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:32365:3595":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:5722:17055":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:5002:14102":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"4:1083:3213":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:16069:21702":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"6:5352:14138":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"4:10512:3270":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"4:12127:26537":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:14131:20735":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:12464:17483":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:22661:9450":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"4:11108:26523":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"5:2220:30577":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"14:214:16061":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"16:8136:17149":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:11282:3817":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"16:7111:32851":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:7509:17122":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"4:10964:27363":{"crate_id":4,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"1:43965:3804":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"4:1968:9416":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"16:8259:17156":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:10018:17209":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"15:306:16077":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:44768:3924":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:22218:3798":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:43346:23009":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:16093:21704":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"6:6821:14890":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:13526:20223":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"4:4921:9533":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:479:10121":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:5225:14122":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:6962:17110":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:12768:17210":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:11574:16037":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:4971:14098":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:6609:14868":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:2234:17342":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"4:8339:27546":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"5:1204:30645":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"5:1531:9350":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:14475:20757":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"4:9229:9632":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:2934:3340":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:41295:3687":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:13774:17434":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:5483:14153":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"16:2592:16139":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:1628:11032":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:42609:90":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:32275:17156":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"6:1565:11027":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:47129:9060":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:14325:20747":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:4800:14081":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:5423:14146":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:46253:9012":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:8175:17151":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:42412:93":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:5014:14103":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:30709:3560":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"11:2554:32654":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:43951:3675":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:15624:21529":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:2028:671":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"4:650:9327":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"16:4424:16655":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:11799:17429":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"11:2548:32648":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:44264:3633":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:8265:14334":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:43025:23316":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:10997:17270":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"4:11631:27355":{"crate_id":4,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"1:43780:3288":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:7769:17139":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:11035:9450":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"5:1077:30113":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:12508:17486":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:2768:16147":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:6543:17093":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:10842:24323":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:40392:3616":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:10399:3675":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:6650:14872":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:39623:2730":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:13594:20228":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:13553:20225":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:42246:3231":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:10389:128":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:44169:3883":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"17:11743:17379":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"5:3297:30608":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:12543:17491":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"16:2374:16129":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:13363:20211":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:32271:24208":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"17:15992:21701":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"6:5636:14168":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:13706:205":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"6:7461:15298":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:6768:14887":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"1:10039:22922":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"5:5077:3604":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:11227:17278":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"4:9415:235":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"11:1917:9365":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:23247:22765":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"6:491:10123":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"4:12354:733":{"crate_id":4,"path":["std","f128"],"kind":"primitive"},"17:12030:17394":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:545:10129":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:15206:21496":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"5:2249:30099":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:11621:17346":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:46384:22764":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:5329:14135":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"4:1891:9398":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"1:8750:149":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"14:0:2564":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"4:3523:3689":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"16:6588:17096":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"4:12341:471":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"6:6880:13995":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"4:2713:24323":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:16121:21706":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"5:6433:9641":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"17:14463:20756":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:5466:14150":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:46067:9011":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:41979:22262":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:13738:20712":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:16235:21715":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"1:39619:2728":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:43336:9604":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"17:13568:20226":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"4:10764:3271":{"crate_id":4,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"17:437:16100":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:43101:3560":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:42262:2824":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:33800:2712":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"4:8498:9449":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"4:5838:3260":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:46128:9078":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:41301:3689":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:22196:9000":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"6:5653:14170":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"6:6657:14873":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"16:6606:17097":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:44347:3902":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:2960:163":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"5:40:9383":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:12264:17445":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"4:5582:9614":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"4:752:154":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"4:666:9329":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:6335:17079":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"16:5400:17052":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"5:4481:3604":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"6:5083:14110":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:12955:3850":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"17:256:33107":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:14111:20734":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:22616:9129":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"16:7428:17119":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:12454:17482":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"16:4560:16699":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"11:328:32651":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:21920:8994":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"11:1910:9364":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:22841:22092":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:32394:3479":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"17:11524:17369":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:12342:17444":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:11853:17431":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:11661:17345":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:6047:17070":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"16:6433:17085":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"4:5845:9628":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:6079:17072":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:7695:17135":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:6466:17088":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"11:832:9353":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:15569:21524":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:6811:14889":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:3340:2717":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"4:1069:9360":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:13986:20725":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"4:562:3251":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"1:44683:3858":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:8351:15876":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:6738:14883":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"1:40637:3672":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"5:7595:3674":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:15376:21511":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"4:10647:26528":{"crate_id":4,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"6:7546:15303":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:1952:3604":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"4:8625:9507":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"11:2469:9352":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:42092:173":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"4:10721:9495":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"17:14503:20759":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:7813:17141":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:5092:3625":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:23111:9450":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"1:2768:134":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"16:5927:17066":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:10439:17243":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:44229:3880":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"16:6749:17102":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"4:8241:9348":{"crate_id":4,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"1:23059:23248":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"16:6665:17101":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"4:8194:9446":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"6:8317:14341":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"4:909:9351":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"4:2735:9475":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:13844:20717":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:4916:14091":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:5382:14142":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:15655:21532":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:13187:20202":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"16:6385:17081":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:10982:17269":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"16:5802:17060":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"4:8554:9507":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:2355:16128":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:5347:17049":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:4571:2664":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"4:9244:9635":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:3399:2737":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:38381:2723":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:2707:102":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:42073:194":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:36340:2719":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"4:3297:27987":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"11:1582:3219":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"4:4103:9513":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"4:12351:735":{"crate_id":4,"path":["std","f16"],"kind":"primitive"},"17:14414:20753":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:10419:17204":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:14177:20737":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:10044:17237":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"16:6560:17094":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"4:3661:9448":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"5:7449:2824":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:16223:21714":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"1:2144:23264":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:41813:170":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"4:2067:198":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:31067:196":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"17:11567:17372":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:8304:2634":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:5489:14154":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"6:5361:14139":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:6849:17105":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"4:521:9305":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:15426:21517":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:5981:3604":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"6:5376:14141":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:5588:14163":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:843:9367":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:13473:20219":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"5:1581:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:5260:14126":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:6927:17108":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"4:11827:9508":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"4:12363:1846":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"1:32836:2705":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:13399:20214":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:11467:17322":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"4:10917:27318":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"1:47222:8983":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:40649:3675":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"4:10985:26550":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:44948:3953":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"5:3410:9352":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:15342:21508":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:42451:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"5:3040:30609":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:6542:14865":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:473:10120":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"4:4297:27617":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"4:10927:9442":{"crate_id":4,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"1:44757:3923":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:12976:3866":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:34464:2718":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:5107:16855":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"5:7540:9346":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"5:219:3221":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:11102:17282":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:16165:21709":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"4:11201:9622":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"11:1903:9363":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:1535:11024":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:2322:30083":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:5436:14147":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"5:4162:3232":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:41851:3733":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:46224:9006":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:40707:3678":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:41286:2473":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:4979:14099":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:23159:22762":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"6:5277:14128":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:5064:14109":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"4:8528:3722":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"4:4975:9534":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:9755:17201":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"6:8259:14333":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:5039:14106":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"4:11005:9406":{"crate_id":4,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"11:774:9350":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:12961:3864":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:2660:16142":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:3473:17396":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"4:8349:9487":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:46274:9018":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:1680:11037":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:5283:14129":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"6:4885:14088":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:7473:17120":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:11865:17432":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:872:33133":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"1:8333:129":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"4:888:2824":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:3264:17391":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"4:7478:27614":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"16:2458:16133":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"16:6066:17071":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"4:8230:127":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:40448:3638":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:9857:91":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"4:1092:9361":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:40606:106":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"4:951:9356":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"4:12292:26275":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:12671:17525":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"16:2684:16143":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:44187:3884":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:30433:3341":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"6:6678:14876":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:523:10126":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:40622:3674":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:23148:22759":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"17:9671:17205":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:43983:3808":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:22997:22210":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"4:9155:9624":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"11:2304:9360":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:12656:3892":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:13594:3949":{"crate_id":1,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"4:3643:3644":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"17:11547:17370":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:46338:9080":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"5:5422:30113":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:41310:3691":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:8441:178":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"4:12346:1688":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"1:40544:3635":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:40593:3631":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:44711:3857":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"5:7551:9347":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:6154:3713":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"4:896:9350":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"4:9214:9634":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"5:7425:9376":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"18:726:21748":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:13235:20204":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:5250:14125":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:11394:3808":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"4:9726:3268":{"crate_id":4,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"17:11688:17341":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"4:9283:115":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"4:1916:3256":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"1:3202:2659":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"4:9185:9633":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:14752:21472":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"4:947:9355":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:11443:17324":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:47176:8979":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:40888:3718":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:23225:22767":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"4:8535:3675":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"4:4195:9519":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:7359:15295":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"10:36:32645":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"6:532:10127":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:7610:2832":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:5581:14162":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"4:1607:2824":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:10887:33889":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"4:5952:2680":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:11764:17381":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"4:7360:27066":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:6532:14864":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"4:11764:3273":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"4:12355:909":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"4:9324:26364":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"4:12359:884":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"4:5596:9615":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"1:3270:2706":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:6977:23315":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"6:4870:14086":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:13861:115":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"4:5770:9619":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"17:13064:17214":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:4965:14097":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:44907:207":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:3665:2734":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:12863:17256":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"5:1590:9374":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:6670:14875":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:15822:21543":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:5112:14112":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:5366:977":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:41279:3685":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:40927:3721":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:1653:11034":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:3842:16188":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:2970:257":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"4:8560:9506":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:23079:3359":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:5174:9540":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"4:4877:9578":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:23721:236":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"18:754:21749":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:23214:22721":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"16:7379:33108":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:7618:17131":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"4:8058:9334":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"4:8709:9589":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"4:938:9353":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"4:12313:9336":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:10340:3644":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"4:9289:9310":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"16:3669:16162":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:15582:21525":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:14545:20762":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:15410:21515":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"16:2394:16130":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:2607:3545":{"crate_id":1,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"17:15176:21493":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:13832:20716":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"16:7648:17132":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:6409:14854":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:2203:17317":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:13292:20207":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:5306:14132":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:33733:2710":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:6756:14885":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"16:3029:16157":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:22959:22247":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"4:10957:139":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"13:110:32674":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"9:447:15921":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:7330:10001":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:13723:20711":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"4:9329:26366":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:39636:213":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:10251:17239":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:12949:17260":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:6782:17103":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"4:5831:220":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:10218:17208":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:3659:146":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:6775:14888":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"6:1510:11021":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:6991:32883":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:14025:20728":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:11142:17248":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"5:3050:30102":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"4:7989:9325":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"16:5960:17067":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:2902:16153":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:12683:17494":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"6:6729:14882":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"1:4:1256":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:4976:16816":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:12981:3865":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"4:11090:26519":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:4912:2656":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:11063:17292":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:44733:130":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"17:3597:17414":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"4:4147:9516":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"19:0:1291":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:10573:33876":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:1692:9541":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"4:11693:27377":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"4:10922:27372":{"crate_id":4,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"17:11493:17329":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:13116:17531":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:11166:17286":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:9852:84":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:12478:17484":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:15078:17287":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"11:2124:9360":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"18:538:21755":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:22349:9450":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"5:2210:9305":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:8759:3698":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"16:7306:33129":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:16050:20206":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"1:5265:435":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:22230:24452":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"4:2629:9483":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:42295:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:22443:9125":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:11153:17249":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"6:6664:14874":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:7537:15302":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:14246:20741":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:5817:17061":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:14876:21477":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:7061:17115":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:11812:17387":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:2065:1358":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"4:12366:1912":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"5:3039:2885":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:12647:17490":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"4:11268:26282":{"crate_id":4,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"16:6620:17098":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:23192:22757":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"1:39788:3591":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:10044:23014":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:22563:9128":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"1:22703:9122":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"17:11634:17344":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:5290:14130":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:15039:21485":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:13999:20726":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:10769:33894":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:6120:17074":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:13272:20206":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"4:922:3237":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"16:7741:17137":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:14868:21476":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"5:939:9369":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:4952:14095":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:3644:2732":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"5:1168:30644":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"4:4335:9550":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"5:4938:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:32289:2652":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"18:531:21754":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"4:8265:3233":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"5:7107:30151":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"4:12357:897":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"4:12345:335":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"4:4766:9574":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:10759:3831":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:3290:2727":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"5:5466:9678":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:11773:17427":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"5:7485:2824":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"9:357:15937":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:12502:3870":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:45900:9003":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:15313:21505":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"18:521:21750":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:38960:2724":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:14968:21480":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"4:4205:9520":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"5:4117:30113":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"11:434:32662":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:7412:11147":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:7570:17127":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:5546:14159":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"4:8879:9609":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"5:6693:2824":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"16:2418:16131":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"4:9398:2684":{"crate_id":4,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"11:787:9351":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:12033:3816":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"4:3061:137":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"1:39575:2738":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:14516:20760":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:1723:11041":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:4932:14093":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:15760:21538":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:4830:16785":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"4:9410:234":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"4:9551:3255":{"crate_id":4,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"6:7584:15306":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"11:856:3207":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"14:31:16052":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"5:4436:265":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"5:1340:9361":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:15456:21520":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:21675:24462":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"1:44715:3922":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"6:5031:14105":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:2219:189":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"5:6019:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"16:7633:32839":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"4:494:26515":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"12:0:2563":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"11:700:2824":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:30694:3500":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:43811:3814":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"4:6790:2687":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:46976:9048":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:6634:17099":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:34118:2715":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"4:4919:9532":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"5:3661:3231":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"5:7622:9421":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:46171:9046":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"11:2443:3237":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:12584:17249":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"17:15463:21521":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:7467:15299":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"4:6672:2473":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"1:22:817":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"1:4461:109":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"10:0:2561":{"crate_id":10,"path":["adler"],"kind":"module"},"16:7727:17136":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"4:1631:9365":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:21709:24454":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:43863:3811":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"4:9278:26367":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"15:288:16076":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:14788:21473":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"4:5106:9577":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:43035:3560":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:41320:3693":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:4771:16772":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:10643:3784":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:2854:16151":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"4:11360:9423":{"crate_id":4,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"4:2004:785":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"4:11013:9618":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"1:44133:3886":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:41835:3732":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:517:10125":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:538:10128":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:15944:20203":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"6:4891:13920":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:2303:16098":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:4787:14080":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"5:1184:3223":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"4:4217:9523":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"5:1549:9353":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:21690:24459":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"5:1441:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:3329:16159":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:13437:20217":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:10534:33872":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:8295:165":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"4:5283:27520":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:46142:8992":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:1559:11026":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:21663:24462":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"4:11513:26532":{"crate_id":4,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"16:2808:16149":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:40482:3632":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:44368:3903":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"16:3810:16179":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:4360:3604":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"4:9743:127":{"crate_id":4,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"4:1636:9366":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"4:8236:9349":{"crate_id":4,"path":["std","hash","random","RandomState"],"kind":"struct"},"17:14091:20733":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:12470:3795":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:13996:3956":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"16:8216:17154":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"4:8606:9554":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:32282:23133":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:15596:21526":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:21707:24466":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:23269:22725":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"1:39691:215":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"16:7014:17113":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:4850:2653":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:553:10130":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:5385:17051":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:3209:247":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"6:6746:14884":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"1:4503:3615":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"11:2140:3213":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"4:7144:9639":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:15138:21490":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:5160:14116":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:1547:11025":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:6505:14818":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"4:3336:9494":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:6948:17109":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:23236:22768":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"1:10608:157":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"16:7686:17134":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:2175:17357":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"4:8187:9442":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"4:5986:2682":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"4:6455:3260":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:11239:3804":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"16:7799:17140":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:15281:21502":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:42799:3768":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:23066:3373":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"16:7604:17130":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:10155:17051":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:8271:14335":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"16:5075:16846":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:43093:73":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"4:8030:3271":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"4:12340:1174":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"17:12993:17261":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:22630:3545":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"6:485:10122":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:45932:9044":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"16:7910:17145":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:44257:3887":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:40471:3641":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:15701:21534":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"16:4913:16799":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"4:11102:26522":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:11392:17319":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:234:226":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:46113:9072":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"5:5470:9679":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:6915:14919":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"4:5252:27520":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"4:3586:9447":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"1:40578:3636":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"6:1517:11022":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:12399:17480":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"4:5092:9576":{"crate_id":4,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"17:15266:21500":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:6706:14879":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"17:10720:33885":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:6456:17087":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:2323:16126":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:43837:3701":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"5:7415:9371":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:10954:17268":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:6574:17095":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"4:8868:9608":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"1:46594:9013":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"5:2539:3224":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:23090:3374":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:15222:21498":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:40490:3612":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:6460:14859":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"11:1896:9352":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:15010:21483":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:44526:3909":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"4:11028:26292":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"16:6872:17106":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:5122:14113":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"5:2116:3236":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"5:4252:3604":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:13814:20715":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:7857:17143":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"4:6031:2692":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"4:7723:26377":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"18:96:21729":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"14:165:16053":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"5:3754:30113":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"4:932:9352":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"4:7885:27063":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"4:3334:9493":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:13485:20220":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:3049:137":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"6:6629:14870":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:47301:8988":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"4:11916:27506":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"11:2151:9361":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:5665:14171":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"4:5648:113":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"6:578:10134":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:16212:21713":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"1:4724:2643":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"10:44:16031":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"6:6636:14871":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:6597:14867":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"4:5702:9618":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"16:0:2566":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:39731:216":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:22981:22224":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"4:10604:9621":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"9:53:15940":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:12695:17493":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:47233:8984":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:47150:9081":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"16:6813:17104":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"4:8631:9547":{"crate_id":4,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"17:16151:21708":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"1:39781:2733":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:40835:3715":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"4:9406:3604":{"crate_id":4,"path":["std","sync","poison","Guard"],"kind":"struct"},"17:14449:20755":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:47286:8987":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:7348:15294":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:14260:20742":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:45947:9004":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:12929:17259":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"11:1883:3231":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:2340:3285":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:46661:9074":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:12900:17258":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:3581:211":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:1671:11036":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:11715:17377":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"16:6494:17090":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:2954:77":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"5:3318:9366":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:6077:3604":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"6:6621:14869":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:39711:214":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:44015:3882":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:44885:164":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"5:883:9368":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:30656:3531":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:11214:3232":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:10828:33871":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"11:1891:3237":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:8284:145":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"4:3294:27991":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:44707:3856":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"4:4327:9549":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"5:6566:3237":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:47363:8990":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"16:5742:17056":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:4859:2654":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"4:10421:9626":{"crate_id":4,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"4:8204:9443":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"18:481:21751":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"4:6566:186":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"8:0:2559":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:16079:21703":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"16:7497:17121":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:10612:17245":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:11487:3802":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"0:0:2321":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"5:7059:264":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"4:8488:3259":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"6:564:10132":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"4:12348:1812":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"17:14489:20758":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"4:6177:3260":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"16:5686:17053":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:570:10133":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:33532:2709":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"5:743:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"16:8155:17150":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"5:6414:9640":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:32307:244":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:5367:17050":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"5:3885:9352":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"16:5863:17064":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:12225:17448":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:5407:1243":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"4:12368:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"17:15734:21536":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:14560:20763":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"4:9420:2690":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"1:41272:23320":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"16:3778:16170":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"4:1614:9352":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"16:7168:17117":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:47050:9054":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:10395:3768":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:7339:15293":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:42109:3232":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"4:2535:2494":{"crate_id":4,"path":["std","io"],"kind":"module"},"17:16249:21716":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:12693:3894":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"4:9163:3231":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:41867:3734":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:11647:17374":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:4650:2470":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:2609:3546":{"crate_id":1,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"17:13375:20212":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:23258:22719":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"1:8063:2642":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"16:8073:17146":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"4:3387:9495":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"6:1526:11023":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:12433:17218":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:15058:21469":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:22675:9121":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"16:7590:17129":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"4:7403:26538":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"11:2536:32655":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:4720:221":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"17:13455:20218":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"6:6379:14789":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:6562:14866":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"5:1324:9360":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:5400:14144":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:16176:21710":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"1:43299:3787":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:6698:14878":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"1:42035:3737":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:6441:14857":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"18:670:21744":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:4062:16339":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:14402:20752":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:3487:2729":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"4:4815:27336":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"4:9370:26264":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:10457:138":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:22925:22238":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"4:12308:26356":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:42101:3231":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:42157:2798":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"5:7457:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"5:1369:9362":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:44219:3878":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:40659:3656":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"6:5320:14134":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:7006:17112":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"4:12324:26271":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:43941:3876":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:12300:17477":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:21812:8994":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:3090:3586":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"6:6524:14863":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:5472:14151":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"4:2312:3551":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"6:8341:15875":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:0:2567":{"crate_id":17,"path":["object"],"kind":"module"},"1:12732:3893":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:1490:11018":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:14912:21478":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:44248:3888":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:15:2535":{"crate_id":1,"path":["core","write"],"kind":"macro"},"17:12530:17492":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"17:403:17228":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"4:426:185":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:40784:133":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:15836:21544":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"15:327:16081":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:44695:3863":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"4:8072:9335":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:15400:21514":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:13538:20224":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"16:2508:16135":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:7314:10976":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"4:8007:9314":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"4:11609:27541":{"crate_id":4,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"4:4917:9529":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:44462:3907":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:12076:17389":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"4:3897:9509":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"5:4087:3237":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:12970:3867":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"16:6442:17086":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:2132:3564":{"crate_id":1,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"18:718:21740":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"16:8226:17155":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"4:11316:27378":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:8282:14336":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"4:11214:9623":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:5324:3677":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"6:4959:14096":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:5052:14108":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:1580:11028":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:22909:23017":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"18:507:33904":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:7321:2797":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:46854:9042":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:40585:3637":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"struct"},"1:42167:2801":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:16259:20213":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"6:5515:14156":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"14:220:16062":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:9807:17217":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:12127:17397":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"11:1160:9362":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"4:7331:26530":{"crate_id":4,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:10068:17216":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:3736:2663":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:4985:14100":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"5:5864:251":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:44414:3906":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:1496:11019":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:15273:21501":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:13606:20229":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:40803:3712":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:21739:9450":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"4:1914:3255":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"4:878:3232":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:11674:17375":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:46355:22760":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"5:6176:3604":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:12318:17260":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:1186:2472":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"17:15168:21492":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:44899:227":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:21794:8993":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:5643:14169":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:1585:11029":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:38326:2722":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"11:2423:2824":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1:2130:3563":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:12808:17213":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"4:9337:17117":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:44972:3951":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"1:12915:3357":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:4821:17496":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"1:44574:3868":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"6:5477:14152":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:41086:3724":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:23017:22206":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"4:1101:9362":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:2548:16137":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:3614:16161":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:43882:3812":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:15635:21530":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:6648:17100":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:22948:3358":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:12000:3815":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"4:8012:9316":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"17:13424:20216":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:15126:21489":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:14575:17218":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:10524:17244":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"4:8177:9444":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"1:11359:3818":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"9:178:16026":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:4882:16791":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:1825:3477":{"crate_id":1,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"4:11904:9654":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"11:1887:2824":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"18:0:2568":{"crate_id":18,"path":["memchr"],"kind":"module"},"4:3291:27053":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"15:0:2565":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:13191:119":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:14147:20736":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"4:6368:26511":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:30688:3532":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"16:5769:17058":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:14311:20746":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:13766:17436":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:13904:3295":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"16:7559:17126":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"4:2774:9486":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"16:3475:16160":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"16:4718:16765":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:10857:23413":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"4:2699:9484":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:22549:9450":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"18:680:21745":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:11190:3231":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"5:6958:9707":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"5:3222:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:8313:137":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:46756:22766":{"crate_id":1,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"16:6427:17084":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:44561:3912":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"11:710:9354":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:8328:14342":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"5:7566:9318":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"0:29:2327":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"11:844:9357":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:7366:9581":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"11:1066:16041":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:3435:2662":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"4:4998:9528":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:7085:32992":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:14066:20731":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:23203:22720":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"4:12356:891":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"1:10358:143":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:21721:24457":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"16:150:16103":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:46511:9053":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:542:32843":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:11405:17318":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:7755:17138":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"4:6193:220":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:14189:20738":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"0:28:2321":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"1:12770:3817":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:2710:103":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"4:3389:9496":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"5:7727:9352":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"5:7405:3237":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:12572:17248":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"4:4813:27334":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"4:8518:3709":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"1:40611:3671":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:1663:11035":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"5:4282:3604":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"4:4155:9517":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:3251:3559":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"1:10401:3770":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:42254:3232":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"17:13412:20215":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:45885:9038":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:42687:2679":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"4:8479:9498":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"6:5212:14120":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"5:6072:3244":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"16:2478:16134":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:40913:3720":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"4:4319:9548":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"4:865:3231":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:42785:3767":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"5:7658:9685":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:44282:3632":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:5528:14157":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:5102:14111":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"5:6051:2678":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"18:689:21746":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:5181:14117":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:6317:17078":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"4:9171:9636":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:13922:20721":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:6098:17073":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"11:0:2562":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"16:2788:16148":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:9420:2799":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"16:7656:17133":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:14436:20754":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:3282:2725":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"4:12353:754":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"16:5037:16831":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:16269:20215":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"4:3652:28068":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:13387:20213":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"4:2463:9429":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"11:1566:16043":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:15521:21523":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:46306:9073":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"4:1475:156":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:22525:9127":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:11293:17309":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:21692:24464":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:23032:22106":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:46099:9023":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:6763:14886":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"4:9721:9445":{"crate_id":4,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"5:3258:9364":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:12711:137":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:1621:11031":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"5:1843:9352":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"6:4864:14085":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:11128:17280":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:42334:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:44889:219":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"17:14372:20750":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:47079:9075":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:34291:2716":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:32229:3580":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:46931:9014":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:38271:2721":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"4:11233:3922":{"crate_id":4,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"1:44540:3910":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"4:6503:220":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:41328:3695":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:42792:3766":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"16:6758:16071":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"5:289:30113":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:559:10131":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:5146:14115":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:46323:9079":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"5:3648:182":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"4:7925:26512":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:43762:3801":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:23170:22758":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"1:10397:3769":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"4:8470:3684":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"1:10384:119":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"16:4802:16780":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:43800:3290":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"4:8611:9555":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:5390:14143":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:5700:17054":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"11:430:32666":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:5046:14107":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"4:4555:9545":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:11313:17310":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:11825:17409":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:4897:14089":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:13899:20720":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:47021:9020":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:13024:17262":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"4:2307:138":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"14:40:20204":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:5617:14165":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:12289:17441":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"4:11251:9453":{"crate_id":4,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"5:734:250":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:4876:14087":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:1639:11033":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"4:2461:3534":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"18:589:23305":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:39801:3607":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:13972:20724":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:11702:17376":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:45009:3957":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:43080:23318":{"crate_id":1,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"17:13855:20718":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:11432:3809":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"4:5616:9616":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"5:4322:3231":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:40878:3717":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"18:651:33904":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:7575:15305":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:43139:3776":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"17:11367:17288":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:47324:8989":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"4:11045:9624":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1:13731:3947":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:11515:3803":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:13679:24437":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:44982:180":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"4:8774:9604":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"16:8188:17152":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:40856:3716":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:597:17230":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"0:31:2328":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"1:7715:3646":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1:22894:22236":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:3214:2658":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"4:8726:9603":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"5:6612:30113":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:47196:8981":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"15:394:16088":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"6:7446:15296":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:15023:21484":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"7:0:1902":{"crate_id":7,"path":["unwind"],"kind":"module"},"4:2226:128":{"crate_id":4,"path":["std","ffi","os_str","Display"],"kind":"struct"},"1:43064:23313":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:9531:3864":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:2763:201":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:33260:2707":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:46291:9024":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:22973:23251":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:2799:195":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"17:14855:21475":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:3925:16225":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:11877:17388":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:860:33126":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"11:2383:3231":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:10915:33870":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"4:9118:199":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"1:40677:3669":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:11473:3806":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"4:8676:9531":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"4:8812:9606":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"17:12597:17497":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"17:15333:21507":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:13497:20221":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:8386:2633":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:40774:3710":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"11:1051:9361":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:11354:17320":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:6026:17069":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"4:10898:9580":{"crate_id":4,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"1:4793:2651":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:40844:3725":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:261:33133":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:4641:16711":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:46727:22686":{"crate_id":1,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"17:15151:21491":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"11:1007:9360":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"11:1142:16042":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:42126:2797":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:40937:3708":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:42013:3736":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"16:2528:16136":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:15814:21542":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:6777:3726":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:40812:22445":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"7:32:15892":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:44877:23280":{"crate_id":1,"path":["core","future","async_drop","Noop"],"kind":"struct"},"4:9179:2824":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:12043:17392":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:46532:9059":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:4484:3614":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:14723:21471":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"11:2369:16045":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:33048:2704":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:43052:23266":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"4:11423:9422":{"crate_id":4,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"1:44998:3959":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"4:6685:2474":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"1:21792:9450":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:15214:21497":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:32296:3590":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:32396:114":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"4:9714:138":{"crate_id":4,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"4:5773:9620":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"18:80:21728":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:47271:8986":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"18:643:33904":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:12824:17254":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:4437:24181":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:42053:3738":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"16:6263:32994":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"4:8093:9406":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:2729:112":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"17:15289:21503":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"4:11642:26345":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:43935:3877":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"4:8565:9504":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"17:11537:17336":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"5:3284:9365":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:11075:17288":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:21653:3575":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"14:7:16052":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:7984:10079":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"4:373:9324":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:5914:32847":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:8797:22926":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:42490:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:12238:17447":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:14038:20729":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":29}