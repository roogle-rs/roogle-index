{"root":"0:0:1659","crate_version":"1.4.0","includes_private":false,"index":{"1:12177:31341":{"id":"1:12177:31341","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31:1666":{"id":"0:31:1666","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[213,0],"end":[215,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["lazy",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"LazyStatic","id":"0:29:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12086:31325":{"id":"1:12086:31325","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5528:32005":{"id":"5:5528:32005","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:1963","`String`":"5:7451:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:1963","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7184:8727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12084:2134":{"id":"1:12084:2134","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12099:26810":{"id":"1:12099:26810","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9886:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9886:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12144:31332":{"id":"1:12144:31332","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:11784:3223","str::split":"1:12132:27673","prim@char":"4:11986:419","str::split_terminator":"1:12141:31331"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43624:3255","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:3237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11789:3237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11804:3239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12085:31324":{"id":"1:12085:31324","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12175:31340":{"id":"1:12175:31340","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12097:26809":{"id":"1:12097:26809","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41597:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41595:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9886:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9886:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12115:23914":{"id":"1:12115:23914","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:11986:419","self::pattern":"1:11784:3223"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:3237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12173:31339":{"id":"1:12173:31339","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12128:2133":{"id":"1:12128:2133","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41597:179","prim@char":"4:11986:419","self::pattern":"1:11784:3223"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41595:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:3237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11789:3237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11804:3239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12104:31329":{"id":"1:12104:31329","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:11992:1415","crate::ops::IndexMut":"1:2984:2047","str::slice_unchecked":"1:12103:31328"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12150:27680":{"id":"1:12150:27680","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:11986:419","str::splitn":"1:12147:27678","self::pattern":"1:11784:3223"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43678:3176","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:3237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11789:3237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11804:3239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12162:31335":{"id":"1:12162:31335","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:11784:3223","`DoubleEndedIterator`":"1:7306:121","prim@char":"4:11986:419","str::matches":"1:12159:1861"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43778:3258","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:3237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11789:3237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11804:3239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12191:31345":{"id":"1:12191:31345","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:11986:419","self::pattern":"1:11784:3223"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:3237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11789:3237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11804:3239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12088:31326":{"id":"1:12088:31326","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12086:31325"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12083:820":{"id":"1:12083:820","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:11986:419"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12106:27666":{"id":"1:12106:27666","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12105:27665"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12110:22250":{"id":"1:12110:22250","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12111:22274"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43830:3253","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12171:31338":{"id":"1:12171:31338","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12209:2984":{"id":"1:12209:2984","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4539:2984"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43864:2985","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:32004":{"id":"5:5527:32004","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12093:315":{"id":"1:12093:315","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12094:314","`u8`":"4:12003:1518"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12101:26811":{"id":"1:12101:26811","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9886:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9886:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12092:31327":{"id":"1:12092:31327","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12108:21829":{"id":"1:12108:21829","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:11986:419"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43532:3250","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12210:31350":{"id":"1:12210:31350","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4536:31350"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43873:3005","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12156:31334":{"id":"1:12156:31334","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41595:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:3237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11789:3237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11804:3239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12200:31348":{"id":"1:12200:31348","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:11745:127","`FromStr`":"1:11744:2760"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41739:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:11744:2760","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:11744:2760","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12107:22261":{"id":"1:12107:22261","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:11986:419"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43526:3251","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12147:27678":{"id":"1:12147:27678","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:11986:419","self::pattern":"1:11784:3223","str::rsplitn":"1:12150:27680"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43660:3180","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:3237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5530:28795":{"id":"5:5530:28795","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12205:27556"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12138:27676":{"id":"1:12138:27676","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:11784:3223","`DoubleEndedIterator`":"1:7306:121","prim@char":"4:11986:419","str::split":"1:12132:27673"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43574:3182","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:3237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11789:3237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11804:3239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5513:2911":{"id":"5:5513:2911","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:3237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5529:3062":{"id":"5:5529:3062","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12207:31349":{"id":"1:12207:31349","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4538:31349"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43855:3006","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12141:31331":{"id":"1:12141:31331","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:11784:3223","str::split":"1:12132:27673","prim@char":"4:11986:419","`DoubleEndedIterator`":"1:7306:121","str::rsplit_terminator":"1:12144:31332"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43606:3256","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:3237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29:1665":{"id":"0:29:1665","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[185,0],"end":[188,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"1:12178:31342":{"id":"1:12178:31342","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12091:28777":{"id":"1:12091:28777","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11352:3243"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12182:31344":{"id":"1:12182:31344","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:11986:419","self::pattern":"1:11784:3223"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:3237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12188:27684":{"id":"1:12188:27684","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:11986:419","self::pattern":"1:11784:3223"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41595:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:3237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11789:3237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11804:3239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12124:2175":{"id":"1:12124:2175","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41597:179","prim@char":"4:11986:419","self::pattern":"1:11784:3223"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41595:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:3237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5511":{"id":"5:5511","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5512:32001","5:5513:2911","5:5516:32002","5:5519:32003","5:5527:32004","5:5528:32005","5:5529:3062","5:5530:28795","5:5531:28796"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12194:31346":{"id":"1:12194:31346","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:11986:419","self::pattern":"1:11784:3223"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:3237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12111:22274":{"id":"1:12111:22274","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12110:22250"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43839:3262","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12135:22227":{"id":"1:12135:22227","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:11986:419","self::pattern":"1:11784:3223"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:11608:3191","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:3237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12103:31328":{"id":"1:12103:31328","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:11992:1415","str::slice_mut_unchecked":"1:12104:31329","crate::ops::Index":"1:2980:2046"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12082":{"id":"1:12082","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12083:820","1:12084:2134","1:12085:31324","1:12086:31325","1:12088:31326","1:12091:28777","1:12092:31327","1:12093:315","1:12094:314","1:12095:1664","1:12097:26809","1:12099:26810","1:12101:26811","1:12103:31328","1:12104:31329","1:12105:27665","1:12106:27666","1:12107:22261","1:12108:21829","1:12109:20820","1:12110:22250","1:12111:22274","1:12112:29741","1:12113:31330","1:12114:22263","1:12115:23914","1:12118:27682","1:12121:27683","1:12124:2175","1:12128:2133","1:12132:27673","1:12135:22227","1:12138:27676","1:12141:31331","1:12144:31332","1:12147:27678","1:12150:27680","1:12153:31333","1:12156:31334","1:12159:1861","1:12162:31335","1:12165:31336","1:12168:31337","1:12171:31338","1:12173:31339","1:12175:31340","1:12177:31341","1:12178:31342","1:12179:31343","1:12182:31344","1:12185:27187","1:12188:27684","1:12191:31345","1:12194:31346","1:12197:31347","1:12200:31348","1:12202:27552","1:12203:27553","1:12204:27555","1:12205:27556","1:12206:27557","1:12207:31349","1:12209:2984","1:12210:31350"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12095:1664":{"id":"1:12095:1664","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41597:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41595:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9886:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9886:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12204:27555":{"id":"1:12204:27555","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12205:27556":{"id":"1:12205:27556","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12202:27552":{"id":"1:12202:27552","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12206:27557":{"id":"1:12206:27557","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12094:314":{"id":"1:12094:314","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12003:1518"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12121:27683":{"id":"1:12121:27683","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:11986:419","self::pattern":"1:11784:3223"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:3237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11789:3237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11804:3239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12168:31337":{"id":"1:12168:31337","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:11784:3223","`DoubleEndedIterator`":"1:7306:121","prim@char":"4:11986:419","str::match_indices":"1:12165:31336"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43724:3260","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:3237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11789:3237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11804:3239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12197:31347":{"id":"1:12197:31347","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:11986:419","self::pattern":"1:11784:3223"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:3237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11789:3237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11804:3239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12185:27187":{"id":"1:12185:27187","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:11986:419","self::pattern":"1:11784:3223"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41595:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:3237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28:1659":{"id":"0:28:1659","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[167,0],"end":[179,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"inner":{"macro":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"}},"1:12112:29741":{"id":"1:12112:29741","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43810:3252","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5531:28796":{"id":"5:5531:28796","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12206:27557"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5519:32003":{"id":"5:5519:32003","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1659":{"id":"0:0:1659","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[215,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\n# #[macro_use]\n# extern crate lazy_static;\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.4.0\")]","#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:29:1665","0:31:1666","0:28:1659"],"is_stripped":false}}},"1:12132:27673":{"id":"1:12132:27673","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:11784:3223","`DoubleEndedIterator`":"1:7306:121","prim@char":"4:11986:419","str::split_whitespace":"1:12110:22250","str::rsplit":"1:12138:27676"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43556:3178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:3237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12105:27665":{"id":"1:12105:27665","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:12106:27666"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12118:27682":{"id":"1:12118:27682","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:11986:419","self::pattern":"1:11784:3223"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:3237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12159:1861":{"id":"1:12159:1861","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:11784:3223","`DoubleEndedIterator`":"1:7306:121","prim@char":"4:11986:419","str::rmatches":"1:12162:31335"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43760:3257","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:3237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12179:31343":{"id":"1:12179:31343","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:11986:419","self::pattern":"1:11784:3223"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:3237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11789:3237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:11809:3238","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5516:32002":{"id":"5:5516:32002","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:3237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12203:27553":{"id":"1:12203:27553","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39634:21458","Self::is_ascii":"1:12202:27552"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41595:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39634:21458","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5512:32001":{"id":"5:5512:32001","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:1963","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7184:8727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:1963","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7184:8727","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12153:31333":{"id":"1:12153:31333","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41595:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:3237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12114:22263":{"id":"1:12114:22263","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43848:3261","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12165:31336":{"id":"1:12165:31336","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:11784:3223","`DoubleEndedIterator`":"1:7306:121","prim@char":"4:11986:419","str::rmatch_indices":"1:12168:31337"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43706:3259","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11789:3237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12109:20820":{"id":"1:12109:20820","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43542:3249","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12113:31330":{"id":"1:12113:31330","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43820:3254","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"4:1430:144":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:10276:3183":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:1575:10366":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:14044:20183":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"19:0:1040":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:22624:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:1820:1989":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"4:7866:8795":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"6:4436:12923":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:4587:12940":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"5:2966:32126":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:4409:1981":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:9344:34308":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"16:5342:15800":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:4496:12931":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"4:8234:8851":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"16:3025:14907":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:22360:178":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"16:5807:15817":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"16:3580:14913":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"5:5841:2446":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"4:4628:27236":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"16:6939:15863":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:11608:3191":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:42027:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:6573:10316":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"4:8547:2674":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"17:13697:20150":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:43106:21570":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:532:9467":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:2510:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:7043:1970":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"5:7223:2436":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:10654:16154":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:44482:211":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"6:5805:13632":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:2910:1987":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:8086:15899":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:2689:14895":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:4550:12937":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:13427:20136":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:11264:16232":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:7463:15873":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"16:4785:15531":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:2470:8800":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:2832:2040":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:2399:14883":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"4:2558:2490":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"4:11266:8976":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"5:782:2427":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"11:1838:8722":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:5414:33872":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:14163:20187":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"5:629:31054":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:3647:2139":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"4:7595:2512":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"5:7476:9033":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:22657:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:47271:8419":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:6720:14063":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"11:2201:8706":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:20903:8374":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"5:1102:32531":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:10148:16064":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:8924:15980":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:7698:20672":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:13847:20162":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:5940:15821":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:12891:19413":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:434:14854":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:13167:19431":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"5:7233:32622":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:5737:13566":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"4:7658:8678":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"6:6565:9511":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:40278:2531":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"5:6771:2463":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"4:12004:1515":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"1:47771:8403":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"4:5121:191":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"16:6332:15836":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:2921:1958":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"4:8143:3058":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"4:6187:30299":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"4:551:2683":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"5:2690:32131":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:43873:3005":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:2980:2046":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:8323:2117":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:8916:24027":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:11798:3240":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:9926:16031":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:5673:15811":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"4:9071:27281":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"4:10515:8839":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:39454:1978":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"16:7433:15871":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"11:723:8708":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:13492:20140":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:4476:15438":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:5775:15816":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:10266:16060":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:46645:8436":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:32141:23311":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:12585:2500":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"16:7833:15894":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:12394:19382":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:14037:20182":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"5:1523:8729":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:10323:16118":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"4:728:142":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"18:531:20246":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:10330:16089":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:9222:3141":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:22426:176":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:4263:1972":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:8911:20716":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:44120:3283":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:11020:16191":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"4:9188:29918":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"5:3570:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"5:35:2420":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"4:4128:30605":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"4:615:8690":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:4389:1980":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"17:14417:20206":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"4:4166:8891":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:47663:8431":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:40359:3076":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:14216:20192":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"18:624:34717":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:30949:2949":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"4:7876:8792":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"4:4041:8866":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"4:7854:8794":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"17:12691:19401":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"11:2060:8718":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:12365:16181":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:5829:13634":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:2931:1807":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"4:8209:3249":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"4:8922:8980":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"4:9278:2279":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:46881:8402":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:45861:8400":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:43454:3186":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:7494:15876":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"4:11769:2527":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:3777:14931":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"4:898:2446":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"18:681:20237":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:43660:3180":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:12792:19406":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:42614:110":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:44299:3235":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:47809:8437":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:7384:159":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:5990:3101":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:9561:15990":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:11329:15997":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"4:11491:8855":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:6197:15828":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"4:3935:8858":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"4:7765:23311":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"4:8005:30310":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"1:44083:3282":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:5959:15822":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:14015:20180":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"5:7201:8726":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"5:1482:8710":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:6868:14073":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:11542:15955":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"4:4382:8888":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:10038:16028":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"4:8387:8937":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:8997:15952":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"4:10234:8975":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:44307:3230":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"4:11323:27217":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:20861:2928":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:42859:22254":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:44155:3286":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:9443:145":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"17:10458:16122":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"6:4818:12963":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:21798:21325":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:10581:16155":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"4:944:2658":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"0:0:1659":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"1:9478:3158":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:4524:12934":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"4:7639:8688":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"4:3494:3017":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"4:3183:30904":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:2767:2025":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"16:149:2408":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:2799:2033":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"5:6560:2139":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"4:8553:8956":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"5:7531:2465":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:12065:18887":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:39160:2058":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"11:1501:14798":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:554:9470":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"4:11992:1415":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"1:2162:2928":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"14:202:9031":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:4928:15554":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:13971:20175":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:2821:2037":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:12851:19410":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:12878:19412":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:12815:19407":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:2855:2045":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"11:1012:8718":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:7552:13157":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:6726:14064":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:4824:12964":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"4:12007:1514":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"1:44291:3236":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:43532:3250":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:4413:12920":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"4:6811:8988":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:12318:19379":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"4:11168:27394":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"16:3867:14973":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"18:113:20221":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:5590:15806":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:6067:13651":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:11979:18881":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:4420:12921":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"4:8852:2674":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:20980:8370":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:12479:19387":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:12982:19419":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:13905:20168":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:12380:151":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:46091:8383":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:4854:12968":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:13787:20158":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"5:6487:2424":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:4616:12942":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"11:2194:33507":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:40894:3061":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"4:8478:8953":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:12711:19402":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:10486:16124":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:40037:2985":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:10786:16140":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"4:7930:2676":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"16:2519:14888":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:5626:15808":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"4:854:2675":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"4:3929:8859":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:40449:3091":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"14:215:14814":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:41832:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"16:8021:15896":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"4:7663:8680":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"5:4004:2446":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:4483:12929":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:3998:21542":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:41790:2675":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"5:1473:8709":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"4:358:8687":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:5382:15802":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:41782:2674":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"4:9480:2514":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:46310:22063":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"5:7465:9032":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"11:1858:8725":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:2243:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"5:895:2674":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"16:3058:14909":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"5:3171:2674":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"4:9130:8804":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"1:1636:2894":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"4:4468:8898":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:9821:16019":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:12566:19392":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:3162:2053":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:13999:20178":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"5:7427:8772":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:2541:14889":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:11852:18873":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"5:6888:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"13:110:33569":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:44283:3233":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:13732:20153":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:9409:34693":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:5383:2452":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:261:34289":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"11:1822:2139":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:2737:2961":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"11:119:2412":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:12454:3317":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:4254:207":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"16:7313:33977":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:1649:10372":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"4:7859:8791":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:14007:20179":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:9399:15987":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"16:8068:15898":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"5:4848:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:44188:3242":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"6:6834:14070":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"4:4696:8898":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:13707:20151":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:41404:155":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:43383:3188":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"5:207:2422":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"4:8798:8970":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"10:0:1886":{"crate_id":10,"path":["adler"],"kind":"module"},"1:42346:3142":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:47065:8385":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:40878:22163":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:46043:8435":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:2826:2039":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:11696:16238":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:46167:8395":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:10303:16116":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"4:11406:2523":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:43706:3259":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:526:9466":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:21066:8360":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"6:4949:12978":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:13749:20154":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"4:10766:27221":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"16:6713:14823":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:5704:15813":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:12303:19378":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:4764:389":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"4:3965:8860":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:46805:8390":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:2791:2032":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:22012:21312":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:6540:15849":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"4:1045:8717":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:14102:20185":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"5:5977:2680":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:13140:19430":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:10293:16081":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"6:1557:10364":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"16:8166:15904":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:44311:3292":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:14236:20194":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"16:8176:15905":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"5:261:2424":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"4:10931:8967":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"5:3671:2424":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:7362:15869":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"4:6463:2015":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:21972:21461":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:6057:14851":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"3:0:1882":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"16:5398:15803":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"4:1928:658":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"17:13303:20133":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"11:1517:2667":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:45742:8428":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:12457:19386":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:9806:16018":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:47865:8345":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:1717:10379":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"5:3212:8722":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"4:933:8714":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"4:11293:27399":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:3894:14976":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:41713:2116":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:2318:125":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"18:652:34694":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"4:6980:30328":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"5:7414:8771":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:46213:8450":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:11084:16188":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"18:736:20233":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:4685:12947":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"4:10743:27218":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"17:12618:19396":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:11568:16007":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"4:8171:8799":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"6:1545:10363":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:13659:16036":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:9716:34329":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"4:3189:29699":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"18:690:20238":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:6214:15829":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"4:2219:8775":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"7:32:14648":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"16:7739:15890":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:41871:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:45880:8449":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"4:1591:8725":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"4:885:8709":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"5:5956:2003":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:12010:112":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"16:6724:15854":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:13870:20165":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:13914:20169":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"5:4076:2675":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"4:2212:8774":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"17:11623:16010":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:4396:15406":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:10863:15991":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:6796:14067":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:4368:12915":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"11:695:8712":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"4:3301:8835":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:12502:19388":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:2663:14894":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"4:2378:8782":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"17:10110:16065":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"4:6592:2016":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"6:494:9463":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:4:1023":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"13:226:33522":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:4436:1982":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:9118:15982":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"4:5624:2497":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"4:5233:190":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"17:13069:19425":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:13894:20167":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:1506:10358":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:4395:12761":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:2690:1956":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"17:14227:20193":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:7753:15891":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:22492:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:40688:3099":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:40927:3068":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:2164:16087":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:44563:3325":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:6820:14069":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:3156:135":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:13456:20139":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:10832:16135":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:9614:34590":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"4:3303:8836":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:6775:14066":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:11591:16008":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:41807:183":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"4:10798:119":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"5:7247:2139":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"18:707:3240":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:2352:14881":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"6:7575:13160":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:11241:16231":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"6:4944:12977":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:2925:1959":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"4:6290:206":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:4620:15462":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"4:6896:2507":{"crate_id":4,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:40043:2989":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:10013:16033":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:1702:8884":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:13937:20171":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"5:4350:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:5767:13628":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:40104:3014":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:5877:13636":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:6438:15843":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"4:8537:8955":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"17:13604:20146":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:11888:18875":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"4:8975:30292":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"16:5916:15820":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"4:5740:2005":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:11276:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:41510:21276":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:21904:21250":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"5:7263:31107":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:44546:161":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"4:12006:1517":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"17:12424:19384":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"4:914:8710":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:6372:15839":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:41731:193":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"4:2362:2919":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"1:32105:2954":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:2897:117":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:1733:10380":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:12106:18890":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:10203:3192":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:11832:18872":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"4:3979:8861":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"16:6977:15864":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"4:1818:8750":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"14:31:14805":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:5994:13645":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:11815:18871":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:40215:21301":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:1663:10373":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:23170:2761":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:11992:18882":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"5:1464:8708":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"18:755:20241":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"4:635:8693":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"4:1782:8740":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"1:21050:8800":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"4:9096:167":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:6618:14060":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"5:5925:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:3151:234":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:14259:20195":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:10313:16117":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"4:7130:30596":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:10238:3182":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"16:8105:15900":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:2838:2041":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"14:7:14805":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:5775:13629":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:13179:19432":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:1536:10362":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:12354:16180":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"4:3186:29695":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:43940:3276":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:12921:19415":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"16:4536:15450":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:5044:12987":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"4:7525:15970":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:43091:3220":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:11178:16227":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"5:4395:2452":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:22085:2767":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"11:2186:33512":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:4401:12919":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:40660:3097":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:9220:120":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"4:8804:186":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"0:31:1666":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"4:9050:29372":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"4:9016:30922":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"5:7367:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"4:11547:9002":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"4:10144:27220":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:7657:3070":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:2519:238":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"17:12757:19404":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:5955:13641":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"4:872:8708":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"4:8906:8982":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:9966:15991":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"4:9198:29910":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"4:4957:8933":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"18:727:20240":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"4:1780:8739":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"1:2757:2029":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:6607:14059":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:46411:22062":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:6396:15841":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"18:766:20234":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"5:4428:2455":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"4:7733:8720":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"4:3669:8850":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:44490:195":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"11:399:33516":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"4:12001:750":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"4:11997:647":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"16:6815:15857":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:14350:20201":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"9:330:14733":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:5793:13630":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:6931:15862":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:40064:21493":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:4833:12965":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:6900:15861":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"4:632:8692":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"4:8239:8849":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"6:4304:12911":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:2164:2929":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:40337:3083":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:2691:1985":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"4:5075:30938":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:43977:3278":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"4:5408:8964":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"1:43110:3196":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:39365:203":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"4:5964:2496":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"4:7576:2510":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:541:9468":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"4:4735:8877":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:11118:16225":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"16:5363:15801":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:40406:22278":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:1917:2701":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:7665:15886":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:10253:16061":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"4:4310:8894":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:12727:19403":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"4:11987:1534":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"16:2637:14893":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"11:1121:8719":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:11074:16006":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:22393:175":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"4:956:8716":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:11600:16009":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:4291:12910":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"4:11260:30302":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:7099:15867":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:7255:2115":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"5:1503:8712":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:12377:19381":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"4:5301:120":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"11:2168:33509":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"4:6436:1803":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"1:11855:3270":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:9223:15985":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"4:9101:218":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:14026:20181":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"4:8302:8852":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"4:4908:8924":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"6:1527:10361":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"4:11243:2521":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"4:11559:30948":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"16:5994:15824":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:43839:3262":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:5058:12989":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:22525:2765":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"4:8332:8928":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:2783:2030":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"16:5067:15597":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:9188:15984":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:5799:13631":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:30921:183":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:1732:2945":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:4938:12976":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"4:2495:8828":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:40203:3052":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:40052:3012":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:9336:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"5:878:2432":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:5972:15823":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:7484:15875":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"4:9166:30924":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"1:42185:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:40198:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"5:5364:9025":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"4:6386:30927":{"crate_id":4,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:9190:132":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:43464:2708":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:4887:12971":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:20673:26525":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:42360:3143":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:6136:12827":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:6142:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:43848:3261":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"4:6139:2500":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:45658:8387":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"16:2332:14880":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:10066:16055":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:39419:2052":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:1495:10356":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:12631:19397":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:4984:12982":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:482:9461":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:40368:3084":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"9:507:14680":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:13795:20159":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:12677:3322":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"14:160:14805":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:3810:14940":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:2781:14899":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"4:9023:30308":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:42867:3160":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:39246:2048":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:2246:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:13557:20143":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:5051:12988":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:47523:8425":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:43500:3248":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:9528:34131":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:4626:12943":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:3141:2051":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:42353:3141":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"4:3264:8840":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:39634:21458":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"4:9028:30307":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"11:0:1887":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:9604:15991":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"4:6427:2009":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:2748:2942":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"16:4323:15357":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:488:9462":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"4:11998:751":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"4:3113:8843":{"crate_id":4,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"4:12011:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"17:9665:34605":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:2787:2034":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:22111:2768":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:5531:3088":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"4:3993:8863":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:10511:16126":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:9571:34360":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:3220:14910":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:46491:8418":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:3635:14914":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:6289:15832":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:12053:18886":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:40245:3026":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"typedef"},"1:45690:8417":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"11:968:8717":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:44287:3232":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"5:2243:32201":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"4:4150:8889":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"4:11952:30295":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"11:1831:2465":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"16:6357:15838":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:40328:3075":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:4489:12930":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:12346:16182":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"4:10943:29522":{"crate_id":4,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"6:62:9089":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"4:1574:8722":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"5:1442:2139":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"4:1068:8718":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"16:7038:33858":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:10499:16125":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"5:7440:2461":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:8748:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"11:1103:14797":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"11:760:2465":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"16:2497:14887":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:4186:1799":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"17:12118:18891":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:7329:1961":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"18:590:22166":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:1631:10370":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:5793:33675":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"4:10918:8758":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:9475:15988":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"18:491:34707":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"5:7384:8773":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"18:538:20247":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:43624:3255":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:11744:2760":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"4:8192:3083":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"4:11111:8972":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:0:1891":{"crate_id":16,"path":["gimli"],"kind":"module"},"18:719:20232":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:2693:226":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"4:8228:8852":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:1013:1801":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"4:7684:2516":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"4:4737:8878":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:8322:2118":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"16:7707:15889":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:4535:12935":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"4:8961:2008":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"9:450:14677":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:5015:12985":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:2795:2031":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"11:1818:2674":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:6036:13650":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:5025:12986":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"5:3722:2676":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:11322:3169":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"5:6932:2478":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"11:1538:14799":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:47946:8352":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:12840:19409":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:45945:8359":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"4:3262:8839":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:10051:16027":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:2962:2056":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:10844:3189":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:11034:16222":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:9599:2539":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:11210:16228":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"5:3330:2465":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"5:3802:2465":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:11955:18879":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"4:8986:8674":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:20847:8369":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"1:20643:26392":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"16:4698:15516":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"4:8455:8952":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"1:43409:3074":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"11:2180:33510":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"16:2926:14905":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:12579:19393":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"11:667:8711":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:13639:20131":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"4:8860:8984":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:20809:8800":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:21569:26395":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"11:1027:14796":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"4:10753:8791":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:12592:19394":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"11:403:33517":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:41444:3108":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"11:1068:2664":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:47874:8346":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:3373:2958":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"16:7073:15866":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:21557:3172":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:14282:20196":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"16:2803:14900":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:2516:133":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:2846:2043":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"5:4987:2452":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:13548:20142":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"5:4236:2674":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:41798:2139":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:42851:3161":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:40438:3100":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:39343:201":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"4:6539:2012":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"4:6423:1802":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"4:9971:21273":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:41581:3113":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:5068:12990":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"4:2215:2483":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"1:10034:2674":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"4:5610:206":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:45821:8388":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:11109:16224":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:7564:13159":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:10812:16139":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:11098:16190":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:10126:3191":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"9:52:14696":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"4:9149:8987":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"11:836:8715":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:4506:15444":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:9483:3159":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:39440:15906":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"4:11984:372":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"4:1892:8768":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"1:44008:3280":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:20994:2928":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"16:6456:15844":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"4:1565:2446":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"4:7761:8758":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:7855:15895":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:22558:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"5:3737:2679":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"4:10748:30719":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"4:908:2465":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"6:7511:13151":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:12077:18888":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"4:1841:2279":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"17:13125:19429":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"18:521:20242":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"5:2461:2669":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:44363:3294":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:7609:14632":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:9442:34582":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:12605:19395":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:42626:22198":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"5:1492:8711":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:7012:33604":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:3196:1986":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:4992:12983":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:6128:15826":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:4605:2998":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:41595:181":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"6:6044:33405":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:10671:16179":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:2265:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"6:5920:13640":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:11789:3237":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:12864:19411":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:11007:16192":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:2695:109":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"4:11038:2519":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"4:9468:129":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"17:10609:16177":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"4:7727:8696":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:41671:2139":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"4:1586:8724":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"4:12003:1518":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"1:4113:1990":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:41680:2115":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"16:6317:15834":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:1595:10368":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:7679:15887":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:4650:12945":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:9032:15803":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"6:4770:12957":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:8138:15902":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"4:8150:8842":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"4:3409:2452":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"17:14329:20199":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:4787:12959":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:10555:16175":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:11943:18878":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"4:6063:2498":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"4:7922:8829":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:4729:12952":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:11967:18880":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:6658:15852":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"4:10305:8966":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:13778:20157":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"5:1257:8717":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"5:1776:2465":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:21460:8368":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:10845:16136":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:46259:8457":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:40900:3063":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"5:2970:32129":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:44295:3234":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"16:55:14849":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"17:10883:16143":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:6571:15851":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:11144:16216":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:6008:13646":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:21960:2763":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:45898:8455":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:10331:3176":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:10568:16133":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:4996:15574":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"4:11150:8804":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"4:8405:8951":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"1:40909:2537":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"6:4463:12926":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:40308:3074":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:6744:14065":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"9:357:14693":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:40490:3094":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:12966:19418":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:3168:2055":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:43362:3184":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:21987:22162":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:6763:15855":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:7546:13156":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:12622:140":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"4:950:8715":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:7631:15885":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:13964:20174":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"16:2825:14901":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:530:33611":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"16:7407:15870":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:44134:3284":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"14:187:14813":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:12574:107":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:40420:3089":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:40378:3085":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:21216:8361":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"5:2049:2679":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"4:527:2485":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"16:2373:14882":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:43760:3257":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:3385:2957":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"18:515:20245":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"4:3836:8855":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:11338:3171":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:5589:3077":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"5:7339:8706":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"4:11996:645":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"1:43810:3252":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:40871:3059":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:2602:128":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:40158:3009":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"18:671:20236":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:6841:14071":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:256:34434":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:2513:149":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"4:10094:2691":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:11354:15998":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"4:10808:2688":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:11467:16004":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"4:8288:8896":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:2105:16103":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:14315:20198":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:41739:210":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"17:8872:15978":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"13:0:1883":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:40124:2985":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:13435:20137":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"11:1826:2446":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:12333:19380":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"16:6239:34012":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:5836:13635":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"4:11429:8854":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:12412:19383":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:1673:10374":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:2779:2027":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"4:10453:2515":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"4:9106:219":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:43574:3182":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:47601:8397":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:13016:19421":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:41533:3110":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"16:7505:15877":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"18:599:34721":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:46615:8430":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:20615:2949":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"5:7213:2446":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:9368:23305":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:40139:3007":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:47920:8350":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:1696:10377":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"0:29:1665":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"4:3519:8819":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"1:21242:8371":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"4:10410:8970":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:12254:19377":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"14:221:14815":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"18:644:34694":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:12186:18896":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"4:11027:2518":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"4:9475:8794":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:45791:8382":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"4:5374:8962":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"17:11726:16239":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"4:11044:2520":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"5:676:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"0:28:1659":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"17:9318:15986":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:4144:1991":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:22591:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:2752:2024":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"17:11199:16218":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"4:6350:166":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:6740:3082":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"16:7445:15872":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:11189:16008":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:10377:16092":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:6502:15847":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:1629:589":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"17:12769:19405":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"11:97:33513":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"5:5320:2424":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:22049:21287":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"17:8841:15977":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:12526:19389":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:13096:19427":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"16:6789:15856":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:40885:1802":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:7525:15879":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:5843:15818":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:43343:3174":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:47413:8391":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"4:10558:2516":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:13882:20166":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"4:1562:2139":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:2314:14879":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"4:864:2139":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:14205:20191":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:4606:12941":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:6175:15827":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"16:2715:14896":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"5:1672:2424":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:9215:112":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:47725:8452":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:11534:3268":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"5:7292:2139":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"6:4518:12933":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:9485:34573":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"11:749:2446":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:6156:13680":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:10417:16091":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"11:1611:2418":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:20859:20610":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"4:11999:748":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"16:6667:14824":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"11:805:8714":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:41490:22281":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"16:5882:15819":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:11416:16001":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:41646:2138":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"16:6232:15830":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:39426:2959":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"17:12826:19408":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"4:8215:3178":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"4:410:165":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"5:6800:2477":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"17:12133:18892":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"6:6711:14062":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:13854:20163":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"4:8294:8887":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:40674:3098":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"16:4032:15090":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"4:841:2674":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:44533:3320":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:43334:3175":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:39461:2980":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:653:9523":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"4:4618:8863":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:9887:16041":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:46357:22096":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"5:276:1963":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:9875:16047":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:21465:8376":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:25980:2762":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"5:4166:2452":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:4794:12960":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:45546:8415":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:43422:3187":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"11:986:2662":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:10994:16193":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:39447:23302":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:2355:189":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:4428:12922":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"4:11986:419":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"1:39387:2049":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"16:5689:15812":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:4475:12928":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:12367:136":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"18:614:34714":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:40388:3086":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:5080:12992":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:4785:21030":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:10339:16088":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:10249:16074":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"4:11991:1385":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"4:498:2443":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:30357:2917":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:44330:122":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"17:11428:16002":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"4:7906:119":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:4965:15567":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"10:36:33505":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:11557:3265":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:10877:3190":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:21112:8362":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:3186:16137":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:43352:2704":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:504:15969":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"4:3987:8862":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:14054:20184":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"4:8000:30939":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:4740:12953":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:7599:14631":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:9224:3142":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:7227:3073":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:40288:3050":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"5:2962:32127":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"16:3441:14912":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:12429:192":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"6:4678:8857":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"4:12002:746":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"6:5074:12991":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:11804:3239":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:20656:26520":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:20811:8367":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"6:4568:12939":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:6648:10501":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:21:686":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"4:8495:8954":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"5:7284:2139":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:14403:20205":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:14177:20188":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:2773:2028":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:9990:16035":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:42906:21948":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"4:3346:8825":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:2471:2726":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:11272:15995":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:21920:22203":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:4908:12973":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"16:6872:15859":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:20947:8375":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"6:4879:1010":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"4:2405:1897":{"crate_id":4,"path":["std","io"],"kind":"module"},"4:8283:8895":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:21235:8800":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:3519:16160":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:22033:21304":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"5:7451:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:10390:16090":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:46137:8389":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:7586:13161":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"16:6886:15860":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"9:237:8952":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"11:798:8713":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"4:2390:8788":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"16:4441:15427":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:13991:20177":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"15:306:14830":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:21936:21231":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:41722:2208":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:9876:8800":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:9913:16032":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:43526:3251":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"16:6484:15846":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:44303:3229":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:1184:16042":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:12017:18884":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:10633:16134":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:2152:590":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"4:4632:27240":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"4:1765:612":{"crate_id":4,"path":["std","env"],"kind":"module"},"5:1411:2674":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:2705:1984":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"6:7463:14603":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"4:5493:8967":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"4:11985:945":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"5:1138:32532":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:42146:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:13673:20148":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:10199:16069":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"15:288:14829":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:6705:14061":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:6692:15853":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:14150:20186":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:11234:16230":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"4:7738:8721":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"16:7693:15888":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"4:10518:8835":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"4:10778:8795":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:13029:19422":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:14301:20197":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:11371:15999":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"4:919:8711":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:47905:8349":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"4:3512:8798":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"6:4638:12944":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:5863:13595":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:4753:15523":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:7264:134":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"18:507:34694":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"4:4037:8865":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:0:1892":{"crate_id":17,"path":["object"],"kind":"module"},"1:30445:21490":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"17:11045:16187":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:39199:2057":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:42669:128":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:10359:3177":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:4506:12932":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"4:11566:14838":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"4:5424:8965":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"5:1514:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:45843:8394":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:7523:13153":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"18:582:2949":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"4:4733:8874":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:10403:16120":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:14:1862":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:47847:8458":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"16:7474:15874":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:13949:20172":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:41461:3109":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:30317:2915":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:13591:20145":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:11784:3223":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"1:2816:2036":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:47894:8348":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:43606:3256":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:2567:14890":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"5:6790:2475":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:46727:8384":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:4810:12962":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"4:4230:8893":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"18:80:20219":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:1603:10369":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:4389:12918":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"5:3178:8723":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"15:0:1890":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:2507:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"6:123:9144":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:6015:13647":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"4:4562:8916":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"5:5130:2003":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:6323:15835":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:3317:69":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:43444:2707":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:42586:22236":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:2762:2026":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:4872:12970":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"6:119:9143":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"6:1513:10359":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:1638:10371":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:43514:3247":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"5:3183:32631":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:1569:10365":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:14395:20204":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:12539:19390":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:6386:15840":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:4592:15458":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"4:1059:2662":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"16:5737:15815":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:42105:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:32145:2956":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:48022:8356":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:4748:12954":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"4:8938:8983":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:4695:12948":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:4716:12950":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"11:736:8709":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"6:4315:12912":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:44145:3285":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:43991:3279":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:40231:3051":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:5008:12984":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:9744:34037":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"4:8893:8979":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:8605:15951":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"4:640:8694":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:234:210":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:2737:14897":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:2523:237":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:43542:3249":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"4:4693:8925":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:2465:14886":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:4862:12969":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"4:3222:8837":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:12905:19414":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:4258:1971":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"6:6077:13652":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"4:10724:8927":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:9899:16037":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:4781:12958":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"5:4196:2452":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:9706:15993":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:14197:20190":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"4:12008:796":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"17:8711:15973":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:39261:200":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:9952:16029":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:9697:2547":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"4:6640:217":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:4543:12936":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"18:0:1893":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:41988:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"4:11470:8853":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:4335:1978":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"4:3455:2687":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"4:8310:8897":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"4:4490:8899":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"4:11341:30135":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:10165:3179":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:8210:15906":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:42876:145":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:7540:13155":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:7584:15882":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:10223:16067":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:22078:22283":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:6625:8928":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:4973:12981":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:5882:13637":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:8659:15972":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:13981:20176":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:10969:16221":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"4:2572:2488":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:2590:116":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:11352:3243":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"4:3224:8838":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:7553:15881":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"4:11993:1499":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"1:4022:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:42642:71":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:45590:8416":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:21110:8800":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:2759:14898":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"16:4814:15536":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"4:4179:8892":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:42898:21947":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:11520:16006":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:13109:19428":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:5567:15805":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:9083:15957":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:1520:10360":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:44588:22248":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"4:5773:2007":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"4:2364:8778":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:4045:2988":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:9939:16030":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:5651:15810":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"5:3583:2674":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:30551:21531":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:12952:19417":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"4:1558:2674":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:9228:3144":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"4:2885:2493":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"4:4791:2494":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"4:11335:30601":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"4:2920:210":{"crate_id":4,"path":["std","io","error","Result"],"kind":"typedef"},"1:10058:2675":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:45720:8422":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:47999:8355":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:41949:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:45566:8380":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:6018:15825":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:40151:3008":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:9180:3017":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"14:40:18871":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:1543:2452":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"14:0:1889":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"10:44:14787":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:13332:20134":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:4800:12961":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:7592:15883":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:10080:16080":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:9048:15956":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"18:564:20248":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:5720:15814":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:10123:16037":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:12161:18894":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:30126:2727":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"4:11573:14838":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:43855:3006":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"4:48:1573":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"5:7255:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:13771:20156":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"4:5617:2496":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:7240:33849":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:7648:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:5639:15809":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:7529:13154":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"4:8354:8876":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:4446:12924":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"5:2035:2676":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"4:6242:2496":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"4:3731:8854":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:4811:802":{"crate_id":1,"path":["core","iter"],"kind":"module"},"11:332:2414":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:4380:12917":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:2589:14891":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"4:4899:8923":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"6:0:825":{"crate_id":6,"path":["libc"],"kind":"module"},"1:2349:182":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"4:3437:8797":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"4:2922:128":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"4:1569:2465":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:10981:16194":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:40919:3066":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:7517:13152":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"5:2960:32128":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"4:1921:8769":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"1:40520:3096":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:11669:16237":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:2850:2044":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:21211:8800":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"16:6427:15842":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:13620:20147":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"5:7547:2469":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"4:1077:8719":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:8740:15974":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"4:9111:8985":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"16:4868:15542":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"16:6864:33632":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:6983:3058":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"4:11099:8971":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:6688:10484":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"4:11968:29527":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"4:5553:8968":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"1:39321:202":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"4:8816:8971":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"1:10317:3180":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:40471:3092":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:4664:12946":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:22690:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:1973:16068":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"4:673:2684":{"crate_id":4,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"4:2380:8783":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"1:11573:3267":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"16:5028:15582":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"16:7763:15892":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"4:7022:2508":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:3395:16142":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:45612:8421":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:20628:26392":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:7306:121":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:43962:3277":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:22723:2766":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"4:8276:3111":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:1075:16034":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:4848:12967":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:1911:10543":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"16:2962:14906":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:4380:1979":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:10351:16119":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"11:817:2658":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:43283:23303":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"5:5614:2463":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:6130:13679":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:10931:16207":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:39301:199":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:6834:3055":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:49867:8378":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"5:4365:2455":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"11:657:2139":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:8252:15907":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:12552:19391":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"4:2634:8830":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"16:2293:14852":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:6671:10486":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"4:3379:3063":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"17:9016:15802":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:10906:16141":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"4:12005:1516":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"5:1302:8719":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"7:79:14655":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"4:3503:29899":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:14359:20202":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:11056:16223":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:47984:8354":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:7272:14442":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:41663:2675":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"4:4027:8864":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:6171:13681":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"11:630:2674":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"9:0:1885":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"6:1690:10376":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:9665:2542":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:41427:3107":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:0:443":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"17:8542:15953":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:4955:12979":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:11388:16000":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"4:9036:15867":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:4456:12925":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"5:2131:2443":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"4:11123:30615":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:10945:16219":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:0:497":{"crate_id":1,"path":["core"],"kind":"module"},"11:1852:8724":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:11642:16011":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:5900:13639":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:4723:12951":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:13719:20152":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:10544:16174":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"16:2443:14885":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"5:2141:32616":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:40458:3078":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:4963:12980":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:4895:12972":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"16:3042:14908":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"4:12010:1138":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"1:9886:222":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:41546:3111":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:5849:13594":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:46189:8401":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:4704:12949":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"4:2594:8821":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:45991:8423":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:12671:19400":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:10529:16173":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:5979:13643":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:2133:16062":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:12148:18893":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"4:12009:1572":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"1:21132:8365":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:21851:21497":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:9435:141":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:44056:3281":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:43724:3260":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"5:1011:2424":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:1666:1096":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:40397:3087":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"5:1273:8718":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"4:8115:8796":{"crate_id":4,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"6:7558:13158":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:43778:3258":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:4842:12966":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:42367:3144":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"5:822:2430":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:21681:8363":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"15:327:14834":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:13513:20141":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:30351:2916":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:12936:19416":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:46569:8424":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"16:7061:33739":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:13683:20149":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:21033:8366":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"17:8949:15981":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:11164:16217":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:547:9469":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:6028:13649":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:10097:16066":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"4:11990:312":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"1:21995:21277":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:13155:16008":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:11809:3238":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:13566:20144":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:9234:3146":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"5:1118:2668":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:5967:13642":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"4:5556:8969":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"4:1982:184":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"5:2223:32615":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"11:793:8710":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:5987:13644":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:21679:8800":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:47969:8353":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:13448:20138":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:20675:26523":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:13803:20160":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:10280:16115":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:46915:8451":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:7505:13150":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:7654:2986":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:4328:12913":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:44275:3228":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"1:43556:3178":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"17:12659:19399":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"4:1580:8723":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"4:5044:30938":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"4:1979:185":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:10430:16121":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"16:3744:14922":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:10957:16220":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:1746:22271":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"4:10788:130":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"9:486:14676":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"4:10322:2692":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"6:1709:10378":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"4:8830:8972":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:44351:3293":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:12646:19398":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"4:10961:8973":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:8321:2119":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:43820:3254":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:9153:15983":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"4:8159:2688":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"5:5771:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:9840:16020":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"4:0:1407":{"crate_id":4,"path":["std"],"kind":"module"},"1:40350:2694":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:12994:19420":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:43830:3253":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"16:8265:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:5471:2452":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"16:7568:34005":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"4:4049:8868":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"4:5818:2014":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:9296:15954":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:7231:3072":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:43678:3176":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"16:6470:15845":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:44279:3231":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"16:6160:33658":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:14380:20203":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"4:6675:30927":{"crate_id":4,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"16:7539:15880":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"18:660:20235":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:40184:3004":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"16:7289:15868":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:4764:12956":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:8428:3237":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"5:1288:2662":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:10361:16114":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"11:365:2416":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:5553:15804":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"5:3217:32636":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:46235:8456":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:30387:21228":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:2313:188":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"4:11187:8985":{"crate_id":4,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"17:8899:15979":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:22459:177":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"6:579:9474":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"5:6639:2424":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"11:1845:8723":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:12402:27139":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:48061:8357":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:12174:18895":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:43372:2706":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:41569:3112":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"18:609:34725":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:8794:15976":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:6589:9345":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"4:4814:8873":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:6915:33668":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"16:8125:15901":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:2984:2047":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:44525:3319":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:2928:1960":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"4:6536:2011":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"4:11989:1058":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"16:2611:14892":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"4:8980:107":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:1755:2698":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:20658:26522":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"15:394:14841":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"6:1681:10375":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:5100:15606":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"4:10818:30611":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"5:7193:2139":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"4:10512:8837":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:9734:15994":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:14189:20189":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"4:10075:8750":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:14341:20200":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:7250:9421":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"4:5747:2006":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:11220:16229":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:2842:2042":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"9:393:14678":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:11753:16240":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"4:3734:8853":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"4:5980:206":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:10161:16063":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:40530:3080":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:45760:8434":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"4:11308:27278":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"16:2857:14902":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:12435:19385":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:4556:12938":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"4:11131:3292":{"crate_id":4,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"4:5388:8963":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"4:582:8689":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:3233:1988":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:7025:33740":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"4:6606:2017":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:1500:10357":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:13574:20132":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"6:1590:10367":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:5890:13638":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:7661:3071":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:9232:3145":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:12004:18883":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:568:9472":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"11:2033:8717":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:40429:3090":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:11767:18869":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"4:5439:8966":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"16:2421:14884":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:39277:198":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"17:8632:15971":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:13757:20155":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:6554:15850":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:4325:1977":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:13957:20173":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:13043:19423":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"4:10922:27224":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:10175:15991":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:42888:8952":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"6:474:9460":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"11:311:33514":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"5:7398:21301":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:47931:8351":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:9230:194":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"5:6441:2446":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"16:4900:15550":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"4:8328:8926":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:562:9471":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:6516:15848":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:7277:1962":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:7278:14443":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:21244:8365":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:41910:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:9682:2488":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:11791:18870":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:2811:2035":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"4:4158:8890":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:40481:3093":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:9777:16017":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"18:96:20220":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:5301:15783":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"4:8202:3097":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"4:8844:8973":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"17:10444:16086":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"7:0:1562":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:13083:19426":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:7622:15884":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:4010:20805":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:10471:16123":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"4:923:8712":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:4917:12974":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"16:7515:15878":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"4:7374:30311":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"1:2694:225":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"16:3295:14911":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"4:7638:8800":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"17:8771:15975":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"4:8868:2139":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"11:1048:33506":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"4:7536:30329":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:9977:15992":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:8043:15897":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:43435:3185":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:9866:16022":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"5:7351:8707":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"5:6957:2482":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:42691:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"12:0:1888":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"18:574:34694":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:42224:2004":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:40506:3095":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"4:8222:3252":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"16:2874:14903":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:5818:13633":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:4754:12955":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"4:2210:129":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"18:699:20239":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:11924:18877":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:3934:2452":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"17:13862:20164":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"4:8564:8957":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:12089:18889":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:10345:3181":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:595:9476":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:2745:106":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:10083:3178":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"11:2049:2662":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:22099:2764":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:6651:2147":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:40080:3011":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:12035:18885":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:46851:8396":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"18:481:20243":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:44472:205":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"16:6303:15833":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:4469:12927":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:2740:1957":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"4:352:8686":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:40132:3006":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"4:1843:2686":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"11:644:2675":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"4:8010:8831":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"11:844:8716":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:46021:8429":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:6250:15831":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:2804:2038":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:43864:2985":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"16:7799:15893":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:13923:20170":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"5:2170:32211":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:8743:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:41655:2674":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"5:6081:2452":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"4:8874:8981":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:6787:22679":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"16:8152:15903":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:3181:22789":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"5:6308:8989":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:11290:15996":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:10520:16127":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"6:4341:12914":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:4724:15518":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:40094:3013":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:582:15970":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:11155:16226":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:47885:8347":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"5:5368:9026":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:6850:15858":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"4:7889:130":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"4:12000:749":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"17:10621:16178":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:13368:20135":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:587:9475":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"18:636:34718":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:40165:3010":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:11498:16005":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"5:4034:2424":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:32232:2964":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"9:426:14679":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:11905:18876":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:10799:16138":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:10597:16176":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"11:285:2655":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:4841:15539":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"4:7914:29708":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:45636:8381":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"4:11957:8697":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"16:6531:2411":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:400:15968":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"5:7184:8727":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:42651:68":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"4:7712:8695":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"16:2900:14904":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"14:165:14806":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:2683:220":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"6:506:9465":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"4:477:2484":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"4:6155:2503":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"9:177:14782":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:9226:3143":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:42596:68":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:40116:3005":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:9518:15989":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"5:2959:2201":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"5:3204:8724":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:11127:16005":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"11:2174:22614":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"4:7849:8793":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"17:9655:15992":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"5:3238:8725":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:6850:14072":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:3078:2050":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:2700:228":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"16:6986:15865":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"4:927:8713":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:44168:3241":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"6:4929:12975":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"4:7745:8757":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"4:8993:27184":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:44575:3323":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"6:6805:14068":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:46388:22060":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:30373:68":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:11250:16195":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:9274:3249":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:500:9464":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:11497:3266":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:7268:152":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:9850:16021":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:11454:16003":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:2743:2875":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"16:6347:15837":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:573:9473":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:13055:19424":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:6598:14058":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:4564:15454":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:42066:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:4374:12916":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"8:0:1884":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"4:4630:27238":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"5:3596:2675":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:11872:18874":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"4:11935:27521":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:13830:20161":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:6022:13648":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:3513:2446":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"5:1426:2675":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:21118:8364":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:7295:14444":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:7331:33974":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:5612:15807":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}