{"root":"0:0:1603","crate_version":"1.4.0","includes_private":false,"index":{"5:5306:27543":{"id":"5:5306:27543","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:11942:27541"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11834:25795":{"id":"1:11834:25795","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:48736:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9702:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9702:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11890:30813":{"id":"1:11890:30813","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11526:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11858:27694":{"id":"1:11858:27694","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:11843:410","self::pattern":"1:11521:3122"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11526:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11526:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11541:3139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11823:30805":{"id":"1:11823:30805","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11943:30829":{"id":"1:11943:30829","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4500:30829"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"1:51025:2882","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11919:30824":{"id":"1:11919:30824","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:11843:410","self::pattern":"1:11521:3122"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11526:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5291:31481":{"id":"5:5291:31481","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7158:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11526:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11922:27058":{"id":"1:11922:27058","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:11843:410","self::pattern":"1:11521:3122"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11526:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11902:30816":{"id":"1:11902:30816","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:11521:3122","`DoubleEndedIterator`":"1:7125:120","prim@char":"4:11843:410","str::rmatch_indices":"1:11905:30817"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"1:50876:3158","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11526:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11851:22342":{"id":"1:11851:22342","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"1:51018:3160","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11831:27658":{"id":"1:11831:27658","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:11860:1464"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11847:22346":{"id":"1:11847:22346","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:11848:22369"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"1:51000:3152","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1603":{"id":"0:0:1603","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[215,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\n# #[macro_use]\n# extern crate lazy_static;\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.4.0\")]","#![no_std]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:29:1609","0:31:1610","0:28:1603"],"is_stripped":false}},"1:11850:30810":{"id":"1:11850:30810","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"1:50990:3153","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11945:2860":{"id":"1:11945:2860","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4501:2860"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"1:51034:2859","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5302:31483":{"id":"5:5302:31483","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7158:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11915:30822":{"id":"1:11915:30822","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11838:25797":{"id":"1:11838:25797","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9702:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9702:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:11940:27546":{"id":"1:11940:27546","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11841:30809":{"id":"1:11841:30809","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:11849:1368","crate::ops::IndexMut":"1:2995:1983","str::slice_unchecked":"1:11840:30808"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:11941:27542":{"id":"1:11941:27542","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11934:30827":{"id":"1:11934:30827","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:11843:410","self::pattern":"1:11521:3122"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11526:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11526:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11541:3139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11822:30804":{"id":"1:11822:30804","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11855:27693":{"id":"1:11855:27693","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:11843:410","self::pattern":"1:11521:3122"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11526:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11884:27689":{"id":"1:11884:27689","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:11843:410","self::pattern":"1:11521:3122","str::rsplitn":"1:11887:27691"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"1:50830:3077","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11526:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5305:27544":{"id":"5:5305:27544","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:11941:27542"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:31:1610":{"id":"0:31:1610","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[213,0],"end":[215,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["lazy",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"LazyStatic","id":"0:29:1609","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11869:27230":{"id":"1:11869:27230","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:11521:3122","`DoubleEndedIterator`":"1:7125:120","prim@char":"4:11843:410","str::split_whitespace":"1:11847:22346","str::rsplit":"1:11875:27687"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"1:50726:3075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11526:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11828:30149":{"id":"1:11828:30149","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11089:3143"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11910:30819":{"id":"1:11910:30819","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5287:31480":{"id":"5:5287:31480","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:1899","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6909:8592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:1899","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6909:8592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11836:25796":{"id":"1:11836:25796","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9702:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9702:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:11914:30821":{"id":"1:11914:30821","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:29:1609":{"id":"0:29:1609","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[185,0],"end":[188,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:11865:2070":{"id":"1:11865:2070","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:48736:176","prim@char":"4:11843:410","self::pattern":"1:11521:3122"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11526:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11526:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11541:3139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11893:30814":{"id":"1:11893:30814","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11526:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11526:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11541:3139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11852:22008":{"id":"1:11852:22008","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:11843:410","self::pattern":"1:11521:3122"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11526:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11905:30817":{"id":"1:11905:30817","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:11521:3122","`DoubleEndedIterator`":"1:7125:120","prim@char":"4:11843:410","str::match_indices":"1:11902:30816"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"1:50894:3159","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11526:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11526:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11541:3139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11829:30807":{"id":"1:11829:30807","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:11942:27541":{"id":"1:11942:27541","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5294:31482":{"id":"5:5294:31482","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7158:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11878:30811":{"id":"1:11878:30811","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:11521:3122","str::split":"1:11869:27230","prim@char":"4:11843:410","`DoubleEndedIterator`":"1:7125:120","str::rsplit_terminator":"1:11881:30812"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"1:50776:3155","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11526:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11830:310":{"id":"1:11830:310","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:11831:27658","`u8`":"4:11860:1464"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11846:21849":{"id":"1:11846:21849","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"1:50712:3148","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11881:30812":{"id":"1:11881:30812","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:11521:3122","str::split":"1:11869:27230","prim@char":"4:11843:410","str::split_terminator":"1:11878:30811"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"1:50794:3154","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11526:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11526:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11541:3139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11928:30825":{"id":"1:11928:30825","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:11843:410","self::pattern":"1:11521:3122"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11526:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11526:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11541:3139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11825:30806":{"id":"1:11825:30806","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:11823:30805"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11946:30830":{"id":"1:11946:30830","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4498:30830"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"1:51043:2879","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11937:30828":{"id":"1:11937:30828","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:11483:126","`FromStr`":"1:11482:2634"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48878:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"1:11482:2634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:11482:2634","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11842:27677":{"id":"1:11842:27677","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:11843:27678"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11849:27231":{"id":"1:11849:27231","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"1:50980:3151","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11843:27678":{"id":"1:11843:27678","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:11842:27677"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11896:1794":{"id":"1:11896:1794","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:11521:3122","`DoubleEndedIterator`":"1:7125:120","prim@char":"4:11843:410","str::matches":"1:11896:1794"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"1:50930:3156","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11526:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11861:2112":{"id":"1:11861:2112","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:48736:176","prim@char":"4:11843:410","self::pattern":"1:11521:3122"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11526:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11899:30815":{"id":"1:11899:30815","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:11521:3122","`DoubleEndedIterator`":"1:7125:120","prim@char":"4:11843:410","str::matches":"1:11896:1794"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"1:50948:3157","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11526:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11526:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11541:3139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5304:2943":{"id":"5:5304:2943","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7158:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11916:30823":{"id":"1:11916:30823","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:11843:410","self::pattern":"1:11521:3122"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11526:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11526:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:11546:3138","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5286":{"id":"5:5286","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5197:1368","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5287:31480","5:5288:2783","5:5291:31481","5:5294:31482","5:5302:31483","5:5303:31484","5:5304:2943","5:5305:27544","5:5306:27543"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5303:31484":{"id":"5:5303:31484","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:288:1899","`String`":"5:7158:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:1899","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6909:8592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11848:22369":{"id":"1:11848:22369","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:11847:22346"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"1:51009:3161","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11820:797":{"id":"1:11820:797","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:11843:410"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11931:30826":{"id":"1:11931:30826","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:11843:410","self::pattern":"1:11521:3122"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11526:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11821:2071":{"id":"1:11821:2071","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11875:27687":{"id":"1:11875:27687","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:11521:3122","`DoubleEndedIterator`":"1:7125:120","prim@char":"4:11843:410","str::split":"1:11869:27230"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"1:50744:3079","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11526:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11526:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11541:3139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11832:1608":{"id":"1:11832:1608","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:48736:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9702:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9702:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11872:22344":{"id":"1:11872:22344","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:11843:410","self::pattern":"1:11521:3122"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"1:11345:3088","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11526:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:28:1603":{"id":"0:28:1603","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[167,0],"end":[179,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"kind":"macro","inner":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"},"1:11840:30808":{"id":"1:11840:30808","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:11849:1368","str::slice_mut_unchecked":"1:11841:30809","crate::ops::Index":"1:2991:1982"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:11912:30820":{"id":"1:11912:30820","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11908:30818":{"id":"1:11908:30818","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11925:27695":{"id":"1:11925:27695","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:11843:410","self::pattern":"1:11521:3122"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11526:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11526:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11541:3139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11845:20851":{"id":"1:11845:20851","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:11843:410"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"1:50702:3149","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11844:22340":{"id":"1:11844:22340","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:11843:410"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"1:50696:3150","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11887:27691":{"id":"1:11887:27691","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:11843:410","str::splitn":"1:11884:27689","self::pattern":"1:11521:3122"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"1:50848:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11526:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11526:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11541:3139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11819":{"id":"1:11819","crate_id":1,"name":null,"span":null,"visibility":{"restricted":{"parent":"1:11084:1368","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["1:11820:797","1:11821:2071","1:11822:30804","1:11823:30805","1:11825:30806","1:11828:30149","1:11829:30807","1:11830:310","1:11831:27658","1:11832:1608","1:11834:25795","1:11836:25796","1:11838:25797","1:11840:30808","1:11841:30809","1:11842:27677","1:11843:27678","1:11844:22340","1:11845:20851","1:11846:21849","1:11847:22346","1:11848:22369","1:11849:27231","1:11850:30810","1:11851:22342","1:11852:22008","1:11855:27693","1:11858:27694","1:11861:2112","1:11865:2070","1:11869:27230","1:11872:22344","1:11875:27687","1:11878:30811","1:11881:30812","1:11884:27689","1:11887:27691","1:11890:30813","1:11893:30814","1:11896:1794","1:11899:30815","1:11902:30816","1:11905:30817","1:11908:30818","1:11910:30819","1:11912:30820","1:11914:30821","1:11915:30822","1:11916:30823","1:11919:30824","1:11922:27058","1:11925:27695","1:11928:30825","1:11931:30826","1:11934:30827","1:11937:30828","1:11939:27545","1:11940:27546","1:11941:27542","1:11942:27541","1:11943:30829","1:11945:2860","1:11946:30830"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11939:27545":{"id":"1:11939:27545","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5288:2783":{"id":"5:5288:2783","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7158:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11526:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"1:47646:2967":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"4:7679:8603":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"17:9627:15768":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"4:7695:8610":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:13580:19659":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"4:11447:8858":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"1:25641:2636":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"4:3119:29901":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:4001:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:4024:2863":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:10374:15875":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"16:7044:33036":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:10608:15707":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"4:7699:22326":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"1:49051:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"5:5741:2546":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:562:9338":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:3402:14626":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:51110:3168":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"12:777:2300":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"1:8564:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"4:3369:8654":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"4:11844:1480":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"1:50085:22393":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:39883:2837":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:541:9335":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:4162:12599":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"4:11809:27174":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"4:8501:8815":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"5:6503:2359":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:7557:15599":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"4:3858:8716":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"4:10987:8830":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"5:1387:2076":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:5682:13285":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"5:4297:2340":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:7929:15609":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:54495:8298":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:4544:12636":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:50038:22372":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:47655:2968":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:47282:2864":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:579:9341":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:10894:15720":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"4:5702:1943":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:10014:3089":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"14:202:8896":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:4262:15139":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:6534:13711":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:6312:13700":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"4:534:2368":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"16:7166:15577":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"4:11849:1368":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"1:10655:3086":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:20665:8274":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"6:6434:13705":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"4:11226:27497":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:11345:3088":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:10973:15921":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"4:6066:2386":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"6:4506:12632":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"4:10686:118":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:50592:3084":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:48010:2940":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:47636:2966":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:12948:19152":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:13366:19607":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"5:3245:2295":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"16:7603:15601":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:12972:19485":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:11873:18701":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"5:1612:2308":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"12:1120:14516":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"4:11685:2414":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:47380:2859":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:8732:23944":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"14:215:14527":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:48566:2988":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:54655:8250":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"4:11391:8711":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"0:29:1609":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"1:7202:156":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:13527:19650":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:51708:158":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:6510:13709":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:52668:20389":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:20405:2824":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"5:3132:31690":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"12:1029:8574":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"4:5165:187":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"1:47664:22405":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"4:7576:8542":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"18:690:19721":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"4:7793:8634":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:48946:180":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"5:3057:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"4:9371:8632":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"6:4222:12604":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:4675:12653":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:5490:13272":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"4:10819:8829":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"6:4645:12649":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"4:4159:8751":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:4427:12626":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:7267:15581":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:21681:20443":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:21130:8269":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:1919:2568":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:4304:12614":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:2498:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:47103:2849":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:47503:2897":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"typedef"},"1:48937:2076":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:47461:2932":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"4:11038:8660":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:11368:16337":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"5:7112:20232":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"18:609:33743":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:9976:3076":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:12514:18925":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:51481:3193":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:3389:2833":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"1:8737:23130":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:5851:12508":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:5628:15526":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:2849:1977":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:7059:2051":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:5122:15495":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:10476:15912":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"4:48:1518":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:5592:13279":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"5:3611:2543":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:4569:12639":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"4:3125:27038":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"4:933:8569":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:11828:18698":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:54433:8333":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:2282:14593":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:7357:15589":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:48033:2942":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"12:810:8566":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:4373:1917":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:6519:13710":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"16:7237:15579":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:12198:18784":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:51461:3132":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:49854:3035":{"crate_id":1,"path":["core","fmt","FlagV1"],"kind":"enum"},"1:50980:3151":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"17:13148:19533":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"4:10399:8693":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:10283:15877":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:51644:208":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"6:6555:13713":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:52490:8326":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:6385:10177":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:12739:18989":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"4:6917:2393":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:47456:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:7479:2952":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"4:8490:8814":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"6:4726:12658":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:2389:14598":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"9:0:1820":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:51469:3134":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:4297:15150":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"18:614:33747":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:10182:15826":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:9553:15700":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"11:36:32564":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"4:4625:8758":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:50712:3148":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:9897:15863":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:53127:20392":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"5:6203:2308":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"0:28:1603":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"17:13039:19517":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:11592:3171":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:52428:8305":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:4669:12652":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:51634:202":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"17:13231:19568":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"4:6463:1947":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:4413:15170":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:53497:8320":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"16:6735:15570":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"4:4559:26473":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"4:10641:8634":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"4:10696:2555":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:10497:15914":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:20847:8732":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"4:1575:2295":{"crate_id":4,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"17:13082:19523":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:0:802":{"crate_id":6,"path":["libc"],"kind":"module"},"17:9293:15746":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:8418:15689":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"4:4239:8752":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:22069:175":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:11747:111":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:6582:13715":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:21613:20454":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"5:1432:8567":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"4:11865:775":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"17:10822:15716":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"4:8146:3148":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"17:10670:15710":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:12033:18712":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"5:6924:8582":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:8631:15692":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:2557:14605":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"9:709:8809":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:11174:16143":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"4:4311:8746":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"5:3098:31695":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:5882:2982":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:8245:3137":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:57559:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:8569:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"5:2375:2536":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"4:8152:3075":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"6:6963:9288":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"4:1927:8626":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"5:1366:2541":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:11559:18518":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:10385:15908":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:21287:3070":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:13478:19624":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:47402:2882":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:62:8955":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"4:8171:8707":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:11125:16105":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"5:7169:8893":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:6805:2939":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"4:3444:8655":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"5:7081:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"16:6059:33039":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:4277:12610":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:6137:15543":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:4754:781":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:54183:8309":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:20433:23702":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:10159:15828":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:12176:18735":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:11541:3139":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:1506:10235":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:4241:12606":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"12:1845:2295":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"6:5544:13277":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:57637:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:6676:15567":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:54675:8252":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:6376:15559":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:20678:8732":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:21486:21098":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:5520:13275":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"18:574:33733":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"16:6463:15560":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"5:688:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"16:3632:14653":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:7299:14273":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"4:7944:8687":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:53835:8321":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:6610:23009":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"16:5878:14565":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:47707:2972":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:10688:3087":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"4:11859:727":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"1:2778:1961":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"4:10341:2400":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:12355:202":{"crate_id":1,"path":["core","task","ready","Ready"],"kind":"struct"},"5:6670:2365":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:474:9327":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:1894:10396":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"4:9864:20438":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:12211:18785":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"4:6533:1953":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:1728:10258":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:12756:19032":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"12:353:2293":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"14:31:14524":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:47739:2974":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:10128:3077":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:2827:1972":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:10121:15821":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"4:11841:367":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"1:2680:1921":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:46882:1984":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"16:7909:15608":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:4471:12630":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:11893:18702":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:9433:15736":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"11:44:14505":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"1:50876:3158":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:3191:21515":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:9328:15740":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:12251:18788":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:22333:168":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"4:5233:119":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:2672:217":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"18:707:3140":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:4563:2873":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:2843:1976":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:54754:8257":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:12630:18980":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:4364:12621":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"12:1138:8575":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"9:505:14500":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"4:5546:2379":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:2306:124":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"6:4195:12601":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"15:0:1825":{"crate_id":15,"path":["addr2line"],"kind":"module"},"4:10666:8635":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"4:8239:8708":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:22300:167":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"4:7513:2395":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"4:11860:1464":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"1:3178:1991":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:20418:23702":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"16:6330:15556":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"16:7511:15597":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:50532:3081":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"14:7:14524":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:46835:1993":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"4:0:1360":{"crate_id":4,"path":["std"],"kind":"module"},"4:1771:599":{"crate_id":4,"path":["std","env"],"kind":"module"},"4:8247:8755":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"4:5007:29941":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:51043:2879":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"16:5184:14564":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:10142:3073":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:3326:68":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"4:8912:27170":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:49507:3038":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:11547:15866":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"7:0:1507":{"crate_id":7,"path":["unwind"],"kind":"module"},"12:697:8568":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:50614:2573":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:11014:16034":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:2509:14603":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:12955:19164":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:10296:15876":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:10087:3080":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"12:1832:2541":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"5:2880:31675":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"4:588:8544":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:13114:19527":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:9947:15864":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:51325:3182":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"4:11330:8710":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"4:7800:8635":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"16:7396:15591":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:12964:19484":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"4:8741:183":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"1:54617:8301":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"4:5422:8829":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"16:6123:15542":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"4:7864:2543":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"4:11214:27083":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:6321:13701":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:51161:3175":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"5:3119:8580":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:10682:15711":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:6842:32669":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:6656:2936":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:52561:8318":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:12609:18927":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:6563:2963":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"4:1586:8579":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"13:0:1818":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:11271:3167":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:6528:15562":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:11997:18709":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"12:1534:2534":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:52591:8306":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:4747:12660":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:48852:2052":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:54792:8259":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:12322:18798":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"4:7810:8636":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"16:7372:32785":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:21808:2638":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:6458:13707":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"5:1212:8573":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"5:6484:2347":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:6034:15538":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:4459:12629":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"5:6645:2351":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:11054:16095":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:10233:15904":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:10156:3078":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:1511:10236":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:12291:18796":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:1556:10242":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"4:2208:128":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"4:10806:8610":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"4:8797:8838":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:10921:15919":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:1538:10240":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:13594:19693":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"4:847:2541":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:11853:18700":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:13214:19566":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"7:32:14289":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"12:1044:14515":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"5:5391:2347":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:4525:12634":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:9500:2371":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"5:7180:8894":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"4:2371:8650":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"17:9691:15782":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"4:8324:8792":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:8441:15690":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:13492:19642":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:1737:2819":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:5664:15527":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"4:10915:2403":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:2936:1895":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"6:7230:12792":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:7329:15587":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:10257:15879":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"4:939:8570":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:48649:20441":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:10321:15872":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"16:6284:15553":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:54635:8248":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:223:207":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:2683:14610":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:4249:12607":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:5597:13280":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:6654:15566":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:11315:16321":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"4:5053:188":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"16:4385:15166":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:5793:15532":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"4:5907:203":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"4:9102:8847":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:3088:1986":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:8981:15698":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:4289:1913":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:5235:32968":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:8162:15681":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"5:1973:2545":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"16:2727:14612":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:47799:2978":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"4:7856:8685":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:5605:13281":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:9193:33712":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:50030:3060":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:52360:8337":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:2504:132":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"4:5368:8827":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"5:6157:2332":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:12781:19035":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:4778:12663":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:51000:3152":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"16:7956:15611":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:1707:10256":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:5615:13282":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:11939:18706":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"16:5163:15512":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"14:221:14533":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:12118:18718":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:47678:2970":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:13158:19555":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"4:4108:8750":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"12:2053:8573":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"6:7224:12791":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:13047:19520":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:51449:3129":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"5:2065:31644":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:21393:8732":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"16:6472:14539":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"4:7587:8522":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"6:4575:12640":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:784:2311":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"5:1091:30604":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:47827:2980":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"4:11842:921":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"16:2749:14613":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:10455:15902":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:22399:166":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:52530:20241":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:12850:19081":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:2857:1979":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"4:1788:8597":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"12:119:2289":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:5702:13287":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:3166:134":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"4:11858:731":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"4:9364:128":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"18:531:19732":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:13374:19608":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:51473:3135":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"9:800:14451":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"9:19:14389":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"5:5549:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:9577:15763":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:8752:3148":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:9024:3040":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"4:10402:8695":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:13279:19569":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"4:7823:129":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"14:0:1824":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"4:11075:8846":{"crate_id":4,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:2507:235":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"18:636:33751":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:46897:197":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:48734:178":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"15:193:14542":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"18:113:19707":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:49371:1940":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:11234:3165":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:2511:234":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"18:599:33741":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:8139:2055":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"18:564:19734":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"4:1986:182":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:5417:2969":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:4849:15294":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:9831:15860":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"4:8139:2978":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"4:3894:8717":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"4:11814:8553":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:21135:8292":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"4:3197:8696":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:50948:3157":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:3932:2337":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"17:9539:15757":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"4:8269:8786":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"12:2205:8562":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"4:11857:730":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"1:21592:20285":{"crate_id":1,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"17:10445:15717":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:47355:2879":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:51477:3136":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"5:2604:30498":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:1547:10241":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:10108:15820":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:20452:23860":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:10420:15901":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"4:1989:181":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"4:1436:143":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:47096:1914":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"4:9059:216":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"5:4818:2337":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"4:5891:2379":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"12:762:2295":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"16:2320:14595":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:2495:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:30074:20323":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"6:4210:12603":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:652:9390":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:9791:15812":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"16:2793:14615":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:20719:8732":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"18:719:19723":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"4:11853:631":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"6:4310:12615":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"16:5472:15519":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"4:1592:8580":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:5374:15513":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:10360:15873":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:48066:2949":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"16:6496:15561":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"16:8014:15614":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"4:8392:8809":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"6:4267:12609":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"18:671:19719":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"4:11465:27106":{"crate_id":4,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:4631:12647":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:11800:18696":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"12:861:8572":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:2810:1969":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:22201:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"5:4264:2337":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:20602:8272":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"17:13071:19522":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"9:956:14320":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:2154:579":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:30016:20324":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:48802:2542":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:2682:223":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"4:4976:29941":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:7278:15582":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:9700:15781":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:9061:15700":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"4:6875:30141":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:11485:18511":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:9751:15783":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:4639:12648":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:0:434":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:21758:20464":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:1643:2765":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:2578:115":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"4:9987:2558":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:47716:2959":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:7148:1897":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:50702:3149":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"4:10926:2404":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:47276:2859":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:13327:19570":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:11087:16103":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:22366:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"4:8291:8734":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"16:2993:14621":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:3506:2332":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"17:10245:15905":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"16:6316:15555":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"4:10932:2405":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:2921:1923":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:20852:8264":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:48794:2541":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"5:5814:2337":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:5743:13292":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:47608:2561":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:7236:12793":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:3206:1922":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"4:878:8564":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"4:6602:29967":{"crate_id":4,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"16:534:32974":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:5494:2958":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"4:7848:27036":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:9764:15811":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"4:8965:27192":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:8871:15696":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:2337:179":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:4150:1733":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"6:1586:10245":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"4:3665:8709":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"4:5676:1942":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:6567:15563":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:554:9337":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:2932:1894":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:6781:15572":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"4:6114:27163":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:47082:15614":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"1:50696:3150":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:49733:67":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"6:5737:13291":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:547:9336":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:53158:20449":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:11721:18690":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"5:6003:8850":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:5737:15529":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"4:3435:27040":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:10403:15714":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:22432:2640":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:13184:19558":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:47416:2884":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:2802:1968":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:1636:578":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:50522:2570":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"4:3342:2337":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"4:925:8567":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:10088:15824":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:7084:133":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:2501:147":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"17:386:15677":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"6:573:9340":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"4:4087:8748":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"4:5669:1941":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"4:8811:8839":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:12046:18713":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:6332:13702":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:51009:3161":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:6303:9210":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:10170:3074":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:6402:10180":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"9:188:14369":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"17:9475:15760":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:4389:12624":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:5635:13283":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"12:1859:8579":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:506:9332":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:2868:14618":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:21395:8266":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:54701:8254":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:12134:18719":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"4:7025:27500":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:47386:2881":{"crate_id":1,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"1:57202:8341":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"4:4557:26471":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:47409:2883":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:47333:2889":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"4:10999:8831":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:5694:13286":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:6425:13704":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:9071:33692":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"4:9110:27103":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","fast","DtorState"],"kind":"enum"},"17:13382:19609":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"18:0:1828":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:13506:19648":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:21299:23706":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"4:11843:410":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"1:51338:3141":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"16:2411:14599":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"4:10444:2401":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:10520:15915":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:3172:1989":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"4:4666:8736":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:5219:14560":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:47748:2975":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:13031:19516":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"6:5453:13215":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"5:3902:2308":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:50285:22154":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:54371:8313":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:53685:8297":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:9230:140":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"4:8165:8708":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:9401:2426":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"4:11151:8837":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:48629:21227":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:57611:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:10583:15706":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:6903:15575":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:12060:18714":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"4:8220:8753":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"4:4837:8782":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:1825:1925":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:5730:13290":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"4:870:2076":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:21539:21104":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:5886:13324":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:11482:2634":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:12768:19034":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"5:781:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:4728:23658":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"5:3680:2295":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"1:2723:2836":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"5:2873:2138":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"5:5705:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"4:10037:27517":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"6:4485:12631":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"4:7840:118":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"4:8265:8783":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:12980:19512":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"4:8958:29972":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"6:5845:13322":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"4:6363:1737":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"5:3568:2308":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:10997:15922":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:1531:10239":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:11515:18513":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"5:6601:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"9:977:14322":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:54579:8336":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"12:1628:2301":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:7088:149":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"13:220:32579":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:8110:15660":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:9018:3038":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:4290:12612":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:9422:15737":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"18:481:19729":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:8966:131":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"6:482:9328":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:10075:15823":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:52631:20284":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"4:6390:1951":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:2908:116":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"4:3922:8720":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:11535:3140":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"16:5411:15515":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:11137:16106":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:1903:15796":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:21721:20239":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"12:1866:8580":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:13100:19525":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"5:7006:2076":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:11034:16035":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:7942:15610":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"4:1824:8608":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"16:7483:15595":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"4:2867:207":{"crate_id":4,"path":["std","io","error","Result"],"kind":"typedef"},"5:1404:8564":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"5:3943:2542":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"4:2217:8637":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"1:50289:3093":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:8272:15684":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:4447:12628":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:488:9329":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:4721:15262":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:13340:19571":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:8393:15688":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:9857:15840":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"3:0:1815":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"4:8096:2555":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"5:7158:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:53029:8300":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:11661:18629":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:29940:2787":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:1713:8742":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:12550:18926":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:53385:8332":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:11247:16198":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"4:5485:8834":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"4:5539:203":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:9223:15725":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"12:2184:23459":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:12349:18861":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:4550:12637":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"4:2213:2366":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"17:11217:16146":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"4:11868:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"4:891:8565":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:2657:14609":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"4:6169:2379":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"6:4234:12605":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:6865:32642":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:9118:33691":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:9930:15839":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"4:929:8568":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:47442:2886":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"4:4397:8758":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"4:8342:8799":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"16:5981:33043":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:2679:1892":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"6:7008:14085":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"4:3234:8691":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"4:8176:8704":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"6:494:9330":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:6279:9378":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:7426:15592":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:9283:15748":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:5871:13323":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"4:11199:27043":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"16:7497:15596":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"12:853:8571":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:51290:3179":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"4:9376:2399":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:10721:15713":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:1744:10259":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:4817:15286":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:12816:19038":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"19:0:1011":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:47363:2880":{"crate_id":1,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:39874:2832":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"6:6339:8786":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:562:15679":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:51695:3223":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:11500:18512":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"5:1257:8575":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:10332:15907":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:51358:3142":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"4:11056:26814":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"4:1074:8574":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"4:11847:308":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"6:4820:12667":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:13091:19524":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"5:1422:8566":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:7247:12794":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:12225:18786":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:10062:15825":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"4:8474:8812":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"16:4519:15228":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:10875:15719":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:9488:15759":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"12:393:32574":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"5:3699:2308":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:29980:2789":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"4:8781:8832":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"12:98:32565":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:49291:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"5:6941:2320":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:52907:8307":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"4:5305:8823":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"6:4284:12611":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"4:8047:8653":{"crate_id":4,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"17:9820:15859":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:50894:3159":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"4:638:8549":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:6210:15549":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:12307:18797":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:2686:225":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:52650:8295":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:54690:8253":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"4:7788:8632":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"4:10849:8832":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"5:6909:8592":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:2822:1971":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"4:7464:15679":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"5:3477:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"0:0:1603":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"1:47423:2885":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"6:5578:13245":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:4755:12661":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:2832:1973":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"4:2613:8686":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:50067:8809":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"12:300:32569":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:6359:15558":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:21787:24294":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:6474:2084":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:53261:8339":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:5815:15533":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:9026:3041":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:8951:33719":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:3989:22370":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:6440:13706":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"4:4662:8731":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"5:7235:2295":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"17:11761:18693":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:49751:70":{"crate_id":1,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"17:12860:19082":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:12324:2386":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"4:10210:2559":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"16:6171:15546":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"18:755:19726":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:20880:8268":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"5:7098:8630":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"4:6350:1736":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"17:9778:15784":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:50605:3082":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"4:2361:8645":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"6:4602:12643":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"4:6082:2389":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:12436:3226":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:49331:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"12:1852:8578":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"5:5143:8886":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:11259:16307":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:8774:15663":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"4:3387:2554":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"12:1836:2076":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"5:2884:31673":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:50794:3154":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"4:9043:164":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:11343:16323":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:13404:19611":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:4749:15266":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:2301:185":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:39870:22326":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:9483:2429":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"16:3457:14627":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:7825:15604":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:11606:18621":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"4:4743:8730":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:4296:12613":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:47489:2931":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:6419:13703":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:9401:15742":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"4:734:141":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"4:860:2542":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:49870:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"17:1021:15747":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"4:1847:2552":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"5:6351:2308":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"16:4357:15162":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:47764:2976":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"4:904:2332":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:4693:12655":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:8241:15683":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"4:11855:732":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"16:3854:14803":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"4:7934:29944":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"18:766:19727":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"5:219:2306":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:5203:14562":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"4:5482:8833":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"1:47778:2977":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:3377:2834":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"16:2631:14608":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:11288:16317":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:8140:2054":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:47319:2887":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"4:10706:27074":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:30002:67":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:47073:2835":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"6:1568:10243":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:13059:19521":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"4:3970:8723":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:2229:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"17:13176:19557":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:49493:3037":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:12137:22101":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:51253:3178":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"12:834:2527":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:568:9339":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"4:361:8541":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:7516:23945":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"4:621:8546":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:3249:15845":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:8881:33720":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"4:2869:127":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"16:5949:15535":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:4888:15309":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:0:487":{"crate_id":1,"path":["core"],"kind":"module"},"1:51725:3228":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"4:10123:8836":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"4:8789:2541":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:12884:19146":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"4:11370:8709":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"18:96:19706":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:11186:16144":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"16:7847:15605":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:50513:3071":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:500:9331":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:6252:15551":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:57598:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"18:736:19725":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:420:14568":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:9317:15741":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"4:6313:29967":{"crate_id":4,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"16:7435:15593":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:1692:10254":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:51132:3169":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:4317:12616":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:2991:1982":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:2861:1980":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"5:6513:2361":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"5:3872:2332":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:2790:1963":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"5:3488:2541":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"4:1564:2541":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"16:6146:15544":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"4:8087:8698":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"17:242:33713":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"12:2190:32572":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:2825:14616":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:47696:2981":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:54041:8340":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"4:4886:8791":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"6:1601:10246":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:11546:3138":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"4:8898:1944":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"4:8843:8841":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:2837:1975":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:6668:32962":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:3640:2076":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:8526:15665":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"4:10631:27503":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:2806:1967":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:4149:12598":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:5723:13289":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:4257:12608":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:4189:12600":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:4299:1914":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:2973:1992":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"12:2080:8574":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:51500:121":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:51304:3180":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:47023:1985":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"6:1606:10247":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:10528:15704":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:7472:2861":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:2458:8732":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:13024:19515":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:4144:15069":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:20721:8265":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"5:4034:2337":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:7047:2954":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"5:632:31634":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:8339:15686":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:10049:3079":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:13413:19614":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"14:40:15922":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:4227:1908":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:1674:10252":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:9284:3058":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:12103:135":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"4:6217:203":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"6:4106:12594":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"5:7128:8628":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:2343:186":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:9515:2434":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"6:1701:10255":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:48039:2944":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:5759:32309":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:12695:18984":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"5:1708:2295":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"14:187:14534":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:1517:10237":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:9022:191":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"17:10752:15714":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:48583:2989":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"4:3157:8693":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:10796:15664":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:11436:18510":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:51034:2859":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"4:962:8572":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:4606:15243":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:50542:2572":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:8991:33714":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"16:5447:15517":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:49131:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:50990:3153":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"16:4662:15251":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:12896:19148":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"9:586:14351":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"17:10506:15880":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"4:3908:8718":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:1660:10251":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"4:4561:26475":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:50830:3077":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:12638:18982":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"4:3966:8722":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:13518:19649":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:9274:15728":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"4:3765:8711":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:11356:16336":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:52460:8338":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:57572:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"4:11307:2410":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:12381:139":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:51018:3160":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"4:7575:8732":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"4:4057:27495":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:20727:8267":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:12164:18721":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:47473:20232":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"4:7475:29964":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:52382:8325":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:47595:2964":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:11951:18707":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:21820:2642":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"4:10636:29909":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"16:4786:15279":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:2459:2594":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:21:668":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"17:8055:15662":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:54541:8316":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:0:1827":{"crate_id":17,"path":["object"],"kind":"module"},"17:8796:15695":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:21704:20383":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"4:11825:27072":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"5:6971:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:2749:2750":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"1:48861:2142":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"4:11011:27063":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:52406:8317":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"6:4516:12633":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"4:8992:26757":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"16:2487:14602":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:53575:8308":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"16:7567:15600":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"4:1065:2531":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"4:6818:2408":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","fast","Key"],"kind":"struct"},"17:12617:18928":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:6200:15548":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:9601:15761":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:47586:2956":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:2894:14619":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"4:355:8540":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:47536:2418":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:13192:19559":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:5596:15525":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:9658:15808":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:10221:15903":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"4:11864:1460":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"17:8596:15691":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:2683:222":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"5:1413:8565":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:9671:15775":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"4:11867:1104":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"17:12278:18790":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"16:6517:14538":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"4:6277:163":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:51533:3196":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:39834:2829":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:51652:192":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"4:7672:8577":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"6:4561:12638":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"5:6949:31650":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:49784:109":{"crate_id":1,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"5:4939:1939":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"5:4219:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"5:3623:2545":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:50046:3059":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"16:5494:15520":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:49091:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:50930:3156":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"17:9458:15774":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:2930:14620":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"6:4437:12627":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:49211:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:9263:15727":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:8561:15666":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:10139:15700":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"16:6109:15541":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:9160:22387":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"6:4654:12650":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:4201:12602":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:4499:8714":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"16:7872:15606":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"9:649:14340":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"6:4125:12596":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:51315:3181":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"14:160:14524":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:10854:15718":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:46979:198":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"4:4547:8720":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"18:515:19731":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:6489:13708":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:4826:12668":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:58933:21242":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"1:8956:2893":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"17:12909:19149":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:7890:15607":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:50744:3079":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:8141:2053":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:54831:8260":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:47729:2973":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:5525:15522":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:8475:15661":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"4:679:2550":{"crate_id":4,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"4:1898:8625":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"1:52791:8331":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:50579:2955":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:8494:14562":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"9:676:14326":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"1:50670:3147":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"5:4103:2541":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"18:582:2824":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:46913:195":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"17:13134:19531":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:13354:19572":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:5388:15514":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:58912:21243":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"17:12874:19084":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:11748:18692":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:10270:15878":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"12:274:2524":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:4399:1918":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"5:2162:31641":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:4344:1915":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:4736:12659":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:38661:180":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"5:1376:2542":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"4:920:8566":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"4:3279:8681":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"4:11848:1338":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"4:8859:8842":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:1771:15762":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:50848:3073":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"5:6918:2076":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:12008:18710":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"4:11184:27045":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:11974:18708":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:38678:2824":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"16:2367:14597":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:587:9342":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:8510:14560":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:9279:3057":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"4:8917:106":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"4:2343:2791":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"1:51226:3177":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:7259:12796":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"16:4327:15156":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:8368:15687":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:2535:14604":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"6:5564:13244":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:4345:12619":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:4814:12666":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:20871:8732":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"16:5510:15521":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:5614:32809":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:49757:130":{"crate_id":1,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"17:8212:15682":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"5:7252:2354":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"10:0:1821":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:47303:20482":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:13168:19556":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:10310:15906":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"4:641:8551":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"4:6354:1945":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:12073:18715":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:526:9333":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:47546:2928":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"17:13141:19532":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"18:491:33729":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:12237:18787":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:11089:3143":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:51453:3130":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:11684:18630":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"12:1003:2531":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"5:961:2308":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"5:6979:30482":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:6704:15569":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:11310:3166":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:51457:3131":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:50684:3146":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:53415:8335":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:49500:3036":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"16:2433:14600":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:47089:21833":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"4:3978:8725":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"4:3956:8721":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"4:8432:8811":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"1:1552:2337":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"4:4079:8747":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:12337:15717":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:5792:13295":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:4371:12622":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:51445:3127":{"crate_id":1,"path":["core","str","LinesAnyMap"],"kind":"struct"},"17:13126:19530":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:10490:15913":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"12:669:8567":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:12087:18716":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:49251:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:1672:1067":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"4:7613:2401":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"1:52983:8296":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:11075:3069":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"12:2069:2531":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:9446:15749":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:8911:33711":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:9909:15819":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:2842:14617":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:9526:15758":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:9303:15745":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"5:1071:2535":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"16:6070:15540":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:9894:3075":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"17:10434:15910":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"12:632:2541":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"18:681:19720":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:4081:1926":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:11708:18689":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:20450:23863":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:9250:15726":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:4108:1927":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"4:11861:1461":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"17:12926:19150":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:2252:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"4:8129:2964":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"16:7343:15588":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:54664:8251":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:48024:1736":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:532:9334":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:50453:22384":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:8137:15680":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"4:646:8552":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:11294:3164":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:11787:18695":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"4:7939:27168":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"5:864:2316":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:9644:15754":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:2261:14566":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:10642:15709":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:21669:2637":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"9:33:14390":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"4:4419:8759":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:51687:3222":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"16:2465:14601":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:46796:1994":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"12:320:2291":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:20690:8263":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"18:624:33750":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:46937:196":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"4:11248:2408":{"crate_id":4,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"4:5553:2380":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:2605:14607":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:46957:199":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"16:4545:15230":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"4:1568:2076":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:2094:31640":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"5:679:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:6241:15550":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:10949:15920":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"4:5745:1950":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"18:652:33733":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:4700:984":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:9371:15701":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:6593:15564":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:4356:12620":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:12103:18717":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"4:914:2295":{"crate_id":4,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"17:13572:19657":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:51025:2882":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:11594:18565":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:9016:3037":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"6:4621:12646":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"4:6519:1952":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"17:8701:15694":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"4:3916:8719":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"12:387:32578":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:48685:2992":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"16:8056:15615":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:9738:15785":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"6:1642:10249":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"12:1872:8581":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"1:9012:119":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:4218:204":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:20639:8273":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"5:1454:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:7289:14272":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:2771:14614":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"4:1849:2553":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"5:2055:2325":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"4:2359:8644":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"5:6276:2076":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"16:4689:15254":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"4:10676:129":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:6865:1906":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:2995:1983":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"18:727:19724":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:9631:15755":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:48600:2990":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"18:644:33733":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"4:6738:8849":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:50077:22338":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"4:4095:8749":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"12:1555:14518":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"4:11850:1446":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"4:10654:27047":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:52761:8327":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:9183:15703":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"5:4064:2337":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:52715:8262":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"4:9083:8660":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"17:11528:15867":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:11070:16096":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"12:815:8569":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"4:7592:8530":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"5:4722:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"15:175:14541":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:54769:8258":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:11576:18521":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"4:11145:27179":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"4:1571:2332":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:3188:14624":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:11909:18703":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"12:2198:32567":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"16:5558:15524":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:2794:1966":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"4:2831:2376":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:12797:19036":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"12:646:2542":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:123:9010":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:12485:18924":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:6619:15565":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:2763:1960":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:47291:2888":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"4:8080:2939":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"1:9020:3039":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:57585:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:7093:15576":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:4716:12657":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:13557:19652":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:4:995":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"9:111:14333":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"17:1931:15756":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:2705:14611":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:10708:15712":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:11521:3122":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"6:4327:12617":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:2815:1974":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"6:4339:12618":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"4:3601:8706":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:9845:2541":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:4441:15174":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"4:9968:8608":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:12265:18789":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:7970:15612":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:53651:8315":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"5:7141:8629":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:3026:14623":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:29757:2595":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"17:12836:19079":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:6017:15537":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"5:1329:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"4:8213:2992":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"5:1443:8568":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"4:4491:8774":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:13221:19567":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:22267:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"4:11862:1462":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"17:10394:15909":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"5:7065:8563":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:4216:12448":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:2300:14594":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"4:6466:1948":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:2768:1965":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:11161:16142":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"4:7266:27169":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"6:5751:13293":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:4663:12651":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:595:9343":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"16:2579:14606":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"5:5725:1939":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:4615:12645":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:11734:18691":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"18:521:19728":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:6362:10203":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:6548:13712":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"18:590:22371":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:53005:8299":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:13536:19651":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"4:3236:8692":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"4:3312:2944":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"1:49766:67":{"crate_id":1,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"1:9937:3088":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"5:288:1899":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"4:9064:8846":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"1:2853:1978":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"4:10831:27082":{"crate_id":4,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:4353:1916":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"9:592:14338":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"6:4591:12642":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:48672:2991":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"5:6089:2351":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"4:3122:27032":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:8295:15685":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:49514:3039":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"16:3263:14625":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"4:7641:8547":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"4:9054:215":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"12:1518:14517":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:12164:189":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"4:505:2325":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:7176:14244":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"4:11866:1517":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"1:50726:3075":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"17:13007:19514":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:47055:1988":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:4112:12595":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"4:3864:8715":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:4377:12623":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"5:36:2304":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"16:6186:15547":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:11271:16310":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:1751:21228":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:487:15678":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:52861:8319":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:53339:8328":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:52937:8311":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:21629:23121":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:5761:15530":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:7097:1898":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"12:0:1823":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"1:48921:2541":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:20473:23862":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:51178:3176":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"16:6298:15554":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:11526:3137":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:7659:15603":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"12:822:8570":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:30180:20367":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"4:4828:8781":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"18:660:19718":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:11617:18622":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"4:8970:27182":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:48929:2542":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:49171:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:11330:16322":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"5:3127:8578":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"5:2876:30499":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"5:5095:2308":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"5:6963:2076":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:7288:15583":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:7211:15578":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:9869:2542":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:5541:15523":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:9339:15739":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"4:1051:8573":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:48810:2076":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"17:13203:19560":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:1962:15780":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"4:4622:8784":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:9031:33703":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"5:2874:31674":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:57624:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:4585:12641":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"12:738:8565":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"1:47687:2971":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:5661:24016":{"crate_id":1,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"17:11106:16104":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"4:10612:8785":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:967:15743":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"16:6877:15574":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:11536:15865":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"16:6270:15552":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:21645:20377":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"4:8805:2076":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:14:1795":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:47343:2890":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:9362:15700":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"5:3093:8579":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:21794:2641":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"12:1085:2532":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:4574:15235":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:8941:15697":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:10774:15715":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"5:1055:30606":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:9014:3036":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:48720:2994":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:5782:13294":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"4:9013:27086":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"16:5996:15536":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"4:10193:8827":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:2866:1981":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:7319:15586":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:11774:18694":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"4:11490:14550":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:7249:15580":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:11235:16197":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"18:507:33733":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"5:3086:2541":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:9382:15744":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"4:2539:2373":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"9:863:14317":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:7298:15584":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:12361:18864":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"4:6567:214":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:11813:18697":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:50553:3085":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:5670:13284":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:22168:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"4:5319:8824":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"17:8822:33694":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"4:11856:729":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"4:4720:2377":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:5839:15534":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:3599:14644":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:3243:1924":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:54644:8249":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"4:5354:8826":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"4:3051:8699":{"crate_id":4,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"1:48543:152":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"4:8978:15575":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:7475:2951":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:4771:12662":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:50270:3117":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:2684:108":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"5:2142:31638":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:4708:12656":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"12:1840:2332":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"4:956:8571":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:52336:20430":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"15:214:14546":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:49011:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:5482:13271":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"4:8225:8754":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:2784:1964":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:2341:14596":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"4:7662:8576":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"16:4635:15248":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:13436:19615":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:48785:2075":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:50624:3083":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:9885:15862":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"9:920:14319":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:6985:14083":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:3716:14689":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:48819:2051":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"16:7469:15594":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"4:2573:8677":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"12:2178:32566":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:7543:15598":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"5:3501:2542":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"4:8935:26806":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"4:11846:1029":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"17:9873:15861":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"5:3153:8581":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"12:1065:32573":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"4:8231:8745":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:11841:18699":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:5533:13276":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:11199:16145":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:48017:22418":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:22135:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"12:60:32577":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:22102:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:10845:15717":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"4:9176:2552":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"16:6816:32971":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:7218:12790":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:9712:15810":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:1760:2565":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"16:6829:32997":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:54293:8329":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:51465:3133":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:11149:16141":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:7135:33019":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:8666:15693":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"12:725:8564":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"6:1649:10250":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"5:5139:8885":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:22831:2635":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:0:1826":{"crate_id":16,"path":["gimli"],"kind":"module"},"4:8415:8810":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:9108:15701":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:53080:20245":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:7276:12798":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:3125:15827":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:9722:15807":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:2773:1962":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:9155:15702":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"4:2210:8633":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"1:4222:1907":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"4:558:2549":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:10350:15715":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:10207:15892":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"4:2549:2371":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:6287:10176":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:9805:15858":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"4:413:162":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:9007:111":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"16:7117:33055":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:47813:2979":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"4:7532:2397":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"5:273:2308":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"5:881:2541":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:47626:2965":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"4:3451:8675":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"16:6052:15539":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:247:33718":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:47566:2955":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"4:11019:3193":{"crate_id":4,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:12674:18983":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"6:7253:12795":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:2232:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"4:1083:8575":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"5:836:2314":{"crate_id":5,"path":["alloc","collections","binary_heap","retain","RebuildOnDrop"],"kind":"struct"},"17:12748:18990":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:48870:190":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"6:7265:12797":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:4707:2927":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:48708:2993":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"16:5780:15531":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"4:1580:8578":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"5:1228:8574":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:47617:2957":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:52813:8334":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:6690:15568":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"11:0:1822":{"crate_id":11,"path":["adler"],"kind":"module"},"6:4408:12625":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"9:622:14339":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"4:8923:8531":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:2916:15822":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:48878:207":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"4:8753:8830":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"4:8484:2541":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"1:12116:3219":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"6:5551:13278":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:3010:14622":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"16:5703:15528":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"4:8159:3151":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"1:51737:3225":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"12:985:8573":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"4:484:2367":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"4:1786:8596":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"1:2736:1893":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:12313:106":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"6:6564:13714":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:6790:15573":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:50776:3155":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"5:1959:2543":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:20878:8270":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:9681:15809":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"8:0:1819":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:48971:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"4:3426:2893":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"1:7125:120":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"4:950:2527":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:9702:219":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:47788:2961":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"5:7000:2076":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"4:11128:2406":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"4:11863:1463":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"17:9350:15738":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"6:4683:12654":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:5709:13288":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"4:11497:14550":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:2939:1896":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:1029:1735":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"12:659:2076":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:2691:1920":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"16:3689:14686":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:52613:8310":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:5508:13273":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:5460:15518":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"7:79:14296":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"5:6933:2332":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"4:5339:8825":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"4:3195:8695":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"14:165:14525":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"4:11232:27430":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:1580:10244":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:50634:2574":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:6345:15557":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"4:7656:8550":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:4788:12664":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"16:6719:32951":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"18:699:19722":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:20471:23858":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:22234:2639":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:1614:10248":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:2798:1970":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:13459:19618":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:1684:10253":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:10625:15708":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"4:8108:8656":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"5:4234:2340":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:2592:127":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"18:538:19733":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"9:382:14424":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:21742:20469":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:11059:3067":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"4:3159:8694":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:7637:15602":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:9692:8732":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"9:896:14318":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"4:5990:2381":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:50504:3072":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:48058:2947":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:6991:14084":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:12934:19151":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"4:5811:2381":{"crate_id":4,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"4:7783:8631":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"1:50055:144":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:11639:18623":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:48048:2424":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"16:6161:15545":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:4608:12644":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:5433:15516":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:52316:20448":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:54739:8256":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:1524:10238":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:49818:71":{"crate_id":1,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"17:13393:19610":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"13:108:32624":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"18:80:19705":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"4:8830:8840":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:4921:15318":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"4:10405:8691":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"16:7980:15613":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:4807:12665":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:11300:16318":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:9021:15699":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"5:1463:8585":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:20768:8268":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:51521:3195":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:3977:22373":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:53621:8312":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:47001:200":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"5:7053:8562":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:29974:2788":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"4:4664:8735":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:1720:10257":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:5514:13274":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:9501:15745":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:7309:15585":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:6743:15571":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"4:10810:27470":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:53181:20483":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:12730:18988":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:10546:15705":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:3151:1987":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"5:5615:2332":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:12189:3220":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:52512:8330":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"4:8875:8843":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:49796:127":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"17:12022:18711":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:9844:15818":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"4:2345:8640":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"0:31:1610":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"4:8735:8828":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"17:12148:18720":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:4136:12597":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:7051:2953":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"4:3662:8710":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"4:11854:632":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"17:10466:15911":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:119:9009":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:9165:33693":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:3566:14635":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:54716:8255":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"4:2476:8684":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:21696:21238":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"5:1243:2531":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:4537:12635":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"4:8767:8831":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:2942:1741":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:3161:231":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:51147:3172":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"4:10298:8828":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:52959:8314":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"16:4217:15118":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"9:827:14415":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"12:751:2332":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"4:1597:8581":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"16:153:2286":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:9244:144":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"16:7388:15590":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}