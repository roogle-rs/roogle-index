{"root":"0:0:1988","crate_version":"1.4.0","includes_private":false,"index":{"1:13140:25414":{"id":"1:13140:25414","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:29:1994":{"id":"0:29:1994","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[185,0],"end":[188,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"0:28:1988":{"id":"0:28:1988","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[167,0],"end":[179,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"inner":{"macro":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"}},"1:13134:1993":{"id":"1:13134:1993","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41582:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41580:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13124:29843":{"id":"1:13124:29843","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13142:29847":{"id":"1:13142:29847","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12302:1700","str::slice_mut_unchecked":"1:13143:29848","crate::ops::Index":"1:39146:2388"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13130:26887":{"id":"1:13130:26887","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12360:3527"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13152:23266":{"id":"1:13152:23266","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13153:23258"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43736:3536","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13207:29853":{"id":"1:13207:29853","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12812:3507","`DoubleEndedIterator`":"1:8201:129","prim@char":"4:12296:458","str::rmatch_indices":"1:13210:29854"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43612:3542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:3521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13239:29864":{"id":"1:13239:29864","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12296:458","self::pattern":"1:12812:3507"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:3521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12818:3521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12833:3523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13247:26064":{"id":"1:13247:26064","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13192:26936":{"id":"1:13192:26936","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12296:458","str::splitn":"1:13189:26934","self::pattern":"1:12812:3507"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43584:3459","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:3521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12818:3521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12833:3523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13251:28091":{"id":"1:13251:28091","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:974:37242"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5603":{"id":"5:5603","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5604:30563","5:5605:3187","5:5608:30564","5:5611:30565","5:5619:30566","5:5620:30567","5:5621:3343","5:5622:26061","5:5623:26062"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13195:26938":{"id":"1:13195:26938","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41580:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:3521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5611:30565":{"id":"5:5611:30565","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13233:29862":{"id":"1:13233:29862","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12296:458","self::pattern":"1:12812:3507"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:3521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12818:3521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12833:3523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1988":{"id":"0:0:1988","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[215,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\n# #[macro_use]\n# extern crate lazy_static;\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.4.0\")]","#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:29:1994","0:31:1995","0:28:1988"],"is_stripped":false}}},"1:13210:29854":{"id":"1:13210:29854","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12812:3507","`DoubleEndedIterator`":"1:8201:129","prim@char":"4:12296:458","str::match_indices":"1:13207:29853"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43630:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:3521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12818:3521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12833:3523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13122:981":{"id":"1:13122:981","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12296:458"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13150:23310":{"id":"1:13150:23310","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12296:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43438:3533","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13255:29867":{"id":"1:13255:29867","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4896:29867"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43779:3287","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13220:29859":{"id":"1:13220:29859","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5622:26061":{"id":"5:5622:26061","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13247:26064"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13132:334":{"id":"1:13132:334","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13133:26904","`u8`":"4:12313:1829"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13156:23229":{"id":"1:13156:23229","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43754:3544","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13198:26939":{"id":"1:13198:26939","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41580:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:3521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12818:3521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12833:3523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13230:26940":{"id":"1:13230:26940","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12296:458","self::pattern":"1:12812:3507"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41580:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:3521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12818:3521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12833:3523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13163:26548":{"id":"1:13163:26548","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12296:458","self::pattern":"1:12812:3507"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:3521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12818:3521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12833:3523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13153:23258":{"id":"1:13153:23258","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13152:23266"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43745:3545","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13146:26927":{"id":"1:13146:26927","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13147:26928"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:41580:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13245:28086":{"id":"1:13245:28086","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39501:3236","Self::is_ascii":"1:13244:26059"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41580:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39501:3236","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13147:26928":{"id":"1:13147:26928","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13146:26927"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:41580:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13155:29849":{"id":"1:13155:29849","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43726:3537","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13127:29845":{"id":"1:13127:29845","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:13125:29844"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13151:21738":{"id":"1:13151:21738","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43448:3330","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13204:29852":{"id":"1:13204:29852","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12812:3507","`DoubleEndedIterator`":"1:8201:129","prim@char":"4:12296:458","str::matches":"1:13201:2195"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43684:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:3521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12818:3521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12833:3523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13166:2521":{"id":"1:13166:2521","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41582:190","prim@char":"4:12296:458","self::pattern":"1:12812:3507"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41580:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:3521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13217:29857":{"id":"1:13217:29857","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13170:2479":{"id":"1:13170:2479","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41582:190","prim@char":"4:12296:458","self::pattern":"1:12812:3507"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41580:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:3521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12818:3521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12833:3523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13186:29851":{"id":"1:13186:29851","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12812:3507","str::split":"1:13174:26929","prim@char":"4:12296:458","str::split_terminator":"1:13183:29850"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43530:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:3521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12818:3521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12833:3523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13177:23217":{"id":"1:13177:23217","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12296:458","self::pattern":"1:12812:3507"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12628:3474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:3521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13154:28985":{"id":"1:13154:28985","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43716:3535","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13143:29848":{"id":"1:13143:29848","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12302:1700","crate::ops::IndexMut":"1:3379:2389","str::slice_unchecked":"1:13142:29847"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5605:3187":{"id":"5:5605:3187","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:3521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13224:29861":{"id":"1:13224:29861","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12296:458","self::pattern":"1:12812:3507"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:3521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5621:3343":{"id":"5:5621:3343","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13157:24124":{"id":"1:13157:24124","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12296:458","self::pattern":"1:12812:3507"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:3521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13213:29855":{"id":"1:13213:29855","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5619:30566":{"id":"5:5619:30566","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5604:30563":{"id":"5:5604:30563","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:295:2295","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:295:2295","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13215:29856":{"id":"1:13215:29856","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13250:28090":{"id":"1:13250:28090","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:974:37242"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13149:23227":{"id":"1:13149:23227","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12296:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43432:3534","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13174:26929":{"id":"1:13174:26929","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12812:3507","`DoubleEndedIterator`":"1:8201:129","prim@char":"4:12296:458","str::split_whitespace":"1:13152:23266","str::rsplit":"1:13180:26932"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43462:3461","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:3521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13242:29865":{"id":"1:13242:29865","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12773:135","`FromStr`":"1:12772:3018"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41713:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12772:3018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12772:3018","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13160:26546":{"id":"1:13160:26546","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"4:12296:458","self::pattern":"1:12812:3507"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:3521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13244:26059":{"id":"1:13244:26059","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13131:29846":{"id":"1:13131:29846","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:31:1995":{"id":"0:31:1995","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[213,0],"end":[215,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["lazy",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"LazyStatic","id":"0:29:1994","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13227:26483":{"id":"1:13227:26483","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12296:458","self::pattern":"1:12812:3507"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41580:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:3521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13144:26923":{"id":"1:13144:26923","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:13146:26927","str::split_at_mut":"1:13145:26924"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13123:2480":{"id":"1:13123:2480","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13201:2195":{"id":"1:13201:2195","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12812:3507","`DoubleEndedIterator`":"1:8201:129","prim@char":"4:12296:458","str::rmatches":"1:13204:29852"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43666:3540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:3521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5608:30564":{"id":"5:5608:30564","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:3521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13125:29844":{"id":"1:13125:29844","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13133:26904":{"id":"1:13133:26904","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12313:1829"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13189:26934":{"id":"1:13189:26934","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12296:458","self::pattern":"1:12812:3507","str::rsplitn":"1:13192:26936"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43566:3463","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:3521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13221:29860":{"id":"1:13221:29860","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12296:458","self::pattern":"1:12812:3507"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:3521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12818:3521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12838:3522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13219:29858":{"id":"1:13219:29858","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5623:26062":{"id":"5:5623:26062","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13248:26065"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13121":{"id":"1:13121","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13122:981","1:13123:2480","1:13124:29843","1:13125:29844","1:13127:29845","1:13130:26887","1:13131:29846","1:13132:334","1:13133:26904","1:13134:1993","1:13136:25412","1:13138:25413","1:13140:25414","1:13142:29847","1:13143:29848","1:13144:26923","1:13145:26924","1:13146:26927","1:13147:26928","1:13149:23227","1:13150:23310","1:13151:21738","1:13152:23266","1:13153:23258","1:13154:28985","1:13155:29849","1:13156:23229","1:13157:24124","1:13160:26546","1:13163:26548","1:13166:2521","1:13170:2479","1:13174:26929","1:13177:23217","1:13180:26932","1:13183:29850","1:13186:29851","1:13189:26934","1:13192:26936","1:13195:26938","1:13198:26939","1:13201:2195","1:13204:29852","1:13207:29853","1:13210:29854","1:13213:29855","1:13215:29856","1:13217:29857","1:13219:29858","1:13220:29859","1:13221:29860","1:13224:29861","1:13227:26483","1:13230:26940","1:13233:29862","1:13236:29863","1:13239:29864","1:13242:29865","1:13244:26059","1:13245:28086","1:13246:26063","1:13247:26064","1:13248:26065","1:13249:28089","1:13250:28090","1:13251:28091","1:13252:29866","1:13254:3266","1:13255:29867"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13246:26063":{"id":"1:13246:26063","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13180:26932":{"id":"1:13180:26932","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12812:3507","`DoubleEndedIterator`":"1:8201:129","prim@char":"4:12296:458","str::split":"1:13174:26929"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43480:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:3521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12818:3521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12833:3523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13252:29866":{"id":"1:13252:29866","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4898:29866"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43761:3288","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13236:29863":{"id":"1:13236:29863","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12296:458","self::pattern":"1:12812:3507"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:3521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13254:3266":{"id":"1:13254:3266","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4899:3266"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43770:3267","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13136:25412":{"id":"1:13136:25412","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41582:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41580:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13138:25413":{"id":"1:13138:25413","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13145:26924":{"id":"1:13145:26924","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:13144:26923","str::split_at_mut_checked":"1:13147:26928"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13183:29850":{"id":"1:13183:29850","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12812:3507","str::split":"1:13174:26929","prim@char":"4:12296:458","`DoubleEndedIterator`":"1:8201:129","str::rsplit_terminator":"1:13186:29851"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43512:3539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12818:3521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5620:30567":{"id":"5:5620:30567","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:295:2295","`String`":"5:7632:242"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:295:2295","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13249:28089":{"id":"1:13249:28089","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:974:37242"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13248:26065":{"id":"1:13248:26065","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"11:1087:32239":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:3842:15844":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"4:1588:2484":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:10155:16707":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:7910:16801":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"4:9251:8967":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"6:4965:13753":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:13325:19866":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:11898:17065":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"5:7422:30962":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:15720:21192":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"4:513:8963":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:43369:2952":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"4:3294:9148":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:1503:10675":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"11:396:2865":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"4:2687:25800":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:14575:16875":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:7813:16797":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"11:2383:2891":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:13581:19884":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"4:1600:9020":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:22696:23566":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:729:3021":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"16:7823:16798":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:12516:17158":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"4:10868:25909":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"17:15426:21174":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"4:5059:9232":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:41841:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:15010:21140":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:3347:140":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:4824:13739":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:13568:19883":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:42194:2338":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"11:1917:9022":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"14:187:15716":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"5:1171:2883":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:6447:14514":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:2838:15806":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"5:1568:209":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:9671:16862":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:43754:3544":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:4952:13751":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:46618:8639":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:11179:3462":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"5:6600:29729":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:14271:20400":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"4:7088:9294":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:10170:16708":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"11:430:32255":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:6654:3382":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:11841:17087":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"5:7569:9076":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"11:2326:2873":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"16:2338:15783":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:45846:23647":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"4:4171:9178":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:3473:210":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"12:0:2223":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:261:32714":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:12289:17098":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"4:8568:9209":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:10251:3422":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"5:2309:30929":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"5:7632:242":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"15:306:15733":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"5:1064:29729":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:12388:17127":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"11:837:9013":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"5:1480:2892":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"4:12297:1851":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"1:10255:3424":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"11:1160:9019":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:10185:16864":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:11217:3475":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"11:883:9016":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"4:12302:1700":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"4:8458:9106":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"1:45973:8703":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"4:10912:138":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"1:40005:3288":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"4:2292:3211":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"17:12353:17135":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:46720:8645":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:40214:3333":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"6:6379:14445":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:22985:23424":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"1:2240:2945":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:14968:21137":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:32679:2363":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"6:5352:13794":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"1:11072:2892":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:15418:21173":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"18:507:33550":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:6689:14533":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"17:16198:21369":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"1:44208:3514":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:43421:3531":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:15214:21154":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:13674:20367":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:8172:2294":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:6872:16762":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"4:3558:2918":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"9:357:15593":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"4:6805:2354":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"14:40:19861":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:44376:163":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"18:643:33550":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:21435:21704":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"11:2443:2897":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"6:1593:10685":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:2394:15786":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:5370:13796":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"4:11057:26343":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"4:8579:9199":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:11140:3474":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"4:4766:28578":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"11:1603:15700":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"4:4951:9183":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:7052:16770":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"4:10949:26498":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:10954:16925":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:46114:8675":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:43745:3545":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"4:928:9012":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:4328:23681":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:12238:17104":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"9:238:9259":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:2119:188":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:1565:10682":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"4:8206:26303":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:12454:17139":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"16:4424:16311":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:7321:2457":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:15596:21183":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:4492:2324":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"16:6120:16730":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:7695:16791":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"4:8501:3461":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"1:40342:3371":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:10617:3488":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"4:1595:9009":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:41880:86":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:11166:16943":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:11674:17032":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:9916:16891":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:41508:3391":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"6:6714:14536":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"17:9737:16860":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"4:9395:161":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"1:40310:3368":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"15:327:15737":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"4:8587:9162":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:45814:8735":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"16:6433:16741":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:44463:3606":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"17:11313:16967":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:11227:16935":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:31984:16812":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"4:10968:9273":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"4:3387:9146":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"16:7618:16787":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"4:6127:2920":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"4:8434:9153":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"17:15116:21145":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:6543:16749":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"4:1612:9022":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:41580:193":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"17:11063:16949":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"4:4353:9207":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:6648:16756":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:5201:3332":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"6:5376:13797":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"11:2140:2873":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:9288:2459":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:9720:91":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"16:6588:16752":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"4:11542:28879":{"crate_id":4,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"17:15624:21186":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:21479:21706":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:15368:21167":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:11853:17088":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:13211:19860":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:5181:13773":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:3899:15878":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:2827:9107":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:22837:3034":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"5:7436:2484":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:5390:13799":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:8073:16802":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:2604:103":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:13015:16875":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:9858:16889":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:44184:3517":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:4352:109":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"4:8814:9262":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"1:10261:3426":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:14012:20384":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"4:10712:2931":{"crate_id":4,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"17:12969:16863":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:5142:423":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"5:3872:9009":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"6:7516:14957":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:44188:3516":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:46417:8676":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:5236:13779":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:32015:2290":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:10460:152":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"6:8265:13990":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"16:4771:16428":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:21564:9107":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"11:351:32252":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"17:14723:21128":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"6:1621:10686":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:43259:3458":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:45913:23650":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"4:7345:26053":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:39146:2388":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:11345:3459":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:11048:2891":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"5:3238:2891":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:45508:8707":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"4:9133:9291":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:5954:3259":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"6:1639:10688":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:22259:8782":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"17:13497:19878":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:11026:16929":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"4:2289:9082":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"1:38487:2383":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:14599:20422":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:13707:151":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:22861:3035":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"18:531:21412":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"16:7888:16800":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"4:8170:138":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"1:40395:3374":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:5636:13824":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:40420:3376":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"4:1050:9017":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:542:32666":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"5:723:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:5677:13829":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:14587:20421":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:10137:16859":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:46759:8646":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:22612:24005":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:11755:17037":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:22215:8781":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"4:12311:888":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"17:14994:21127":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:5927:16722":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:43053:3480":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:12827:3524":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:12707:16909":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:10715:23687":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"6:8247:13987":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:3807:2896":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:33335:2371":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:4856:16444":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:8012:15333":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:6098:16729":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:2936:15810":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:43297:2951":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"6:8351:15532":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:5700:16710":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:21680:9107":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:46504:8682":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"18:718:21398":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"4:846:2891":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:15313:21162":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"4:12308:894":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"1:22297:8783":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:43894:3562":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"14:220:15718":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"4:12300:333":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"17:9781:16888":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:43360:3468":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"5:2757:29822":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"4:2048:197":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"4:3540:9104":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"5:3250:31280":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:46327:8670":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"18:670:21402":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:3350:141":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"16:6353:16736":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:11367:16945":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"4:12312:869":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"15:288:15732":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:43334:3356":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:10905:16908":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:11764:17038":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"6:532:9782":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"11:2403:2892":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:9984:16893":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"4:8688:9258":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"17:11788:17085":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:5407:1226":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"4:5460:128":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"17:10671:33526":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:13473:19876":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:13844:20374":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"4:11156:9277":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:256:32750":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:44037:3567":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:32493:2364":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:497:9779":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:14212:20396":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"11:1883:2891":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:43726:3537":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:40385:3373":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:6749:16758":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"4:5036:9230":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:16032:19862":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"1:33158:2372":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:40404:3375":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:41342:3388":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"4:1064:2873":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"11:1891:2897":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:40272:3358":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"16:2303:15754":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:12792:16869":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:13986:20382":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"9:330:15633":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"4:8141:9099":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:2768:15803":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:4609:2303":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"0:31:1995":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"4:4619:9211":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:4531:16349":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"5:7412:9033":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"1:40319:23239":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:13477:204":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"5:7452:29655":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:2788:15804":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"4:1082:9019":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:11595:17030":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"16:6342:32732":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"9:482:15576":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:12508:17143":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:40051:3290":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"16:2636:15797":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:6031:3369":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:4:1239":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"16:8136:16805":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:39258:215":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:13272:19863":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:8301:16813":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"16:3475:15816":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:5277:13784":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:5064:13765":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:10249:128":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:44512:24054":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:1929:658":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"6:8197:15495":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:21464:21697":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:15281:21159":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:15616:21185":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"4:890:9008":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:6813:16760":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:15023:21141":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"4:4109:9172":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:13526:19880":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"16:6047:16726":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:14079:20389":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:5039:13762":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"4:10873:28555":{"crate_id":4,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"6:5002:13758":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:15289:21160":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:10573:33527":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:545:9784":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"15:394:15744":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:10257:3425":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"5:1577:9031":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:5489:13810":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"1:2501:3205":{"crate_id":1,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"1:3184:2387":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"4:1985:770":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"1:40100:3286":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:12584:16906":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"4:8197:9005":{"crate_id":4,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"4:4163:9176":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:5052:13764":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:11688:16998":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:11647:17031":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"4:903:2897":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:46475:8731":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:6491:14473":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:11359:3464":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:13627:115":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"4:9332:26051":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"5:4104:29729":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"4:8026:8992":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:11812:17044":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"18:689:21404":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"4:5936:2341":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:13308:19865":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:10350:16899":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:12530:17149":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"15:0:2225":{"crate_id":15,"path":["addr2line"],"kind":"module"},"11:2554:32247":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:11115:16938":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:7132:32555":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"14:7:15708":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:2998:15811":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:5314:13789":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:7584:14962":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:15400:21171":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:3138:3248":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:3536:2392":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:46563:8634":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:12724:16910":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:12201:17131":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:5122:13769":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:39218:214":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:5466:13806":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:11567:17029":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"16:5769:16714":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"11:2542:24558":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:12494:17106":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"18:680:21403":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:12342:17101":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:31980:24024":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"16:3669:15818":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"4:8446:2919":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"11:299:2859":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:14414:20410":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:3305:9023":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"16:6940:32688":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:523:9781":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:46250:8698":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:10997:16927":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:7330:9656":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:11405:16975":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:39066:2399":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:5995:16724":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:4916:13747":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"5:3026:2545":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"4:9681:9102":{"crate_id":4,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"4:938:9014":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:33645:2374":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:11089:16940":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:21572:8653":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:6802:15726":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:7379:32729":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"5:7402:9028":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:21990:3454":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:22768:23441":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:40779:23242":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:45537:8661":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:12768:16867":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:11097:3461":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"17:10612:16902":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:42299:3422":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"4:10299:2929":{"crate_id":4,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"1:3234:2376":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"6:1547:10680":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"16:4802:16436":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:39315:3246":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"16:5960:16723":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:14235:20397":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"11:123:2856":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:4891:13576":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"5:280:29729":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"4:9080:198":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"6:6542:14521":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:1628:10687":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"5:870:9025":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"11:700:2484":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:46173:8664":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"5:7597:9077":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:14489:20415":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:15333:21164":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:1485:10672":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:2657:200":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"11:2151:9018":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:14933:21136":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"4:4830:9233":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"9:424:15579":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:44089:3526":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"6:8029:15334":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:46572:8635":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"4:8148:9103":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"4:11000:9279":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1:45423:8700":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"4:12263:28440":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:15078:16944":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:11932:3221":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:14284:20401":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"4:11180:26465":{"crate_id":4,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:37908:2382":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:41608:2891":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"17:13024:16919":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"5:5409:29729":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:44489:3614":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"16:2728:15801":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:13553:19882":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:40593:3380":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:46583:8636":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:12628:3474":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:12597:17154":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"17:14560:20420":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"5:2207:30960":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"11:2423:2484":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"6:6721:14537":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"6:8288:13993":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"9:53:15596":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"11:832:9010":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:8159:144":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"14:214:15717":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"9:178:15682":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:2044:23513":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"11:1896:9009":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"6:5266:13783":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:43512:3539":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"4:1897:2916":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"1:3329:2384":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"4:11316:9080":{"crate_id":4,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"4:9164:9286":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:479:9776":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"18:521:21408":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:6782:16759":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:46135:8681":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:40092:3292":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"struct"},"1:45491:8701":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:14529:20418":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:40827:3348":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:44373:149":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"4:4872:9187":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:4830:16441":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:8122:3355":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"18:573:33550":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"18:598:33554":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:39150:2390":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:11634:17001":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"11:1887:2484":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:43844:3559":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:13670:2956":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"1:44390:226":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"5:6763:29729":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"5:1155:31283":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:11493:16986":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:15376:21168":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:43986:3565":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:10622:33532":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"4:9258:26506":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:15957:21357":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"16:6317:16734":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:2355:15784":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:22002:21701":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:4932:13749":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:732:189":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"16:4352:16262":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:44398:206":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"6:5528:13813":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"4:7940:9107":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"17:15635:21187":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"18:613:33567":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"4:8638:9186":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:5502:13811":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"7:0:1880":{"crate_id":7,"path":["unwind"],"kind":"module"},"4:5547:9270":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"1:12833:3523":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:42532:23633":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:15356:21166":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:7590:16785":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"4:4280:9204":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"16:8216:16810":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:6874:14573":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:39163:212":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"4:9206:9290":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"4:5115:9240":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"1:40363:3372":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:5174:9195":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:15249:21156":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:485:9777":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:12900:16915":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:4897:13745":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"4:10931:2919":{"crate_id":4,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"17:16121:21363":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1:43584:3459":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:8328:13998":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"6:6609:14524":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"4:7984:2931":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"17:10720:33516":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:13455:19875":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"4:6318:26339":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:15383:21169":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:44192:3520":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"4:4928:9189":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:42036:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"4:12309:876":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"11:2536:32248":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:16235:21372":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"1:40351:3381":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:13116:17188":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:12371:16916":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"4:9240:28462":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"4:8495:3330":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"4:913:9009":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"6:6650:14528":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:4742:2314":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:41713:225":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"16:5817:16717":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"4:4641:9212":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:5756:16713":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"4:12315:1817":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"1:46023:8715":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:45683:8708":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"4:7959:8971":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"17:15814:21199":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:12251:17103":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"4:10458:2930":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"4:8520:9161":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"4:6860:232":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:9938:16892":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"4:10667:9150":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"1:43911:3563":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:6532:14520":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"4:11781:9163":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:12818:3521":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:12887:16914":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:10903:238":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:23040:23618":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"17:11419:16905":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"4:10849:9235":{"crate_id":4,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"1:2943:136":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"16:5686:16709":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"4:8214:9140":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:538:9783":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:15521:21180":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:3264:17048":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:12464:17140":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"4:9377:234":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"5:2114:9032":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"4:8300:9142":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"4:3854:9163":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"4:2051:196":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:13774:17091":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:12824:16911":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:6670:14531":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:43379:3469":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:12808:16870":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:15176:21150":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:46667:8642":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"5:4423:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:6300:16733":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"4:9299:16773":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"4:9279:28860":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:13999:20383":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:6768:14543":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"16:6079:16728":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:6657:14529":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:15138:21147":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"4:3257:26297":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"4:2287:137":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"1:12838:3522":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:6729:14538":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"16:7686:16790":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"11:811:9009":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:22559:24018":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:43716:3535":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:40085:3291":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:22996:23610":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"1:43684:3541":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"4:9674:137":{"crate_id":4,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"11:1051:9018":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"16:150:15759":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"4:9091:9277":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"6:5588:13819":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:13650:2954":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"5:2103:2896":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:11574:15693":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"4:3851:9164":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"16:6398:16738":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"4:11223:26503":{"crate_id":4,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"1:5163:23290":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"4:2605:9138":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:21566:8649":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:10284:16897":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:12514:3549":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:11621:17003":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:23492:235":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"4:1819:682":{"crate_id":4,"path":["std","env"],"kind":"module"},"5:826:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"4:11468:26327":{"crate_id":4,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"6:5336:13792":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"17:11661:17002":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:6738:14539":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"16:5831:16718":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:9755:16858":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:9886:16890":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:31991:24050":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"4:11741:9164":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:15039:21142":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:5244:13780":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:43736:3536":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:12478:17141":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:10828:33512":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:2323:15782":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"6:5212:13776":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"4:4434:9208":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:6412:16739":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"17:13046:16872":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:7537:14958":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:15655:21189":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:11715:17034":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:11016:16928":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"5:671:31282":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"4:8525:9159":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"5:7119:29759":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:5031:13761":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:15301:21161":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"5:7553:8975":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:41674:2461":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:2864:256":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"17:14463:20413":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:45590:8679":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:7429:10800":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:6811:14545":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"5:3661:2892":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"16:5367:16706":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:12659:17146":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"1:40250:3364":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:11373:3460":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:41753:2891":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"4:9286:28454":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"4:5392:202":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"1:37853:2381":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:39278:2391":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:45455:8666":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:8253:13988":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:15190:21151":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"11:364:2863":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:33472:2373":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:5014:13759":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"4:3031:136":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"1:46697:8644":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:43779:3287":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:8282:13992":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:40194:3325":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"18:659:21401":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:10218:142":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"16:4502:16343":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:13046:119":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:11702:17033":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:16223:21371":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"4:924:9011":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:5630:13823":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"16:7604:16786":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:10524:16901":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"4:9125:2891":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:2932:123":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"5:3245:9021":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"11:687:2892":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:13399:19871":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:8175:16807":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:14855:21132":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"5:7480:2484":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:4614:16363":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:10218:16865":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:7755:16794":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:32005:3245":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"4:4870:9184":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"4:6737:2347":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:21584:8650":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"4:11581:9282":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"4:4874:9188":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:6442:16742":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:597:16887":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"4:5598:113":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"17:14131:20392":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"4:7877:26333":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:14545:20419":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:39968:3295":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"10:36:32237":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:12647:17147":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"6:6519:14518":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:2487:659":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"4:11653:25818":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"9:392:15578":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:7549:16781":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:5802:16716":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"6:8306:13996":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"4:9227:2342":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:42306:3424":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"16:5722:16711":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:5515:13812":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"4:4087:9170":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:41320:169":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:14356:20406":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:21425:3230":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:41560:3394":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:12772:3018":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:13437:19874":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:3614:15817":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:15324:21163":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"4:2206:128":{"crate_id":4,"path":["std","ffi","os_str","Display"],"kind":"struct"},"4:10902:9103":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"17:11915:17090":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"4:3509:3259":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"1:46629:8640":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:30859:3230":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"6:473:9775":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"4:9147:9288":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"5:7392:2897":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"4:10940:26471":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:45391:8659":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:8163:164":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:11858:3472":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"17:13173:17190":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"18:515:21411":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"4:2673:9139":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"4:8561:3392":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"4:932:9013":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:10661:16903":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:14177:20394":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:46525:8716":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"16:4468:16332":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:42571:23646":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"0:29:1994":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"16:2478:15790":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"4:6626:2344":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"5:3029:30956":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"4:11858:9309":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"1:39102:2398":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:11497:16973":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:30459:3160":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:5565:13817":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:6895:16763":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:3096:2319":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"5:7472:2484":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:14986:21139":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"0:0:1988":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"1:42849:24053":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"11:2369:15701":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:41997:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"4:4159:9175":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:41616:2892":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:33991:2377":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:6574:16751":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:7656:16789":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"4:650:8987":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:22121:9107":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:3108:2318":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"4:12303:1789":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"16:4976:16472":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:7473:16776":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:43480:3465":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"4:5981:2351":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"4:7896:26331":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:2854:162":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"17:14066:20388":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:32865:2366":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:7591:3302":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:11877:17045":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"4:10878:9099":{"crate_id":4,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"5:5717:9361":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"4:2296:9083":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"18:589:24022":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:10534:33531":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"4:8774:9261":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"2:0:492":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"17:13753:20370":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:10457:137":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"5:1191:31284":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:21447:21704":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"5:3648:2891":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:13832:20373":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:8317:13997":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"11:2548:32240":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"4:4301:9206":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:10317:16898":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:7799:16796":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:6746:14540":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"18:765:21400":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:6678:14532":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:39200:211":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:44023:3566":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"4:5652:9273":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"16:6278:16732":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:46152:8730":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:12485:17142":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"16:7570:16783":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:4641:16367":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:13344:19867":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"5:6164:3259":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:40301:3367":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:46546:8737":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"11:1903:9020":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:1510:10676":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:11252:3465":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:40113:106":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:14752:21129":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"4:3615:9105":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"4:10891:25907":{"crate_id":4,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"5:830:9024":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"4:4754:9173":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:6821:14546":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"5:2089:2893":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:40569:3378":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:10508:3441":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"16:5742:16712":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"5:5453:9333":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"4:869:2484":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:14260:20399":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:16069:21359":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"6:5415:13801":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"16:2508:15791":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"4:5788:2920":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"5:7645:9340":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:41486:23990":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"5:7094:29719":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:15608:21184":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:13899:20377":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"4:8158:9100":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"1:22830:24668":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"4:5723:9275":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"4:9387:2350":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"6:5020:13760":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:6706:14535":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"17:2203:16974":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:7528:16779":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:40129:3329":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:46085:8669":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"7:31:15548":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:44380:218":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"17:15836:21201":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:12422:17138":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:403:16885":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:45765:8674":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"5:7363:9029":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:22730:23978":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"5:1311:9017":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"4:5781:219":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"4:8131:9101":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"1:44212:3579":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"18:0:2228":{"crate_id":18,"path":["memchr"],"kind":"module"},"18:608:33568":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:2503:3206":{"crate_id":1,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"16:2612:15796":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"4:1584:2891":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:12362:17136":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"4:8192:9006":{"crate_id":4,"path":["std","hash","random","RandomState"],"kind":"struct"},"6:5146:13771":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:13187:19859":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:16079:21360":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"16:6504:16747":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"11:2304:9017":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"17:11354:16977":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:14475:20414":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:12443:17129":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:11051:16955":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"4:11870:28886":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:12264:17102":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:41358:3389":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:42155:97":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:15778:21197":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:12043:17049":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"5:943:2891":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:13762:3611":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:3717:70":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"4:7431:28912":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"16:2748:15802":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"4:7273:26353":{"crate_id":4,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"16:0:2226":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:2854:15807":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:14372:20407":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:45376:8694":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"5:5922:2897":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:6900:14574":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:3329:15815":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"4:1978:9074":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"17:13375:19869":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"4:12314:1811":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"6:6597:14523":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:15760:21195":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:5858:3259":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"4:1456:155":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"6:6880:13651":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:45744:8668":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:3810:15835":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"11:490:153":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"14:31:15708":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:6026:16725":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:4678:2311":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"11:2469:9009":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:44265:3581":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:3145:3219":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"16:5400:16708":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:5320:13790":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:14436:20411":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:7111:32699":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:11331:3463":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:11153:16906":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:8093:16803":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:42116:90":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"5:3033:31331":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:6756:14541":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"16:4882:16447":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"4:12319:1890":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"4:9686:2928":{"crate_id":4,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"4:9431:9293":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:14246:20398":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:2234:16999":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:41696:2555":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"4:12320:1398":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"4:10664:9148":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"1:43865:3560":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:40184:3324":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:8665:24864":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:6775:14544":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"4:6453:219":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:43432:3534":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:21968:8656":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1:23018:23596":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"1:13502:3604":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:10200:3299":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"17:11773:17084":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"4:9245:115":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"5:3279:9020":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:43462:3461":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:32016:243":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:12328:17099":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:12572:16905":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"1:3957:2484":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:8201:129":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:14051:20387":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"5:5064:3259":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:45700:8714":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:7348:14950":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"4:8612:9234":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"4:4508:9200":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"11:673:2891":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:3551:145":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:37798:2380":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"5:732:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:12993:16918":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:22882:9107":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"17:12318:16917":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"11:844:9014":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"4:12268:8993":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:8341:15531":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:6664:14530":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"4:3606:28961":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:11467:16979":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:41958:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:13972:20381":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"4:8514:9162":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"4:419:184":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:3293:2397":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"16:7306:32760":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:2699:201":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"16:8118:16804":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:10887:33523":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"5:5457:9334":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"18:563:21414":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:11510:16972":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:12225:17105":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:13946:20379":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"4:655:8988":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:11524:17026":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"4:1073:9018":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:13594:19885":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:39978:3296":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"5:3037:31333":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:30474:3220":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:1585:10684":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:7306:9827":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:16176:21367":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"4:11206:9110":{"crate_id":4,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"4:11063:26342":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"16:6991:32509":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:5665:13827":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:1707:10695":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:4924:13748":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:14868:21133":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"4:7941:8982":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:44473:179":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:39919:3271":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:5102:13767":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:4811:13738":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"4:10593:26351":{"crate_id":4,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"4:955:9015":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:3344:139":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"17:13877:20376":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"11:742:9012":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:12300:17134":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:42802:24023":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:5344:13793":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"1:2030:3223":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:7085:32358":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:7509:16778":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:16105:21362":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"16:7727:16792":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"5:3397:9009":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:41769:2484":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"17:12278:17133":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"4:3625:9126":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"1:40372:3360":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:44452:24052":{"crate_id":1,"path":["core","task","wake","ExtData"],"kind":"enum"},"6:4971:13754":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:7098:32377":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:16187:21368":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:12621:17152":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"6:1490:10673":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"5:1465:2891":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:10244:119":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"6:6562:14522":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"11:1676:32249":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:2623:112":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"17:15151:21148":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:6160:15753":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:5200:13775":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:14912:21135":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"4:11885:15741":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:3029:15813":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:5306:13788":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"4:9141:2484":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"14:165:15709":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"4:5533:9269":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"6:1692:9196":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:15273:21158":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:15092:21143":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:45896:23444":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"16:6948:16765":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:15701:21191":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:11189:16941":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:5250:13781":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:5781:16715":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:12150:17052":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"5:2526:2884":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"5:3284:31274":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:5671:13828":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"5:6060:2904":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"5:4149:2892":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:4789:2316":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"6:5436:13803":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:32073:2291":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"17:15463:21178":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:7366:9236":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:1517:10677":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:5557:13816":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"4:877:9007":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"16:2548:15793":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"18:581:3230":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"4:11564:28563":{"crate_id":4,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"1:45558:8667":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"18:698:21405":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:5643:13825":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:14788:21130":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:6854:24671":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"11:1923:9023":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:43308:3471":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:2374:15785":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:12076:17046":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:13766:17093":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"4:2513:2157":{"crate_id":4,"path":["std","io"],"kind":"module"},"1:41599:172":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"4:8824:2891":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"17:14503:20416":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:2458:15789":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"4:12295:1157":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"6:7389:10817":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:8259:13989":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"5:5217:2337":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:1686:10693":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"4:2455:9090":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"6:5624:13822":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"16:5037:16487":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"4:11622:26057":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"4:4057:9168":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:41705:3397":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"4:4250:28915":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:44500:3612":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:43448:3330":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:3014:15812":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:14516:20417":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:4985:13756":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:32074:3250":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:41919:93":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:7314:10631":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:45928:8697":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:7655:23256":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:40802:3342":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"16:7769:16795":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"4:6662:2352":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:13814:20372":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:45604:8728":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"0:28:1988":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"17:13235:19861":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"13:110:32309":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"11:1025:2873":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"4:10441:113":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"4:2441:9086":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:40579:3379":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"4:12294:405":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"1:10683:25771":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:40786:3340":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"4:11877:15741":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"4:12316:1823":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"4:6734:2346":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:11730:17035":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"4:12299:1295":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"17:15473:21179":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"10:44:15687":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:22963:23611":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"6:1699:10694":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"4:6791:2353":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"6:4942:13750":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:3597:17071":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"4:486:26345":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:33217:2370":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:1207:16950":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:39178:209":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:3576:23950":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"5:6007:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"16:4940:16459":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:39940:23627":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:43530:3538":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"18:635:33572":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"4:11046:26336":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:6849:24674":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"5:2289:30957":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:8188:16808":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:12127:17054":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:44196:3518":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"5:7655:9341":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:16212:21370":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"1:30204:2978":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"6:5329:13791":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"4:8508:3535":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"4:12296:458":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"4:11169:9278":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:13363:19868":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:10259:205":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"4:1591:2897":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:22447:8777":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"5:1557:9012":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"4:0:1692":{"crate_id":4,"path":["std"],"kind":"module"},"11:2562:32241":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:22952:23620":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"1:45633:8648":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:10399:3330":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:21481:21708":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:16259:19870":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"4:10301:28861":{"crate_id":4,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"17:14111:20391":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"16:5846:16719":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"4:1836:9045":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"17:437:15756":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:46644:8641":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:45875:23609":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"16:6665:16757":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:5863:16720":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:6629:14526":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:6460:14515":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:13450:24368":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:13089:17187":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:5347:16705":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:5046:13763":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:11128:16937":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"5:1518:9007":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"5:2197:8963":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"4:2439:3194":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"17:15206:21153":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:4733:2313":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:16138:21364":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"5:4309:2891":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:11142:16905":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:12949:16917":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"4:3346:9151":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:7648:16788":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:15734:21193":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:465:9774":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"9:447:15577":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"16:8259:16812":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:0:550":{"crate_id":1,"path":["core"],"kind":"module"},"1:41402:23608":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:41778:195":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"4:8186:127":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:8202:16809":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:553:9785":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:11443:16981":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"4:6516:185":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:15678:21190":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:12328:3451":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:40144:3327":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:8226:16811":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:14449:20412":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"4:3956:9165":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:15410:21172":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:15799:21198":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:9399:3521":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"5:1527:9008":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"8:0:2219":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"4:5045:9231":{"crate_id":4,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"6:5457:13805":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:39308:2393":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:4870:13742":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:11269:16965":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:11341:16978":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:14025:20385":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"18:623:33561":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:1723:10696":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"18:96:21386":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"4:11241:161":{"crate_id":4,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"4:9191:9287":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:44180:3515":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"4:10983:26457":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"16:8313:136":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"4:5203:28875":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"11:2569:9003":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:7461:14954":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:6246:205":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"4:4768:28580":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"1:3149:2362":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"11:1566:15699":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:41633:2457":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"6:5219:13777":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:7485:14956":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:8300:13995":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:3164:2365":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:42559:23605":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"4:12247:26487":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"6:5617:13821":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"4:129:2131":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"4:7675:28450":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"1:3379:2389":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:30485:23512":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"17:0:2227":{"crate_id":17,"path":["object"],"kind":"module"},"2:234:225":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:6409:14510":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:6621:14525":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:5006:16479":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"16:2528:15792":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:4535:2133":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:43208:23224":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"4:9176:9289":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:14341:20405":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"4:3389:9147":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"4:12082:26349":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:6763:14542":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"1:40012:3289":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:45662:8702":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"4:8032:9062":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"4:3479:3344":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"4:3344:9150":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"4:2467:9096":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"16:7539:16780":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:2662:133":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"6:4864:13741":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:12851:16912":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:13855:20375":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:13146:17189":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:8627:3353":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:1680:10692":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:22321:9107":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"6:7359:14951":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"4:3597:3299":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"6:564:9787":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:7561:14960":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:4885:13744":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:13387:19870":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:12683:17151":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"5:3792:2893":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:42634:3432":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:33276:2369":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:39501:3236":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"5:6039:2337":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:8618:148":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"4:361:8980":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:491:9778":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:44204:3513":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"16:2418:15787":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:7452:14953":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:10253:3423":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"16:2438:15788":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:22850:3020":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:2037:16980":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"5:6957:9363":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"17:2175:17014":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"4:12313:1829":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"1:4969:3280":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"16:860:32727":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"17:14038:20386":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:3324:2321":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:13292:19864":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:14147:20393":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"4:11608:26314":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"4:543:2911":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"17:15058:21126":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:9715:84":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:14386:20408":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:13485:19877":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"4:8488:3378":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"4:9117:9279":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"1:45523:8713":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"16:5897:16721":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:5477:13808":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:5400:13800":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"16:6962:16766":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"6:7575:14961":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:8254:2293":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:16269:19872":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"4:367:8981":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:11891:3473":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"4:3254:26301":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:11242:16963":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:40263:2938":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"18:548:152":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"5:7730:9358":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:6843:3361":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"5:4502:29737":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:42587:73":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"11:1107:2875":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:45619:8734":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:41761:2892":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:45715:8662":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"16:7711:209":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"4:5720:9274":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"6:5083:13766":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:44071:3525":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:44058:3569":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"5:2236:30888":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"5:7609:9078":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:12590:3550":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:10018:16866":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:6524:14519":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"4:8425:3339":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"6:5581:13818":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:15456:21177":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:13606:19886":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:44439:3608":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:42794:3443":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"4:4288:9205":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"11:1582:2879":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:11865:17089":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"11:856:2867":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:42075:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"4:9413:9110":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"1:41675:2460":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"4:1895:2915":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"5:3271:9022":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:15390:21170":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:6698:14534":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"4:567:2914":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:4743:16423":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:6441:14513":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:22930:23606":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"1:39989:3287":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"5:4468:3259":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:7590:3301":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1:44176:3512":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"16:2592:15795":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:31938:3235":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"4:5902:2339":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:1535:10679":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:5160:13772":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:7857:16799":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:45575:8673":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:2857:143":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:22123:8652":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"18:491:33547":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:7878:3339":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"4:11188:3579":{"crate_id":4,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"1:40241:3357":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:1559:10681":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"4:4149:9174":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:15992:21358":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"11:1142:15698":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:12360:3527":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:15342:21165":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:23007:23607":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"1:46446:8710":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"11:774:9007":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:5385:16707":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:4340:23676":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"11:1910:9021":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:8294:13994":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"4:7837:28870":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:6480:16745":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:32105:114":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"16:6456:16743":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"4:8136:9102":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"1:3340:2292":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"4:10367:9281":{"crate_id":4,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"5:4438:29737":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"4:961:9016":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:15769:21196":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:9807:16874":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:13959:20380":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"4:1872:9055":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"6:8271:13991":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"5:7621:9331":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:21963:9107":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"18:481:21409":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"11:2352:9018":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"16:6427:16740":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"5:926:9026":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"9:502:15580":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"4:8290:28856":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:2878:15808":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:40793:2136":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"4:8616:9236":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"4:9368:3259":{"crate_id":4,"path":["std","sync","poison","Guard"],"kind":"struct"},"4:2709:9131":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"4:10280:9055":{"crate_id":4,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"16:6263:32707":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:7412:10802":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"4:1834:9044":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"1:42841:24017":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:42542:3220":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:14189:20395":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"4:631:8984":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:11324:16992":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:10092:16895":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:570:9788":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:43566:3463":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"11:1728:155":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:15222:21155":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:12433:16875":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:2684:15799":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"14:160:15708":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"4:9074:9276":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"6:6505:14474":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:7706:3336":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"16:8155:16806":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:1966:1338":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"11:800:2897":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:5134:13770":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:14091:20390":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"6:4992:13757":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:3196:15814":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:13412:19872":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"4:11271:28584":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:40166:3311":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"17:12929:16916":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"5:218:2881":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:22788:23617":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:3563:2396":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:15822:21200":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:4837:13740":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:42613:136":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"17:10251:16896":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:3176:2385":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"17:12557:16945":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"16:6335:16735":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:41542:3393":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:3473:17053":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"4:9291:28437":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"16:5415:32709":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:46372:8704":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:5598:13820":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"4:4719:9229":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:44230:130":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"17:10439:16900":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:16151:21365":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"17:15445:21176":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:6915:14575":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:21493:21710":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"16:4718:16421":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"4:8222:2893":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:12574:3548":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:12695:17150":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:22941:23621":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"11:328:32243":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:10503:3440":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"5:3027:31332":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"4:8295:28449":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"17:10818:16906":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:3546:253":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:12089:17047":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:5296:13787":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:10044:16894":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:7467:14955":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:7580:16784":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:7428:16775":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:1099:2135":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"4:5909:2340":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"4:2996:2917":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"4:5583:9272":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"6:6478:14517":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"4:8830:9263":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"16:3925:15881":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:43408:3532":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:41624:2484":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"17:12175:17118":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:10769:33518":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:6927:16764":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"11:710:9011":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:10263:3427":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:1653:10689":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:10700:25800":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"4:11636:26486":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"5:1536:9010":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"16:6606:16753":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"5:6421:9296":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"5:3635:181":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:13538:19881":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:15569:21181":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"5:5852:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"6:5536:13814":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:11825:17066":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"11:0:2222":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"4:3251:29367":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:39238:213":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"11:787:9008":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:22335:8784":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"1:22719:3019":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:40434:3377":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:21692:8650":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:22919:23445":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"17:15582:21182":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:15102:21144":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"5:3741:29729":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:3557:2394":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:30453:3192":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:11547:17027":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:11290:3466":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"16:3778:15826":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:43287:3467":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:9907:24468":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:22665:23565":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:10915:33508":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:3179:2386":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"17:10068:16873":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:43268:3457":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:6636:14527":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"9:0:2220":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:4074:2897":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"4:10960:9063":{"crate_id":4,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"1:32014:236":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"4:1617:9023":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:21690:8651":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"4:9360:2343":{"crate_id":4,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"17:13785:17092":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:44254:3580":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"5:1356:9019":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:6788:31809":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:43438:3533":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:45829:8736":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:35867:2378":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:6494:16746":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"4:5234:28875":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:12344:3453":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:15646:21188":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:2860:257":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"6:5191:13774":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:10468:156":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"4:598:8983":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:41664:2458":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:7546:14959":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:13797:20371":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:13723:20368":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"5:1428:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"5:7582:3329":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:2851:76":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"17:4986:17159":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"1:4251:3259":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"4:3436:9135":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"16:872:32714":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"4:949:2867":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:4375:3269":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"16:6532:16748":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:5307:16688":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"16:6634:16755":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"4:9355:186":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:8621:3300":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"4:1606:9021":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:8309:177":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:8126:3354":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:40444:3363":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"16:5107:16511":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:7339:14949":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"3:0:2217":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:40835:3350":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"5:7048:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:25892:266":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:45797:8729":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"16:2660:15798":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"18:651:33550":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"4:6622:2136":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"16:6560:16750":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:3311:124":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:40333:3370":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:6145:3359":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:22744:23612":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:11392:16976":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:45782:8680":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:2828:2977":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"6:4800:13737":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"5:7372:2484":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:22433:9107":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"4:12321:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"14:0:2224":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:43034:3504":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"6:8006:15332":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:14876:21134":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:16249:21373":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:12551:3551":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:3824:2897":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"16:7144:16772":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"4:8671:9244":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:15126:21146":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:7741:16793":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:2572:15794":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"4:10670:9146":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"1:40817:3346":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"16:6849:16761":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:43049:23909":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:39913:3267":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:517:9780":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:22475:8778":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"4:4833:9211":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:5260:13782":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:45470:8696":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"7:78:15555":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:11075:16945":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:43959:3564":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:12711:136":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:15748:21194":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:14402:20409":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:22388:8785":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"4:11802:9165":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:5445:13804":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"16:7006:16768":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:5075:16502":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"4:6350:28439":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:40281:3365":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:5225:13778":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:46592:8637":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:40221:3356":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"19:0:1274":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:30421:3191":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"4:8736:9259":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"1:42313:3425":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:10710:16904":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"5:7527:9003":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"4:7964:8973":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"14:202:9339":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:33099:2368":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:30832:195":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"5:4269:3259":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"6:7602:14963":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"4:4272:9203":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"5:4239:3259":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:21513:8654":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:12863:16913":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:5546:13815":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:13064:16871":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:11214:16936":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:4876:13743":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:7559:16782":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:11605:17025":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:16165:21366":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:43389:2953":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:578:9789":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"4:12301:1666":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"1:23029:23600":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"4:859:2892":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"4:5280:203":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"1:44200:3519":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:22803:23599":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"6:5653:13826":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"6:5283:13785":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"11:434:32256":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:15931:19859":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"4:10921:127":{"crate_id":4,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"4:8047:9063":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"5:7538:9004":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"11:2124:9017":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:16093:21361":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"6:4909:13746":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"4:733:153":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:7984:9734":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:7014:16769":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:9902:24900":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:21462:21700":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"18:726:21406":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"16:6385:16737":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:15:2196":{"crate_id":1,"path":["core","write"],"kind":"macro"},"6:5290:13786":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:5112:13768":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:12671:17182":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:42596:3220":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:22402:3205":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"1:43277:2949":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"4:3296:9149":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:6066:16727":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"4:9312:26462":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"4:4101:9171":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:11557:17028":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"4:5567:9271":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"17:15944:19860":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"4:3789:9160":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"6:1496:10674":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:7355:16774":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:1098:16942":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"4:11647:28553":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"10:0:2221":{"crate_id":10,"path":["adler"],"kind":"module"},"1:32103:3139":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"4:8841:9264":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"4:6635:2137":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"1:43666:3540":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"4:2748:9141":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"4:10550:9276":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"18:735:21399":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:10047:3438":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"5:7380:9027":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"5:1327:9018":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:7485:2492":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:14298:20402":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"5:1546:9011":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:15168:21149":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:42292:3423":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"4:8593:9202":{"crate_id":4,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"17:12213:17132":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:42831:9259":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:42810:3442":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:15266:21157":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"5:6924:9361":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:14977:21138":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"4:647:8986":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:2693:194":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"17:16050:19863":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"4:12279:26478":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:33818:2375":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:40156:3330":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"6:5483:13809":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"1:39929:3294":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:4605:220":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"18:754:21407":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:22752:23634":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:40808:3344":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:4461:2323":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"11:875:9015":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"4:6302:2954":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"6:4959:13752":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:0:986":{"crate_id":6,"path":["libc"],"kind":"module"},"5:6554:2897":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:11293:16966":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:4762:2315":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:5243:961":{"crate_id":1,"path":["core","iter"],"kind":"module"},"16:6976:16767":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:4787:13736":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:46682:8643":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:40118:3326":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:1936:3169":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:41374:3390":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:10419:16861":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:1671:10691":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:3098:117":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:43880:3561":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:6471:14516":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"4:12318:950":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"5:6402:9295":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:2902:15809":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:39955:3293":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:37743:2379":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"4:5795:9283":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:39997:3267":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:5472:13807":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"16:7397:32758":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:14847:21131":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"11:1007:9017":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:7446:14952":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:3103:246":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"16:2708:15800":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:6231:16731":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:10893:9107":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:12189:17130":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"16:7168:16773":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:43630:3543":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"5:4925:216":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"13:229:32260":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:11583:17000":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:12107:16905":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"11:2231:15693":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"18:706:3524":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:44048:3568":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:1580:10683":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:4587:16359":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:12399:17137":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"4:12317:1805":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"1:46603:8638":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"4:9104:9278":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"5:1830:9009":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:4614:2304":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:13252:19862":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"4:8759:9260":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:5423:13802":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:559:9786":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"5:7714:9009":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:43770:3267":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:45406:8695":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:3154:2367":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:15197:21152":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:22480:8776":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:43347:3470":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"11:1066:15697":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:42819:156":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:3591:2320":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"5:295:2295":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:3628:2322":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:10877:16907":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"18:538:21413":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:2808:15805":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:6466:16744":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:4560:16355":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:6417:14511":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:2848:77":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"6:1663:10690":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:5914:32510":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:11256:16964":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"13:0:2218":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:4394:3270":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"5:1342:2873":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"5:6947:9362":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:5382:13798":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:12056:17050":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"4:7827:16887":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"4:4115:9173":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:46002:8709":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"4:8012:8991":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:14311:20403":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:13738:20369":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"16:4062:15995":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:2601:102":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"4:919:9010":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:22349:3205":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"5:3209:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:6435:14512":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:11042:16930":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"4:1949:9073":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"4:2457:9091":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"16:7061:16771":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:4821:17153":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"1:41802:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"16:7633:32502":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"4:9372:233":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:11743:17036":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:44431:3607":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:31998:2312":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"1:7938:2302":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:43761:3288":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"5:1496:2484":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:45438:8660":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"4:11378:9079":{"crate_id":4,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"4:3029:225":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"6:1526:10678":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"4:10173:23987":{"crate_id":4,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"1:2984:3241":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"4:6226:26347":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:22347:24412":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"17:15434:21175":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:22:802":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"16:4913:16455":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"4:9382:2349":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"17:13922:20378":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"4:7302:29156":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:39328:3262":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:1853:3259":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"17:10759:16905":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"5:6681:2484":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:22680:24506":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:6620:16754":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"4:8478:3364":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"17:12543:17148":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"1:46040:8663":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:4688:2312":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"4:6405:2920":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:12886:3553":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"4:12307:740":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"6:586:9790":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"4:4764:28576":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"18:80:21385":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:2053:2942":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:13424:19873":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:12408:17128":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"4:11575:28455":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"4:9513:2915":{"crate_id":4,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"4:12306:724":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"5:40:9040":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:12812:3507":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"16:7497:16777":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:14325:20404":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:513:16886":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"5:7444:209":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:43612:3542":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"4:4051:9169":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"4:8573:9210":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:12030:17051":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:6758:15727":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:4979:13755":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:41520:3392":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"11:102:32245":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:22974:23563":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"17:13509:19879":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:21511:9107":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"17:11537:16993":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:11799:17086":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"4:11718:2933":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"16:867:32750":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"1:40291:3366":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:5361:13795":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"4:12310:882":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"18:113:21387":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:10982:16926":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:11102:16939":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"4:6143:219":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"5:1726:29729":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}