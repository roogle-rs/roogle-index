{"root":"0:0:1543","crate_version":"1.4.0","includes_private":false,"index":{"4:9225:3045":{"id":"4:9225:3045","crate_id":4,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:9226:54267","4:9227:54268","4:9228:54269","4:9229:54270","4:9230:2745","4:9231:28553","4:9232:54266"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10447:2226","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13204:56901":{"id":"1:13204:56901","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13225:2733":{"id":"1:13225:2733","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:15741:1700"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"1:49120:2693","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13256:54698":{"id":"1:13256:54698","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"`DoubleEndedIterator`":"1:8328:116","str::split":"4:15747:1705","prim@char":"4:15741:1700","self::pattern":"1:12837:2230"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"1:49168:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12847:2231","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12847:2231","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12862:2234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10134:2279":{"id":"1:10134:2279","crate_id":1,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10135:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13222:56904":{"id":"1:13222:56904","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:15747:1705","str::slice_unchecked":"4:15747:1705","crate::ops::IndexMut":"1:3487:1930"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:6086:57563":{"id":"5:6086:57563","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:421:1833","`String`":"5:8341:201"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:1833","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8079:3326","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5561:3020":{"id":"4:5561:3020","crate_id":4,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5562:4123","4:5563:53890"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10447:2226","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:2877:170":{"id":"1:2877:170","crate_id":1,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2879:976","1:2880:804","1:2881:770","1:2882:693","1:2883:676"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3184:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"1:2831:169","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:5705:2951":{"id":"4:5705:2951","crate_id":4,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5706:53296"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13289:56913":{"id":"1:13289:56913","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13315:56922":{"id":"1:13315:56922","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:15741:1700","self::pattern":"1:12837:2230"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12847:2231","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12847:2231","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12862:2234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13236:54704":{"id":"1:13236:54704","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:15741:1700","self::pattern":"1:12837:2230"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12847:2231","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13280:56910":{"id":"1:13280:56910","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12837:2230","prim@char":"4:15741:1700","`DoubleEndedIterator`":"1:8328:116","str::matches":"4:15747:1705"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"1:49372:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12847:2231","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12847:2231","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12862:2234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6698:2919":{"id":"4:6698:2919","crate_id":4,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6699:53986"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10447:2226","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10138:2269":{"id":"1:10138:2269","crate_id":1,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10139:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:4621:2979":{"id":"4:4621:2979","crate_id":4,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4622:53607","4:4623:53608","4:4624:53609","4:4626:2978","4:4627:53610","4:4629:53611","4:4630:3669"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"4:4539:2958","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:772:207":{"id":"5:772:207","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:773:2088","5:774:2089","5:775:2090"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12284:2911":{"id":"1:12284:2911","crate_id":1,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:12285:2026","1:12286:51815"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13293:56915":{"id":"1:13293:56915","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6065":{"id":"5:6065","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5885:1311","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6066:57559","5:6067:2843","5:6070:57560","5:6073:57561","5:6085:57562","5:6086:57563","5:6087:3001","5:6088:53929","5:6089:53930"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:13271:56908":{"id":"1:13271:56908","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47192:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12847:2231","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3189:103":{"id":"1:3189:103","crate_id":1,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"1:2801:101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3311:1919":{"id":"1:3311:1919","crate_id":1,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3313:167","1:3314:337"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10140:2280":{"id":"1:10140:2280","crate_id":1,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10141:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6087:3001":{"id":"5:6087:3001","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8341:201"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13227:3089":{"id":"1:13227:3089","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"1:49136:2695","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3554:1932":{"id":"1:3554:1932","crate_id":1,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3556:51203","1:3557:51204","1:3558:51205"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3184:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:7808:2471":{"id":"1:7808:2471","crate_id":1,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7809:51054","1:7810:51055","1:7811:51052","1:7812:51050","1:7813:51056","1:7814:51053","1:7815:51051"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"1:2801:101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"1:2877:170","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3681:1858":{"id":"1:3681:1858","crate_id":1,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3184:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:3076:75":{"id":"1:3076:75","crate_id":1,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3078:289"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3184:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:13322:53932":{"id":"1:13322:53932","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13233:51205":{"id":"1:13233:51205","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"1:12837:2230","prim@char":"4:15741:1700"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12847:2231","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10378:2424":{"id":"1:10378:2424","crate_id":1,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10379:142","1:10380:13523","1:10381:50893"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:4596:2271":{"id":"4:4596:2271","crate_id":4,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4597:1728","4:4598:53453","4:4600:53454","4:4601:3592","4:4602:53455","4:4603:53456","4:4604:50980","4:4613:2052"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3646:1935":{"id":"1:3646:1935","crate_id":1,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3648:50204"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2836:120":{"id":"1:2836:120","crate_id":1,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"1:2831:169","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13211:288":{"id":"1:13211:288","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"4:15758:1714","str::as_mut_ptr":"4:15747:1705"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13200":{"id":"1:13200","crate_id":1,"name":null,"span":null,"visibility":{"restricted":{"parent":"1:12297:1311","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["1:13201:771","1:13202:2022","1:13203:56900","1:13204:56901","1:13206:56902","1:13209:53890","1:13210:56903","1:13211:288","1:13212:54669","1:13213:1548","1:13215:50771","1:13217:50772","1:13219:50773","1:13221:3085","1:13222:56904","1:13223:54688","1:13224:54689","1:13225:2733","1:13226:2259","1:13227:3089","1:13228:14098","1:13229:14136","1:13230:3669","1:13231:56905","1:13232:14127","1:13233:51205","1:13236:54704","1:13239:54705","1:13242:2063","1:13246:2021","1:13250:53611","1:13253:13733","1:13256:54698","1:13259:56906","1:13262:56907","1:13265:54700","1:13268:54702","1:13271:56908","1:13274:56909","1:13277:1727","1:13280:56910","1:13283:56911","1:13286:56912","1:13289:56913","1:13291:56914","1:13293:56915","1:13295:56916","1:13296:56917","1:13297:56918","1:13300:56919","1:13303:33464","1:13306:54706","1:13309:56920","1:13312:56921","1:13315:56922","1:13318:2555","1:13320:2918","1:13321:53931","1:13322:53932","1:13323:53933","1:13324:56923","1:13326:3052","1:13327:56924"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:3635:209":{"id":"1:3635:209","crate_id":1,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3636:167","1:3637:1935","1:3638:666","1:3639:353"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"1:3640:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"1:3635:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13228:14098":{"id":"1:13228:14098","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"4:15747:1705"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"1:49424:2710","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6089:53930":{"id":"5:6089:53930","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"4:15747:1705"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13231:56905":{"id":"1:13231:56905","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"1:49414:2709","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3274:1910":{"id":"1:3274:1910","crate_id":1,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3275:167","1:3276:891"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5693:2948":{"id":"4:5693:2948","crate_id":4,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5694:53303"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8293:1832":{"id":"1:8293:1832","crate_id":1,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8295:2023","1:8297:2024","1:8298:2025"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13203:56900":{"id":"1:13203:56900","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:2565:123":{"id":"4:2565:123","crate_id":4,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:2566:50849","4:2568:1764","4:2569:56189","4:2570:56190"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"1:10119:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"1:10126:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:4539:2958":{"id":"4:4539:2958","crate_id":4,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4540:2844","4:4541:54419","4:4543:54420","4:4544:54421","4:4545:2973","4:4546:54422","4:4547:53998","4:4549:54423","4:4550:2052","4:4551:3089","4:4552:2034","4:4554:2046"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8284:147":{"id":"1:8284:147","crate_id":1,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8285:2026","1:8286:2027","1:8287:746"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13312:56921":{"id":"1:13312:56921","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"1:12837:2230","prim@char":"4:15741:1700"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12847:2231","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13213:1548":{"id":"1:13213:1548","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:47192:162"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47192:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10737:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10737:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1543":{"id":"0:0:1543","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[215,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\n# #[macro_use]\n# extern crate lazy_static;\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.4.0\")]","#![no_std]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:39:1549","0:41:1550","0:38:1543"]}},"1:14021:2397":{"id":"1:14021:2397","crate_id":1,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:14022:51739","1:14023:51740","1:14024:51741","1:14025:51742","1:14026:51743","1:14027:51744","1:14028:2052"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3718:1940":{"id":"1:3718:1940","crate_id":1,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13239:54705":{"id":"1:13239:54705","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"1:12837:2230","prim@char":"4:15741:1700"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12847:2231","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12847:2231","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12862:2234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3286:1915":{"id":"1:3286:1915","crate_id":1,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3288:871"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3179:196":{"id":"1:3179:196","crate_id":1,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3290:1914":{"id":"1:3290:1914","crate_id":1,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3292:540"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:39:1549":{"id":"0:39:1549","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[185,0],"end":[188,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5555:3022":{"id":"4:5555:3022","crate_id":4,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5556:53962","4:5557:3416"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10447:2226","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13274:56909":{"id":"1:13274:56909","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47192:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12847:2231","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12847:2231","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12862:2234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3257:1909":{"id":"1:3257:1909","crate_id":1,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3259:167","1:3260:870"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13286:56912":{"id":"1:13286:56912","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"str::match_indices":"4:15747:1705","prim@char":"4:15741:1700","self::pattern":"1:12837:2230","`DoubleEndedIterator`":"1:8328:116"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"1:49318:2704","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12847:2231","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12847:2231","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12862:2234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5643:2945":{"id":"4:5643:2945","crate_id":4,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5644:53296","4:5645:53327"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13296:56917":{"id":"1:13296:56917","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13949:137":{"id":"1:13949:137","crate_id":1,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:13950:262","1:13951:501","1:13952:265","1:13953:1058"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13210:56903":{"id":"1:13210:56903","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:3188:202":{"id":"1:3188:202","crate_id":1,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6066:57559":{"id":"5:6066:57559","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:1833","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8079:3326","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:1833","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8079:3326","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3191:205":{"id":"1:3191:205","crate_id":1,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:7686:3168":{"id":"4:7686:3168","crate_id":4,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:7687:56381"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13326:3052":{"id":"1:13326:3052","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"4:15741:1700"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"1:49458:2714","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3411:1859":{"id":"1:3411:1859","crate_id":1,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3412:526"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"1:3398:112","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:9139:2004":{"id":"1:9139:2004","crate_id":1,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13565:146":{"id":"1:13565:146","crate_id":1,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13566:167","1:13567:146","1:13568:745"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:22844:2493":{"id":"1:22844:2493","crate_id":1,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"1:23493:2484","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22835:2226","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13229:14136":{"id":"1:13229:14136","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"4:15747:1705"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"1:49433:2711","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3422:1830":{"id":"1:3422:1830","crate_id":1,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3423:559"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6393:208":{"id":"5:6393:208","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6394:2091"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13323:53933":{"id":"1:13323:53933","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12847:2231":{"id":"1:12847:2231","crate_id":1,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:12849:2233","1:12850:50927","1:12851:50928","1:12852:50929","1:12853:50931","1:12854:50930","1:12855:50932"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3321:1922":{"id":"1:3321:1922","crate_id":1,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3323:167","1:3324:1204"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3425:126":{"id":"1:3425:126","crate_id":1,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3427:360"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"1:3428:127","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:2867:163":{"id":"1:2867:163","crate_id":1,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2868:398","1:2869:2067","1:2870:2068","1:2871:2087"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"1:2836:120","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"1:2877:170","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3333:1924":{"id":"1:3333:1924","crate_id":1,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3335:336"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3157:111":{"id":"1:3157:111","crate_id":1,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3158:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8763:2358":{"id":"1:8763:2358","crate_id":1,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8482:153","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13318:2555":{"id":"1:13318:2555","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12776:2488","`FromStr`":"1:12776:2488"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47319:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"1:12776:2488","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"1:12776:2488","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6465:3046":{"id":"4:6465:3046","crate_id":4,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6466:54559","4:6467:54560"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13221:3085":{"id":"1:13221:3085","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"str::slice_mut_unchecked":"4:15747:1705","`str`":"4:15747:1705","crate::ops::Index":"1:3483:1929"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:3623:1933":{"id":"1:3623:1933","crate_id":1,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3184:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"1:3554:1932","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:6861:2922":{"id":"4:6861:2922","crate_id":4,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6862:54356"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13306:54706":{"id":"1:13306:54706","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:15741:1700","self::pattern":"1:12837:2230"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47192:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12847:2231","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12847:2231","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12862:2234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:4899:3029":{"id":"4:4899:3029","crate_id":4,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4900:2582","4:4901:56107"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6067:2843":{"id":"5:6067:2843","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8341:201"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12847:2231","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5627:2943":{"id":"4:5627:2943","crate_id":4,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5628:53740","4:5629:53742","4:5630:53741","4:5631:53743"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5683:2947":{"id":"4:5683:2947","crate_id":4,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5684:53911","4:5685:53912","4:5686:53913","4:5687:53914"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10126:115":{"id":"1:10126:115","crate_id":1,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10127:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3483:1929":{"id":"1:3483:1929","crate_id":1,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3485:167","1:3486:731"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3184:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"4:5649:2946":{"id":"4:5649:2946","crate_id":4,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5650:56120","4:5651:53303","4:5652:53296","4:5653:56121","4:5654:3291","4:5655:3292","4:5656:56122","4:5657:1275","4:5658:56123","4:5659:56124","4:5660:56125","4:5661:56126","4:5662:56127","4:5663:56128","4:5664:56129","4:5665:56130"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13324:56923":{"id":"1:13324:56923","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"4:15741:1700"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"1:49449:2713","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:38:1543":{"id":"0:38:1543","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[167,0],"end":[179,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"kind":"macro","inner":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"},"1:23493:2484":{"id":"1:23493:2484","crate_id":1,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:23494:2492"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:23489:2226","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"1:3189:103","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:4614:2976":{"id":"4:4614:2976","crate_id":4,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4615:56384","4:4616:36293","4:4617:56385","4:4618:56386"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3085:131":{"id":"1:3085:131","crate_id":1,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3087:661"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10119:106":{"id":"1:10119:106","crate_id":1,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10120:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13201:771":{"id":"1:13201:771","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:15741:1700"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8247:2467":{"id":"1:8247:2467","crate_id":1,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8249:2079"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2801:101":{"id":"1:2801:101","crate_id":1,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2802:392","1:2803:394"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3431:128":{"id":"1:3431:128","crate_id":1,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3433:167","1:3434:362"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4689:2305":{"id":"1:4689:2305","crate_id":1,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4690:2026","1:4691:50461","1:4692:2029"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13300:56919":{"id":"1:13300:56919","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"1:12837:2230","prim@char":"4:15741:1700"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12847:2231","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13265:54700":{"id":"1:13265:54700","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"1:12837:2230","str::rsplitn":"4:15747:1705","prim@char":"4:15741:1700"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"1:49254:2671","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12847:2231","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3350:1928":{"id":"1:3350:1928","crate_id":1,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3352:1208"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10136:175":{"id":"1:10136:175","crate_id":1,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10137:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:22650:2485":{"id":"1:22650:2485","crate_id":1,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22640:2226","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10132:2278":{"id":"1:10132:2278","crate_id":1,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10133:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13232:14127":{"id":"1:13232:14127","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"1:49442:2712","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8353:1831":{"id":"1:8353:1831","crate_id":1,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8354:771","1:8355:2022"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8482:153","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3268:1911":{"id":"1:3268:1911","crate_id":1,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3270:167","1:3271:1081"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12862:2234":{"id":"1:12862:2234","crate_id":1,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:12864:2016","1:12865:50207","1:12866:50208"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"1:12856:2233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3278:1913":{"id":"1:3278:1913","crate_id":1,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3280:251"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6088:53929":{"id":"5:6088:53929","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"4:15747:1705"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10130:2277":{"id":"1:10130:2277","crate_id":1,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10131:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10128:2276":{"id":"1:10128:2276","crate_id":1,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10129:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10333:138":{"id":"1:10333:138","crate_id":1,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10334:695","1:10336:50414"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8482:153":{"id":"1:8482:153","crate_id":1,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8483:2026","1:8484:900","1:8485:2028","1:8488:2029","1:8489:478","1:8491:2030","1:8494:2031","1:8495:2032","1:8496:2033","1:8497:2034","1:8499:2035","1:8501:2036","1:8502:2037","1:8504:819","1:8507:2038","1:8514:2039","1:8516:2040","1:8519:2041","1:8520:2042","1:8521:2043","1:8523:2044","1:8525:2045","1:8528:1279","1:8529:2046","1:8530:2047","1:8534:2048","1:8537:2049","1:8538:2050","1:8539:2051","1:8541:2052","1:8542:1838","1:8544:2053","1:8547:2054","1:8549:2055","1:8559:2056","1:8574:2057","1:8576:2058","1:8580:2059","1:8589:2060","1:8592:2061","1:8594:2062","1:8597:261","1:8604:278","1:8611:2063","1:8618:2064","1:8627:2065","1:8637:993","1:8644:2066","1:8651:2067","1:8652:2068","1:8653:2069","1:8665:2070","1:8672:2071","1:8684:2072","1:8691:2073","1:8692:2074","1:8697:2075","1:8700:2076","1:8703:2077","1:8704:2078","1:8706:2079","1:8708:398","1:8711:2080","1:8714:976","1:8717:2081","1:8720:585","1:8723:2082","1:8726:885","1:8728:804","1:8730:770","1:8732:693","1:8734:676","1:8736:2083","1:8737:2084","1:8745:2085"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13230:3669":{"id":"1:13230:3669","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"1:49404:2708","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13250:53611":{"id":"1:13250:53611","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12837:2230","prim@char":"4:15741:1700","str::rsplit":"4:15747:1705","`DoubleEndedIterator`":"1:8328:116","str::split_whitespace":"4:15747:1705"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"1:49150:2664","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12847:2231","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3640:133":{"id":"1:3640:133","crate_id":1,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3642:667"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"1:3635:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3247:1907":{"id":"1:3247:1907","crate_id":1,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3249:167","1:3250:250"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3337:1925":{"id":"1:3337:1925","crate_id":1,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3339:338"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3398:112":{"id":"1:3398:112","crate_id":1,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3399:206","1:3400:524"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10343:142":{"id":"1:10343:142","crate_id":1,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10344:632","1:10345:1728","1:10346:53195","1:10347:53196","1:10348:53197","1:10349:53198","1:10350:53199","1:10351:53200","1:10352:53201","1:10353:53202","1:10354:53203","1:10355:53204","1:10356:53205","1:10357:53206","1:10358:53207","1:10359:1498"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3465:1938":{"id":"1:3465:1938","crate_id":1,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3467:222","1:3468:192","1:3469:51880"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3487:1930":{"id":"1:3487:1930","crate_id":1,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3489:732"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3184:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"1:3483:1929","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:2779:2422":{"id":"1:2779:2422","crate_id":1,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2781:50093"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3184:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"1:2776:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13309:56920":{"id":"1:13309:56920","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"1:12837:2230","prim@char":"4:15741:1700"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12847:2231","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12847:2231","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12862:2234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3345:1927":{"id":"1:3345:1927","crate_id":1,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3347:1205"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3014:2345":{"id":"1:3014:2345","crate_id":1,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:3013:2226","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3306:1918":{"id":"1:3306:1918","crate_id":1,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3308:167","1:3309:335"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13259:56906":{"id":"1:13259:56906","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::rsplit_terminator":"4:15747:1705","str::split":"4:15747:1705","`DoubleEndedIterator`":"1:8328:116","self::pattern":"1:12837:2230","prim@char":"4:15741:1700"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"1:49200:2699","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12847:2231","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3294:1916":{"id":"1:3294:1916","crate_id":1,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3296:1082"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13206:56902":{"id":"1:13206:56902","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"4:15747:1705"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13320:2918":{"id":"1:13320:2918","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6771:2926":{"id":"4:6771:2926","crate_id":4,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6772:56249"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6345:2919":{"id":"4:6345:2919","crate_id":4,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6346:3291","4:6347:3292","4:6348:53985","4:6349:56298","4:6351:56302","4:6353:56299","4:6354:56300","4:6356:56301"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10447:2226","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13226:2259":{"id":"1:13226:2259","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:15741:1700"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"1:49126:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3282:1917":{"id":"1:3282:1917","crate_id":1,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3284:1327"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:1075:3050":{"id":"4:1075:3050","crate_id":4,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:1076:2088","4:1077:2918","4:1078:53929","4:1079:53930","4:1080:53931","4:1081:53932","4:1082:53933"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10069:2271":{"id":"1:10069:2271","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10070:1498","1:10071:50979","1:10073:50980"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13212:54669":{"id":"1:13212:54669","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:15758:1714"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12776:2488":{"id":"1:12776:2488","crate_id":1,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:12777:122","1:12778:50132"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6767:2923":{"id":"4:6767:2923","crate_id":4,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6768:53792"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13215:50771":{"id":"1:13215:50771","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:47192:162"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47192:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10737:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10737:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6085:57562":{"id":"5:6085:57562","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8341:201"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8767:2470":{"id":"1:8767:2470","crate_id":1,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"1:7808:2471","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10737:199":{"id":"1:10737:199","crate_id":1,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:10739:167","1:10740:1548","1:10741:50771","1:10742:50772","1:10743:50773","1:10744:731","1:10745:732"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3184:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10728:2226","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:8328:116":{"id":"1:8328:116","crate_id":1,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8329:2016","1:8330:2017","1:8331:2018","1:8332:2019","1:8336:2020","1:8339:2021"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8482:153","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:8243:2468":{"id":"1:8243:2468","crate_id":1,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8245:2078"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3082:145":{"id":"1:3082:145","crate_id":1,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3084:2015"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13262:56907":{"id":"1:13262:56907","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12837:2230","prim@char":"4:15741:1700","str::split_terminator":"4:15747:1705","str::split":"4:15747:1705"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"1:49218:2700","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12847:2231","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12847:2231","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12862:2234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3906:68":{"id":"1:3906:68","crate_id":1,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3907:1398"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"1:13224:54689":{"id":"1:13224:54689","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"4:15747:1705"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3428:127":{"id":"1:3428:127","crate_id":1,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3430:361"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"1:3431:128","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13202:2022":{"id":"1:13202:2022","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13253:13733":{"id":"1:13253:13733","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:15741:1700","self::pattern":"1:12837:2230"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"1:12629:2665","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12847:2231","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3252:1912":{"id":"1:3252:1912","crate_id":1,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3254:167","1:3255:1326"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6073:57561":{"id":"5:6073:57561","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8341:201"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8280:132":{"id":"1:8280:132","crate_id":1,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8282:664"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8760:2355":{"id":"1:8760:2355","crate_id":1,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8482:153","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:41:1550":{"id":"0:41:1550","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[213,0],"end":[215,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["lazy",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"LazyStatic","id":"0:39:1549","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"1:3088:213":{"id":"1:3088:213","crate_id":1,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3090:123","1:3091:1385"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5697:2949":{"id":"4:5697:2949","crate_id":4,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5698:54411"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10447:2226","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3092:212":{"id":"1:3092:212","crate_id":1,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3094:123","1:3095:1384"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3220:1829":{"id":"1:3220:1829","crate_id":1,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13277:1727":{"id":"1:13277:1727","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"prim@char":"4:15741:1700","str::matches":"4:15747:1705","self::pattern":"1:12837:2230","`DoubleEndedIterator`":"1:8328:116"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"1:49354:2706","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12847:2231","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3316:1920":{"id":"1:3316:1920","crate_id":1,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3318:167","1:3319:340"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13297:56918":{"id":"1:13297:56918","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"1:12837:2230","prim@char":"4:15741:1700"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12847:2231","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12847:2231","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"1:12867:2229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6070:57560":{"id":"5:6070:57560","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8341:201"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12847:2231","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13268:54702":{"id":"1:13268:54702","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"1:12837:2230","prim@char":"4:15741:1700","str::splitn":"4:15747:1705"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"1:49272:2672","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12847:2231","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12847:2231","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12862:2234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13321:53931":{"id":"1:13321:53931","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13219:50773":{"id":"1:13219:50773","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10737:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10737:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5817:3320":{"id":"5:5817:3320","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5819:167","5:5820:415"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3184:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:13217:50772":{"id":"1:13217:50772","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10737:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10737:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:3262:1908":{"id":"1:3262:1908","crate_id":1,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3264:167","1:3265:539"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5635:2944":{"id":"4:5635:2944","crate_id":4,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5636:53296","4:5637:54285","4:5638:54286"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12856:2233":{"id":"1:12856:2233","crate_id":1,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:12858:2252","1:12859:900","1:12860:51565","1:12861:51566"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9140:2003":{"id":"1:9140:2003","crate_id":1,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13291:56914":{"id":"1:13291:56914","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3327:1923":{"id":"1:3327:1923","crate_id":1,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3329:167","1:3330:1207"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13283:56911":{"id":"1:13283:56911","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12837:2230","str::rmatch_indices":"4:15747:1705","prim@char":"4:15741:1700","`DoubleEndedIterator`":"1:8328:116"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"1:49300:2703","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12847:2231","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13223:54688":{"id":"1:13223:54688","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"4:15747:1705"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3341:1926":{"id":"1:3341:1926","crate_id":1,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3343:341"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13209:53890":{"id":"1:13209:53890","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12308:2873"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13242:2063":{"id":"1:13242:2063","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"self::pattern":"1:12837:2230","prim@char":"4:15741:1700","`None`":"1:47192:162"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47192:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12847:2231","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3184:1828":{"id":"1:3184:1828","crate_id":1,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12867:2229":{"id":"1:12867:2229","crate_id":1,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12862:2234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13295:56916":{"id":"1:13295:56916","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3299:1921":{"id":"1:3299:1921","crate_id":1,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3300:167","1:3301:931"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13246:2021":{"id":"1:13246:2021","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:47192:162","prim@char":"4:15741:1700","self::pattern":"1:12837:2230"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47192:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12847:2231","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12847:2231","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12862:2234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3079:74":{"id":"1:3079:74","crate_id":1,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3081:2014"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3184:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:13550:134":{"id":"1:13550:134","crate_id":1,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13551:167","1:13552:992"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2831:169":{"id":"1:2831:169","crate_id":1,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2833:585","1:2834:885"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3184:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:22799:28165":{"id":"1:22799:28165","crate_id":1,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:22800:50095","1:22801:51874","1:22802:51875"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22792:2226","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:5821:3322":{"id":"5:5821:3322","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5823:167","5:5824:14222"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13303:33464":{"id":"1:13303:33464","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:15741:1700","self::pattern":"1:12837:2230"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47192:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12847:2231","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6367:3026":{"id":"4:6367:3026","crate_id":4,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6368:54333","4:6369:36441","4:6370:54334","4:6371:54335","4:6372:54336","4:6373:54337"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10447:2226","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:6695:2921":{"id":"4:6695:2921","crate_id":4,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6696:53965","4:6697:53966"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10447:2226","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:2776:94":{"id":"1:2776:94","crate_id":1,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2778:1690"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3184:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:3187:203":{"id":"1:3187:203","crate_id":1,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6593:2946":{"id":"4:6593:2946","crate_id":4,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6594:54362","4:6595:53418","4:6596:53419","4:6597:53421","4:6598:53420","4:6599:53422","4:6600:53423","4:6601:53425","4:6602:53426","4:6603:53429","4:6604:53430","4:6605:53431","4:6606:53432","4:6607:53433","4:6608:53434","4:6609:53427","4:6610:53428"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6769:2925":{"id":"4:6769:2925","crate_id":4,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6770:54309"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13327:56924":{"id":"1:13327:56924","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"4:15741:1700"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"1:49467:2715","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"1:3184:1828":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:3681:1858":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"4:2433:31009":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"1:49015:2681":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"5:2184:4275":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"4:6861:2922":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"4:7686:3168":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"17:12307:48306":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"16:7216:3878":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:50764:2536":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:10200:43502":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"4:10994:2446":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"1:45509:1939":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"17:10407:4080":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"4:9062:53991":{"crate_id":4,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"4:15747:1705":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"18:729:59575":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:46436:2443":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:3957:39554":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:50718:50331":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"18:754:59569":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:2773:4003":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"4:3617:2988":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:4133:39575":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"14:189:41718":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:24555:2768":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:13637:49479":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"4:6769:2925":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"5:375:3398":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:5528:39462":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"5:3954:4273":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:5469:40223":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:3257:1909":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:7360:180":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:11499:44059":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:3506:3989":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"16:5595:3713":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:23938:2828":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:48189:67":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"17:12771:43443":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"12:469:58685":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"4:4385:2995":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:7786:3818":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"7:0:1449":{"crate_id":7,"path":["unwind"],"kind":"module"},"9:692:3488":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"15:0:1760":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:6014:3850":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:51432:2498":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:8328:116":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:10938:43730":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:6691:3867":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:5295:41800":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:49254:2671":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:511:36562":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"12:2013:3091":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:11750:44338":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:9769:59543":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"16:6366:3639":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:13746:50645":{"crate_id":1,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"1:8044:53163":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:45981:2714":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:6682:3821":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:10623:43651":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:13465:49453":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:12467:48317":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:12552:48323":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:45763:1850":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"1:46117:2895":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"17:10502:43548":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"4:14341:53398":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"16:6744:4016":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"4:13831:3161":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"4:12094:3185":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"7:38:41270":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:1723:37469":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:14:1728":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:49050:2684":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"16:4823:42421":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"9:776:3535":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"17:11030:123":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"18:644:4180":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:12582:48325":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:2843:3977":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:4459:39608":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:10041:43489":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:23493:2484":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"4:1642:3115":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:12010:48126":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:6464:3820":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"4:2183:3095":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:6636:40991":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:9719:43429":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:23901:5003":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"4:15757:1713":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"1:10250:51280":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"16:4350:42298":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"4:1518:3110":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:31875:2823":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"17:13685:49480":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:11539:44120":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:52817:2512":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"12:1688:3634":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:49866:2726":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"18:744:59572":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:13532:49462":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"5:3028:56532":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:11045:43436":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:9649:43428":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:10081:4092":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:4145:39576":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"4:14958:3081":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:6110:3845":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:9643:76":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:5347:40212":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"5:8271:3413":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:5114:1854":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:7761:3884":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"12:1180:3620":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:12327:48307":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:7467:3809":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:7808:2471":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:3092:212":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:13565:146":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:11822:44352":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:49870:2725":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"18:650:4177":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:12480:48318":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"5:2294:3467":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:0:776":{"crate_id":6,"path":["libc"],"kind":"module"},"4:11177:3272":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"1:22792:2226":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"14:0:1759":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"4:12069:1888":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:13041:48865":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:46417:2441":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:9759:43430":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:12518:2698":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"7:85:41277":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"4:11427:3137":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"5:8133:2027":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"4:5838:3309":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:525:36564":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"4:8626:1889":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:4523:39615":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:3299:1921":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"5:4683:4278":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:4419:39603":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:12234:48301":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"5:3313:2582":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"4:15723:53402":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"4:11936:3061":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"4:1488:3105":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:10128:4152":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"6:4449:39607":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"4:5766:3306":{"crate_id":4,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"4:2852:166":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:48511:142":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:13913:187":{"crate_id":1,"path":["core","task","ready","Ready"],"kind":"struct"},"1:48979:2679":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"4:11387:3135":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"16:5996:3849":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"4:7182:53976":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:3327:1923":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:51133:2538":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"4:15763:1719":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"1:3483:1929":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:46448:2444":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"4:783:4315":{"crate_id":4,"path":["std","thread","local","fast","Key"],"kind":"struct"},"1:51934:2519":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"18:636:59562":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:3091:4040":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:10132:2278":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:24959:2600":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:9806:2651":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:6032:3740":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"4:10704:125":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"1:47371:2583":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:50922:2529":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"4:11007:2664":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"6:4040:39563":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:49582:2241":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"4:15746:1704":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"6:6935:41178":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:3743:4106":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"4:10558:31004":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"17:12287:48305":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:52013:2507":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"4:6227:3288":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"5:7426:4273":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:563:36568":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:12594:2705":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"16:3772:41845":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:3286:1915":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"4:15752:1708":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"1:48213:129":{"crate_id":1,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"6:531:36565":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"16:2912:3979":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:9245:4050":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:2836:120":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"18:694:4183":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:47539:85":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"18:136:49924":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:50086:2736":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:11406:43834":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"4:11497:3141":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"19:117:59586":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"6:4046:39564":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"4:11044:3032":{"crate_id":4,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"12:556:139":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"5:1827:4273":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:11159:2669":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:10468:4140":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"4:8796:1672":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"6:4183:39578":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:10333:138":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"4:2855:165":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"4:2456:4398":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"4:15759:1715":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"4:11470:3138":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"4:10448:3190":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"4:10821:3182":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"12:0:1758":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"17:10236:4055":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"4:14814:53329":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"18:774:59562":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"5:1923:3092":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"16:3429:3737":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:6357:3858":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"4:3110:3226":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"17:9528:2695":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"4:11888:53994":{"crate_id":4,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"17:11572:44128":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"5:8111:3409":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"4:11950:3064":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"4:15758:1714":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"4:13365:31009":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"6:537:36566":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:49878:2727":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:10571:43648":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"4:13456:3153":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:10941:2583":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"5:3935:3092":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"1:50941:50332":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"16:5472:3706":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:11082:4072":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:12507:48320":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:3939:41962":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:6051:37388":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:5255:40186":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"15:269:3646":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"16:3392:3994":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:12537:48322":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"13:0:1753":{"crate_id":13,"path":["std_detect"],"kind":"module"},"4:1524:3111":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:2213:2322":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:13205:48972":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:9332:4136":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"4:9653:4314":{"crate_id":4,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"1:46408:2455":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:4:958":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"12:2025:3093":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:22650:2485":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"18:782:59562":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:51457:2499":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:46150:2615":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"3:0:1750":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"6:1717:37468":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"5:7797:4287":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"12:840:3103":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"4:7403:115":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"1:3337:1925":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"4:15136:3269":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:8243:2468":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:3252:1912":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:53244:19615":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:3990:39557":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:5945:36484":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:13574:49467":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"5:8341:201":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"4:1501:3108":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:12208:48299":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:3197:1856":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"16:2794:3736":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:4790:42413":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"4:3539:4295":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:2004:2965":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:4940:1843":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"5:5520:1875":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:9933:43433":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:49041:2683":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:10001:43487":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"4:11336:3125":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"6:161:36254":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"12:1144:3115":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:51773:2527":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:48222:67":{"crate_id":1,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"1:49424:2710":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"16:5941:175":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"4:8578:1878":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"4:5281:3268":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:9849:59558":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"0:38:1543":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"4:9509:4403":{"crate_id":4,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"16:7843:3885":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:11696:44171":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"12:812:3107":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:5231:42654":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"4:9615:3263":{"crate_id":4,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:12856:2233":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"5:8303:3414":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:1527:37449":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:3345:1927":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:11993:48123":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"12:1200:3621":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"4:2723:2937":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"16:6136:3846":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"9:603:41500":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"4:1075:3050":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"18:0:1763":{"crate_id":18,"path":["memchr"],"kind":"module"},"4:6698:2919":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:46388:2453":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"12:853:3104":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"1:3972:2388":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"4:9600:3262":{"crate_id":4,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"17:11015:43732":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:3623:1933":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:45688:1931":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:52943:2497":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"4:11129:53344":{"crate_id":4,"path":["std","net","parser","AddrKind"],"kind":"enum"},"17:13912:49559":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"4:10520:30032":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:5017:1850":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"17:9296:43406":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"5:5772:4273":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:10331:4094":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"6:4306:39589":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:47581:79":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:49028:2682":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:6269:3857":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:50739:50351":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"12:2032:3094":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:49069:2686":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:10253:4046":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:53153:19610":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:681:43415":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:7571:3804":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"5:3032:56531":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:48960:2677":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"5:8103:3091":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"5:3866:2989":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"4:11873:53322":{"crate_id":4,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"17:12142:48294":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:5071:1852":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"18:896:4176":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"12:354:4390":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"5:4612:220":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"4:9516:4312":{"crate_id":4,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"17:12182:48297":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"16:6518:3862":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:4060:39566":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:46686:11303":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:10122:106":{"crate_id":1,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"1:49862:2724":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:12118:48235":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"5:983:3407":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:6964:2000":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:23768:50867":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:49449:2713":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:48523:3135":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"4:2171:3093":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:11640:44167":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:2115:7496":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:5533:757":{"crate_id":1,"path":["core","iter"],"kind":"module"},"6:616:36575":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:48989:2680":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:1584:37456":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:11726:44228":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:51409:2495":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:10211:43501":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:12195:48298":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:8763:2358":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:10788:43620":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:5507:2545":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:5314:2890":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:12629:2665":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"4:11928:2582":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:5274:40208":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"4:5649:2946":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:46489:2447":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"4:7525:3157":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"17:8954:4115":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:11665:44169":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"4:12217:4398":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:22420:50763":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"4:15762:1718":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"17:12343:48308":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:11328:43443":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"9:1056:3548":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:49433:2711":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:13506:49457":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"12:866:3091":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:11844:4333":{"crate_id":1,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"12:774:2027":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:3306:1918":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:3428:127":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:0:1762":{"crate_id":17,"path":["object"],"kind":"module"},"17:12040:48226":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:12494:48319":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:7453:3808":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:53142:19609":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:23489:2226":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"5:1628:3104":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:6807:3869":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:51180:2526":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"4:10941:3005":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"17:9088:43421":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:12837:2230":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"6:4203:39580":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:11794:44350":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:12073:48228":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"5:3878:3439":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:10224:43507":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:4791:1861":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"4:11410:3136":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"4:11291:2924":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:13154:48925":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"4:7820:4401":{"crate_id":4,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"12:877:3092":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"4:14411:53597":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:3145:3992":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:13641:173":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:46009:2611":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"4:11152:32581":{"crate_id":4,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"1:53127:19608":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:9809:59552":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:11199:43441":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"4:14326:2929":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:46071:2893":{"crate_id":1,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"17:13620:49477":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:3411:1859":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:9886:43432":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:46458:2445":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"12:1159:3619":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:13306:49083":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:45481:1941":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:22644:2482":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"9:749:3490":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"4:13736:4406":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"5:5871:4285":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"1:46248:4327":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:4033:39562":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:10737:199":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:1602:37458":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"12:2018:3092":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"0:41:1550":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"5:6239:3382":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"4:11816:3161":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"1:3157:111":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"18:849:4172":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"4:1190:4396":{"crate_id":4,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"17:12917:48862":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:46379:2439":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"19:0:973":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"12:1253:3116":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"4:3955:123":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"4:13219:3283":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:55820:221":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:8436:3378":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:3341:1926":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"4:5635:2944":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:4255:3289":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:13402:49446":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"5:1204:3448":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:1658:37462":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"4:8268:3216":{"crate_id":4,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"17:13488:49455":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"4:5406:3276":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:13978:49568":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"16:6491:3861":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:49318:2704":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"4:6367:3026":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:5062:1851":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:7378:3812":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:52091:2514":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"5:8419:3092":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"1:52738:2528":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:12262:48303":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"4:14377:125":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:11738:44337":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"4:4480:3004":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"5:8149:3335":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:4439:39606":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"5:1184:56563":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:50095:2737":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:5790:3724":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"4:6605:53431":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:3247:1907":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"12:784:3106":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"11:46:58677":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"17:10377:4084":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:13119:48921":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:51085:50333":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:7987:3003":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:2512:4081":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:6126:3851":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"5:7593:3382":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:11835:44365":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:13547:49464":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:0:262":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:45573:180":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"6:6893:39743":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:47707:87":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:50787:2524":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:10130:2277":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"4:3116:2973":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"6:1622:37460":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"4:1472:3091":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"4:6603:53429":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"4:11166:3270":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:10827:4110":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"9:900:41423":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"4:11172:3271":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:50868:2537":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"4:15765:1721":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"17:12051:48227":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:48733:2916":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"12:937:3109":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:13933:49561":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"5:3732:156":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"4:11269:33186":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:53029:2535":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:5459:40222":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"4:11480:2582":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"4:8020:3216":{"crate_id":4,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"6:5379:40215":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:8929:43417":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:47949:2277":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:10558:43647":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"5:8352:3327":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:46499:2348":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"16:7870:3814":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"4:14977:3087":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"12:2315:58679":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"4:1497:3107":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:7406:3811":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"5:912:3406":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"4:1446:3103":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:1617:37459":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:10126:115":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"6:632:36577":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:10599:43649":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"5:1080:4273":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"4:2362:581":{"crate_id":4,"path":["std","env"],"kind":"module"},"4:8948:1883":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"4:1428:2583":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:3311:1919":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:3892:39549":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:5191:40202":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"4:11077:3039":{"crate_id":4,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"1:47388:164":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:46063:2715":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"4:4383:2994":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"14:231:3330":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"9:0:1755":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:7158:3873":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"4:12054:1880":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:6525:50925":{"crate_id":1,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"1:49882:2728":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:49725:2246":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"16:5029:42477":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:2320:1860":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:57121:50349":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"5:2537:3454":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:12645:48390":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:1596:37457":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:12578:2702":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"16:5927:3729":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:3179:196":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"17:13590:49469":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:4410:39602":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:11118:43437":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"4:3563:2981":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"4:12064:1887":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"6:4371:39597":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:46370:2438":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"4:4267:3253":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:12659:48391":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:52990:2515":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:13318:49085":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:23658:2756":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:32214:50406":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"16:5717:3718":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"5:3380:3096":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"4:1493:3106":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:7550:2035":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:4341:39593":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:3079:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"17:10543:43646":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:10529:43549":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:3290:1914":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:47242:2583":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"5:7822:4293":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:3118:3993":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:5486:11014":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"4:8813:2220":{"crate_id":4,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"18:801:4168":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:3951:39553":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"5:3325:3399":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"5:3756:2583":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:6239:40631":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:3278:1913":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"4:1157:30037":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"16:5488:3707":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"16:3714:41812":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"5:3823:4273":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:52277:2520":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"12:1100:3113":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:3487:1930":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:10138:2269":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:49168:2668":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:49858:2721":{"crate_id":1,"path":["core","str","LinesAnyMap"],"kind":"struct"},"1:3262:1908":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"17:4008:43622":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:53168:19611":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:4646:2378":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"12:1235:3622":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:5505:3708":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:11947:48118":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:3076:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"4:11822:167":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"1:53107:19606":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"16:7856:3886":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:53116:19607":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:8247:2467":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:55859:221":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:22799:28165":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:11482:43844":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:48310:2275":{"crate_id":1,"path":["core","fmt","FlagV1"],"kind":"enum"},"16:3172:3983":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:46110:2713":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:10069:2271":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"4:11050:3037":{"crate_id":4,"path":["std","net","ip","IpAddr"],"kind":"enum"},"4:15754:1710":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"4:14351:2956":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:23784:4957":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:6124:40624":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:11962:43655":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:2991:3991":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"4:10984:2432":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"17:10266:4049":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"4:4557:2974":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:7738:2430":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:13780:49519":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:3972:39402":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:10966:2664":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"17:9971:59546":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"4:2397:30998":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"4:10447:2226":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"17:9961:43434":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:32050:2581":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"16:3365:3734":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:51211:2530":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:7185:3875":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"4:11047:3033":{"crate_id":4,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"1:49530:2232":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:543:36567":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"4:7683:3166":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"4:8534:1877":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"6:4215:39581":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"4:11983:3066":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:11026:43435":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"4:1619:3113":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:3522:41801":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:47455:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:670:36606":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:46318:2433":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"4:3529:2986":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"4:11001:2695":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"1:53087:19604":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:13296:49021":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"12:2331:3088":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:11653:44168":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"5:4199:3091":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:10887:43621":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:2816:3996":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:5273:3739":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"5:4290:2583":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"4:10950:2975":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"6:4325:39591":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:6091:40621":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"4:10678:3225":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"1:48533:50860":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:49674:2244":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:2140:1029":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"17:13453:49452":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:24249:2760":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"18:712:2393":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:23966:2782":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:6773:2454":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:22388:50660":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"4:1149:30034":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:10279:4092":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"5:3022:2088":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:4157:4118":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:10304:4083":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"12:1762:4271":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"4:11246:3290":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"12:112:58683":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:1533:37450":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:11458:43843":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:12913:2237":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:10095:4149":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:7738:3883":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:45808:2574":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"4:3953:191":{"crate_id":4,"path":["std","io","error","Result"],"kind":"typedef"},"4:1415:2582":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:4827:1862":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:11981:43654":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"12:377:3626":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:9574:4073":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:5975:3848":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:46715:11306":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:4101:39571":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:13348:49087":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:1665:37463":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:5428:40221":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:1700:37466":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:7195:3876":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:4127:39574":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:4347:39594":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"5:3024:56530":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:13942:49562":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:12712:48395":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:38505:2344":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"5:781:105":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"5:5299:186":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:5400:40217":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:9943:59559":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"4:10459:53417":{"crate_id":4,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"5:1591:2583":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:12847:2231":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:3282:1917":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:12221:48300":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:7279:4027":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"9:809:3135":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"16:4535:42333":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:13272:49018":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:10489:4141":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:49126:2694":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:55727:2478":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:3274:1910":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"5:3284:92":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:7236:3880":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:22846:2492":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:53283:19616":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:48274:71":{"crate_id":1,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"16:4955:42453":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"4:12039:1879":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:0:413":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"17:13582:49468":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:51820:2531":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"9:469:41395":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"4:13583:3170":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:10844:4094":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:11915:48116":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"12:2303:58682":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:6413:3638":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"4:8951:1884":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:4936:1842":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"17:8902:43416":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:10149:43432":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:9404:43425":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:10383:2425":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"16:6780:3868":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:6219:3855":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"16:7514:3827":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"4:8298:3438":{"crate_id":4,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"6:5522:40250":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:6021:3976":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"4:1482:3092":{"crate_id":4,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"1:49916:2807":{"crate_id":1,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"6:4241:39583":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:4478:39610":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:13282:49019":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:46479:2446":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"18:766:59565":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:22640:2226":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"4:3440:2985":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:9261:2231":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:23845:5000":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:13609:49471":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"5:7093:4287":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"16:3488:3990":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:13865:49529":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"4:3235:3229":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:10403:4090":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:6087:3805":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"16:6152:3807":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:6812:41151":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:7928:2404":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:6554:3863":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:3431:128":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:5978:40617":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"4:7545:3158":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"6:6176:40626":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"4:11865:3165":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"6:4425:39604":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:6214:40629":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:48969:2678":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:5312:40211":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"4:10746:2989":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:9659:59557":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:4317:39590":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:45619:184":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"16:2889:3997":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:4401:39601":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:11714:44227":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:1563:37454":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:1708:37467":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:3945:39552":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"4:14043:2994":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:46040:2898":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"4:14686:4322":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"5:4583:4276":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"6:6864:39739":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"4:11850:3164":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:3013:2226":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:22403:50660":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"16:2945:4002":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:49599:2242":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"4:5693:2948":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"18:677:138":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:13446:49449":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"18:667:4182":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"4:2765:2938":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"1:53221:19614":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:6185:40627":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"4:4605:56224":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"4:10579:3457":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"1:51004:2505":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:605:36573":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:4281:39586":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"5:8335:56896":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"4:14364:53335":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"5:1647:3106":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:6881:39741":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:12725:48401":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:6718:4014":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:8849:4066":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"4:10492:2222":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"18:857:4173":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"5:1475:3116":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:5228:40206":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"4:4307:2997":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"5:7355:2027":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:13054:48917":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"5:5821:3322":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:5580:3712":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:6100:40622":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"12:2323:58680":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"9:157:3505":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"4:5284:3269":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:6208:3854":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:52627:2508":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"16:5632:3714":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"5:1430:3113":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:23863:5001":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:45728:2382":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"4:5697:2949":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:22375:2393":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"4:5876:3314":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:11767:44346":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"16:3241:3986":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"12:160:3623":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:8767:2470":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:4871:1669":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"5:5399:2965":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"4:15756:1712":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"1:52126:2496":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:12776:2488":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"16:2754:3735":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"4:11835:3163":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"17:13180:48969":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:11555:44121":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:6391:3859":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:5548:40251":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"12:463:58684":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:10353:4086":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"4:6839:2927":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:11970:43653":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"16:4386:42309":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:50899:2525":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"4:8376:3063":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:7477:3829":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:547:3720":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:5436:58557":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"4:8727:53991":{"crate_id":4,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:50109:154":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:3862:39546":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"4:15745:1703":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"4:12547:124":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:3664:2381":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:5563:40252":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:4300:39588":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:6910:39745":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:13163:48926":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:11086:2667":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:3640:133":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:13098:48920":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:49568:2238":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:6949:4022":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:5969:36443":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:47234:2582":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"4:10816:3181":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:4066:39567":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:10477:4139":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:51384:2513":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:11711:2687":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:32114:50324":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"4:10535:30035":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"4:696:3189":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:10516:4142":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"12:949:3110":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:13986:49570":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:10912:43720":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:11304:43442":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"4:11020:3031":{"crate_id":4,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"17:10071:4155":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"5:7194:3091":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"16:4852:42425":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:2801:101":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:52060:2511":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:10117:4151":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"4:13720:3160":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:4634:2377":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:10864:43623":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"4:8276:3135":{"crate_id":4,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"1:11242:2674":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:45996:2610":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"4:7013:33188":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"4:8081:4297":{"crate_id":4,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"17:9729:59553":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:49458:2714":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"12:2009:2027":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:9005:43418":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"4:6607:53433":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"4:15744:1702":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"5:1619:3103":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"9:234:3513":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"17:11231:4070":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"6:5386:40216":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"4:14401:2975":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:510:43413":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:11254:4068":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:4517:39614":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"5:3472:3092":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"17:10061:43506":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"4:3108:124":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"4:2159:2027":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:46200:2796":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:9440:43426":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:13852:2307":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"16:4762:42410":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:3997:39558":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:47311:174":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:49414:2709":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"4:6695:2921":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"14:250:41726":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:569:36569":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:47413:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"12:2005:2582":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:3185:1857":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"17:10673:43652":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:13924:49560":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"4:5990:3278":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:7303:3882":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:46328:2434":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:13221:48973":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"4:894:3193":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:11048:2666":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:12610:48340":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:46050:2899":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"4:9476:4311":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:51234:2533":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:6200:40628":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:24487:2766":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"6:4387:39599":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:5953:37387":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"15:248:3642":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:9592:124":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"17:11337:4137":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"4:820:4315":{"crate_id":4,"path":["std","thread","local","os","Key"],"kind":"struct"},"16:4641:42389":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:46338:2435":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:46278:2448":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:46670:11301":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"12:1667:3633":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:13600:51159":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:6591:3865":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:10801:43619":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:13520:49459":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:46124:2896":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"0:0:1543":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"5:1602:2027":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:6106:40623":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:7174:3874":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:6614:36521":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:1729:3282":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"11:54:3609":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"4:1302:139":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"10:0:1756":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"6:4023:39561":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"4:14927:3079":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:46131:2897":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:11121:2668":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:4262:39584":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:6636:3824":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"12:930:3108":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:5359:40213":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:4120:39573":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"11:0:1757":{"crate_id":11,"path":["adler"],"kind":"module"},"1:51509:50353":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:12795:48469":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:50812:2516":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:48486:2427":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"12:976:3112":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:46356:50639":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"4:10551:3117":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:9210:43423":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"4:11240:3270":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"4:3233:2316":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"1:52880:2532":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"4:4270:3254":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"12:892:3611":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"16:3264:3987":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:3549:41802":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:8060:1841":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"17:13062:48919":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:55885:221":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"13:120:41673":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:5766:3723":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:1630:37461":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"4:10934:3003":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"1:47623:86":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"16:4477:42325":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:300:191":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"4:9648:4313":{"crate_id":4,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"5:2246:3451":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"4:3249:3233":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"16:7823:3819":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:11616:44131":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:49874:2729":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"5:1581:2582":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"4:900:3194":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"4:4512:2965":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"6:584:36570":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:13564:49466":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:1554:37453":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:1744:37471":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:49200:2699":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"9:1020:3555":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:10814:4109":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"4:14394:114":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:49354:2706":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:3188:202":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:1690:37465":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:23822:2558":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:7024:4025":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"4:11074:3038":{"crate_id":4,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"5:1446:3115":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:4112:39572":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"4:11944:2027":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:46094:2894":{"crate_id":1,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"5:6634:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:22844:2493":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"16:7146:3872":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"12:761:2583":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"9:686:3486":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"17:13331:49086":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:3718:1940":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:10140:4094":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"12:925:3105":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"16:4671:42394":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"4:2582:54001":{"crate_id":4,"path":["std","error","from","StringError"],"kind":"struct"},"5:8317:3415":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"12:429:3624":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"4:10469:3198":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"1:23953:2783":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"18:704:59562":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"4:4344:2998":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"16:6166:3852":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"5:4627:4278":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"4:10309:4316":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:13067:13963":{"crate_id":1,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"5:4499:3427":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"16:5433:3702":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:51330:2506":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:2543:4138":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:12431:48314":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:46287:2432":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:46183:2795":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:3905:39550":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:6887:39742":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:4576:2965":{"crate_id":1,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"1:46258:11015":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:37348:2393":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"17:13377:49101":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:13884:49535":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"4:1651:3116":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"5:8088:2027":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:7205:3877":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"16:7342:3840":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:3082:145":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"4:11226:3313":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:13963:49563":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"4:8527:1876":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"5:3354:3093":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"6:5407:40218":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:10448:4057":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:3465:1938":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:50032:187":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"6:4005:39559":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:2733:3693":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:7226:3879":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"4:10962:2977":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"9:996:3554":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"4:2166:3092":{"crate_id":4,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"4:8803:1673":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"4:14346:53403":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:10420:4079":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"5:8223:3088":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"4:70:1459":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"4:10690:2957":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"6:4083:39569":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:5314:41798":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"9:963:3553":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"5:8170:2027":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"4:15742:1701":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"1:24283:2761":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"18:837:2233":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"5:6936:3318":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:49746:2248":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:299:59547":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"4:5889:3315":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:32062:50352":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"4:6767:2923":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:24521:2767":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:3646:1935":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:46399:2440":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:10917:2582":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:11628:44166":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:3088:213":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"18:866:4174":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:610:36574":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:13477:49454":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:6085:40620":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"4:10334:4318":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:6404:2451":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"4:12074:3073":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"17:12247:48302":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"12:396:3625":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:49736:2247":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:9476:43427":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:51613:50341":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:12699:48394":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"4:14834:3073":{"crate_id":4,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"4:2162:3091":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:7119:3741":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"4:7628:3162":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"6:578:32213":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:57142:50373":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"1:23751:2562":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"4:11265:2920":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:13172:48927":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:49150:2664":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:50127:2401":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:11009:2665":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:6068:37391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:23394:2483":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:10028:43488":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:11779:44347":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:47363:2582":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"6:1736:37470":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:157:36253":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"16:6252:3856":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:13497:49456":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"4:8177:3216":{"crate_id":4,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"6:5167:40200":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:53206:19613":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"4:14864:53332":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"6:4395:39600":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:12168:48296":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"5:421:1833":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"12:968:3111":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"5:7615:3383":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:4734:42407":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:49759:13964":{"crate_id":1,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"1:23587:2753":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"4:7559:3159":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"1:8280:132":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:52484:2540":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:6155:40625":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"18:610:4178":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:6852:39737":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:1760:37472":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:50139:2399":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"16:5330:41797":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"4:14971:3086":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:10584:4117":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"4:14118:2222":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:12632:48389":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:24419:2764":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:5007:1849":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:9896:59542":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"4:1459:3104":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:12385:48312":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:1522:37448":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:5421:3701":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:12284:2911":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"4:15491:4325":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"5:1658:3107":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:22441:50761":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:3268:1911":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"5:2314:3450":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:10656:43633":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"12:181:3627":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:2692:560":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:13554:49465":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:4358:39595":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:1455:1671":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"16:5707:3716":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"16:3604:41803":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:49442:2712":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:50973:2517":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:11186:43440":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"4:10584:2432":{"crate_id":4,"path":["std","error","Chain"],"kind":"struct"},"17:11159:43439":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"4:15740:1699":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"1:3220:1829":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"4:15764:1720":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"16:4890:42438":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:11932:48117":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"18:820:4170":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:47970:2279":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"4:4346:2999":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:8760:2355":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:49108:2490":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"4:10826:2990":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:47302:2092":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:37324:164":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"17:11588:44129":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"4:12554:3225":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:51361:2510":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:3906:68":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"4:4899:3029":{"crate_id":4,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"1:46300:2449":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:4501:39612":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:5998:40619":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"4:5643:2945":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"4:8369:3062":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:13394:49419":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:50835:2504":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"5:2761:3453":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"5:6393:208":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:45721:1934":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"12:1651:3632":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:48891:2670":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:5420:40220":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"5:909:93":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:6899:39744":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"4:10673:3028":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"17:9186:4114":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"6:5159:40199":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:12442:48315":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"4:13384:4405":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"16:3800:41848":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:51046:50363":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:11200:2671":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"4:15707:56244":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"9:27:3537":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"1:3316:1920":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"4:15766:1722":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"17:9551:4067":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:10119:106":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"6:1547:37452":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:49553:2235":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:6221:40630":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:12741:48402":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"4:1438:2027":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:13746:49482":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"4:9225:3045":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"4:15211:34908":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"16:7333:3826":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:10317:4082":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:46025:2613":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"18:739:59585":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"4:9027:1886":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:6331:2437":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"18:720:50866":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:5414:40219":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:4073:39568":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:12867:2229":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"16:7392:3813":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"14:11:41718":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:47749:82":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:47791:89":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:7073:3871":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:51589:50354":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:4945:1844":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"5:1461:3114":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"9:41:3538":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"16:5855:3726":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:6999:3870":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"5:7753:219":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:5456:3703":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"6:3918:39551":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:10926:43729":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:32056:2813":{"crate_id":1,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"4:8691:158":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"12:747:2582":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"4:15741:1700":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"4:12556:4320":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"4:14037:2996":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"6:3966:39555":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:51283:2518":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:12862:2234":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:13898:49553":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"5:3346:3095":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:11147:43438":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"4:12114:3186":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:13862:2738":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:12308:2873":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:3085:131":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"5:6670:3353":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"4:1041:3049":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:13370:49089":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"4:10541:3099":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"16:5736:3719":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"4:1507:3109":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"4:4621:2979":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"17:13810:49522":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:2968:3980":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"4:2395:30997":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"12:2045:3096":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"1:24351:2763":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"13:232:58689":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:13540:49463":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:9133:43422":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:13429:49448":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:10975:43707":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:47259:2000":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:47192:162":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"4:2458:4399":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"4:9521:4404":{"crate_id":4,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"17:13760:49483":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:49404:2708":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"17:13842:49526":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:46704:11304":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"4:1633:3114":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"5:69:3377":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"4:0:1302":{"crate_id":4,"path":["std"],"kind":"module"},"17:9600:59550":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:50042:4410":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"4:2155:2582":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:22835:2226":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:4284:2027":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:3191:205":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"6:4227:39582":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:9799:43431":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:46347:2436":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:48207:70":{"crate_id":1,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"17:12598:48326":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:4364:39596":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"4:11014:2708":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"4:6345:2919":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:10611:43650":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"16:6644:3866":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:3868:39547":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"4:4305:2996":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:6644:40992":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:45665:185":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:6605:3822":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:23885:4992":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"4:4614:2976":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"1:12555:2701":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"18:885:4175":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:12756:48403":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"4:10575:31011":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:13627:49478":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:48240:104":{"crate_id":1,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"4:15753:1709":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"1:51066:2494":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:13356:49088":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:10106:4150":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:11100:4074":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:49136:2695":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"4:11895:53413":{"crate_id":4,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"4:11109:53338":{"crate_id":4,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"4:5683:2947":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"4:7151:53976":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"4:11214:3031":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:3425:126":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"4:13904:4321":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:11434:43842":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"4:9743:4315":{"crate_id":4,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"17:9264:41798":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:46088:2714":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:13240:48975":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:38568:2311":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:9140:2003":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:3187:203":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"4:10259:53977":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:46677:1672":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:4331:39592":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:4417:42315":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"4:5627:2943":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:22443:50765":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"4:2027:141":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:8353:1831":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"8:0:1754":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:11214:2672":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:10378:2424":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:10134:2279":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"4:1152:30036":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:24453:2765":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:10052:43490":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:12982:48864":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:49711:2245":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:4922:42445":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:13386:49418":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:7636:2346":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"5:3320:3094":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:1236:43504":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:9065:43420":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"5:1549:91":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:45756:2405":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:3294:1916":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"4:4596:2271":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"12:2309:50095":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:3207:2310":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"17:607:43414":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:12946:48863":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:2204:2321":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:2867:163":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"4:4273:3255":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"6:5185:40201":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:5672:3715":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"4:6465:3046":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:5221:40205":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"4:6107:3287":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:49093:2798":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:46695:3004":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:9839:4094":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:47963:2278":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:46468:2450":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"4:5705:2951":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:12408:48313":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"5:6457:3091":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:48502:2426":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"4:12059:1881":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:21:652":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"1:50050:176":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"4:3251:3234":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"5:3023:56897":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"4:15761:1717":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"17:10179:43503":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"16:5960:3731":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:55846:221":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"4:14872:3172":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:12671:48392":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:11001:43705":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"16:4995:42468":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:7884:3815":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:9801:2650":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:49218:2700":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:48737:2915":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:48942:2675":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:5210:40204":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"18:152:49925":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"14:194:41719":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"4:7815:3215":{"crate_id":4,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"1:11744:2688":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"4:14708:4324":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:13258:49016":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:49886:2722":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:10435:43546":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"6:5241:40185":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:49272:2672":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"4:8362:188":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"9:927:41389":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"5:5857:4282":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"4:15076:3040":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"4:11232:3281":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:6577:3864":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"4:5561:3020":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:51557:50336":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:6923:41177":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:3041:3982":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"12:1118:3114":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:7264:3823":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:3333:1924":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:0:471":{"crate_id":1,"path":["core"],"kind":"module"},"5:8094:3408":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:12028:48170":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"14:47:41718":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:5522:3709":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:2776:94":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"4:14040:2998":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:2877:170":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:49647:2243":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"4:2188:3096":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:55807:221":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:5987:40618":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"5:4226:4273":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:9162:4069":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:5815:3725":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"4:1018:3216":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"4:7573:3160":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"6:3881:39548":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:3652:1937":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:11847:44366":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"4:9349:56274":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"4:11221:3310":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:11519:44060":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:1311:4156":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:3398:112":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:4013:39560":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:1637:3105":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:13819:49525":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:48326:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"18:169:49926":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"4:14571:3165":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:24589:2769":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"16:5346:3806":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:3978:39556":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:10988:43706":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:9280:41797":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:12095:48234":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:45642:183":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:51851:2534":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"16:4506:42329":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"5:8119:56601":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:4193:39579":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:47319:191":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"6:5130:40157":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:4614:42387":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"5:6746:2965":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"4:4173:3006":{"crate_id":4,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"1:49059:2685":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:51694:2539":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"4:12015:3068":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:48541:50857":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"4:7337:171":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"4:7228:172":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"4:14795:3185":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:14000:49604":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:4377:39598":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:53096:19605":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"4:11970:3065":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:3287:3988":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"4:15220:53400":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"16:6620:4009":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:9139:2004":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:6654:1875":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:10950:43731":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:49894:117":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:49120:2693":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"18:790:4167":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:53191:19612":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"4:15739:1698":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"16:3064:4039":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:55833:221":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:45598:181":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"4:5868:3312":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:10962:43708":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:88:36187":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"4:11486:3140":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"5:8079:3326":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:4293:39587":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:8482:153":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"18:620:59577":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"14:244:41720":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:47956:2276":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"5:1678:3446":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:12685:48393":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"4:3908:3184":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:5561:3711":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"4:7915:3216":{"crate_id":4,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"17:12275:48304":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:2108:559":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"4:10730:3246":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:5371:40214":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"4:11877:53604":{"crate_id":4,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"17:12783:48466":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"16:3320:4041":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:4164:39577":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:23837:4982":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:27770:2474":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"4:10683:2956":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"4:14769:3163":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:23931:5002":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:47250:2027":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:10728:2226":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"4:11318:33189":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:49372:2707":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"4:7511:3156":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"1:24385:2617":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:47497:78":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:23809:2557":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:10128:2276":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"4:2177:3094":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:11678:44170":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:47665:80":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:8293:1832":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:4272:39585":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:5407:3700":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:542:3742":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:10160:43505":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:13598:49470":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"4:11080:3177":{"crate_id":4,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"4:15751:1707":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"1:3350:1928":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:11378:4111":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:12456:48316":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"4:15712:30038":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:48494:50873":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"18:660:4181":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:45987:10625":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:2484:43535":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:7804:3817":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:47293:2001":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:46170:2794":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"4:15098:3268":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:10079:130":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"16:6731:4015":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:3635:209":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"12:1855:141":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:11277:43405":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:13192:48971":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"6:1908:37607":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:47225:2026":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"16:6101:3803":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:3014:2345":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"4:13758:3162":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"6:4470:39609":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:13772:49518":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:1540:37451":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:13799:49521":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"5:8236:3120":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:22422:50766":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"4:15157:3276":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:6858:39738":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:23729:4969":{"crate_id":1,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"1:46427:2442":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"14:216:41727":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"5:8286:2795":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:3554:1932":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:12568:48324":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:13550:134":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"4:11999:3067":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:6028:37414":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:13733:49481":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:4511:39613":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:6768:4018":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"5:8364:3328":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:2190:2315":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"4:14702:4323":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:0:1761":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:6424:3860":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:4448:42321":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:591:36571":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:49929:2808":{"crate_id":1,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"1:2831:169":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"5:1000:2582":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"4:8861:1890":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:599:36572":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"6:4052:39565":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:5384:3699":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"5:8141:180":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:10343:142":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:53068:2500":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:3422:1830":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"4:5555:3022":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"4:15748:1706":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"15:230:3641":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"4:6593:2946":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:2314:4085":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:47379:2027":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:46309:2452":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"5:7239:4273":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"16:7894:3843":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"16:4230:42228":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:51027:2509":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:12155:48295":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"4:10722:114":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:6569:4011":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:2431:2306":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:9368:43424":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:5753:3722":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:2779:2422":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"5:1669:180":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:9689:59545":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:6072:3691":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:4095:39570":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:4658:99":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"18:829:4171":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"4:2565:123":{"crate_id":4,"path":["std","error","Error"],"kind":"trait"},"16:3218:3985":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:55872:221":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:24317:2762":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"9:1075:3556":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:7250:3881":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"4:3113:2844":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"1:11228:2673":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:10635:43618":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"5:5817:3320":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"4:7863:4297":{"crate_id":4,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"4:10474:3214":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"12:2039:3095":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:10458:43547":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:9648:83":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:9141:2002":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:3321:1922":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:46165:97":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:14021:2397":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"16:3338:3733":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"16:3018:3981":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"16:7295:3825":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:4689:2305":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"5:4427:2582":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:6870:39740":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"4:15246:3650":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:22703:2492":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:5269:40207":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:13676:14226":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"5:3359:3400":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"5:3743:2582":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:4704:42402":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:294:59555":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:6005:33186":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:11809:44351":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:13949:137":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"4:5860:3311":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:2866:3978":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:11604:44130":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:4304:42277":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:10140:2280":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"4:4539:2958":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"16:7549:3816":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"4:15760:1716":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"17:12521:48321":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:45749:2404":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"5:772:207":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"0:39:1549":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"14:56:43844":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"5:1224:3449":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:1572:37455":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:48951:2676":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:5091:1853":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:48252:123":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"17:11358:4112":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:1676:37464":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:49467:2715":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:9034:43419":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:45557:182":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"4:14558:3023":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"5:8253:98":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"16:7971:123":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"4:6771:2926":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"4:3261:3239":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"1:49890:2723":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:3195:3984":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"4:1132:2939":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:5292:40210":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:5282:40209":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:13062:13962":{"crate_id":1,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"5:2202:3402":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"4:15755:1711":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"1:49300:2703":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"9:722:3489":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"1:32015:2790":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:5197:40203":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:4431:39605":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:6176:3853":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"4:10248:43415":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:7042:4026":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"5:8176:2027":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"4:10738:2987":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"18:811:4169":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:3189:103":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:10136:175":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"4:14782:3164":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:5360:3698":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:624:36576":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:24215:2759":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"16:6238:3810":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"16:7420:3828":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"1:8284:147":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:13788:49520":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"4:15235:3650":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:519:36563":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"4:14554:31011":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"6:4494:39611":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"4:1530:3112":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"4:14943:3080":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:12373:48311":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"}},"external_crates":{"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":15}