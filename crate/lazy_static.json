{"root":"0:0:2320","crate_version":"1.4.0","includes_private":false,"index":{"0:31:2327":{"id":"0:31:2327","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[213,0],"end":[215,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["lazy",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"LazyStatic","id":"0:29:2326","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13324:27157":{"id":"1:13324:27157","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:991:36849"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13318:26670":{"id":"1:13318:26670","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13208:2325":{"id":"1:13208:2325","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42005:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42003:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10975:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10975:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29:2326":{"id":"0:29:2326","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[185,0],"end":[188,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"5:5617:30929":{"id":"5:5617:30929","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:304:2634","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:304:2634","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5624:30931":{"id":"5:5624:30931","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13228:26766":{"id":"1:13228:26766","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44149:3877","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5632:30932":{"id":"5:5632:30932","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13223:21880":{"id":"1:13223:21880","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12341:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43865:3876","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13198:30209":{"id":"1:13198:30209","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13196:997":{"id":"1:13196:997","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12341:471"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13214:25261":{"id":"1:13214:25261","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10975:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10975:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13240:2860":{"id":"1:13240:2860","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42005:191","prim@char":"4:12341:471","self::pattern":"1:12885:3849"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42003:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13313:30230":{"id":"1:13313:30230","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12341:471","self::pattern":"1:12885:3849"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12891:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12906:3865","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5621:30930":{"id":"5:5621:30930","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5618:3526":{"id":"5:5618:3526","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13257:30216":{"id":"1:13257:30216","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12885:3849","str::split":"1:13248:26765","prim@char":"4:12341:471","`DoubleEndedIterator`":"1:8263:129","str::rsplit_terminator":"1:13260:30217"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43945:3881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13321:26675":{"id":"1:13321:26675","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13328:3610":{"id":"1:13328:3610","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4952:3610"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44203:3611","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13301:26279":{"id":"1:13301:26279","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12341:471","self::pattern":"1:12885:3849"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42003:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13234:27300":{"id":"1:13234:27300","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"4:12341:471","self::pattern":"1:12885:3849"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5634:3687":{"id":"5:5634:3687","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13310:30229":{"id":"1:13310:30229","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12341:471","self::pattern":"1:12885:3849"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13263:27294":{"id":"1:13263:27294","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12341:471","self::pattern":"1:12885:3849","str::rsplitn":"1:13266:27296"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43999:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13281:30219":{"id":"1:13281:30219","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12885:3849","`DoubleEndedIterator`":"1:8263:129","prim@char":"4:12341:471","str::rmatch_indices":"1:13284:30220"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44045:3884","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13269:27298":{"id":"1:13269:27298","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42003:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13205:30212":{"id":"1:13205:30212","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13319:27153":{"id":"1:13319:27153","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39904:3580","Self::is_ascii":"1:13318:26670"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42003:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39904:3580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13291:30223":{"id":"1:13291:30223","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13248:26765":{"id":"1:13248:26765","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12885:3849","`DoubleEndedIterator`":"1:8263:129","prim@char":"4:12341:471","str::split_whitespace":"1:13226:21892","str::rsplit":"1:13254:27292"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43895:3803","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13221:27289":{"id":"1:13221:27289","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13220:27288"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42003:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13289:30222":{"id":"1:13289:30222","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13219:27285":{"id":"1:13219:27285","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"1:13218:27284","str::split_at_mut_checked":"1:13221:27289"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13260:30217":{"id":"1:13260:30217","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12885:3849","str::split":"1:13248:26765","prim@char":"4:12341:471","str::split_terminator":"1:13257:30216"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43963:3880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12891:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12906:3865","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13316:30231":{"id":"1:13316:30231","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12846:136","`FromStr`":"1:12845:3356"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42136:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12845:3356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12845:3356","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13212:25260":{"id":"1:13212:25260","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10975:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10975:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13320:26674":{"id":"1:13320:26674","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13326:30232":{"id":"1:13326:30232","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4951:30232"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44194:3632","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13226:21892":{"id":"1:13226:21892","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13227:21909"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44169:3878","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13307:30228":{"id":"1:13307:30228","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12341:471","self::pattern":"1:12885:3849"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12891:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12906:3865","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13195":{"id":"1:13195","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13196:997","1:13197:2819","1:13198:30209","1:13199:30210","1:13201:30211","1:13204:26612","1:13205:30212","1:13206:336","1:13207:27265","1:13208:2325","1:13210:25259","1:13212:25260","1:13214:25261","1:13216:30213","1:13217:30214","1:13218:27284","1:13219:27285","1:13220:27288","1:13221:27289","1:13223:21880","1:13224:22128","1:13225:21997","1:13226:21892","1:13227:21909","1:13228:26766","1:13229:30215","1:13230:21882","1:13231:25018","1:13234:27300","1:13237:27301","1:13240:2860","1:13244:2818","1:13248:26765","1:13251:21903","1:13254:27292","1:13257:30216","1:13260:30217","1:13263:27294","1:13266:27296","1:13269:27298","1:13272:27299","1:13275:2533","1:13278:30218","1:13281:30219","1:13284:30220","1:13287:30221","1:13289:30222","1:13291:30223","1:13293:30224","1:13294:30225","1:13295:30226","1:13298:30227","1:13301:26279","1:13304:27302","1:13307:30228","1:13310:30229","1:13313:30230","1:13316:30231","1:13318:26670","1:13319:27153","1:13320:26674","1:13321:26675","1:13322:26676","1:13323:27156","1:13324:27157","1:13325:27158","1:13326:30232","1:13328:3610","1:13329:30233"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13224:22128":{"id":"1:13224:22128","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12341:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43871:3875","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13278:30218":{"id":"1:13278:30218","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12885:3849","`DoubleEndedIterator`":"1:8263:129","prim@char":"4:12341:471","str::matches":"1:13275:2533"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44117:3883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12891:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12906:3865","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13199:30210":{"id":"1:13199:30210","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13325:27158":{"id":"1:13325:27158","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:991:36849"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13298:30227":{"id":"1:13298:30227","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12341:471","self::pattern":"1:12885:3849"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13197:2819":{"id":"1:13197:2819","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13207:27265":{"id":"1:13207:27265","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12360:1851"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13218:27284":{"id":"1:13218:27284","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_checked":"1:13220:27288","str::split_at_mut":"1:13219:27285"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2320":{"id":"0:0:2320","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[215,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\n# #[macro_use]\n# extern crate lazy_static;\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.4.0\")]","#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:29:2326","0:31:2327","0:28:2320"],"is_stripped":false}}},"1:13206:336":{"id":"1:13206:336","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13207:27265","`u8`":"4:12360:1851"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13204:26612":{"id":"1:13204:26612","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12432:3869"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13229:30215":{"id":"1:13229:30215","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44159:3879","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13230:21882":{"id":"1:13230:21882","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44187:3886","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13217:30214":{"id":"1:13217:30214","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12347:1721","crate::ops::IndexMut":"1:3417:2728","str::slice_unchecked":"1:13216:30213"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13237:27301":{"id":"1:13237:27301","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12341:471","self::pattern":"1:12885:3849"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12891:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12906:3865","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13254:27292":{"id":"1:13254:27292","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12885:3849","`DoubleEndedIterator`":"1:8263:129","prim@char":"4:12341:471","str::split":"1:13248:26765"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43913:3807","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12891:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12906:3865","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28:2320":{"id":"0:28:2320","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[167,0],"end":[179,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"inner":{"macro":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"}},"1:13210:25259":{"id":"1:13210:25259","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42005:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42003:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10975:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10975:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13251:21903":{"id":"1:13251:21903","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12341:471","self::pattern":"1:12885:3849"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12700:3816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13266:27296":{"id":"1:13266:27296","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12341:471","str::splitn":"1:13263:27294","self::pattern":"1:12885:3849"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44017:3801","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12891:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12906:3865","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13220:27288":{"id":"1:13220:27288","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13221:27289"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42003:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13275:2533":{"id":"1:13275:2533","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12885:3849","`DoubleEndedIterator`":"1:8263:129","prim@char":"4:12341:471","str::rmatches":"1:13278:30218"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44099:3882","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13294:30225":{"id":"1:13294:30225","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13225:21997":{"id":"1:13225:21997","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43881:3674","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13244:2818":{"id":"1:13244:2818","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42005:191","prim@char":"4:12341:471","self::pattern":"1:12885:3849"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42003:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12891:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12906:3865","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13231:25018":{"id":"1:13231:25018","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12341:471","self::pattern":"1:12885:3849"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13293:30224":{"id":"1:13293:30224","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13227:21909":{"id":"1:13227:21909","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13226:21892"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44178:3887","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13322:26676":{"id":"1:13322:26676","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13284:30220":{"id":"1:13284:30220","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12885:3849","`DoubleEndedIterator`":"1:8263:129","prim@char":"4:12341:471","str::match_indices":"1:13281:30219"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44063:3885","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12891:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12906:3865","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13323:27156":{"id":"1:13323:27156","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:991:36849"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13329:30233":{"id":"1:13329:30233","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4949:30233"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44212:3631","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13272:27299":{"id":"1:13272:27299","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42003:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12891:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12906:3865","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13287:30221":{"id":"1:13287:30221","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13295:30226":{"id":"1:13295:30226","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12341:471","self::pattern":"1:12885:3849"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12891:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12911:3864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5633:30933":{"id":"5:5633:30933","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:304:2634","`String`":"5:7645:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:304:2634","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5635:26672":{"id":"5:5635:26672","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13321:26675"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5636:26673":{"id":"5:5636:26673","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13322:26676"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5616":{"id":"5:5616","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5617:30929","5:5618:3526","5:5621:30930","5:5624:30931","5:5632:30932","5:5633:30933","5:5634:3687","5:5635:26672","5:5636:26673"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13216:30213":{"id":"1:13216:30213","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12347:1721","str::slice_mut_unchecked":"1:13217:30214","crate::ops::Index":"1:39549:2727"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13201:30211":{"id":"1:13201:30211","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"1:13199:30210"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13304:27302":{"id":"1:13304:27302","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12341:471","self::pattern":"1:12885:3849"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42003:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12891:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12891:3863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12906:3865","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:10092:17237":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:9807:17216":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:23089:22389":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"1:40704:3709":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:46285:22160":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:12646:3890":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:5225:14121":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:4932:14092":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:1686:11037":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"11:1896:9351":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:14246:20740":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:15569:21523":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:13986:20724":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:11825:17408":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:4971:14097":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:11812:17386":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"5:6958:9706":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"4:3643:3643":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"17:10317:17240":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:6524:14862":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"4:8249:29587":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:7144:17115":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:15376:21510":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:36270:2718":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:44613:3857":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"16:2323:16125":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"16:2748:16145":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:13375:20211":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:2890:163":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:11403:3805":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:5423:14145":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"4:8236:9348":{"crate_id":4,"path":["std","hash","random","RandomState"],"kind":"struct"},"17:13797:20713":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:12659:17488":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"1:7540:2831":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:10720:33881":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:11898:17407":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"16:3614:16160":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"4:7403:26753":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:2548:16136":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:5995:17067":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:40686:3277":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"16:4424:16654":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"9:238:9603":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:14051:20729":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:12388:17469":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"16:3778:16169":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:2887:76":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"6:7467:15298":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:22989:25162":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:15313:21504":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"4:1101:9361":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:2768:16146":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:6872:17105":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:41781:3732":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"16:7052:17113":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:23078:22045":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"1:32766:2704":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:0:2565":{"crate_id":16,"path":["gimli"],"kind":"module"},"4:3294:29585":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"4:4205:9519":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:3329:2736":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"17:10982:17268":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:7993:2641":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"17:10419:17203":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"4:11360:9422":{"crate_id":4,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"1:40714:133":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:3212:2724":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"4:10985:29342":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"4:9202:9630":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:47106:8978":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:5457:14148":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"4:5162:9584":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"1:40579:3674":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"17:14855:21474":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:5897:17064":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:11367:17287":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:4718:16764":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:44878:3952":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:14177:20736":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"4:12127:26755":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:8301:17156":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"4:8548:3877":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"1:40316:3611":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"5:6968:9707":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"6:473:10119":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"4:5986:2681":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:44687:3922":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"4:2774:9485":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"5:1204:30054":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:12597:17496":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"5:1540:9350":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"4:521:9304":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:23111:22422":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"17:15426:21516":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:4723:2650":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:44327:3904":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"5:7132:30181":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:485:10121":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:6471:14859":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"5:843:9366":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"4:10922:26251":{"crate_id":4,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"16:5742:17055":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:10787:25207":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"6:7366:9580":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:22771:22246":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"5:6433:9640":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"1:11289:3817":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:7984:10078":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:40589:3655":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:3220:2726":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"4:2070:197":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:21848:8994":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:40992:3721":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:43871:3875":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"4:5441:203":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"1:8181:3698":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"9:330:15976":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:46101:9045":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:5320:14133":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:6940:32881":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"5:1355:3212":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"5:7727:9351":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:15138:21489":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:7761:3680":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"16:7799:17139":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:9969:24849":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:564:10131":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:10622:33898":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:3144:2657":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"6:5565:14160":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"4:9112:9620":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"4:11931:16084":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:11120:3230":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:13015:17217":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:532:10126":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:6505:14817":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:14788:21472":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:542:32864":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:4837:14083":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:11075:17287":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:16165:21708":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"5:3318:9365":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:43245:3785":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:46951:9019":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:15400:21513":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:4942:14093":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"5:3754:30157":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:32326:114":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"6:6417:14854":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"5:7582:9418":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:15324:21505":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"4:10718:9492":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"16:7695:17134":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:11930:3814":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:12700:3816":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"4:6916:233":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"4:2477:9432":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"6:5630:14166":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"16:4743:16766":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"4:11787:9508":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"14:0:2563":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"4:6455:3259":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:47163:8983":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:4789:2653":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:40420:3611":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:3360:2660":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:16105:21704":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"4:12361:1833":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"1:45930:9044":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:44344:3905":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:11865:17431":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:12399:17479":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"4:3297:29584":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:2998:16154":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"4:674:9330":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"5:7634:9675":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:44641:3856":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:15596:21525":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"11:1566:16042":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:32978:2703":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:3270:2716":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:45877:9003":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"4:5252:29678":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:7618:17130":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:6478:14860":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"11:742:9354":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:7656:17132":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"4:943:9353":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"4:951:9355":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"4:3291:27138":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:34394:2717":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:9938:17234":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:44392:3906":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"4:1614:9351":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:40664:3701":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:5382:14141":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:38146:2719":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"4:11631:26205":{"crate_id":4,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"4:3661:9447":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"1:6198:3703":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"16:5347:17048":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:586:10134":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:40552:3673":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"18:659:21742":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"4:3671:9469":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"4:4815:26271":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"1:23122:22457":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"16:6588:17095":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"11:774:9349":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:10288:143":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"16:6120:17073":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:0:1002":{"crate_id":6,"path":["libc"],"kind":"module"},"17:13344:20209":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"4:9469:9637":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"4:10917:26192":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"6:5344:14136":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"17:12089:17389":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:15701:21533":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:14147:20735":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:16069:21701":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"4:6676:2684":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:14131:20734":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:2083:3281":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:12432:3869":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:746:3359":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"4:4766:9573":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:21651:21823":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:4659:2643":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"4:947:9354":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:44663:130":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"4:11827:9507":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:43854:3873":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:40857:3720":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:7561:15303":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:11189:17283":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:40617:3669":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:38201:2720":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"11:1025:3212":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:15102:21486":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:23155:22455":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"11:811:9351":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"5:1369:9361":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"4:5509:128":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"17:11764:17380":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"16:7379:33133":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"11:1603:16043":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:3174:3592":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"16:6300:17076":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:8282:14335":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:13412:20214":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"4:1838:696":{"crate_id":4,"path":["std","env"],"kind":"module"},"4:10353:3268":{"crate_id":4,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"17:14475:20756":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:6079:17071":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:13814:20714":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:12911:3864":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:5598:14163":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"16:5802:17059":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:2728:16144":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:2355:16127":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:44815:164":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"11:1676:32655":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:22633:9121":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"4:3604:3257":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:7633:32989":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:5515:14155":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"4:8654:9580":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"4:11648:9626":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"11:1160:9361":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:39553:2729":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:40827:3718":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"4:12367:1419":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"1:13834:3294":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"18:515:21752":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"4:11268:26313":{"crate_id":4,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"17:15624:21528":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"4:650:9326":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:7452:15296":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"11:700:2823":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"4:10964:26244":{"crate_id":4,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"17:13899:20719":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:43276:22423":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:5254:3676":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"17:15957:21699":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"17:16212:21712":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"6:6447:14857":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:46204:9017":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"4:12352:738":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"4:12365:966":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"16:5385:17050":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:12792:17211":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:5477:14151":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:4885:14087":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:6342:33113":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:13814:3292":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"4:8554:9506":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"11:351:32657":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"17:12695:17492":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:41225:3686":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"4:8676:9530":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:12175:17460":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"16:2458:16132":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:46183:9011":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:16151:21707":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"11:1887:2823":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"16:7006:17111":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:5219:14120":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:40795:3704":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:7575:15304":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"16:6026:17068":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:14341:20747":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:14436:20753":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"5:7540:9345":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:5722:17054":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:7910:17144":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"4:11286:162":{"crate_id":4,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"1:44470:3909":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:7602:15306":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:5502:14154":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"6:5483:14152":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"6:1628:11031":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"4:10947:9445":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"1:15:2534":{"crate_id":1,"path":["core","write"],"kind":"macro"},"4:12363:1845":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"14:187:16059":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"14:165:16052":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:47178:8984":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:12342:17443":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"4:8339:29666":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:4367:22111":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"5:2322:30128":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:15249:21498":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:8680:149":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:11128:17279":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:43023:73":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"18:589:22234":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:13116:17530":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:11166:17285":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:12225:17447":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"4:12346:1687":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"16:6442:17085":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:10689:3830":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"6:8328:14341":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"5:6775:30157":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:5020:14103":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:42955:22509":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"18:0:2567":{"crate_id":18,"path":["memchr"],"kind":"module"},"18:531:21753":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:11153:17248":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"11:2369:16044":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"17:16079:21702":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"10:0:2560":{"crate_id":10,"path":["adler"],"kind":"module"},"1:21671:8997":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:4986:17501":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"4:10927:9441":{"crate_id":4,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:14876:21476":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:12443:17471":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"4:8177:9443":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"1:46139:9057":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:12454:17481":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:41258:3694":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"4:4921:9532":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"4:11201:9621":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:14489:20757":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:46253:9078":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:479:10120":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:42736:3768":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"4:4811:26267":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"4:11642:26276":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"4:1997:9416":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"17:13999:20725":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"5:7435:31292":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:8197:15838":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:39549:2727":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"11:1007:9359":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:4780:2652":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:40515:3636":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"struct"},"6:5415:14144":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:42003:194":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"4:562:3250":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"4:5838:3259":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"4:11005:9405":{"crate_id":4,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"1:2523:672":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"4:9229:9631":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"11:1917:9364":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"11:800:3236":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:11115:17280":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"5:4162:3231":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:11042:17272":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:12900:17257":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"11:2548:32645":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:13507:22450":{"crate_id":1,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"17:11142:17247":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:40378:3637":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:10759:17247":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:10915:33899":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"16:2684:16142":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"18:670:21743":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:4733:2651":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"17:12433:17217":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:47137:8981":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"4:9155:9623":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"5:2102:3232":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"4:5283:29678":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:10399:3674":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:40742:22157":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:44902:3950":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"1:43069:3775":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"17:13972:20723":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"18:573:33904":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:12353:17477":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"4:12358:903":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"16:3669:16161":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:13308:20207":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:16223:21713":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"17:16032:20204":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"1:40786:3715":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:14284:20743":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:2878:16151":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:13187:20201":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:16176:21709":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"1:23009:3358":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"5:1559:9353":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"4:367:9322":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:0:563":{"crate_id":1,"path":["core"],"kind":"module"},"16:7306:33135":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:3595:2733":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:1653:11033":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:4992:14100":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:7559:17125":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:491:10122":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:15151:21490":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"4:3553:3603":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"6:8012:15676":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:12300:17476":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"4:1891:9397":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"5:1590:9373":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"4:3523:3688":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"17:12647:17489":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"4:12339:417":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"5:1570:9354":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"4:4998:9527":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"4:6352:3292":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"4:4481:9552":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"11:2562:32653":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:47201:8985":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:13661:3946":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"16:6976:17110":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:4352:16605":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"4:8498:9448":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"4:10495:113":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"1:46014:9016":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:15214:21496":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"4:1916:3255":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"16:4614:16706":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:7755:17137":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"16:7098:32887":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:5686:17052":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"4:5959:2680":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"6:4824:14082":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"4:2629:9482":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"5:1509:2823":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:3376:2631":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:11877:17387":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:3756:70":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"16:4560:16698":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"4:4348:9550":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:8317:14340":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"11:832:9352":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:9461:3863":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:6278:17075":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:6788:32574":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"4:5083:9574":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"5:3050:30022":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:4870:14085":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:8253:14331":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"16:7061:17114":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:597:17229":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:6433:17084":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:16259:20212":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"17:10068:17215":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"6:6435:14855":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:6466:17087":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:44819:219":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"5:2220:31290":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"11:1582:3218":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"18:680:21744":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"4:2489:9438":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"17:15456:21519":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:2394:16129":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:46314:22243":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:45962:9056":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:21593:21832":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:40508:3635":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"4:11102:26749":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:5236:14122":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:6874:14916":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:14038:20728":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"4:6368:26740":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:44187:3886":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:5361:14138":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"4:9171:9635":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:6460:14858":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:42715:3766":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:22279:9449":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"4:617:9325":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:13636:205":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"4:12313:9335":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"16:4976:16815":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:6782:17102":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"4:11108:26732":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"4:9433:162":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"1:47097:8977":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:2539:3545":{"crate_id":1,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"16:7813:17140":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:12891:3863":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:7429:11144":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:7823:17141":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"4:5329:204":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"11:299:3198":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:44504:3867":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"11:0:2561":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"5:6612:30157":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:3614:24701":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"4:5582:9613":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"17:13946:20721":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:42617:2678":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"11:434:32661":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:43767:3700":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:14599:20764":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"4:4103:9512":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:1503:11019":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:46154:9005":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"11:787:9350":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:2896:258":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"18:726:21747":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:44456:3908":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:44212:3631":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:12993:17260":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:9787:91":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"4:11923:16084":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"4:5773:9619":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"6:8006:15675":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:42729:3767":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:22373:9124":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:9886:17232":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"4:11693:26187":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:11443:17323":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:43284:22435":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:22417:9125":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"17:11392:17318":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:44178:3887":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:41983:3737":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:44812:150":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"6:5296:14130":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"18:491:33931":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:6849:17104":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"4:4688:9556":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:13959:20722":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:13774:17433":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:12572:17247":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"16:6532:17091":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:30639:3559":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:11242:17305":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"5:7668:9685":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"4:11916:29686":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"16:7132:32863":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:8371:178":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:44298:3902":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:11341:17320":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:8225:165":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:34221:2715":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"18:735:21740":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:860:33101":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"5:304:2634":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"4:12324:26201":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:4771:16771":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:11688:17340":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"4:8216:139":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"17:13064:17213":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"4:12366:1911":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"17:14529:20760":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:46441:9052":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"5:1531:9349":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:42176:3230":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:5195:435":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:12004:3560":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:749:190":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"17:9858:17231":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"18:598:33903":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:46268:9079":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:8288:14336":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:517:10124":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:2735:202":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:1098:17284":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"4:3059:226":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"4:932:9351":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:40818:3717":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:11419:17247":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"11:1142:16041":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"4:11225:29345":{"crate_id":4,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:39566:213":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"6:5200:14118":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:8300:14338":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"4:4217:9522":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"5:1549:9352":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"4:9393:187":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"4:2309:9424":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"18:698:21746":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"4:12344:1314":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"17:12408:17470":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"16:2936:16153":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"4:8349:9486":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:41743:170":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"16:8073:17145":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"14:214:16060":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:9755:17200":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:15822:21542":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"4:8344:26641":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"1:44633:3861":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:30586:3530":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:10661:17245":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"16:2660:16141":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:3473:17395":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:45894:9009":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"4:8879:9608":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:13547:3713":{"crate_id":1,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"1:11417:3801":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:12543:17490":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"11:673:3230":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:5296:977":{"crate_id":1,"path":["core","iter"],"kind":"module"},"16:6412:17082":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"4:8007:9313":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"4:896:9349":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"16:6066:17070":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:3020:3585":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"4:9317:29680":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:45997:9010":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:3264:17390":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:7584:15305":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:5367:17049":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"4:8093:9405":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:15582:21524":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:13387:20212":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:15778:21539":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:12929:17258":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:42047:2823":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:2864:3315":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:4290:3603":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"4:11028:26231":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:4532:2664":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:10327:3768":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:14994:21469":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"6:5536:14157":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:5624:14165":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:33462:2708":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:3132:2658":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"6:1565:11026":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:42022:173":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"6:523:10125":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:13738:20711":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:46236:9072":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:5014:14102":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:5134:14113":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:12201:17473":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"4:4335:9549":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:41202:22057":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"17:11227:17277":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:0:505":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"17:12683:17493":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"1:40637:3677":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"11:1066:16040":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"4:666:9328":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"5:5470:9678":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:10612:17244":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"11:102:32650":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"5:839:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:6491:14816":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"4:5092:9575":{"crate_id":4,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"6:6689:14876":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"17:2037:17322":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"4:8535:3674":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"4:7875:17229":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:4531:16692":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"4:4195:9518":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"4:1610:3236":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:11051:17297":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"4:10976:3258":{"crate_id":4,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"4:3430:9490":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:44951:22166":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"6:6519:14861":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:16050:20205":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"16:7509:17121":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:465:10118":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:11324:3807":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:9782:84":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"4:8518:3708":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"1:40607:3668":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"5:7645:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"11:2554:32652":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"4:10938:26242":{"crate_id":4,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"4:2699:9483":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:42031:3230":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"6:1671:11035":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:5329:14134":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"17:2234:17341":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"5:3284:9364":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:32201:22146":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:44117:3883":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:11634:17343":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:6160:16096":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:15799:21540":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:11605:17367":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"18:96:21728":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:22479:9449":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"4:4133:9514":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:23020:3373":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:4940:16802":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"4:5596:9614":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"17:14868:21475":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:42119:2894":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:44159:3879":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:7516:15300":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:11497:17315":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"11:2536:32647":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:39904:3580":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"6:1510:11020":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:6714:14879":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"16:6427:17083":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"11:710:9353":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"16:7604:17129":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:12662:3892":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:42201:196":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:3842:16187":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:13844:20716":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"16:8118:17147":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:22996:3372":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"4:7988:9449":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"1:43802:3290":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"4:11668:26309":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"16:7648:17131":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:10828:33889":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"4:8709:9588":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:3347:124":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"4:8852:9606":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"17:437:16099":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:3863:3236":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:4650:221":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"6:545:10128":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:40412:3631":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:45845:9038":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"4:4209:9520":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"4:494:26741":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"4:9265:2682":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:21605:21832":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"1:21850:8993":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"5:289:30157":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:42264:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"4:5952:2679":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:14516:20759":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:42097:2800":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"9:447:15920":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:46352:22120":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:3584:254":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:8214:145":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:7710:24123":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:23041:9449":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"1:1882:3603":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"17:13473:20218":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:38890:2723":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:12900:3866":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"4:7331:26759":{"crate_id":4,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:2900:257":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:42128:3740":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"6:1526:11022":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:13538:20223":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"4:4319:9547":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:5846:17062":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:11467:17321":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:14986:21481":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:42381:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"5:5934:3236":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"7:32:15891":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"4:128:2467":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"1:38256:2721":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"4:1625:9363":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"4:4327:9548":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:6007:3603":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"4:9415:235":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:12845:3356":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:4909:14089":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"4:8257:9484":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"5:6051:2677":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:46462:9058":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"4:12354:733":{"crate_id":4,"path":["std","f128"],"kind":"primitive"},"16:6480:17088":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"4:5702:9617":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"17:10137:17201":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"4:9425:2690":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"1:23166:22425":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"17:15301:21503":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"4:7478:26544":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:11963:3815":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1:4391:109":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"4:1603:3230":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"4:12341:471":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"5:3039:2884":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"4:7723:26642":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"16:5914:32869":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:12127:17396":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:11431:3806":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:10329:206":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"16:5817:17060":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:15944:20202":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"15:306:16076":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:15273:21500":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:46612:22444":{"crate_id":1,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"17:13606:20228":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"4:4666:9555":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"4:878:3231":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"4:9329:26659":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:15289:21502":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:3029:16156":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"4:8265:3232":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"4:752:154":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:39661:216":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"4:11609:29688":{"crate_id":4,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"6:5376:14140":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"4:9129:9621":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"1:13926:3955":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"16:150:16102":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"9:357:15936":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:15473:21521":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:41209:3684":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:10755:26079":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:46980:9053":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:15126:21488":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:40724:3710":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:15418:21515":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:47009:9074":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:15281:21501":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:11214:17278":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"4:373:9323":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:12238:17446":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"16:5831:17061":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"4:8470:3683":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"17:12362:17478":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:3215:2725":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"17:15635:21529":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"4:12362:1839":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"17:10284:17239":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"4:12292:26634":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:39711:2732":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:7528:17122":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:45947:9050":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:22855:22489":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:7389:11161":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:5863:17063":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"18:706:3866":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:47080:9080":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"16:7570:17126":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:14311:20745":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"4:4097:9513":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:5212:14119":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"11:856:3206":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:22947:22110":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"4:10355:29690":{"crate_id":4,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"16:6335:17078":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"16:4062:16338":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"14:40:20203":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"4:4400:9551":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:32226:3589":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"11:1903:9362":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"4:11090:26733":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:3417:2728":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:4985:14099":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:10018:17208":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:5436:14146":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"12:0:2562":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:10155:17050":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:13526:20222":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:40541:3670":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:7397:33127":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:40322:3615":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:5064:14108":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:6768:14886":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"4:5845:9627":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:8259:14332":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"0:31:2327":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"4:10421:9625":{"crate_id":4,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"5:3661:3230":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"4:8182:9444":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"4:2312:3550":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"17:15769:21538":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:12213:17474":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:6900:14917":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:13609:26178":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"9:0:2559":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"4:9324:26664":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:5352:14137":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"1:40843:3719":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:1680:11036":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:7537:15301":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:12318:17259":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"4:8774:9603":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"6:5283:14128":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"4:6861:2694":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"1:8263:129":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:6880:13994":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"4:4919:9531":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"5:7622:9420":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"4:12348:1811":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"4:9350:26319":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"4:12351:735":{"crate_id":4,"path":["std","f16"],"kind":"primitive"},"1:46657:22173":{"crate_id":1,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"4:10764:3270":{"crate_id":4,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"4:8625:9506":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:7645:3645":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"4:6276:26735":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:2074:22507":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"4:1631:9364":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:11799:17428":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:6657:14872":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:44621:3858":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:10877:17249":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"4:5106:9576":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"4:2067:198":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:39581:210":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:44522:3868":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:43701:3799":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:13173:17532":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"7:79:15898":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:1547:11024":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:3666:2662":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:6494:17089":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:3329:16158":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:3601:2735":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:2303:16097":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"14:220:16061":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"5:1581:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:46043:9071":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"4:9370:26246":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:11743:17378":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"4:865:3230":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:10325:3767":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:12885:3849":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"6:8271:14334":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"4:9244:9634":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:42965:3559":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:43266:9603":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:33730:2711":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:6811:14888":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:15190:21493":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:6738:14882":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"1:44045:3884":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:7348:15293":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"11:2423:2823":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"6:5250:14124":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"4:9451:9452":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"16:6263:32853":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:13922:20720":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"4:9179:2823":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:45830:9002":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"4:938:9352":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:46221:9023":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:21742:8993":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"4:8862:3230":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"17:1207:17292":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:2698:134":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"6:1517:11021":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:32235:237":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"6:7546:15302":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:15410:21514":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"4:10724:9490":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"17:16121:21705":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"6:1535:11023":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:26051:267":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:8177:3699":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:11445:3802":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"4:6712:2692":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:23133:22401":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"5:956:3230":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:43710:3287":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:13292:20206":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:12107:17247":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:12478:17483":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:12278:17475":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"5:1739:30157":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:21669:9449":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:43229:3786":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"4:8565:9503":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"17:10251:17238":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"4:669:9329":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"4:8030:3270":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"6:5122:14112":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:13089:17529":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:42225:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:14356:20748":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:2637:102":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"6:4916:14090":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:23199:22448":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"1:44491:3911":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:22878:3357":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"0:0:2320":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"1:22281:8995":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"4:586:3253":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"5:3292:9362":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:4433:3614":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"17:13325:20208":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:2884:77":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"17:14463:20755":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:42039:3231":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"17:13785:17434":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:44609:3854":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"1:43741:3813":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"4:8797:9604":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:7314:10975":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"15:288:16075":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:11362:3808":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"4:3586:9446":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"1:6902:25157":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:1116:2471":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"5:7551:9346":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:3181:3558":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"4:7944:26738":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"4:8230:127":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:15734:21535":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:6456:17086":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:22560:3544":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"16:6574:17094":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"4:11848:9509":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"0:29:2326":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"11:844:9356":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:47293:8989":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:2270:3284":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:41216:2472":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"4:1636:9365":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:5216:21985":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"4:11045:9623":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"16:7549:17124":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:15678:21532":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:13485:20219":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"4:5632:9616":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"17:11026:17271":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:12371:17258":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:14025:20727":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:44629:3860":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:10321:3765":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:3365:2661":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"16:7857:17142":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:33190:2706":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:5191:14117":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:8306:14339":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"4:8078:9404":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"5:7405:3236":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:15434:21517":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"9:178:16025":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:21620:21837":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"11:883:9358":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"16:6895:17106":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:3511:211":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:22148:3797":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:10769:33895":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:13272:20205":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"4:922:3236":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:15266:21499":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:2572:16137":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"16:6648:17099":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:33596:2710":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:6542:14864":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:2592:16138":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:43945:3881":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"4:9283:115":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"16:4468:16675":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:16249:21715":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:2149:189":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"5:3040:31264":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"4:3432:9491":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"4:3334:9492":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:30618:3531":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:9974:24917":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:12416:3796":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:40774:3724":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:12400:3794":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"4:1083:3212":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"5:7610:9419":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"4:9289:9309":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:6707:3725":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:42056:2796":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"17:10534:33900":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:34048:2714":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:7306:10171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:4979:14098":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:13455:20217":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:41825:22506":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:5022:3624":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"4:8012:9315":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"4:12355:909":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"9:482:15919":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"5:2249:30116":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:5046:14106":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"4:12359:884":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"1:23144:22424":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"16:6813:17103":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:12724:17252":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:8136:17148":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:11841:17429":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"16:7111:32987":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:11788:17427":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:15836:21543":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:11313:17309":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"4:1607:2823":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:5077:3603":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"4:9406:3603":{"crate_id":4,"path":["std","sync","poison","Guard"],"kind":"struct"},"6:5445:14147":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:12494:17448":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"16:2838:16149":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:2729:195":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"5:4515:30160":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:43865:3876":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:6721:14880":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"6:6678:14875":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:2478:16133":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:11016:17270":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:872:33110":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"1:40644:3700":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:30363:3316":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"5:7385:2823":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:7497:17120":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"18:563:21755":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:43895:3803":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"4:5770:9618":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"17:12851:17254":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:14298:20744":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:43010:22578":{"crate_id":1,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"1:10772:26081":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:44698:3923":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"13:110:32674":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:21722:9449":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"5:40:9382":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"4:10957:139":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"11:1923:9365":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:46367:9040":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"5:3263:31299":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"4:8204:9442":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"6:5546:14158":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:5400:17051":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"5:7393:9369":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:46058:9077":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:6317:17077":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:15720:21534":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"4:4155:9516":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"4:5831:220":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:10573:3783":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:7428:17118":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:1723:11040":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"11:430:32665":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:6896:3705":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:14912:21477":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"6:6609:14867":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:11269:17307":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:4:1256":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"4:11316:26296":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"4:8058:9333":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"16:2788:16147":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:7359:15294":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:5031:14104":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:11354:17319":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"19:0:1291":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:40523:3630":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:7485:15299":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:1707:11039":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"5:7743:9702":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:2374:16128":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:12707:17251":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:23188:22231":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"1:40695:3702":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:12516:17500":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:12056:17392":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:43641:22147":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:15390:21512":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"16:7168:17116":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"14:7:16051":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:4800:14080":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"4:9420:2689":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"17:14091:20732":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"5:3258:9363":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"4:2535:2493":{"crate_id":4,"path":["std","io"],"kind":"module"},"4:8650:9578":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"18:689:21745":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:11674:17374":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:6532:14863":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"4:11764:3272":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:15356:21508":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:6907:25159":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"6:5472:14150":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"6:8341:15874":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:22455:9126":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:30997:196":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"11:2443:3236":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"16:3196:16157":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:12808:17212":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:3597:17413":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:1958:671":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:5911:3603":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:43237:22456":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:3190:2707":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:6606:17096":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:12464:17482":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:8294:14337":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"4:8726:9602":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"16:2902:16152":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:13424:20215":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:6650:14871":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:2418:16130":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:6670:14874":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:22839:24926":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"4:10898:9579":{"crate_id":4,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"17:261:33110":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:13753:20712":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:44645:3921":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:43720:3809":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:1692:9540":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"4:8812:9605":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"17:10818:17248":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"5:4938:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:4891:13919":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"18:754:21748":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:15383:21511":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"11:687:3231":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"4:12357:897":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"16:6385:17080":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"4:12345:335":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:5336:14135":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"5:3805:3232":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:570:10132":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:13766:17435":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:14752:21471":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:3574:2731":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:15368:21509":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:46686:22388":{"crate_id":1,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"1:10530:153":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:44870:3951":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:1559:11025":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"4:11233:3921":{"crate_id":4,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"1:4501:2663":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:14271:20742":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"5:1843:9351":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:8316:2632":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:2708:16143":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:3589:146":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:43841:3874":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:21730:8996":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:11510:17314":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:47216:8986":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:22493:9127":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"17:12189:17472":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:14587:20763":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"16:2508:16134":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"18:113:21729":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:12623:3893":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:42192:2823":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"6:7330:10000":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"5:3251:3230":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"4:4917:9528":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:42136:226":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"4:3061:137":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"17:13235:20203":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:32324:3478":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"11:2231:16036":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"17:14066:20730":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"4:9410:234":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:13581:20226":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"16:5927:17065":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:6729:14881":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"1:44939:3956":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"5:4436:265":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:6927:17107":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"11:2140:3212":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:8029:15677":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:10965:9449":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"16:7888:17143":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:14189:20737":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:10314:119":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"5:6019:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:9350:2798":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"16:7727:17135":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:15116:21487":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"4:3900:9507":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:2438:16131":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"4:2735:9474":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:2640:103":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:2060:3562":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:10573:33891":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"18:538:21754":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:40765:3714":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:40391:3639":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"4:2316:9425":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"17:10218:17207":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"4:1914:3254":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"4:968:3206":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:40428:3632":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"4:8194:9445":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"17:15992:21700":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"1:40352:3638":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"14:31:16051":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:12485:17484":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:14977:21480":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:21622:21828":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"4:5616:9615":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"9:424:15922":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"16:6560:17093":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:22:817":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"17:14545:20761":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:6084:3712":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:15206:21495":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"4:10512:3269":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"1:11144:3231":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:42459:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:39621:215":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:12768:17209":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:15176:21492":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:41797:3733":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"18:521:21749":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"4:9551:3254":{"crate_id":4,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"17:15646:21530":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:13509:20221":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"15:394:16087":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"6:7446:15295":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:47254:8988":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:10319:128":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"4:2004:785":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"17:0:2566":{"crate_id":17,"path":["object"],"kind":"module"},"1:47126:8980":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"4:8606:9553":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:7646:3646":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:13252:20204":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"4:10721:9494":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"17:16235:21714":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"6:4952:14094":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:2612:16139":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"4:12360:1851":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"16:4882:16790":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:5636:14167":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"11:2569:9345":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"4:7144:9638":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:14449:20754":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"5:1441:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"6:5002:14101":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:7686:17133":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"4:3897:9508":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"8:0:2558":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:2693:201":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"16:8259:17155":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:10887:33896":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:44203:3611":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:11715:17376":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:10170:17051":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"18:613:33911":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:43963:3880":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"11:875:9357":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:12557:17287":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"1:13871:152":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"4:9743:127":{"crate_id":4,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"1:41909:22482":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:15078:17286":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"18:80:21727":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:15445:21518":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"4:8187:9441":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:11524:17368":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"4:8599:3735":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:4654:2642":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"4:2713:26081":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"16:5075:16845":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"4:6400:26643":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"11:2151:9360":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:1485:11016":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"5:6176:3603":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:5665:14170":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"11:1087:32660":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"18:718:21739":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:11755:17379":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:44017:3801":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:4959:14095":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:12251:17445":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:22126:8999":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"16:8216:17153":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:5102:14110":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"5:6414:9639":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:2808:16148":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:7933:3683":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"4:3389:9495":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"4:9185:9632":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"5:939:9368":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"4:1968:9415":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"6:5181:14116":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:3475:16159":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:22605:9120":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"4:12340:1174":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"1:40567:3671":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:43484:24263":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:14560:20762":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"4:8868:9607":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"0:28:2320":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"4:9296:26219":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:4379:22397":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:11773:17426":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:43048:137":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"17:13146:17531":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"4:3336:9493":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:43031:3559":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"11:1883:3230":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:12621:17494":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"2:234:226":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:12289:17440":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"18:581:3574":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:12887:17256":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:8175:17150":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:15023:21483":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:22638:9119":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"6:5112:14111":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:11647:17373":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:11702:17375":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"4:3480:9477":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"5:3297:31303":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:44169:3878":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:553:10129":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:14933:21478":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"4:11513:26756":{"crate_id":4,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"17:14212:20738":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"4:1092:9360":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"4:6031:2691":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"9:392:15921":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"11:1891:3236":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:10044:17236":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"5:6072:3243":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:1621:11030":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"4:3835:9504":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"4:1855:9387":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"16:7769:17138":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:14847:21473":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:9671:17204":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:11595:17372":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:40756:3713":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:11567:17371":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:40673:3708":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:43812:3811":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:47231:8987":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:46707:9007":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"16:6098:17072":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:43780:3812":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"5:7566:9317":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:12328:17441":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"4:6793:2687":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:33529:2712":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:46412:9046":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:5146:14114":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"11:328:32648":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:43254:157":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"4:12364:1827":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"1:8727:24887":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:13524:3948":{"crate_id":1,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"1:3139:247":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:47059:9059":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"14:160:16051":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"5:7425:9375":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"17:12584:17248":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"11:2542:25050":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:11256:17306":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"17:15463:21520":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:5174:9539":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"5:4252:3603":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"4:974:9357":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"4:9721:9444":{"crate_id":4,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"6:5489:14153":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"1:11212:3816":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"4:5648:113":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"17:11557:17370":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:5677:14172":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"5:7465:30034":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:6746:14883":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"17:15333:21506":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"10:36:32644":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:21639:21826":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:42498:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"4:11682:26731":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:45976:9004":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:256:33102":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"11:2304:9359":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"6:1639:11032":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:7473:17119":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:22962:22067":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"17:14386:20750":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"11:1910:9363":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:5244:14123":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"16:7085:32727":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:6821:14889":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:11915:17432":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:12043:17391":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:12824:17253":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:14968:21479":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:13437:20216":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:3996:2823":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"4:957:9356":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:15197:21494":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:8689:3697":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:22927:22054":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:8351:15875":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"4:8611:9554":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:13121:119":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"5:1077:30157":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:6915:14918":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:578:10133":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:39469:2738":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:10905:17250":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:22121:9449":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"6:6706:14878":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"11:2469:9351":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"4:4555:9544":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:3899:16221":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:40401:3640":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"11:2383:3230":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"5:5230:2677":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:7580:17127":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"4:11904:9653":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"1:39603:212":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:5277:14127":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:44807:22575":{"crate_id":1,"path":["core","future","async_drop","Noop"],"kind":"struct"},"17:2203:17316":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:32205:17155":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"17:16187:21710":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:2659:112":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"16:6398:17081":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"4:6566:186":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"11:396:3204":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"18:608:33929":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:45862:9043":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:10578:3784":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"11:1051:9360":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:41943:3735":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:42087:2797":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"4:3652:29213":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"5:7059:264":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:23100:22227":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"17:15616:21527":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:7590:17128":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:11089:17282":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:13046:17214":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:4414:3613":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:44617:3859":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:42303:86":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"5:743:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:2537:3544":{"crate_id":1,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"9:502:15923":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"4:4002:9509":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:6665:17100":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"6:5407:1243":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:46524:9012":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"4:12368:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"16:3925:16224":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:10270:3643":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:22507:3544":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"6:6636:14870":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"5:6566:3236":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:12586:3891":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:6597:14866":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:11547:17369":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:5006:16822":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:46072:8991":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:5260:14125":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:21637:21836":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:40363:22475":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:1496:11018":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:14575:17217":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"5:680:31216":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:10671:33890":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:6756:14884":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"16:6620:17097":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"16:5415:32879":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:15010:21482":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:11574:16036":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:3200:2705":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"4:8541:3803":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"16:6353:17079":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"6:5643:14168":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:46122:9051":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:1585:11028":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:44837:207":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"6:6775:14887":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"4:9337:17116":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:3388:142":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"16:4641:16710":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:46479:9006":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:14372:20749":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:2528:16135":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:6621:14868":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:46029:9022":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:10457:138":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"17:14325:20746":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:5466:14149":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:3134:117":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:33875:2713":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"5:7457:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:42994:22505":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"16:6047:17069":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"4:4801:9517":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:42184:3231":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:22160:21834":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:7461:15297":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:5653:14169":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"16:6749:17101":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:32237:244":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:5039:14105":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:14012:20726":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"4:980:9358":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:11324:17334":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"18:481:21750":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:40733:3711":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:41240:3690":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:10997:17269":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:6664:14873":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"5:3410:9351":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"16:5107:16854":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:8234:2633":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:5083:14109":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:39681:2730":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"6:1490:11017":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:40474:3634":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:43822:3291":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:2062:3563":{"crate_id":1,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"4:426:185":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:4802:16779":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"4:11654:26301":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:33663:2709":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"5:883:9367":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"11:123:3195":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:5370:14139":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"5:1340:9360":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:13363:20210":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:4821:17495":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"6:497:10123":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:44891:22229":{"crate_id":1,"path":["core","task","wake","ExtData"],"kind":"enum"},"6:8265:14333":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:7339:15292":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"13:229:32667":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:38311:2722":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:10323:3766":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"18:765:21741":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:11621:17345":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:16138:21706":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"1:10975:239":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:5160:14115":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:23177:22402":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"6:1580:11027":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"18:507:33904":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:14111:20733":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:46861:9013":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"5:7493:2823":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:11063:17291":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:22718:22144":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:22889:22242":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:867:33102":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"4:6790:2686":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:42578:97":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:21583:3574":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"5:5864:251":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"4:6847:2693":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"1:2863:9449":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:13568:20225":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:8202:17152":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"4:6672:2472":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"5:5422:30157":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:43692:3800":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:1965:3508":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:4842:2655":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"6:7412:11146":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"15:0:2564":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:44637:3855":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:4580:2469":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"13:0:2557":{"crate_id":13,"path":["std_detect"],"kind":"module"},"6:1663:11034":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:11293:17308":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:44419:3907":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:12264:17444":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:44829:227":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:44277:3901":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"5:2302:31747":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:47038:9025":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:5671:14171":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"5:2127:9374":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"17:13877:20718":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:6562:14865":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:32159:3579":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:10333:3770":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:4502:16686":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"4:12347:1721":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"16:8226:17154":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"11:837:9355":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:40536:106":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:15608:21526":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:13024:17261":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"16:2854:16150":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:10114:3781":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:39731:3606":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"5:2770:30204":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"4:11423:9421":{"crate_id":4,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"1:41002:3722":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:11853:17430":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:11661:17344":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:42539:90":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"5:3046:30024":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:15039:21484":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:5528:14156":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:5581:14161":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:43469:3846":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:15092:21485":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"3:0:2556":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:4811:2654":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:42342:93":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"4:8528:3721":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"1:41016:3723":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:41965:3736":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:12150:17394":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:3810:16178":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:39641:214":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:43999:3805":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:7539:17123":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:513:17228":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"4:9214:9633":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:30650:22574":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"1:39505:2737":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:11730:17377":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"15:327:16080":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"16:6543:17092":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"4:0:1713":{"crate_id":4,"path":["std"],"kind":"module"},"5:1324:9359":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:43488:3822":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:12906:3865":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:14503:20758":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:15058:21468":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:32236:2629":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"7:0:1901":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:9916:17233":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"16:8093:17146":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:3222:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:10439:17242":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:8313:137":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:13211:20202":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:11251:3804":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:6948:17108":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"16:4856:16787":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:11583:17342":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:1995:1358":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"4:4813:26269":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"16:5769:17057":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:2175:17356":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"4:7885:29223":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:40808:3716":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:44313:3903":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"4:12308:26651":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"4:11214:9622":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:44625:3862":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"4:909:9350":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"4:12356:891":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"1:22591:9449":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"17:15655:21531":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"16:7321:2796":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"5:7658:9684":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"4:6193:220":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"4:8479:9497":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"16:4587:16702":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:13399:20213":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:14414:20752":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:5729:9705":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:5306:14131":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:13855:20717":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"16:6231:17074":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:44481:3910":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:4913:16798":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:4924:14091":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:5390:14142":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:6962:17109":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:15760:21537":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"4:10334:9397":{"crate_id":4,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"4:9726:3267":{"crate_id":4,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"5:7415:9370":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:16198:21711":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"6:5400:14143":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"6:4811:14081":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"5:4282:3603":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"5:2539:3223":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:12530:17491":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"1:43730:3289":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"5:3042:30023":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:14402:20751":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:5617:14164":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:13497:20220":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"4:4877:9577":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:11169:3803":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"4:10994:29340":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"5:2116:3235":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:42098:2799":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:12076:17388":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"16:6504:17090":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"5:4451:30160":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:8683:3644":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:32212:22449":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:47152:8982":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:5960:17066":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:15814:21541":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:12969:17205":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"4:1619:9362":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:22903:22056":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"4:12353:754":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"16:6758:16070":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:14723:21470":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"5:219:3220":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:11102:17281":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:5756:17056":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:44063:3885":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:23651:236":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:41765:3731":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"4:6177:3259":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"4:10227:22479":{"crate_id":4,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"4:4147:9515":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:32294:2630":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"17:15748:21536":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:15931:20201":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"4:8560:9505":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"4:1475:156":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"4:8617:9543":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:15168:21491":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:3629:2659":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:32295:3594":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:12711:137":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"10:44:16030":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:12959:3895":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:6629:14869":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"5:4481:3603":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:46906:9047":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:5052:14107":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:5588:14162":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:3674:3231":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:12422:17480":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:13674:20709":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:11537:17335":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"4:888:2823":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"4:6503:220":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:5037:16830":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"4:2463:9428":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:4322:3230":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"4:8631:9546":{"crate_id":4,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"1:42982:22577":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"11:2403:3231":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:10524:17243":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"5:3648:182":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:22505:24980":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"1:44149:3877":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:43793:3810":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:15342:21507":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"4:11699:26196":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:2968:123":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"17:16093:21703":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"1:41250:3692":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:12671:17524":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:2979:137":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"17:14235:20739":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:40435:3633":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"5:7595:3673":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:3820:3235":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:13791:115":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"4:7989:9324":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"6:4965:14096":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:42420:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"4:2307:138":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"16:8188:17151":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:10331:3769":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"4:7360:29218":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:3385:141":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"4:9278:26661":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:22546:9128":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:10710:17246":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:43913:3807":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:8247:14330":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:47117:8979":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"5:734:250":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:46784:9041":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"5:6934:9705":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:40867:3707":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"4:10604:9620":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"4:2479:9433":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"5:5466:9677":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:21838:9449":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"5:7485:2823":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:46591:9073":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"18:651:33904":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"16:6634:17098":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"5:2210:9304":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:559:10130":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:43881:3674":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"5:6693:2823":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:44194:3632":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"11:2326:3212":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"6:4787:14079":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:15222:21497":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:1593:11029":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"9:53:15939":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"4:8241:9347":{"crate_id":4,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"5:3885:9351":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"4:8488:3258":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"16:5700:17053":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:403:17227":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:1755:3476":{"crate_id":1,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"4:3026:3256":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"4:2461:3533":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"4:9398:2683":{"crate_id":4,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"17:9984:17235":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:44099:3882":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"6:6409:14853":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:45815:9037":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"4:2226:128":{"crate_id":4,"path":["std","ffi","os_str","Display"],"kind":"struct"},"11:1107:3214":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"18:635:33917":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"4:11013:9617":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"5:7449:2823":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:3014:16155":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"16:7741:17136":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:10954:17267":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"4:1853:9386":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"6:6763:14885":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"1:31024:3574":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"5:7107:30164":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"4:10647:26745":{"crate_id":4,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"1:39718:3590":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"4:3387:9494":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"6:4864:14084":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"4:9118:199":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"1:22824:22394":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:5557:14159":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:45909:9039":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"4:9163:3230":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:10350:17241":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:12030:17393":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"4:4297:26551":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:12508:17485":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:12863:17255":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:3382:140":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"5:1478:3230":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:2338:16126":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"5:4117:30157":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:46335:22447":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:32219:2651":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"4:12342:1873":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"17:13553:20224":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"18:623:33914":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:21724:8992":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"16:7355:17117":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:6802:16069":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:41231:3688":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"11:2124:9359":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:9737:17202":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"5:1184:3222":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:46574:9024":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"16:5307:17031":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:9781:17230":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"11:364:3202":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:42722:3765":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"16:4830:16784":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:22911:22429":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"16:2636:16140":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:4897:14088":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:11405:17317":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:16269:20214":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"17:12949:17259":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:13832:20715":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"4:11251:9452":{"crate_id":4,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"6:538:10127":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:5290:14129":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:4876:14086":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:15521:21522":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:10538:157":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"4:9714:138":{"crate_id":4,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"17:13723:20710":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"4:7925:26750":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"4:9142:9622":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:6991:32812":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:10185:17206":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"5:1168:30047":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:7014:17112":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"18:643:33904":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"4:8072:9334":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:44928:3958":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"16:8155:17149":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"4:4880:9555":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:1699:11038":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"14:202:9683":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"4:4975:9533":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"4:1069:9359":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"5:7376:9371":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"16:5781:17058":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:30624:3499":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:14260:20741":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"11:2352:9360":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"6:6379:14788":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"4:6685:2473":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"5:4087:3236":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:3185:2702":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"17:14079:20731":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:5314:14132":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:5266:14126":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:11493:17328":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:6698:14877":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"6:6441:14856":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:13594:20227":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:46553:9018":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:41931:3734":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"5:1493:3231":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"4:4161:9517":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:44912:180":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:2893:144":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":29}