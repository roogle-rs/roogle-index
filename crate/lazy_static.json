{"root":"0:0:1595","crate_version":"1.4.0","includes_private":false,"index":{"5:5100:31830":{"id":"5:5100:31830","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:286:1892","`String`":"5:6968:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:1892","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6719:8302","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6968:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:11":{"id":"0:11","crate_id":0,"name":null,"span":{"filename":"src/inline_lazy.rs","begin":[16,0],"end":[16,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"import","inner":{"source":"self::std::sync::ONCE_INIT","name":"ONCE_INIT","id":"4:6682:1729","glob":false}},"1:11486:31159":{"id":"1:11486:31159","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::split":"1:11477:28584","prim@char":"4:12298:409","self::pattern":"1:11129:2815","`DoubleEndedIterator`":"1:7085:120","str::rsplit_terminator":"1:11489:31160"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"1:50155:2868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11134:2816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11527:31172":{"id":"1:11527:31172","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12298:409","self::pattern":"1:11129:2815"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11134:2816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11495:28591":{"id":"1:11495:28591","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12298:409","self::pattern":"1:11129:2815","str::splitn":"1:11492:28589"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"1:50227:2790","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11134:2816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11134:2816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11149:2819","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5101:2643":{"id":"5:5101:2643","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:6968:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6968:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11449:31157":{"id":"1:11449:31157","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"str::slice_unchecked":"1:11448:31156","`str`":"4:12304:1359","crate::ops::IndexMut":"1:2985:1990"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:11431:31153":{"id":"1:11431:31153","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11456:23624":{"id":"1:11456:23624","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:11455:23660"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"1:50388:2874","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2527:1434":{"id":"1:2527:1434","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48273:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"1:2497:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11518:31167":{"id":"1:11518:31167","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:12:1730":{"id":"0:12:1730","crate_id":0,"name":"Lazy","span":{"filename":"src/inline_lazy.rs","begin":[19,0],"end":[19,48]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null,null]},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:17","a:1:7746:2063-0:12:1730","a:1:2662:217-0:12:1730","a:1:7747:2062-0:12:1730","a:1:2726:1886-0:12:1730","b:1:3315-0:12:1730","b:1:2528-0:12:1730","b:1:2517-0:12:1730","b:1:2241-0:12:1730","b:1:2238-0:12:1730","b:1:2523-0:12:1730","b:1:2513-0:12:1730","0:23"]}},"1:11548:26897":{"id":"1:11548:26897","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11450:28576":{"id":"1:11450:28576","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:11451:28577"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2240:1745":{"id":"1:2240:1745","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11520:31168":{"id":"1:11520:31168","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11454:19822":{"id":"1:11454:19822","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"1:50091:2861","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11469:2122":{"id":"1:11469:2122","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"prim@char":"4:12298:409","`None`":"1:48131:176","self::pattern":"1:11129:2815"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48129:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11134:2816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11477:28584":{"id":"1:11477:28584","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:11129:2815","str::rsplit":"1:11483:28587","str::split_whitespace":"1:11455:23660","`DoubleEndedIterator`":"1:7085:120","prim@char":"4:12298:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"1:50105:2792","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11134:2816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11457:19949":{"id":"1:11457:19949","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"1:50359:2864","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11446:22428":{"id":"1:11446:22428","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9311:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9311:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2513-0:12:1730":{"id":"b:1:2513-0:12:1730","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:12:1730","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2516:2074"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:2532:1433":{"id":"1:2532:1433","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48273:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"1:2497:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11473:2080":{"id":"1:11473:2080","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"prim@char":"4:12298:409","`None`":"1:48131:176","self::pattern":"1:11129:2815"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48129:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11134:2816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11134:2816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11149:2819","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5103:26896":{"id":"5:5103:26896","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:11550:26899"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6968:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:19:1731":{"id":"0:19:1731","crate_id":0,"name":"INIT","span":{"filename":"src/inline_lazy.rs","begin":[23,4],"end":[23,60]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"generic","inner":"Self"},"default":"_"}},"1:11427":{"id":"1:11427","crate_id":1,"name":null,"span":null,"visibility":{"restricted":{"parent":"1:10692:1359","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["1:11428:796","1:11429:2081","1:11430:31152","1:11431:31153","1:11433:31154","1:11436:28123","1:11437:31155","1:11438:310","1:11439:28557","1:11440:1600","1:11442:22426","1:11444:22427","1:11446:22428","1:11448:31156","1:11449:31157","1:11450:28576","1:11451:28577","1:11452:19648","1:11453:19524","1:11454:19822","1:11455:23660","1:11456:23624","1:11457:19949","1:11458:31158","1:11459:23648","1:11460:23749","1:11463:28164","1:11466:28166","1:11469:2122","1:11473:2080","1:11477:28584","1:11480:23641","1:11483:28587","1:11486:31159","1:11489:31160","1:11492:28589","1:11495:28591","1:11498:31161","1:11501:31162","1:11504:1786","1:11507:31163","1:11510:31164","1:11513:31165","1:11516:31166","1:11518:31167","1:11520:31168","1:11522:31169","1:11523:31170","1:11524:31171","1:11527:31172","1:11530:27076","1:11533:28593","1:11536:31173","1:11539:31174","1:11542:31175","1:11545:19606","1:11547:19693","1:11548:26897","1:11549:26898","1:11550:26899","1:11551:31176","1:11553:2559","1:11554:31177"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11437:31155":{"id":"1:11437:31155","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:11444:22427":{"id":"1:11444:22427","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9311:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9311:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:11501:31162":{"id":"1:11501:31162","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48129:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11134:2816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11134:2816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11149:2819","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11451:28577":{"id":"1:11451:28577","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:11450:28576"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11513:31165":{"id":"1:11513:31165","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:11129:2815","str::match_indices":"1:11510:31164","`DoubleEndedIterator`":"1:7085:120","prim@char":"4:12298:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"1:50273:2872","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11134:2816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11134:2816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11149:2819","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11549:26898":{"id":"1:11549:26898","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11507:31163":{"id":"1:11507:31163","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:11129:2815","prim@char":"4:12298:409","`DoubleEndedIterator`":"1:7085:120","str::matches":"1:11504:1786"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"1:50327:2870","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11134:2816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11134:2816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11149:2819","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3315-0:12:1730":{"id":"b:1:3315-0:12:1730","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2669:1885","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3313:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:12:1730","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:3317:1447"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11550:26899":{"id":"1:11550:26899","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5088:31827":{"id":"5:5088:31827","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:6968:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6968:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11134:2816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11498:31161":{"id":"1:11498:31161","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48129:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11134:2816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5084:31826":{"id":"5:5084:31826","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:1892","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6719:8302","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:1892","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6719:8302","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11442:22426":{"id":"1:11442:22426","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:48131:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48129:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9311:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9311:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11524:31171":{"id":"1:11524:31171","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"1:11129:2815","prim@char":"4:12298:409"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11134:2816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11134:2816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:11154:2820","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11430:31152":{"id":"1:11430:31152","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11436:28123":{"id":"1:11436:28123","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:10697:2856"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11551:31176":{"id":"1:11551:31176","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4473:31176"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"1:50404:2581","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1595":{"id":"0:0:1595","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[215,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\n# #[macro_use]\n# extern crate lazy_static;\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.4.0\")]","#![no_std]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:29:1601","0:31:1602","0:28:1595"],"is_stripped":false}},"1:11489:31160":{"id":"1:11489:31160","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split":"1:11477:28584","str::split_terminator":"1:11486:31159","self::pattern":"1:11129:2815","prim@char":"4:12298:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"1:50173:2867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11134:2816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11134:2816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11149:2819","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"src/inline_lazy.rs","begin":[21,0],"end":[47,1]},"visibility":{"restricted":{"parent":"0:4:1585","path":"::lazy"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:12:1730","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:19:1731","0:20:1600"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11453:19524":{"id":"1:11453:19524","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12298:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"1:50081:2862","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3317:1447":{"id":"1:3317:1447","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"1:46612:2536","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:23":{"id":"0:23","crate_id":0,"name":null,"span":{"filename":"src/inline_lazy.rs","begin":[49,0],"end":[49,40]},"visibility":{"restricted":{"parent":"0:4:1585","path":"::lazy"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:12:1730","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11510:31164":{"id":"1:11510:31164","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"str::rmatch_indices":"1:11513:31165","self::pattern":"1:11129:2815","`DoubleEndedIterator`":"1:7085:120","prim@char":"4:12298:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"1:50255:2871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11134:2816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11530:27076":{"id":"1:11530:27076","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"1:11129:2815","prim@char":"4:12298:409"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48129:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11134:2816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11438:310":{"id":"1:11438:310","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"4:12315:1455","str::as_mut_ptr":"1:11439:28557"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11428:796":{"id":"1:11428:796","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12298:409"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:29:1601":{"id":"0:29:1601","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[185,0],"end":[188,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2516:2074":{"id":"1:2516:2074","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2490:132"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:31:1602":{"id":"0:31:1602","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[213,0],"end":[215,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["lazy",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"LazyStatic","id":"0:29:1601","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5099:31829":{"id":"5:5099:31829","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:6968:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6968:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2531:127":{"id":"1:2531:127","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"1:39373:2530","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"1:11439:28557":{"id":"1:11439:28557","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12315:1455"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11553:2559":{"id":"1:11553:2559","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4474:2559"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"1:50413:2558","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11440:1600":{"id":"1:11440:1600","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:48131:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48129:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9311:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9311:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11504:1786":{"id":"1:11504:1786","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:11129:2815","`DoubleEndedIterator`":"1:7085:120","str::matches":"1:11504:1786","prim@char":"4:12298:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"1:50309:2869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11134:2816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7747:2062-0:12:1730":{"id":"a:1:7747:2062-0:12:1730","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7747:2062","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:12:1730","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"b:1:2523-0:12:1730":{"id":"b:1:2523-0:12:1730","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2497:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2493:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:12:1730","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2526:127","1:2527:1434"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11516:31166":{"id":"1:11516:31166","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11547:19693":{"id":"1:11547:19693","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11523:31170":{"id":"1:11523:31170","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11554:31177":{"id":"1:11554:31177","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4471:31177"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"1:50422:2578","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11455:23660":{"id":"1:11455:23660","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:11456:23624"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"1:50379:2865","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7746:2063-0:12:1730":{"id":"a:1:7746:2063-0:12:1730","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:7746:2063","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7746:2063","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:12:1730","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:11429:2081":{"id":"1:11429:2081","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11483:28587":{"id":"1:11483:28587","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"`DoubleEndedIterator`":"1:7085:120","prim@char":"4:12298:409","str::split":"1:11477:28584","self::pattern":"1:11129:2815"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"1:50123:2796","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11134:2816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11134:2816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11149:2819","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5083":{"id":"5:5083","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:4994:1359","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5084:31826","5:5085:2483","5:5088:31827","5:5091:31828","5:5099:31829","5:5100:31830","5:5101:2643","5:5102:26895","5:5103:26896"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11480:23641":{"id":"1:11480:23641","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"1:11129:2815","prim@char":"4:12298:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"1:10953:2808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11134:2816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2528-0:12:1730":{"id":"b:1:2528-0:12:1730","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2497:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:12:1730","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2531:127","1:2532:1433"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11492:28589":{"id":"1:11492:28589","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"str::rsplitn":"1:11495:28591","prim@char":"4:12298:409","self::pattern":"1:11129:2815"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"1:50209:2794","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11134:2816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2517-0:12:1730":{"id":"b:1:2517-0:12:1730","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:12:1730","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2519:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11433:31154":{"id":"1:11433:31154","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:11431:31153"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:28:1595":{"id":"0:28:1595","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[167,0],"end":[179,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"kind":"macro","inner":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"},"1:2243:20725":{"id":"1:2243:20725","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2241-0:12:1730":{"id":"b:1:2241-0:12:1730","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2669:1885","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:12:1730","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2243:20725"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:20:1600":{"id":"0:20:1600","crate_id":0,"name":"get","span":{"filename":"src/inline_lazy.rs","begin":[26,4],"end":[46,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline(always)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:1733","args":{"parenthesized":{"inputs":[],"output":{"kind":"generic","inner":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5085:2483":{"id":"5:5085:2483","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:6968:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6968:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11134:2816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11463:28164":{"id":"1:11463:28164","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"1:11129:2815","prim@char":"4:12298:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11134:2816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11448:31156":{"id":"1:11448:31156","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"str::slice_mut_unchecked":"1:11449:31157","crate::ops::Index":"1:2981:1989","`str`":"4:12304:1359"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:11536:31173":{"id":"1:11536:31173","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"1:11129:2815","prim@char":"4:12298:409"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11134:2816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11134:2816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11149:2819","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5102:26895":{"id":"5:5102:26895","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:11549:26898"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6968:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11539:31174":{"id":"1:11539:31174","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"1:11129:2815","prim@char":"4:12298:409"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11134:2816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11542:31175":{"id":"1:11542:31175","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"1:11129:2815","prim@char":"4:12298:409"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11134:2816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11134:2816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11149:2819","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11466:28166":{"id":"1:11466:28166","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12298:409","self::pattern":"1:11129:2815"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11134:2816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11134:2816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11149:2819","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2726:1886-0:12:1730":{"id":"a:1:2726:1886-0:12:1730","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2726:1886","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2726:1886","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:12:1730","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:11459:23648":{"id":"1:11459:23648","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"1:50397:2873","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2526:127":{"id":"1:2526:127","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"1:2497:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"5:5091:31828":{"id":"5:5091:31828","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:6968:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6968:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11522:31169":{"id":"1:11522:31169","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11533:28593":{"id":"1:11533:28593","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12298:409","self::pattern":"1:11129:2815"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48129:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11134:2816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11134:2816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11149:2819","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11460:23749":{"id":"1:11460:23749","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"1:11129:2815","prim@char":"4:12298:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11134:2816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11458:31158":{"id":"1:11458:31158","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"1:50369:2866","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2238-0:12:1730":{"id":"b:1:2238-0:12:1730","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2669:1885","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:12:1730","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2240:1745"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2662:217-0:12:1730":{"id":"a:1:2662:217-0:12:1730","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:12:1730","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:11545:19606":{"id":"1:11545:19606","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"1:11090:2335","FromStr::Err":"1:11091:126"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48273:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"1:11090:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:11090:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11452:19648":{"id":"1:11452:19648","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12298:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"1:50075:2863","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2519:680":{"id":"1:2519:680","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"5:1982:19839":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:153:15203":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:10708:15612":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:2851:1987":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:53965:7992":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:5699:13016":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"4:4312:8448":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"4:0:1351":{"crate_id":4,"path":["std"],"kind":"module"},"1:49171:127":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"18:755:19447":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:10455:15586":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:4519:14835":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:4427:12355":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"4:3470:27289":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"18:80:19466":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:9700:15462":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"16:4441:14831":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:6528:15304":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"4:11846:8438":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"9:676:14110":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"17:10949:15654":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:48404:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:50875:121":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"17:9526:15439":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"5:5957:8259":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:12063:2920":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"17:11684:18364":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"5:217:8605":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:1525:9971":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:13366:19341":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:7747:2062":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"4:5695:8555":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"17:11330:16056":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:50820:2844":{"crate_id":1,"path":["core","str","LinesAnyMap"],"kind":"struct"},"6:4768:12391":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:9502:2792":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"5:1227:8270":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:4054:1920":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"16:5374:15214":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"4:1105:8270":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:12896:18882":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:6241:15297":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"19:0:1006":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:51786:22036":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:10121:15503":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:2367:15337":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"4:11123:8349":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"6:581:9089":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:10332:15591":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:50824:2846":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:2713:2272":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"5:6401:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:1695:9987":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:48341:180":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:2681:1914":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"6:4224:12333":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:11161:15876":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"4:6676:1728":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"9:622:14065":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"17:10894:15618":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:21035:7960":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"14:202:8628":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:6436:2094":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:4817:14940":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:47274:2682":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:13158:19289":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"4:6079:1947":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"5:1446:8289":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:4191:12330":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:7166:15313":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:12237:18521":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:21344:21995":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:47294:2660":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:11708:18423":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"4:4117:8438":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"9:896:14130":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"4:4403:19804":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"5:1196:8269":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:20111:21648":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:46979:2581":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"4:8138:8401":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"16:7942:15327":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:0:801":{"crate_id":6,"path":["libc"],"kind":"module"},"4:8955:2556":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"6:62:8692":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:8418:15630":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:3125:15509":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:9873:15544":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"16:6654:15307":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:7970:15228":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:6430:13434":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:1505:9968":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:554:9085":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"4:9314:8573":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:11154:2820":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:12008:139":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:6500:13437":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:5498:13001":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"5:6734:8283":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"4:7895:8228":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"1:21808:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"6:5713:13017":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:11129:2815":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"17:11235:15931":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:7396:15323":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"4:11111:27313":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"5:6908:8344":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"5:1212:8271":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:10245:15589":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:50309:2869":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"6:6524:13439":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:9584:2793":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:2868:15358":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:2981:1989":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"16:6146:15263":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:10296:15560":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"4:11532:8578":{"crate_id":4,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"12:669:8262":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"18:582:2525":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:6409:13431":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:2753:1967":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"18:538:19454":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"18:681:19441":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:7543:15217":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:50397:2873":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:2833:1983":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:562:15637":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:7048:149":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:4581:12370":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"4:12321:1508":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"16:3402:15365":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"6:4280:12340":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:54087:7995":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:3151:231":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:6277:9908":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:47644:2648":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:4635:14904":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"6:4274:12339":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"18:652:33882":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:5727:13019":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:49126:70":{"crate_id":1,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"7:32:14017":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:2674:108":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:47242:23642":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:9274:15402":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:4461:12358":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:50536:2827":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:4413:14827":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:47000:2584":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"5:3107:8260":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"1:47256:2671":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:20330:7957":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"16:534:19992":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:4706:12385":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:7469:15224":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:2670:1915":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"6:4698:12384":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:8762:25873":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"4:9554:8376":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"16:7847:15325":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:9897:15546":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"4:10755:8557":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"4:11267:19734":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:9350:15415":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"12:1044:14245":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:11853:18434":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:10420:15585":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:9736:2794":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:21907:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:57029:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"5:1954:19818":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:54301:7954":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"16:5388:15267":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:7085:120":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:131:8758":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:12349:18595":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:49452:22384":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:7266:12526":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:38216:2525":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"17:10875:15617":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:2484:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"6:4527:12363":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"4:8441:2864":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"10:0:1813":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"5:6313:8653":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"4:954:8260":{"crate_id":4,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"17:13091:19258":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:49405:2750":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:11828:18432":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:7388:15238":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:12739:18723":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:5841:12236":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"5:2994:19816":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"4:3422:8369":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"5:3542:8260":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"1:11951:2916":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"4:979:8265":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:420:15199":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:2932:1733":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:539:9083":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:2487:15342":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"12:697:8263":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:21285:22062":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"4:887:2556":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"4:10494:19735":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:46896:2586":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:54134:7945":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"4:6408:20314":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:9155:15648":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:49934:2805":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:11174:15877":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:13192:19293":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:11500:18246":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"16:2842:15357":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:13393:19344":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:53091:8006":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:4123:1725":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"17:13114:19261":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:49245:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"17:10845:15597":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"5:2747:30654":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"4:12314:725":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"17:12909:18883":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:7439:2652":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:9764:15492":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:5861:13051":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:56672:8035":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"4:9301:8572":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:47410:2681":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:7208:12518":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"9:111:14080":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"17:13478:19358":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:22039:166":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:54186:7949":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:8368:15623":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:5720:13018":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"12:1029:8271":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:52377:8001":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:53511:8034":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:9831:15543":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:48316:2556":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:1636:577":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"6:1541:9973":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:29716:19674":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"4:9238:8560":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:11149:15875":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"4:3479:8371":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"6:5782:13023":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:7279:14000":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:2509:15343":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"5:6951:8343":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:5433:15269":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:5672:13013":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:1701:9988":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:8559:2592":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"17:8393:15632":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:50123:2796":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:135:8759":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:11143:2818":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:4761:12390":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"5:2738:30664":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"4:7299:27062":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:49141:67":{"crate_id":1,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"6:6322:13430":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:12148:18454":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:57094:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:4786:14927":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:21434:2342":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"16:4385:14823":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:5480:13000":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:1931:15437":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:50015:2802":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"4:5064:8463":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:7890:15230":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"9:956:14123":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"4:8082:8349":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"1:47308:2674":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:4725:780":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:49413:22626":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:11617:18356":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"15:175:14273":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"5:6076:2086":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:8596:15382":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"4:2026:182":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:21775:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:8941:15645":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:3974:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"4:8105:129":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"1:54224:7951":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"5:1405:8261":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"5:6445:20297":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"4:8487:8427":{"crate_id":4,"path":["std","net","ip_addr","Ipv6Addr"],"kind":"struct"},"4:11606:8567":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"12:632:2556":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"4:1828:8309":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"4:5880:203":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"5:6863:8285":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"5:1437:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:12630:18714":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:50832:2848":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:9475:15441":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:47173:2665":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"4:8589:8430":{"crate_id":4,"path":["std","net","socket_addr","SocketAddr"],"kind":"enum"},"1:51876:8011":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:47625:2644":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:6743:15308":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:5733:13020":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"4:10321:19781":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"13:0:1810":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:52061:8000":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"4:10425:8320":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"4:9383:27756":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:53841:8007":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:46920:2589":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:52809:8022":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:7746:2063":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:247:33798":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"4:9436:27747":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:9371:15427":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:50105:2792":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"5:4027:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:6171:15264":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:2282:15334":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:3078:1993":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"5:271:20287":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:4635:12377":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:1751:23024":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"4:9429:30032":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:12251:18522":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"4:5680:8554":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"6:6293:8957":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:57042:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:29397:2315":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"5:3734:8259":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:3026:15362":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"4:574:8229":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"17:9382:15421":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:12337:15597":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:12176:18469":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:4690:980":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"6:646:9122":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"6:1500:9967":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:10796:15614":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:7211:15206":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:7432:2560":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"16:5878:15288":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:5949:15289":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"4:4766:8486":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:12768:18768":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:11515:18247":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:5463:2659":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"4:6495:8569":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:50369:2866":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"5:3485:8294":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"4:2401:8359":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"1:9311:219":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:54239:7952":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:8609:111":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"6:6998:13813":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"4:4454:8477":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"4:9535:8578":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"4:8434:2792":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"4:11495:8376":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"16:5122:14979":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"4:8146:8293":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"4:1091:8269":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:6704:15235":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:53045:8002":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:8272:15635":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:9631:15436":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"4:4316:8449":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:1668:9984":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:7603:15241":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"12:1534:14249":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"4:5178:8510":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"4:9224:8559":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"16:2993:15360":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:4804:12394":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:11734:18425":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:10221:15587":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:8510:15328":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:51100:2922":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"16:6719:20136":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:48875:2726":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"4:12303:1329":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"17:1021:15425":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:46421:1991":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:11247:15932":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"4:8075:8348":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"18:660:19439":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:13231:19302":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:7298:15319":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"4:3232:8412":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:11745:21840":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"4:10859:8411":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"4:4425:8474":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"5:6968:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:10257:15563":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:1686:9986":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:1033:1727":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"5:5191:8651":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:4551:12366":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"7:0:1498":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:21361:22061":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:48366:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:5692:13015":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:11951:18441":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"18:719:19444":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:8561:15381":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:46940:2579":{"crate_id":1,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"5:950:20287":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:12033:18446":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:5996:15290":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:54011:8010":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"4:1938:8339":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"16:5203:15330":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:3230:1918":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:2739:2275":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"17:12972:19219":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"16:6161:15294":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"4:1620:8276":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"4:7977:8322":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"4:10580:8566":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:6522:2664":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"4:7747:30006":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:52331:8013":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"12:1085:14246":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:49995:2803":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:9301:8458":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"5:6751:8284":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:48632:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"5:5614:2553":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"18:531:19453":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:13340:19305":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:53763:8023":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:7249:12524":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"16:2930:15201":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:0:486":{"crate_id":1,"path":["core"],"kind":"module"},"6:5504:13002":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:47033:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"5:1370:2086":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:11200:2823":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:7956:15227":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:9681:15490":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"5:286:1892":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"16:6059:20125":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:4598:12372":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:6123:15213":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"5:2989:8276":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"16:7511:15196":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"5:3473:8293":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"9:649:14066":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"4:4894:8446":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:10403:15595":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"4:9573:8579":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"5:6773:2086":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:50379:2865":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:11800:18430":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"4:11163:28117":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:6829:20141":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:6424:13433":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:13214:19300":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:5235:33227":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:48273:207":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"4:678:8249":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"4:2411:8364":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"6:5472:12999":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:6765:2639":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:9930:15522":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"6:4515:12362":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:20279:7967":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:5851:2683":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:10075:15505":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"4:545:8222":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:6448:13435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"12:659:2086":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:6034:15292":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:11576:18255":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:6517:14270":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:5737:15282":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"16:6619:15306":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"4:12311:727":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"6:6329:8514":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:5614:19990":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"4:6837:1949":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"17:10270:15562":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:53155:7991":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:11661:18363":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"6:6375:9909":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:1903:15477":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:10466:15598":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"5:4904:20287":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:4326:1910":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:39422:2273":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:11774:18428":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:9093:20338":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:13436:19349":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:9362:15423":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:12730:18722":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"5:7062:8648":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"4:9252:8561":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"6:6538:13440":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:2796:1974":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:57068:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:46993:2583":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"17:10350:15592":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:6352:9935":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:4206:12176":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"18:507:33882":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:54145:7946":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:47066:2631":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:51806:21917":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:8620:2728":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:7214:12519":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:52407:8005":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"4:9394:8227":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"16:5761:15283":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:21940:167":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"12:834:8266":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:51982:8024":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:13141:19266":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:4:990":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:22006:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:2564:115":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:52499:7994":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:2763:1969":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"4:4906:27787":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:2290:124":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"17:8911:33464":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:7872:15231":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:2825:15356":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:10752:15595":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"4:11945:14282":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:48205:2086":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"6:4565:12368":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:2817:1979":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:11125:15839":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"4:6043:1940":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:6269:8998":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"4:5823:8562":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"17:967:15420":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"4:8504:8428":{"crate_id":4,"path":["std","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:12008:18444":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:1552:2553":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"5:6759:30737":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"4:11263:8322":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"5:7045:8260":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"1:2800:1976":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"0:0:1595":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"1:53653:8003":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:4294:12342":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:10670:15610":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"4:598:8231":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:608:9093":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"5:6891:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:58403:23021":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"4:8649:8424":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"17:12198:18518":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"4:9514:164":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"4:10862:8407":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"9:800:14169":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:10583:15605":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:52550:21855":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"18:491:33899":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"4:7736:15637":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:2235:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:10642:15608":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"18:671:19440":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"4:6680:1942":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:11288:16051":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:9885:15545":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:2285:185":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:20518:7964":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:12265:18523":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:7929:15326":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"4:1967:8340":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"17:11909:18437":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:10918:2879":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:47369:2662":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:12926:18884":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"12:1003:8270":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:3313:68":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"4:6233:203":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"4:918:8257":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:50081:2862":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:47195:2658":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:4745:12389":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"4:7961:8315":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"1:52885:8029":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:50485:2817":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"4:12305:1437":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"1:2487:147":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"4:7981:19845":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"16:5981:19996":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"4:2257:8351":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"1:3168:1998":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:4115:12324":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:1707:8469":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:13031:19250":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:48247:2060":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"4:5394:188":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"1:21321:19608":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:2321:179":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"17:10394:15594":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"15:214:14278":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"4:3314:8396":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"4:3461:2592":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"17:10088:15506":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:50553:2828":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:9778:15465":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"5:4948:8618":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"4:6682:1729":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"1:1760:2520":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"4:4254:8444":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"4:10444:20440":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"15:193:14274":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:3249:15528":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"4:8362:2639":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"6:4354:12349":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:2922:1887":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:3632:14305":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:4329:12346":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:54209:7950":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:3376:2534":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"17:13126:19264":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:12674:18717":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:2768:1968":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"4:965:8262":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"4:12269:8254":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:9126:20343":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:12103:18451":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"4:12309:631":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"4:3192:8409":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"5:2919:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:10139:15423":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:48556:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"4:6217:8569":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:8774:15641":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"12:751:8259":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:5660:13012":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"4:3486:8379":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"6:4683:12383":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"4:8612:8431":{"crate_id":4,"path":["std","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:13007:19248":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:2985:1990":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:20090:21646":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:7249:15315":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:9111:20305":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:2856:1988":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:47380:2679":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:47214:2667":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"5:2960:19815":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:9453:2556":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:5472:15272":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:567:9087":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:46518:198":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"16:6200:15295":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:11724:2911":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"5:6719:8302":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:11536:15548":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:21709:175":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:48708:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:11711:135":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:2827:1982":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:507:9080":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"12:1859:8277":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:0:1819":{"crate_id":17,"path":["object"],"kind":"module"},"1:49986:2800":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:4417:12354":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"4:11639:26838":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:5582:13007":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"4:8693:8480":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:49421:2749":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:49960:2655":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:2669:1885":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"4:2869:19746":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:4335:12347":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:1532:9972":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:3457:15366":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"18:690:19442":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:10233:15588":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:6311:13429":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"5:5350:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"9:19:14112":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"4:4017:8436":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"12:1555:14250":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:21126:23369":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:4185:12329":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"4:6316:20307":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"4:681:8251":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"4:9484:27087":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:52031:8012":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:11982:202":{"crate_id":1,"path":["core","task","ready","Ready"],"kind":"struct"},"1:46374:2000":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"5:4532:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:8701:15385":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"4:3269:8407":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:21269:22617":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:4437:12356":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:2812:1978":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"5:1359:2557":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:9458:15455":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"4:524:20303":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"5:2030:30739":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"4:8736:8511":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:12322:18532":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"5:2255:19842":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:4317:12345":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:51830:8031":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:50690:2833":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:29622:2489":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"12:2190:32941":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:50063:2859":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:9118:33567":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:4096:12322":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:9433:15413":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"18:599:33893":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:20318:8458":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:9061:15423":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:53903:8027":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:4200:1902":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"4:6920:30013":{"crate_id":4,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"4:11153:8368":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:1643:2360":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:49430:144":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:5523:13004":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:11594:18299":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:11186:15878":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"4:6440:27754":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:4346:1911":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:12948:18886":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"18:766:19448":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"12:274:20432":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:6210:15296":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"4:8762:8460":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:5605:13010":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:6109:15239":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:7852:2816":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:50273:2872":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"5:6284:8651":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:48332:2086":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"17:9250:15400":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"4:3086:8415":{"crate_id":4,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"12:1872:8279":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"17:11014:15768":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:6270:15216":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:52731:8033":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:52120:7989":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"11:44:14234":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"1:2672:223":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"4:5317:30010":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:51062:2914":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:9738:15466":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"12:1866:8278":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:20939:21011":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:4144:14464":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"5:630:30648":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"16:6496:15303":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:12485:18658":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"4:8903:8540":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"1:46436:197":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:6842:33120":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:46335:2001":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:48594:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"4:4904:27785":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:50896:2888":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:1714:9989":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"9:382:14150":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:46853:2558":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:12164:18455":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"12:387:32939":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:2726:1886":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:48180:2085":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"16:5219:15328":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:3141:1994":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"16:2605:15347":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"14:0:1816":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:13071:19256":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:12797:18770":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"4:2250:8347":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"17:9193:33690":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:47050:19676":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:2822:1980":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"16:5780:15284":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:8212:15622":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:10374:15559":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:3156:134":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:2784:1973":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:519:9082":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:49442:8538":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:48129:178":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"4:12316:1452":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"17:13024:19249":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:7435:2555":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"4:9330:8574":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"5:6789:19819":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:4496:12360":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:50255:2871":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:48746:1937":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"4:3377:2553":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"1:6616:2636":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"7:79:14024":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:4231:12334":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"4:5826:8564":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"1:47204:2666":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:52283:8028":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:5839:15287":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"5:677:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:8622:2729":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:48442:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:1672:1062":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"17:10528:15638":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"12:738:8258":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"17:8752:2861":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:7057:1891":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:12836:18813":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:12073:18449":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:48480:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"4:990:8266":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:10902:2877":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"4:996:8267":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:7162:156":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"18:481:19450":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"4:12323:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"16:7567:15244":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"12:1628:20285":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:20058:21008":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"5:6990:8626":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:5630:23429":{"crate_id":1,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"4:4246:8443":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"4:48:1509":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"6:487:9077":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:8339:15639":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:2805:1981":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"18:707:2818":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:10608:15606":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:6479:13436":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"4:1637:8279":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"4:11902:8590":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"4:9369:1941":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:4300:12343":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:12934:18885":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:9778:2791":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:8176:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"4:8945:8541":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"4:8221:19744":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"1:20359:8458":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:4489:8502":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:13404:19345":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:4816:12396":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:9909:15501":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:2341:15336":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:46612:2536":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:58382:23009":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"4:11600:27744":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:6569:21664":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:12361:18598":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:21398:21882":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"6:1574:9976":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"4:5011:8461":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:8014:15259":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"4:9282:8571":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:49460:22383":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"16:2727:15352":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:1636:9981":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:10310:15590":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"4:11584:20326":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:38199:180":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:3193:1916":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:11893:18436":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"4:4210:8442":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:5625:13011":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:3950:21853":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"4:12304:1359":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"16:2411:15339":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:3902:2553":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"18:624:33889":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"4:3271:8408":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"12:777:14243":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"12:1836:2086":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"5:6303:8652":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:49973:2804":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"4:4262:8445":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:1608:9980":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"11:36:32934":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"16:5793:15285":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:9627:15449":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"4:8378:8368":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"17:9947:15547":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"16:4297:14800":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:9303:15422":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:4081:1921":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:52597:22003":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"4:11762:19711":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:5595:13009":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"4:2652:8402":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"12:2205:8285":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:11797:2912":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"4:11654:26892":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:11356:16070":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"5:1241:8272":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"14:40:15656":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"4:8216:19743":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"4:12140:20329":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"5:3561:20287":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:11721:18424":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:50840:2850":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:4317:1909":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:50628:2830":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:8991:33566":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"16:4888:14955":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:14:1787":{"crate_id":1,"path":["core","write"],"kind":"macro"},"4:7847:8458":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"4:12313:729":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"5:6151:20287":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"4:2399:8358":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"1:51112:2919":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:21448:2339":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:8612:111":{"crate_id":1,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"18:614:33885":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"9:920:14131":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:10360:15557":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:49193:71":{"crate_id":1,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"4:5087:8456":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:12756:18766":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:11368:16071":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:12816:18772":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"4:8863:8538":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"4:10901:8228":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:52185:7956":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"14:165:14257":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"5:3805:2557":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"4:8390:8372":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"9:709:8538":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:242:33529":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:20927:2786":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"4:8638:8435":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"4:9463:27400":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:2839:1984":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:2749:15353":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"4:12322:1098":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"1:52231:8021":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"18:736:19446":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:54114:7943":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:47652:2650":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"4:4433:8475":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:12211:18519":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"4:8740:8514":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:4606:14896":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:10683:2785":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"4:5709:8556":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"4:5506:187":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"17:11485:18245":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:11436:18244":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"4:2515:8399":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:11547:15549":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:5386:2670":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:3716:14347":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"16:6345:15219":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"9:863:14129":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:46594:1995":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:5534:13005":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"5:3350:2556":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"12:1518:14248":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:46635:1908":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"1:10263:2806":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"6:4267:12338":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:7329:15322":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:11761:18427":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:586:9090":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:3188:15363":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:4629:12376":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:3010:15361":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:20367:7961":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:7243:12523":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:5741:13021":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:4398:12353":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:10667:2783":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:6284:15226":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:2847:1986":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"4:8065:8345":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"1:50049:2860":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"4:9206:8557":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"1:50327:2870":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"18:113:19468":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:10697:2856":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:2898:116":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"5:779:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:4506:12361":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:2788:1977":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:6975:13811":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:4536:2572":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:12134:18453":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:4678:2626":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"5:782:8281":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:8628:2731":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"4:2588:20305":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:10682:15611":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:20492:7958":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"4:6137:20307":{"crate_id":4,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"1:4372:1912":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:9079:20337":{"crate_id":1,"path":["core","slice","sort","insert_head","InsertionHole"],"kind":"struct"},"1:7044:133":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:1825:1919":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:12884:18880":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"4:10798:20322":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:20511:8458":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:2676:225":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:8846:144":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:47113:2627":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"16:7343:15223":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:6545:13441":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"16:7637:15229":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:11300:16052":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"4:11669:26894":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:4307:12344":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:20242:7966":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"17:9165:33779":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"4:1887:8327":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"1:8616:2726":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"6:4559:12367":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:4644:12378":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"4:11389:20325":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"9:188:14088":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"4:1608:2086":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:52453:7990":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:9021:15647":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"4:1889:8328":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"1:46986:2582":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"17:10997:15656":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:4212:12332":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:0:1818":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:20361:7959":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"9:586:14054":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"1:51852:8019":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:2578:127":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"16:7980:15260":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:13492:19376":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:46621:15259":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"6:560:9086":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:11137:15840":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:9545:2808":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"12:1852:8276":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"4:960:8261":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"4:7944:8273":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"5:6816:2086":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:48868:2727":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:13134:19265":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"4:9388:106":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"12:300:19932":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:4475:12359":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:2261:15333":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:4367:12351":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:4611:12374":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:12748:18724":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:2705:15351":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"14:7:14256":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:7288:15318":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:50404:2581":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"16:7659:15212":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:9691:15463":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:8340:19623":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"4:944:8259":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"4:11383:20324":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"12:762:8260":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"1:52651:21923":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:2631:15348":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"4:5763:8558":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"17:13148:19267":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"4:3953:8433":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"12:353:19930":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"5:2050:19838":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:8618:2727":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"4:12317:1453":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"4:1002:8268":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:2774:1971":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:54125:7944":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"4:11133:129":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"4:4268:8446":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:29658:19673":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:8951:33632":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:2926:1888":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"17:11528:15550":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:5447:15270":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:6415:13432":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:10953:2808":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:5494:15273":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:8881:33701":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"4:7056:8581":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:39373:2530":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"17:10434:15596":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:2535:15344":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"4:8886:8539":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:21460:2343":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"18:574:33882":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"4:11468:28121":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:9805:15541":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"4:9449:15311":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:7166:13972":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"4:9525:215":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"18:699:19443":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:10296:2807":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"16:4327:14811":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:12087:18450":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:13459:19352":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:2481:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"4:12280:27385":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"5:2737:2148":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:4699:26057":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"16:4545:14889":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"4:628:8244":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:46496:199":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:9031:33475":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"5:4105:20291":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"4:6603:163":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:2433:15340":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:1550:9974":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:54171:7948":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"9:592:14064":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"1:10842:2878":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:20520:7962":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:8137:15621":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"4:9636:8327":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"16:7093:15312":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"4:7954:8274":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"18:636:33881":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:21841:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"16:7426:15240":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:9071:33568":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:47359:2678":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"4:12318:1454":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"12:1138:8272":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:8666:15384":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"4:4505:8478":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"12:815:8264":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:21973:168":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"6:4737:12388":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"4:7538:27755":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"1:21232:21407":{"crate_id":1,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"9:0:1812":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:50844:2851":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:10182:15508":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:2793:15355":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:513:9081":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:8822:33470":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:50836:2849":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"12:98:19929":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:7044:19970":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"12:2069:8270":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"4:9260:2556":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:8569:131":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"5:2477:19841":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:54049:8030":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:13518:19383":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:11149:2819":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"5:5803:8582":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"4:8130:19764":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:13572:19391":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"4:3347:2644":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"4:5887:8569":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"4:12264:27751":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:4179:12328":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:7309:15320":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:50359:2864":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:49229:2725":{"crate_id":1,"path":["core","fmt","FlagV1"],"kind":"enum"},"17:11974:18442":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:50091:2861":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"4:6392:2916":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"5:6003:20287":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"4:4441:8476":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:52000:22051":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"16:6567:15233":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:50075:2863":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:47186:2657":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"4:7859:27390":{"crate_id":4,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"5:5505:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"4:1611:8259":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:9539:15438":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"4:8644:8434":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:21:667":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"17:12695:18718":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"4:8092:8350":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"16:6252:15298":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:47265:2672":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:5684:13014":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"5:36:8304":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:13279:19303":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:11134:2816":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"4:12315:1455":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"17:12278:18524":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:49923:2799":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"4:3594:19712":{"crate_id":4,"path":["std","net","display_buffer","DisplayBuffer"],"kind":"struct"},"4:7149:30588":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"4:12299:1471":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"4:719:8253":{"crate_id":4,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"16:6690:15222":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"16:2320:15200":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"18:644:33882":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"4:4969:8512":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:10062:15507":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"4:1632:8278":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:5587:13008":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:1962:15461":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:6865:20143":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:49660:19691":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:2662:217":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:49108:67":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"5:1595:20287":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:50601:2829":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:12105:2526":{"crate_id":1,"path":["core","const_closure","ConstFnMutClosure"],"kind":"struct"},"17:13382:19343":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"14:31:14256":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:10973:15655":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:10476:15599":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"14:221:14265":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:50713:2854":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"12:1832:2556":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:10321:15556":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:29582:2487":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:6781:15234":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"4:12296:367":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"16:4921:14970":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:48882:2728":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"5:1044:30638":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"18:96:19467":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:47619:2642":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:9263:15401":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:21033:8458":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"4:1626:8277":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"0:29:1601":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"17:11559:18252":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:10445:15597":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:5184:15332":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"9:33:14113":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"1:3364:2535":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"4:9530:216":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"16:3566:14288":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"4:12319:1451":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"1:50828:2847":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"4:8070:8346":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"1:51070:2915":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:4247:12336":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:12964:19218":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"9:977:14132":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"4:8576:8429":{"crate_id":4,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"6:7226:12521":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:592:9091":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:47596:2640":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"5:4748:1936":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:5596:15278":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:13374:19342":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"4:9441:27748":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:50733:2855":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"6:4592:12371":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"4:4838:8501":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"4:11306:8561":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"16:7267:15316":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:25281:2337":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:47143:2655":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"18:521:19449":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"4:5660:8553":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"17:10506:15564":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:10854:15616":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"12:320:19931":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:9820:15542":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"4:9830:8346":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:2911:1917":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:13506:19382":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:6668:20138":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:3689:14314":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"14:215:14259":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:48324:2557":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"17:11606:18355":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:12781:18769":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:6070:15205":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:13184:19292":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"5:1426:8263":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:13203:19294":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:52101:22040":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:12955:18898":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:10921:15653":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:39413:2533":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:2929:1889":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"5:3015:8279":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:11787:18429":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:12850:18815":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"4:11098:8348":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:9223:15399":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:2673:222":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"4:2903:207":{"crate_id":4,"path":["std","io","error","Result"],"kind":"typedef"},"12:861:8268":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:575:9088":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"4:4216:8441":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:10159:15510":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"4:484:20328":{"crate_id":4,"path":["std","thread","local","fast","Key"],"kind":"struct"},"17:13327:19304":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:51930:8032":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:48889:2729":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"4:7938:8250":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"4:6781:1944":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:5664:15280":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"4:8533:27370":{"crate_id":4,"path":["std","net","ip_addr","fmt","Span"],"kind":"struct"},"16:4217:14730":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:12550:18660":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:49834:19635":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:2683:15350":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:2579:15346":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:0:433":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"4:10650:8556":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:3162:1996":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:4540:12365":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:21309:2338":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:54160:7947":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"5:6938:8342":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"5:1078:19837":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"5:6743:8259":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"18:590:23661":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"12:0:1815":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"16:6017:15291":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"12:810:8261":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"12:2184:22070":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:223:207":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"0:31:1602":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"4:2253:2508":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"4:11456:8560":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:57107:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:1654:9983":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:4286:12341":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"12:2080:8271":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:4653:12379":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:9844:15500":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"12:1120:14247":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"12:1840:8259":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:5460:15271":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:46910:2588":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:51019:208":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:50005:2801":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:47610:1728":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"4:7804:20319":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:8241:15634":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:46540:200":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:50209:2794":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"5:1944:8222":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:57055:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:47224:2668":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"16:5815:15286":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:8886:2748":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:1643:9982":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"4:774:141":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:13047:19254":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"4:9835:20321":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"5:4952:8619":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"4:7874:8226":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"1:2327:186":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:11090:2335":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:9791:15493":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:48265:190":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"17:11070:15830":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:53305:8015":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"4:3404:8370":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"16:7319:15321":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:10520:15602":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"5:6728:2086":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:13557:19386":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:10283:15561":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:12860:18816":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:47603:23640":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:7748:2061":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"16:7825:15324":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"16:6472:14271":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"12:119:19933":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:9108:15427":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:2780:1970":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:29822:19675":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:49664:2812":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:4605:12373":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"12:60:32938":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:52628:22067":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"4:11372:20323":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"4:4744:8485":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"4:11952:14282":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"12:1845:8260":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:47164:2656":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:50852:2853":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"12:2053:8269":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:10546:15604":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:6825:1900":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"16:5525:15275":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"4:4657:8473":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:48189:2556":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:11940:106":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:4191:204":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"4:11069:8513":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:6572:13443":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:9722:15488":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"6:4665:12381":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"5:853:8282":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:8335:19622":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"4:10856:8409":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"16:4849:14947":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:47019:2585":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:4126:12325":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:9601:15442":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:1887:10127":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"5:4627:2553":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:10207:15576":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"4:8972:8544":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:20775:7986":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"4:6708:1948":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:4239:12335":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:7117:19973":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"5:2743:30655":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"5:870:2556":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:50848:2852":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"18:727:19445":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:9671:15456":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:21382:22057":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:11199:15879":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:1562:9975":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"4:900:2557":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"12:985:8269":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"4:11444:8559":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:7220:12520":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:48214:2059":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"16:6593:15305":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"16:6816:20140":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"5:1387:8257":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"4:8698:8481":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"4:8961:8543":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"1:50422:2578":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:46562:1992":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"6:5554:12972":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"4:11681:27060":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:6790:15309":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"4:1864:8320":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"16:6330:15299":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:49894:2787":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:9553:15423":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"6:1722:9990":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:52475:7993":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:5835:13050":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:50665:2831":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"4:9823:128":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"6:1600:9979":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"4:11785:8437":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"5:1691:8260":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"18:564:19455":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"5:2955:8277":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"16:6877:15310":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:46628:25865":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"16:6052:15293":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:11087:15837":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:29644:67":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"16:7135:19974":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:12022:18445":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:52855:8026":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:22471:2336":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"4:8712:8435":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"5:686:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:13594:19427":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"4:11476:2886":{"crate_id":4,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:50388:2874":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:4257:12337":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:13527:19384":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:50507:2821":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:10385:15593":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"4:7923:8247":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:12046:18447":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:2300:15335":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:7497:15220":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:12874:18818":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"4:12298:409":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"17:11343:16057":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:4716:12386":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:5163:15156":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:4346:12348":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:2444:8458":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"5:6875:8303":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:1678:9985":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"4:7848:8242":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:8110:15643":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:7007:2654":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:8475:15372":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"4:3160:19772":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:12638:18716":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:11849:21765":{"crate_id":1,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"16:7059:2059":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:11939:18440":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:7289:14001":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:10490:15600":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"5:5889:20297":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"17:11748:18426":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"4:4324:8451":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"5:3911:2556":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:11639:18357":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:8171:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"4:9406:27080":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:8871:15644":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"4:8686:8430":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:51009:202":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:3962:21843":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"4:931:8258":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:47038:2632":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"4:8704:8472":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:12514:18659":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"4:11703:20328":{"crate_id":4,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"17:8981:15646":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"4:11825:8436":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"18:609:33904":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"4:8369:8414":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"5:4072:2553":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:8631:15383":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:4659:12380":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"4:5009:8457":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:1518:9970":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"4:8470:8426":{"crate_id":4,"path":["std","net","ip_addr","Ipv4Addr"],"kind":"struct"},"16:7483:15225":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:47327:2676":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:4621:12375":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:6316:15243":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"4:5227:8520":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"4:5894:8570":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:1738:9991":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"4:11143:118":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:22072:2341":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:1919:2523":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:2232:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"17:9446:15428":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:8441:15633":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:13580:19393":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:13221:19301":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:13413:19348":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"16:6359:15300":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:46476:196":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:5568:12973":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:2739:30653":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:48197:2557":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"9:505:14229":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"4:359:8241":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:495:9078":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"4:1826:8308":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"17:11271:16044":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"4:6784:1945":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:50522:2824":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:49645:2777":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"6:4778:12392":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"4:6885:214":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:8626:2730":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:21874:2340":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"12:646:2557":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:10879:2880":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:13039:19251":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:11106:15838":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:11997:18443":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:6137:15211":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:9712:15491":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:13168:19290":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:8162:15631":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"13:108:32989":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"14:160:14256":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"4:4972:8485":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"4:973:8264":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:8494:15330":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:2792:1975":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:50155:2868":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:2557:15345":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"4:8122:118":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:12617:18662":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"5:6470:20302":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"4:1114:8271":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"16:7237:15314":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:545:9084":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"4:5348:30010":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"4:1811:598":{"crate_id":4,"path":["std","env"],"kind":"module"},"17:11873:18435":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:8055:15620":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:6554:13442":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"4:11513:26889":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"6:4379:12352":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:6302:13428":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:11217:15880":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:9003:2760":{"crate_id":1,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"4:2612:8393":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:9750:2790":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"12:2178:32944":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:51027:192":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"4:11276:8558":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:39409:19845":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"17:12291:18530":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:7237:12522":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:48256:2152":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:9293:15424":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:49885:2789":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:2657:15349":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:13100:19259":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:11259:16041":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:6463:15302":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:4200:12331":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"15:0:1817":{"crate_id":15,"path":["addr2line"],"kind":"module"},"5:6979:8625":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"12:725:8257":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:9401:15419":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"16:5703:15281":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:1595:9978":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:52261:8025":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"4:12297:919":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"4:4014:8437":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"4:1615:8260":{"crate_id":4,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"5:3363:2557":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:4797:12393":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:11355:111":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"16:2389:15338":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:5876:13052":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"5:3339:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:6922:19676":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:5525:1936":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:46868:2587":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:57081:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:5541:13006":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"4:4908:27789":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:49132:130":{"crate_id":1,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"11:0:1814":{"crate_id":11,"path":["adler"],"kind":"module"},"4:5169:8509":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"16:7435:15256":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"12:822:8265":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"4:8411:2665":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"17:10108:15502":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:20092:21650":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:8295:15640":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"4:2905:127":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"1:51083:158":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:4139:12326":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"4:4302:8447":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"4:11088:27314":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"4:9212:183":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"4:8226:8403":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:52138:21990":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"12:853:8267":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:13536:19385":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:9317:15418":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"18:0:1820":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:2843:1985":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"4:12320:774":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"5:1349:2556":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:20113:21651":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:7278:15317":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:13176:19291":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:46963:2580":{"crate_id":1,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"1:52429:8008":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"13:220:32945":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:2916:15504":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:4534:12364":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:20770:7963":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"16:4574:14891":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"4:3157:19771":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:20045:2525":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"16:4721:14915":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"4:6010:1938":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"4:411:162":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:7372:20147":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"18:515:19452":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"4:8447:152":{"crate_id":4,"path":["std","net","ip_addr","IpAddr"],"kind":"enum"},"1:21742:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:2255:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:1737:2521":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:2493:235":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"5:1312:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:5510:15274":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:54262:7953":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:4357:14817":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:10721:15613":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:10497:15601":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"4:7869:8216":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"6:4102:12323":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:53121:8009":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"4:8421:2679":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"3:0:1807":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"17:10774:15592":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:21253:19612":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:4262:1907":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:47344:2677":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:9764:2795":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"5:5416:8259":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:12118:18452":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:3610:2086":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:2948:2556":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"4:12312:728":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"4:12308:630":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"4:8553:19802":{"crate_id":4,"path":["std","net","parser","AddrKind"],"kind":"enum"},"1:21336:23020":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:51960:8020":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"4:4585:8479":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"4:5013:8462":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"4:686:8252":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:2445:2314":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:9751:15464":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:11054:15829":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:6509:13438":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:13059:19255":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:47318:2675":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"0:28:1595":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"17:9339:15416":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:4810:12395":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:3997:2562":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"4:11920:27376":{"crate_id":4,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"4:7785:20317":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"5:4042:20291":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:8624:191":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:46452:195":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"16:5628:15279":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"4:2248:128":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"17:8526:15380":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"4:8795:8521":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"4:6543:203":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"4:11687:27051":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"4:969:8263":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:4152:12327":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"4:5646:8552":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"16:3263:15364":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"14:187:14266":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"4:6851:1950":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"16:6903:15311":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:3178:19573":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"16:3599:14296":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:49913:2798":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"4:353:8240":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"5:6781:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:9488:15440":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"4:8329:8367":{"crate_id":4,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"4:3154:19770":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:9577:15444":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:5749:32623":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:7108:1890":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"4:2385:8354":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:4361:12350":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:49903:2788":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:8056:15197":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"5:2981:8278":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"12:2198:32942":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"16:4262:14779":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:6376:15301":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:10822:15615":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"4:11288:27394":{"crate_id":4,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:50227:2790":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:12307:18531":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"9:827:14189":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:4195:1901":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"17:9422:15414":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:29616:2488":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:9283:15426":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:7909:15232":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:6981:13812":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:9658:15489":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:2771:15354":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:9501:15422":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:9622:2809":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"16:4689:14912":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:9857:15523":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:4272:1908":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"5:3764:20287":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"4:1604:2556":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:5443:12943":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"4:7191:20316":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"5:5541:8664":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"16:6735:15237":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:4726:12387":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:46880:19550":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:1771:15443":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:52967:8014":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:47395:2680":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:9477:2557":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"4:3230:8411":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:50173:2867":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:6298:15242":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"6:4575:12369":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:48518:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"4:2029:181":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"4:8428:2861":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"5:1396:8258":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:50700:2834":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"5:1060:19836":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"16:4749:14923":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:50908:2889":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"4:11093:27771":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:20073:21008":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:13354:19306":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:600:9092":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:20305:7968":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:46680:2547":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:46957:2558":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:2490:132":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"4:6017:1939":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"6:6953:9036":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:47233:2669":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"16:5558:15277":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:12225:18520":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:51898:7999":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:12980:19246":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:2963:1999":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"16:7557:15218":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:2894:15359":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:20408:7962":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"5:3430:20287":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:1415:8262":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:54105:7942":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"4:12310:730":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"17:11034:15769":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"5:6810:2086":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:52083:8004":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"4:1123:8272":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:50413:2558":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:2758:1972":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:6392:9912":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"4:10667:20441":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:47634:2646":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"16:7357:15236":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:11772:189":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:50856:2886":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:11315:16055":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"6:1511:9969":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"4:2383:2491":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"1:2497:234":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"16:6676:15221":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"8:0:1811":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"4:9268:8568":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:5411:15268":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:9657:2796":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"4:1476:143":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"4:12301:1024":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"4:12302:308":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"1:46859:2563":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:2154:578":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"4:6639:30013":{"crate_id":4,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"17:12060:18448":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:20487:8458":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"6:501:9079":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:7011:2653":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:4673:12382":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"4:8624:8432":{"crate_id":4,"path":["std","net","socket_addr","SocketAddrV6"],"kind":"struct"},"16:5541:15276":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:487:15636":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:13082:19257":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:48670:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:8614:119":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"17:9644:15435":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:4449:12357":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"4:910:2086":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:11813:18431":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"16:4662:14909":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:50679:2832":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:9183:15649":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"4:2578:8400":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:386:15512":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"4:8813:8528":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"1:8881:2747":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"4:9276:2086":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:21427:23653":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"4:3194:8410":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:9695:2797":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"12:393:32935":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:47123:2628":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"16:6186:15215":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:5772:13022":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:5510:13003":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:3854:14350":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"4:8718:8482":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:21179:23372":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"16:2465:15341":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:8796:15642":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:47285:2673":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:10625:15607":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:46932:2578":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:9328:15417":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"4:661:8246":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:11841:18433":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:8832:140":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"17:12609:18661":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:1580:9977":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"12:1065:19928":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"4:9346:8575":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:7255:12525":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:49159:109":{"crate_id":1,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"4:5574:119":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"}},"external_crates":{"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}