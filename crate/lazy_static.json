{"root":"0:0:1575","crate_version":"1.4.0","includes_private":false,"index":{"1:3401:1956":{"id":"1:3401:1956","crate_id":1,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3403:181","1:3404:1234"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3253:211":{"id":"1:3253:211","crate_id":1,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3321:1940":{"id":"1:3321:1940","crate_id":1,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3323:181","1:3324:265"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3424:1961":{"id":"1:3424:1961","crate_id":1,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3426:1235"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13396:51795":{"id":"1:13396:51795","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:47440:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10914:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10914:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6411:223":{"id":"5:6411:223","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6412:1395"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13467:57792":{"id":"1:13467:57792","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:13018:2358","`DoubleEndedIterator`":"1:8428:120","str::match_indices":"4:15945:1737","prim@char":"4:15939:1732"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"1:49575:2740","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13028:2357","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13028:2357","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13043:2361","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13414:53211":{"id":"1:13414:53211","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:15939:1732","self::pattern":"1:13018:2358"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13028:2357","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6088:58429":{"id":"5:6088:58429","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13028:2357","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3162:228":{"id":"1:3162:228","crate_id":1,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3164:127","1:3165:1414"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3231:115":{"id":"1:3231:115","crate_id":1,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3232:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13384:4867":{"id":"1:13384:4867","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10283:2259":{"id":"1:10283:2259","crate_id":1,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10284:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6591:2998":{"id":"4:6591:2998","crate_id":4,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6592:56474","4:6593:56475"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13472:57794":{"id":"1:13472:57794","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3265:220":{"id":"1:3265:220","crate_id":1,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3724:1968":{"id":"1:3724:1968","crate_id":1,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3726:52208"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2850:2459":{"id":"1:2850:2459","crate_id":1,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2852:51280"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3258:1860","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"1:2847:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:6993:2956":{"id":"4:6993:2956","crate_id":4,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6994:56450"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13400:51797":{"id":"1:13400:51797","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10914:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10914:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:13455:57789":{"id":"1:13455:57789","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13028:2357","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13028:2357","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13043:2361","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23099:2519":{"id":"1:23099:2519","crate_id":1,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"1:23736:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:23090:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:5809:2946":{"id":"4:5809:2946","crate_id":4,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5810:54784","4:5811:54785","4:5812:54786","4:5813:54787"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13387:57782":{"id":"1:13387:57782","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"4:15945:1737"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6091:58430":{"id":"5:6091:58430","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3759:1890":{"id":"1:3759:1890","crate_id":1,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3258:1860","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"4:4742:3028":{"id":"4:4742:3028","crate_id":4,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4743:54527","4:4744:54528","4:4745:54530","4:4747:3027","4:4748:54529","4:4750:54531","4:4751:3695"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"4:4660:2961","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3156:149":{"id":"1:3156:149","crate_id":1,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3158:2048"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:4735:3008":{"id":"4:4735:3008","crate_id":4,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4736:57296","4:4737:37181","4:4738:57297","4:4739:57298"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10272:109":{"id":"1:10272:109","crate_id":1,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10273:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13043:2361":{"id":"1:13043:2361","crate_id":1,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:13045:2049","1:13046:52154","1:13047:52155"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"1:13037:2360","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13452:57788":{"id":"1:13452:57788","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13028:2357","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13406:2769":{"id":"1:13406:2769","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:15939:1732"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"1:49377:2729","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3261:218":{"id":"1:3261:218","crate_id":1,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:2576:127":{"id":"4:2576:127","crate_id":4,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:2577:52420","4:2579:1796","4:2580:57089","4:2581:57090","4:2582:56383"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"1:10272:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"1:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13402:3184":{"id":"1:13402:3184","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"1:3561:1962","str::slice_mut_unchecked":"4:15945:1737","`str`":"4:15945:1737"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"4:5823:2948":{"id":"4:5823:2948","crate_id":4,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5824:56466"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10593:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13501:2940":{"id":"1:13501:2940","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13477:57797":{"id":"1:13477:57797","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13427:2054":{"id":"1:13427:2054","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"1:13018:2358","`None`":"1:47440:176","prim@char":"4:15939:1732"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13028:2357","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13028:2357","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13043:2361","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10555:2449":{"id":"1:10555:2449","crate_id":1,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10556:146","1:10557:4514","1:10558:51877"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4:1564":{"id":"0:4:1564","crate_id":0,"name":"lazy","span":{"filename":"src/inline_lazy.rs","begin":[8,0],"end":[57,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(not(feature = \"spin_no_std\"))]","#[path = \"inline_lazy.rs\"]","#[doc(hidden)]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:20:1708","0:17"],"is_stripped":true}},"1:13508:57804":{"id":"1:13508:57804","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"4:15939:1732"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"1:49724:2751","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:22713:2407":{"id":"1:22713:2407","crate_id":1,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:22714:2404","1:22715:52176","1:22716:52738","1:22717:52739","1:22718:52740","1:22719:40204","1:22720:52741","1:22721:52742","1:22722:52743","1:22723:52744","1:22724:52745","1:22725:52746","1:22726:52747","1:22727:52748","1:22728:4869","1:22729:52749","1:22730:52218","1:22731:5202","1:22732:51604","1:22733:51603","1:22734:51605","1:22735:52177","1:22736:52178","1:22737:52179","1:22738:52180"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"1:3263:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22815:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6084:58428":{"id":"5:6084:58428","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1865","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:3356","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1865","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:3356","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6895:2988":{"id":"4:6895:2988","crate_id":4,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6896:56402"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3368:1949":{"id":"1:3368:1949","crate_id":1,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3370:1103"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13411:3695":{"id":"1:13411:3695","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"1:49661:2744","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3509:132":{"id":"1:3509:132","crate_id":1,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3511:181","1:3512:378"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6085:2865":{"id":"5:6085:2865","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13028:2357","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13731:138":{"id":"1:13731:138","crate_id":1,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13732:181","1:13733:1013"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13405:55277":{"id":"1:13405:55277","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"4:15945:1737"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13381":{"id":"1:13381","crate_id":1,"name":null,"span":null,"visibility":{"restricted":{"parent":"1:12478:1338","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["1:13382:793","1:13383:2055","1:13384:4867","1:13385:57781","1:13387:57782","1:13390:54810","1:13391:57783","1:13392:304","1:13393:55257","1:13394:1580","1:13396:51795","1:13398:51796","1:13400:51797","1:13402:3184","1:13403:57784","1:13404:55276","1:13405:55277","1:13406:2769","1:13407:2387","1:13408:3187","1:13409:5089","1:13410:5087","1:13411:3695","1:13412:57785","1:13413:4806","1:13414:53211","1:13417:54975","1:13420:54977","1:13423:2096","1:13427:2054","1:13431:54531","1:13434:5088","1:13437:55286","1:13440:57786","1:13443:57787","1:13446:55288","1:13449:55290","1:13452:57788","1:13455:57789","1:13458:1759","1:13461:57790","1:13464:57791","1:13467:57792","1:13470:57793","1:13472:57794","1:13474:57795","1:13476:57796","1:13477:57797","1:13478:57798","1:13481:57799","1:13484:5417","1:13487:55292","1:13490:57800","1:13493:57801","1:13496:57802","1:13499:2608","1:13501:2940","1:13502:54749","1:13503:54750","1:13504:54751","1:13505:57803","1:13507:2983","1:13508:57804"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:8860:2321":{"id":"1:8860:2321","crate_id":1,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8582:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:8343:2351":{"id":"1:8343:2351","crate_id":1,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8345:2111"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6493:3069":{"id":"4:6493:3069","crate_id":4,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6494:56429","4:6495:37329","4:6496:56430","4:6497:56431","4:6498:56432","4:6499:56433"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10593:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4035:2425":{"id":"1:4035:2425","crate_id":1,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4036:56383"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3489:1891":{"id":"1:3489:1891","crate_id":1,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3490:545"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"1:3476:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:1079:2981":{"id":"4:1079:2981","crate_id":4,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:1080:2121","4:1081:2940","4:1082:54747","4:1083:54748","4:1084:54749","4:1085:54750","4:1086:54751"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3262:217":{"id":"1:3262:217","crate_id":1,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5687:2996":{"id":"4:5687:2996","crate_id":4,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5688:4118","4:5689:54810"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10593:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13461:57790":{"id":"1:13461:57790","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:13018:2358","`DoubleEndedIterator`":"1:8428:120","prim@char":"4:15939:1732","str::matches":"4:15945:1737"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"1:49629:2743","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13028:2357","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13028:2357","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13043:2361","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:7829:3126":{"id":"4:7829:3126","crate_id":4,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:7830:56610"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13028:2357":{"id":"1:13028:2357","crate_id":1,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13030:2360","1:13031:52806","1:13032:52807","1:13033:52808","1:13034:52810","1:13035:52809","1:13036:52811"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:39:1581":{"id":"0:39:1581","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[185,0],"end":[188,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:9371:3068":{"id":"4:9371:3068","crate_id":4,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:9372:56584","4:9373:56585","4:9374:56586","4:9375:56587","4:9376:56588","4:9377:29574","4:9378:56583"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10593:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:12465:2933":{"id":"1:12465:2933","crate_id":1,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:12466:2059","1:12467:51404"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:0:1575":{"id":"0:0:1575","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[215,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\n# #[macro_use]\n# extern crate lazy_static;\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.4.0\")]","#![no_std]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:39:1581","0:41:1582","0:38:1575"],"is_stripped":false}},"1:13474:57795":{"id":"1:13474:57795","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2847:97":{"id":"1:2847:97","crate_id":1,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2849:1722"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3258:1860","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:2872:104":{"id":"1:2872:104","crate_id":1,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2873:408","1:2874:410"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:23736:2345":{"id":"1:23736:2345","crate_id":1,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:23737:2404"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:23732:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"1:3263:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:4717:2261":{"id":"4:4717:2261","crate_id":4,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4718:1760","4:4719:57518","4:4721:57519","4:4722:3618","4:4723:57520","4:4724:5458","4:4725:52265","4:4734:2085"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10914:214":{"id":"1:10914:214","crate_id":1,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:10916:181","1:10917:1580","1:10918:51795","1:10919:51796","1:10920:51797","1:10921:753","1:10922:754"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3258:1860","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10905:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:5769:2944":{"id":"4:5769:2944","crate_id":4,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5770:54678","4:5771:56573"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10281:2266":{"id":"1:10281:2266","crate_id":1,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10282:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3360:1948":{"id":"1:3360:1948","crate_id":1,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3362:893"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13408:3187":{"id":"1:13408:3187","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"1:49393:2731","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13393:55257":{"id":"1:13393:55257","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:15956:1746"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3150:75":{"id":"1:3150:75","crate_id":1,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3152:305"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3258:1860","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:3500:1862":{"id":"1:3500:1862","crate_id":1,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3501:578"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13390:54810":{"id":"1:13390:54810","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12489:2895"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3364:1947":{"id":"1:3364:1947","crate_id":1,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3366:559"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:38:1575":{"id":"0:38:1575","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[167,0],"end":[179,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"kind":"macro","inner":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"},"1:3326:1945":{"id":"1:3326:1945","crate_id":1,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3328:181","1:3329:1353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:23432:29194":{"id":"1:23432:29194","crate_id":1,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23433:51603","1:23434:51604","1:23435:51605"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialOrd","id":"1:23427:2405","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:7908:2324":{"id":"1:7908:2324","crate_id":1,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7909:52842","1:7910:52843","1:7911:52840","1:7912:52838","1:7913:52844","1:7914:52841","1:7915:52839"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"1:2872:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"1:2951:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13490:57800":{"id":"1:13490:57800","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"1:13018:2358","prim@char":"4:15939:1732"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13028:2357","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13028:2357","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13043:2361","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5753:2942":{"id":"4:5753:2942","crate_id":4,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5754:57377","4:5755:57379","4:5756:57378","4:5757:57380"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3390:1953":{"id":"1:3390:1953","crate_id":1,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3392:181","1:3393:356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10287:2268":{"id":"1:10287:2268","crate_id":1,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10288:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3713:224":{"id":"1:3713:224","crate_id":1,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3714:181","1:3715:1968","1:3716:686","1:3717:369"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"1:3718:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"1:3713:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:8347:2353":{"id":"1:8347:2353","crate_id":1,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8349:2112"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13481:57799":{"id":"1:13481:57799","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"1:13018:2358","prim@char":"4:15939:1732"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13028:2357","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3632:1965":{"id":"1:3632:1965","crate_id":1,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3634:53209","1:3635:53210","1:3636:53211"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3258:1860","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"4:6824:2986":{"id":"4:6824:2986","crate_id":4,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6825:56580"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10593:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3543:1971":{"id":"1:3543:1971","crate_id":1,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3545:237","1:3546:206","1:3547:51506"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13502:54749":{"id":"1:13502:54749","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6103:58431":{"id":"5:6103:58431","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3411:1958":{"id":"1:3411:1958","crate_id":1,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3413:354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3159:135":{"id":"1:3159:135","crate_id":1,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3161:681"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13434:5088":{"id":"1:13434:5088","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:15939:1732","self::pattern":"1:13018:2358"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"1:12810:2701","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13028:2357","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3088:2411":{"id":"1:3088:2411","crate_id":1,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:3087:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13437:55286":{"id":"1:13437:55286","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:13018:2358","prim@char":"4:15939:1732","`DoubleEndedIterator`":"1:8428:120","str::split":"4:15945:1737"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"1:49425:2704","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13028:2357","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13028:2357","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13043:2361","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3718:137":{"id":"1:3718:137","crate_id":1,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3720:687"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"1:3713:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13503:54750":{"id":"1:13503:54750","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13420:54977":{"id":"1:13420:54977","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:15939:1732","self::pattern":"1:13018:2358"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13028:2357","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13028:2357","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13043:2361","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6106:54747":{"id":"5:6106:54747","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"4:15945:1737"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13464:57791":{"id":"1:13464:57791","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"str::rmatch_indices":"4:15945:1737","self::pattern":"1:13018:2358","prim@char":"4:15939:1732","`DoubleEndedIterator`":"1:8428:120"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"1:49557:2739","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13028:2357","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10510:142":{"id":"1:10510:142","crate_id":1,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10511:715","1:10513:4843"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5020:2964":{"id":"4:5020:2964","crate_id":4,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5021:2596","4:5022:57078"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9240:2036":{"id":"1:9240:2036","crate_id":1,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:14204:2325":{"id":"1:14204:2325","crate_id":1,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:14205:51694","1:14206:51695","1:14207:51696","1:14208:51697","1:14209:51698","1:14210:51699","1:14211:2085"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:4660:2961":{"id":"4:4660:2961","crate_id":4,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4661:2866","4:4662:56904","4:4664:56905","4:4665:56906","4:4666:3023","4:4667:5381","4:4668:5380","4:4670:56907","4:4671:2085","4:4672:3187","4:4673:2067","4:4675:2079"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13496:57802":{"id":"1:13496:57802","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"1:13018:2358","prim@char":"4:15939:1732"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13028:2357","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13028:2357","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13043:2361","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:783:222":{"id":"5:783:222","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:784:2121","5:785:2122","5:786:2123"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6471:2986":{"id":"4:6471:2986","crate_id":4,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6472:3313","4:6473:3314","4:6474:56579","4:6475:57161","4:6477:57165","4:6479:57162","4:6480:57163","4:6482:57164"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10593:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13382:793":{"id":"1:13382:793","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:15939:1732"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:14130:141":{"id":"1:14130:141","crate_id":1,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:14131:277","1:14132:518","1:14133:280","1:14134:1079"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8867:2320":{"id":"1:8867:2320","crate_id":1,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"1:7908:2324","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:8384:151":{"id":"1:8384:151","crate_id":1,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8385:2059","1:8386:2060","1:8387:768"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6105:3050":{"id":"5:6105:3050","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5761:2943":{"id":"4:5761:2943","crate_id":4,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5762:54678","4:5763:54853","4:5764:54854"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3984:68":{"id":"1:3984:68","crate_id":1,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3985:1426"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"1:13446:55288":{"id":"1:13446:55288","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:15939:1732","str::rsplitn":"4:15945:1737","self::pattern":"1:13018:2358"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"1:49511:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13028:2357","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13440:57786":{"id":"1:13440:57786","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::split":"4:15945:1737","self::pattern":"1:13018:2358","str::rsplit_terminator":"4:15945:1737","`DoubleEndedIterator`":"1:8428:120","prim@char":"4:15939:1732"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"1:49457:2735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13028:2357","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3263:106":{"id":"1:3263:106","crate_id":1,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"1:2872:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13417:54975":{"id":"1:13417:54975","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:15939:1732","self::pattern":"1:13018:2358"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13028:2357","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5819:2947":{"id":"4:5819:2947","crate_id":4,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5820:56615"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13504:54751":{"id":"1:13504:54751","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3503:130":{"id":"1:3503:130","crate_id":1,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3505:376"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"1:3506:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:8393:1864":{"id":"1:8393:1864","crate_id":1,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8395:2056","1:8397:2057","1:8398:2058"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13404:55276":{"id":"1:13404:55276","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"4:15945:1737"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3348:1943":{"id":"1:3348:1943","crate_id":1,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3349:181","1:3350:913"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3476:116":{"id":"1:3476:116","crate_id":1,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3477:221","1:3478:543"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6083":{"id":"5:6083","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5903:1338","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6084:58428","5:6085:2865","5:6088:58429","5:6091:58430","5:6103:58431","5:6104:58432","5:6105:3050","5:6106:54747","5:6107:54748"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:3561:1962":{"id":"1:3561:1962","crate_id":1,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3563:181","1:3564:753"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3258:1860","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:22802:2572":{"id":"1:22802:2572","crate_id":1,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:22803:52176","1:22804:1225","1:22805:1226","1:22806:52177","1:22807:52178","1:22808:52179","1:22809:52180","1:22810:52181","1:22811:52182","1:22812:52183"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"1:3263:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22815:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13499:2608":{"id":"1:13499:2608","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"1:12957:2580","FromStr::Err":"1:12957:2580"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47567:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"1:12957:2580","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"1:12957:2580","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3415:1959":{"id":"1:3415:1959","crate_id":1,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3417:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8863:2322":{"id":"1:8863:2322","crate_id":1,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8582:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13505:57803":{"id":"1:13505:57803","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"4:15939:1732"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"1:49706:2749","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3356:1950":{"id":"1:3356:1950","crate_id":1,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3358:1354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9239:2037":{"id":"1:9239:2037","crate_id":1,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10289:189":{"id":"1:10289:189","crate_id":1,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10290:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4767:2301":{"id":"1:4767:2301","crate_id":1,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4768:2059","1:4769:52333","1:4770:2062"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3385:1952":{"id":"1:3385:1952","crate_id":1,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3387:181","1:3388:353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3153:74":{"id":"1:3153:74","crate_id":1,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3155:2047"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3258:1860","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:3701:1966":{"id":"1:3701:1966","crate_id":1,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3258:1860","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"1:3632:1965","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3380:1951":{"id":"1:3380:1951","crate_id":1,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3382:181","1:3383:351"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:23051:29175":{"id":"1:23051:29175","crate_id":1,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23052:52091","1:23053:52092","1:23054:52093"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:23044:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13476:57796":{"id":"1:13476:57796","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8380:136":{"id":"1:8380:136","crate_id":1,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8382:684"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13449:55290":{"id":"1:13449:55290","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"str::splitn":"4:15945:1737","prim@char":"4:15939:1732","self::pattern":"1:13018:2358"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"1:49529:2708","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13028:2357","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13028:2357","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13043:2361","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23427:2405":{"id":"1:23427:2405","crate_id":1,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23428:1268","1:23429:1267","1:23430:1265","1:23431:1264"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialEq","id":"1:22839:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13407:2387":{"id":"1:13407:2387","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:15939:1732"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"1:49383:2730","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13478:57798":{"id":"1:13478:57798","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"1:13018:2358","prim@char":"4:15939:1732"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13028:2357","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13028:2357","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"1:13048:2362","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"src/inline_lazy.rs","begin":[16,0],"end":[16,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"import","inner":{"source":"self::std::sync::ONCE_INIT","name":"ONCE_INIT","id":"4:8949:1707","glob":false}},"1:3336:1941":{"id":"1:3336:1941","crate_id":1,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3338:181","1:3339:558"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8453:1863":{"id":"1:8453:1863","crate_id":1,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8454:793","1:8455:2055"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8582:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13443:57787":{"id":"1:13443:57787","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split_terminator":"4:15945:1737","prim@char":"4:15939:1732","str::split":"4:15945:1737","self::pattern":"1:13018:2358"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"1:49475:2736","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13028:2357","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13028:2357","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13043:2361","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:22839:2408":{"id":"1:22839:2408","crate_id":1,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:22840:2404","1:22841:1245","1:22842:1270"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3796:1973":{"id":"1:3796:1973","crate_id":1,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6893:2957":{"id":"4:6893:2957","crate_id":4,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6894:57431"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10520:146":{"id":"1:10520:146","crate_id":1,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10521:652","1:10522:1760","1:10523:53258","1:10524:53259","1:10525:53260","1:10526:53261","1:10527:53262","1:10528:53263","1:10529:53264","1:10530:53265","1:10531:53266","1:10532:53267","1:10533:53268","1:10534:53269","1:10535:53270","1:10536:1530"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:22902:2346":{"id":"1:22902:2346","crate_id":1,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22892:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3342:1944":{"id":"1:3342:1944","crate_id":1,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3344:181","1:3345:1102"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2905:183":{"id":"1:2905:183","crate_id":1,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2907:604","1:2908:907"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3258:1860","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:13409:5089":{"id":"1:13409:5089","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"4:15945:1737"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"1:49681:2746","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13493:57801":{"id":"1:13493:57801","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:15939:1732","self::pattern":"1:13018:2358"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13028:2357","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5831:2941":{"id":"4:5831:2941","crate_id":4,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5832:54678"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3506:131":{"id":"1:3506:131","crate_id":1,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3508:377"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"1:3509:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:2951:184":{"id":"1:2951:184","crate_id":1,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2953:997","1:2954:826","1:2955:792","1:2956:713","1:2957:696"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3258:1860","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"1:2905:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13484:5417":{"id":"1:13484:5417","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:15939:1732","self::pattern":"1:13018:2358"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13028:2357","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:20:1708":{"id":"0:20:1708","crate_id":0,"name":"Lazy","span":{"filename":"src/inline_lazy.rs","begin":[19,0],"end":[19,48]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"1:3265:220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"4:6897:2989":{"id":"4:6897:2989","crate_id":4,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6898:57059"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13383:2055":{"id":"1:13383:2055","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12957:2580":{"id":"1:12957:2580","crate_id":1,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:12958:126","1:12959:52037"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3258:1860":{"id":"1:3258:1860","crate_id":1,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10222:2261":{"id":"1:10222:2261","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10223:1530","1:10224:52264","1:10226:52265"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10279:119":{"id":"1:10279:119","crate_id":1,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10280:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2941:177":{"id":"1:2941:177","crate_id":1,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2942:415","1:2943:2100","1:2944:2101","1:2945:2120"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"1:2910:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"1:2951:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:5681:2994":{"id":"4:5681:2994","crate_id":4,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5682:54780","4:5683:3460"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10593:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13410:5087":{"id":"1:13410:5087","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"4:15945:1737"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"1:49690:2747","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:22766:2401":{"id":"1:22766:2401","crate_id":1,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:22767:2404","1:22768:52176","1:22769:1225","1:22770:1226","1:22771:40204","1:22772:52215","1:22773:5043","1:22774:52216","1:22775:52217","1:22776:52218","1:22777:52177","1:22778:52178","1:22779:52179","1:22780:52180","1:22781:52181","1:22782:52182","1:22783:52183"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"1:3263:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22815:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13398:51796":{"id":"1:13398:51796","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10914:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10914:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:13470:57793":{"id":"1:13470:57793","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13413:4806":{"id":"1:13413:4806","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"1:49699:2748","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13403:57784":{"id":"1:13403:57784","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:15945:1737","crate::ops::IndexMut":"1:3565:1963","str::slice_unchecked":"4:15945:1737"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:3294:1861":{"id":"1:3294:1861","crate_id":1,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13385:57781":{"id":"1:13385:57781","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3419:1960":{"id":"1:3419:1960","crate_id":1,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3421:1232"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3352:1946":{"id":"1:3352:1946","crate_id":1,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3354:266"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13394:1580":{"id":"1:13394:1580","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:47440:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10914:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10914:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3331:1942":{"id":"1:3331:1942","crate_id":1,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3333:181","1:3334:892"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13487:55292":{"id":"1:13487:55292","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:15939:1732","self::pattern":"1:13018:2358"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13028:2357","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13028:2357","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13043:2361","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13507:2983":{"id":"1:13507:2983","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"4:15939:1732"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"1:49715:2750","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6821:2984":{"id":"4:6821:2984","crate_id":4,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6822:54802","4:6823:54803"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10593:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13048:2362":{"id":"1:13048:2362","crate_id":1,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13043:2361","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3395:1955":{"id":"1:3395:1955","crate_id":1,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3397:181","1:3398:1231"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3407:1957":{"id":"1:3407:1957","crate_id":1,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3409:352"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13431:54531":{"id":"1:13431:54531","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::rsplit":"4:15945:1737","self::pattern":"1:13018:2358","`DoubleEndedIterator`":"1:8428:120","prim@char":"4:15939:1732","str::split_whitespace":"4:15945:1737"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"1:49407:2700","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13028:2357","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3565:1963":{"id":"1:3565:1963","crate_id":1,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3567:754"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3258:1860","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"1:3561:1962","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13391:57783":{"id":"1:13391:57783","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:13392:304":{"id":"1:13392:304","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"4:15956:1746","str::as_mut_ptr":"4:15945:1737"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6104:58432":{"id":"5:6104:58432","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:8368:216","`Box<str>`":"5:432:1865"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1865","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:3356","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6107:54748":{"id":"5:6107:54748","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"4:15945:1737"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13037:2360":{"id":"1:13037:2360","crate_id":1,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:13039:2380","1:13040:922","1:13041:53227","1:13042:53228"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5833:3350":{"id":"5:5833:3350","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5835:181","5:5836:432"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3258:1860","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:13458:1759":{"id":"1:13458:1759","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"`DoubleEndedIterator`":"1:8428:120","str::matches":"4:15945:1737","prim@char":"4:15939:1732","self::pattern":"1:13018:2358"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"1:49611:2742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13028:2357","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13423:2096":{"id":"1:13423:2096","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:47440:176","prim@char":"4:15939:1732","self::pattern":"1:13018:2358"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13028:2357","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:41:1582":{"id":"0:41:1582","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[213,0],"end":[215,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["lazy",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"LazyStatic","id":"0:39:1581","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"1:2910:124":{"id":"1:2910:124","crate_id":1,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"1:2905:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3373:1954":{"id":"1:3373:1954","crate_id":1,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3374:181","1:3375:952"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5837:3352":{"id":"5:5837:3352","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5839:181","5:5840:15256"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5775:2945":{"id":"4:5775:2945","crate_id":4,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5776:56614","4:5777:56615","4:5778:54678","4:5779:56616","4:5780:3313","4:5781:3314","4:5782:56617","4:5783:1302","4:5784:56618","4:5785:56619","4:5786:56620","4:5787:56621","4:5788:56622","4:5789:56623","4:5790:56624","4:5791:56625"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10293:2270":{"id":"1:10293:2270","crate_id":1,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10294:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8428:120":{"id":"1:8428:120","crate_id":1,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8429:2049","1:8430:2050","1:8431:2051","1:8432:2052","1:8436:2053","1:8439:2054"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8582:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3166:227":{"id":"1:3166:227","crate_id":1,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3168:127","1:3169:1413"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10285:2267":{"id":"1:10285:2267","crate_id":1,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10286:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6719:2945":{"id":"4:6719:2945","crate_id":4,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6720:56481","4:6721:56482","4:6722:56483","4:6723:56484","4:6724:56485","4:6725:56486","4:6726:56487","4:6727:56488","4:6728:56489","4:6729:56490","4:6730:56491","4:6731:56492","4:6732:56493","4:6733:56494","4:6734:56495","4:6735:56496","4:6736:56497"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10291:2269":{"id":"1:10291:2269","crate_id":1,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10292:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8582:157":{"id":"1:8582:157","crate_id":1,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8583:2059","1:8584:922","1:8585:2061","1:8588:2062","1:8589:495","1:8591:2063","1:8594:2064","1:8595:2065","1:8596:2066","1:8597:2067","1:8599:2068","1:8601:2069","1:8602:2070","1:8604:841","1:8607:2071","1:8614:2072","1:8616:2073","1:8619:2074","1:8620:2075","1:8621:2076","1:8623:2077","1:8625:2078","1:8628:1306","1:8629:2079","1:8630:2080","1:8634:2081","1:8637:2082","1:8638:2083","1:8639:2084","1:8641:2085","1:8642:1870","1:8644:2086","1:8647:2087","1:8649:2088","1:8659:2089","1:8674:2090","1:8676:2091","1:8680:2092","1:8689:2093","1:8692:2094","1:8694:2095","1:8697:276","1:8704:294","1:8711:2096","1:8718:2097","1:8727:2098","1:8737:1014","1:8744:2099","1:8751:2100","1:8752:2101","1:8753:2102","1:8765:2103","1:8772:2104","1:8784:2105","1:8791:2106","1:8792:2107","1:8797:2108","1:8800:2109","1:8803:2110","1:8804:2111","1:8806:2112","1:8808:415","1:8811:2113","1:8814:997","1:8817:2114","1:8820:604","1:8823:2115","1:8826:907","1:8828:826","1:8830:792","1:8832:713","1:8834:696","1:8836:2116","1:8837:2117","1:8845:2118"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13746:150":{"id":"1:13746:150","crate_id":1,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13747:181","1:13748:150","1:13749:767"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13412:57785":{"id":"1:13412:57785","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"1:49671:2745","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"16:6219:3881":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"4:7649:3114":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"1:51437:2552":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:4470:40496":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"4:10455:4342":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:10477:4094":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"5:6672:1907":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:50186:2830":{"crate_id":1,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"1:8582:157":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:5282:41096":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:5548:41138":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:1700:38353":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"12:183:3652":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"5:8106:3356":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:10912:44905":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"4:10687:3084":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"17:12385:49497":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:5228:41093":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"4:7320:57144":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"9:1075:3582":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:4704:43587":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:5085:1881":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"18:661:4207":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"5:1663:3093":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:4364:40483":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"4:6895:2988":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:3153:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"17:13306:50268":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:3265:220":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:47913:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"4:4074:127":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"1:46056:2588":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:12431:49499":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:24199:2804":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"16:5384:3717":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:4371:40484":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:3231:115":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:48580:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:23833:2784":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"4:70:1489":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"4:15409:35886":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"1:7650:2068":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:13772:50703":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"12:1238:3647":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:49205:2712":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:11159:44624":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"5:2310:3493":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"18:767:60635":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:11100:4148":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"4:15125:3178":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"12:1682:3659":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:46684:2498":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:23975:6152":{"crate_id":1,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"1:51390:2564":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:9280:42982":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:5488:3725":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"16:5717:3736":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"19:0:994":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:13598:50655":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"5:5837:3352":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:1522:38335":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"4:14972:3122":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:3373:1954":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"16:2991:4017":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:3522:42986":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:7185:3901":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:22839:2408":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"17:10403:4097":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"5:8250:3082":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"4:1528:3098":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:49671:2745":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:1665:38350":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"5:5536:1907":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:5753:3740":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:6780:3894":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:5433:3720":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:46566:2483":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"4:11392:3312":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"4:15940:1733":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"4:9761:3285":{"crate_id":4,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"18:136:51109":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:4193:40466":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:9769:60287":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:6221:41517":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:53344:20619":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:47745:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"4:11226:3088":{"crate_id":4,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"6:4227:40469":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:11921:2724":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"16:6110:3871":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"4:15943:1735":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"1:4736:102":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"16:7453:3834":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:1690:38352":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"18:621:60647":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"5:994:3414":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:50003:2376":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:53478:20629":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"16:4995:43653":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:7908:2324":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"4:2163:2060":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"4:11080:3052":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"5:3329:2596":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:52884:2534":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"4:2401:31973":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"4:8772:1922":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"15:269:3672":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:47871:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:47636:178":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:3321:1940":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:5564:12084":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:2910:124":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:45729:1974":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"4:11223:2974":{"crate_id":4,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"6:4517:40501":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:13331:50271":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"4:3345:3262":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"1:13037:2360":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:4949:1703":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"17:13356:50273":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:12118:49420":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"4:7697:3117":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"17:11696:45356":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:49557:2739":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:4033:40449":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:6214:41516":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:45890:197":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"5:3039:57659":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:51198:51376":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"4:11643:3151":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:7838:2570":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"13:120:42858":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"5:8168:194":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:13098:50105":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"4:12090:2060":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"4:2366:600":{"crate_id":4,"path":["std","env"],"kind":"module"},"17:9759:44615":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:537:37454":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"4:5819:2947":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:50139:2764":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"5:5889:4311":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"4:1646:3102":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:8867:2320":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"4:699:3212":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:11981:44839":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"4:14892:4349":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:10962:44893":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"5:920:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:11678:45355":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:670:37494":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"16:5736:3737":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:46229:2750":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"4:5892:3330":{"crate_id":4,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"5:8298:3457":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:5392:2912":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"4:10730:2480":{"crate_id":4,"path":["std","error","Chain"],"kind":"struct"},"1:32462:51679":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"1:56296:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:48081:1908":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"16:2889:4023":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"18:830:4197":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"4:8959:2252":{"crate_id":4,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"12:1256:3103":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:10353:4159":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:7571:3830":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:5386:41103":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:13731:138":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:46372:2918":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"18:713:2295":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"14:11:42903":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:5528:40349":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:23626:2344":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:4215:40468":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:11358:4081":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:510:44598":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:46273:2640":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:23638:53064":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:3506:131":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"4:15334:3291":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:9088:44606":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"5:1011:2596":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"16:4955:43638":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:13746:150":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:4477:43510":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:3360:1948":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"4:2437:31984":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"18:838:2360":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:5421:3719":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"4:3319:3252":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"4:3652:4321":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"4:2192:3080":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"4:12185:1912":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:11628:45351":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:12442:49500":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:4300:40475":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"4:11193:2968":{"crate_id":4,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"16:3714:42997":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"5:3375:3407":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"5:7257:4299":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:49306:2720":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:10988:44891":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:24835:2790":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:22566:53104":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:24801:164":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:3390:1953":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:11519:45245":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"12:1666:3658":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:6091:41508":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"12:2045:3076":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"4:12210:1920":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:46506:12085":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:46627:2493":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:2773:4029":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:3945:40439":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:4869:1893":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:3972:40289":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:5371:41101":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"4:15946:1738":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"4:9746:3284":{"crate_id":4,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"17:11847:45551":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:51069:2542":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"12:750:2596":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:4506:43514":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:3506:4015":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:13240:50160":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:47507:2033":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"6:5998:41506":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"4:2031:145":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:57644:51686":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"16:6577:3890":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:1572:38342":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"4:7829:3126":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"1:24631:2653":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"4:6233:3309":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:22543:53106":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"4:15964:1754":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"17:13637:50664":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:3263:106":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"17:10489:4099":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:49234:2715":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"4:11981:3121":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"1:48210:2266":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:13520:50644":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:46716:2501":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"16:0:1793":{"crate_id":16,"path":["gimli"],"kind":"module"},"4:15956:1746":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"17:9839:4098":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:48467:133":{"crate_id":1,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"4:4742:3028":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"16:3064:4065":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"4:10697:3104":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:23099:2519":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"12:843:3090":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:6605:3848":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"5:6475:3075":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:51303:51319":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:13180:50154":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"4:4633:3015":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"1:49810:2363":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:4767:2301":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:53448:20627":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:46526:2478":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"5:8115:2060":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"4:5687:2996":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:11391:2708":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:12917:50047":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:13822:187":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"17:0:1794":{"crate_id":17,"path":["object"],"kind":"module"},"4:12693:128":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:3259:1889":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:46557:2482":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"16:7804:3843":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:584:37458":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:4459:40495":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:161:37142":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"16:5231:43839":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"4:10972:3039":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:6491:2489":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:11947:49303":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:5221:41092":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:2753:579":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"12:895:3643":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"17:10001:44672":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"4:4026:3167":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:10149:44617":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"12:0:1790":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"1:3342:1944":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:10420:4152":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:23044:2349":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"4:11323:3294":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"12:1183:3645":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"6:5414:41106":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"12:869:3075":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"4:14583:57281":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:10317:4076":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:48991:2937":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"4:11160:2744":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"1:47703:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:9886:44617":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"5:1457:3102":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:10272:109":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"16:6731:4041":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"4:10394:44600":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"9:927:42276":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:2850:2459":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:6870:40627":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"5:7642:3387":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:1584:38343":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:4501:40499":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:49839:2369":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:11434:45027":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"4:6821:2984":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:7420:3854":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"17:11738:45522":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"4:3200:3023":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"1:5585:2578":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:46311:2751":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:53137:2558":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:6126:3877":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:2543:4092":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:12221:49485":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:563:37456":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"4:6993:2956":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"4:5761:2943":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"16:3195:4010":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"4:5769:2944":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:7514:3853":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:23736:2345":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:46298:2921":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:10975:44892":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:50384:2330":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:5945:37372":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"4:15962:1752":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"17:10502:44733":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"5:8197:2060":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:50352:2773":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"4:2159:2596":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"18:791:4193":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:48765:146":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:46925:1706":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"4:1306:143":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"4:11996:3122":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:13248:15011":{"crate_id":1,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"16:6491:3887":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:45846:195":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:3796:1973":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:4:979":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"4:15959:1749":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"1:50147:2759":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"18:745:60642":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:14094:201":{"crate_id":1,"path":["core","task","ready","Ready"],"kind":"struct"},"16:6569:4037":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"12:2032:2596":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:5969:37331":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:13497:50641":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:11231:4146":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:3336:1941":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:48987:2938":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:543:37455":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:8929:44602":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:13884:50720":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:7158:3899":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:4724:2398":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:11726:45413":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"6:5407:41105":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"4:7289:57144":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:10224:44692":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:5159:41086":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"4:7766:3120":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"16:5790:3742":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:4331:40479":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:3018:4007":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"12:472:59758":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:11118:2597":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"4:8323:3239":{"crate_id":4,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"16:7761:3910":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"6:1527:38336":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:2816:4022":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:24177:6184":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:5095:1882":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:46747:2492":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:0:488":{"crate_id":1,"path":["core"],"kind":"module"},"15:248:3668":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:52383:2522":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:11336:2705":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:46618:2487":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:10179:44688":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"4:9173:1919":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:6614:52376":{"crate_id":1,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"4:6002:3338":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"4:15945:1737":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"6:4241:40470":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"18:783:60638":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:6028:38301":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"12:933:3095":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"14:250:42911":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"4:2576:127":{"crate_id":4,"path":["std","error","Error"],"kind":"trait"},"18:721:52438":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:3476:116":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"4:7151:34191":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"17:9896:60284":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"5:923:3413":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"4:1522:3097":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:7786:3844":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"4:1419:2596":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:7467:3835":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:5580:3730":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:11932:49302":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:6252:3882":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"5:1441:3100":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:6899:40631":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:11962:44840":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:51323:2520":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:48777:3145":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"17:10468:4095":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"16:7392:3839":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"4:11298:33606":{"crate_id":4,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"12:114:59761":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:1717:38355":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"4:11220:2973":{"crate_id":4,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"5:5415:3015":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:53425:20626":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:2905:183":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"4:11632:3150":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"1:3348:1943":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:13799:50706":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"12:2412:59755":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:4272:40472":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:51156:2551":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"4:10836:2955":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"1:50289:201":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:13781:53157":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"4:15444:3676":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"4:15910:31028":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"12:2066:3079":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:4293:40474":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:52077:2557":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:5632:3732":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:24597:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"6:3905:40437":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"4:11108:3026":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"1:53353:20620":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:10543:44831":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:9186:4086":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:50016:15012":{"crate_id":1,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"6:1676:38351":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"4:11556:3146":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:5360:3716":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:5029:43662":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:11001:44890":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:5241:41072":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"4:7961:3238":{"crate_id":4,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"1:53501:20630":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"4:10638:2254":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"1:3356:1950":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"4:15961:1751":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"4:897:3216":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:50343:2772":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:48443:67":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"4:4678:3024":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:46004:2458":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"17:10611:44835":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:1908:38494":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:9361:2357":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:3543:1971":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:53384:20623":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:11993:49308":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"12:1881:145":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:11604:45315":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"4:15355:3298":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:12275:49489":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:12783:49651":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"5:432:1865":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:12168:49481":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:12195:49483":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:10117:4177":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:11572:45313":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:8954:4088":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:5420:41107":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:4358:40482":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"4:5823:2948":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:5185:41088":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:8384:151":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:3918:40438":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"18:740:60655":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:11304:44627":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:5255:41073":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:13540:50648":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"4:15957:1747":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"5:7620:3386":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"5:1235:3474":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"5:1685:194":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"4:14264:2254":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:28016:2356":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"12:2404:59754":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"12:466:59757":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:5018:1875":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"5:5833:3350":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:5210:41091":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"4:2399:31972":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"1:3724:1968":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"14:244:42905":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"4:1153:31024":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"18:668:4208":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:5149:1884":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:56270:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:10599:44834":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"16:5975:3874":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:38816:2333":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"4:6719:2945":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:22815:2349":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"6:632:37465":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:12756:49588":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:22564:53108":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:3331:1942":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:3218:4011":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"4:12034:57147":{"crate_id":4,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"17:11750:45523":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:49316:2721":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:5953:38274":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"16:6238:3836":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:9689:60634":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:8347:2353":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:21:672":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"6:4511:40500":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:4448:43506":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:5456:3721":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"4:8508:202":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:46535:2480":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"19:117:60659":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"6:519:37451":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:681:44600":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:13819:50710":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:49611:2742":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"16:4734:43592":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:51179:2555":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:49699:2748":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:6881:40628":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"18:821:4196":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"4:10850:129":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"17:10814:4133":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"18:0:1795":{"crate_id":18,"path":["memchr"],"kind":"module"},"4:8873:57140":{"crate_id":4,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:48787:52319":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"5:3894:3466":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"16:6021:4002":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"4:5964:3333":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:12051:49412":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"7:38:42157":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:13477:50639":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:14204:2325":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"17:11555:45306":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:4439:40493":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:9034:44604":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"4:15921:54706":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:24014:52328":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:53286:2561":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"5:1607:2597":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:47611:2596":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:51468:2556":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:531:37453":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:4281:40473":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:7216:3904":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:2062:3015":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:10236:4091":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"4:9799:4340":{"crate_id":4,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"5:1694:3471":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:46398:2642":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:48756:2452":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:11809:45536":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:5346:3832":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:3509:132":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"4:15156:3180":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:6176:41513":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:8428:120":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"16:6014:3876":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"16:6136:3872":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:24665:168":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"16:4350:43483":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:32121:2845":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:46656:2495":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:5312:41098":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:13582:50653":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"18:169:51111":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:2794:3755":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:51766:51370":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:47559:188":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"16:2754:3753":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:578:5278":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:10571:44833":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:3364:1947":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:10510:142":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:57623:51683":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"18:802:4194":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:52191:2545":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"18:897:4202":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"4:12240:3173":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"17:11030:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:4215:3075":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:50115:2757":{"crate_id":1,"path":["core","str","LinesAnyMap"],"kind":"struct"},"4:10962:3164":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"9:900:42310":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"5:1091:4299":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:4112:40459":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:3395:1955":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:599:37460":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:5140:1883":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:12327:49492":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:47787:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"5:8446:3076":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"1:14:1760":{"crate_id":1,"path":["core","write"],"kind":"macro"},"4:9622:4337":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"0:0:1575":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"16:4535:43518":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:13924:50745":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:49271:2717":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:12307:49491":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:10028:44673":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:9133:44607":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:13154:50110":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"4:14536:54677":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"9:1056:3574":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"4:11312:3292":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:13446:50634":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:12247:49487":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:23732:2349":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:52030:2553":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:12142:49479":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"6:6614:37409":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:9849:60502":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"12:979:3099":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:10555:2449":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:1729:3304":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"9:692:3514":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"1:10289:189":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:49787:2359":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"4:15062:57141":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"6:5987:41505":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"4:2181:3078":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:10106:4176":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"4:13977:3119":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:49407:2700":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"5:1486:3103":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:542:3764":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"12:815:3094":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"8:0:1786":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:51230:2543":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"4:10876:3269":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"4:11386:3292":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"4:5809:2946":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"4:11255:56608":{"crate_id":4,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"12:559:143":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:11458:45028":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:11714:45412":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:46418:2815":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:8144:54521":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:3150:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:4035:2425":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"1:8160:1873":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"17:13963:50748":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:12040:49411":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:3326:1945":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:11794:45535":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"4:1486:3076":{"crate_id":4,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"1:49825:2366":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:24055:2610":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"18:651:4203":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:7378:3838":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"16:5472:3724":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:3087:2349":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"4:15141:3179":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"4:8673:1909":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"4:11626:2596":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"12:764:2597":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:12725:49586":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"5:8263:3107":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:1622:38347":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:4431:40492":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:591:37459":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:13780:50704":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:10656:44818":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"4:11616:3148":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"6:3966:40442":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:48506:127":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:49681:2746":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:5563:41139":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:4164:40464":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:46319:2915":{"crate_id":1,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"4:2598:54831":{"crate_id":4,"path":["std","error","from","StringError"],"kind":"struct"},"17:607:44599":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"16:5707:3734":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"6:4120:40460":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"9:0:1787":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:1843:4299":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"4:11482:3135":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"1:3713:224":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"4:7663:3115":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"17:10128:4178":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:51491:2559":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"4:15944:1736":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"4:11190:2967":{"crate_id":4,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"1:9954:2686":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:3385:1952":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:3145:4018":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"16:5522:3727":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:10560:2451":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"5:1653:3092":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:48740:2453":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"4:4601:3053":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"6:4023:40448":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:11406:45019":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"11:0:1789":{"crate_id":11,"path":["adler"],"kind":"module"},"16:4790:43598":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:2178:8628":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"17:10938:44915":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"4:7966:4427":{"crate_id":4,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"4:15418:56607":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"6:3868:40434":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:6644:41879":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:3368:1949":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:11588:45314":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:4387:40486":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:4127:40461":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:13978:50753":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:12489:2895":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"18:637:60638":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:11539:45305":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:8453:1863":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:1236:44689":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"4:8227:4323":{"crate_id":4,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"5:1618:2060":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:13506:50642":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:22802:2572":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:48039:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:51814:51377":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:3951:40440":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"4:4506:3044":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:22511:53059":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"11:54:3635":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"4:4467:3048":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:49690:2747":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"16:6636:3850":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"12:2059:3078":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"5:3396:3080":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:5459:41109":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"4:11318:3293":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"4:11533:3145":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"1:50151:121":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"4:1442:2060":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:47473:2059":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"4:3676:3030":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:3407:1957":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:11082:4087":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"4:12116:3203":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:9005:44603":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:49196:2711":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:13205:50157":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"12:2392:59752":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:13760:50668":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"12:2052:3077":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:7738:3909":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:13172:50112":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:299:60279":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:45757:1972":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"17:13986:50755":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:38753:2410":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:49856:2370":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:48494:107":{"crate_id":1,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"4:6893:2957":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:2872:104":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"4:10480:4344":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:10914:214":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:12494:49504":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:10293:2270":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"5:6764:3015":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"9:809:3145":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"4:4465:3047":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"5:8344:3459":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:5197:41090":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"12:2253:3100":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:51587:2532":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"4:13729:3128":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:24733:166":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"4:2175:3077":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:13547:50649":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:7453:4299":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:3500:1862":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:294:60288":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"5:7824:4313":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"4:12702:4346":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"6:4145:40463":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:49982:2374":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:12610:49525":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"16:2968:4006":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:4712:2397":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:5379:41102":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:13554:50650":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"4:4504:3043":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"4:10721:31986":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"4:10824:3248":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"1:49326:2722":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:9659:60558":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:6424:3886":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:11482:45029":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"4:8522:3201":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:49661:2744":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"16:6072:3816":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:13163:50111":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"4:11573:3147":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"1:49245:2716":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"18:850:4198":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"4:14761:3123":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"4:8061:3239":{"crate_id":4,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"1:49457:2735":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:52348:2540":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"5:3951:3076":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"4:11147:2731":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"1:9241:2035":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:47619:2597":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"5:8368:216":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"4:15939:1732":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"1:48461:70":{"crate_id":1,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"4:11196:2972":{"crate_id":4,"path":["std","net","ip","IpAddr"],"kind":"enum"},"5:1939:3076":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"6:1744:38358":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:3088:2411":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:3419:1960":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"4:13530:4431":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:13746:50667":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:47490:2597":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:13094:2365":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"12:2419:3082":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"4:5753:2942":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"4:10605:56605":{"crate_id":4,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"4:13602:3113":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:53540:20631":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:3162:228":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:46431:2816":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:7236:3906":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:10232:134":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"4:15905:57264":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:9649:44613":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:22902:2346":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:7342:3866":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:10801:44804":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:2945:4028":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:46647:2494":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:6166:3878":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:4341:40480":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"4:4717:2261":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"17:9296:44591":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"12:952:3097":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:6418:2488":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:12234:49486":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"5:8121:3415":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"5:4699:4304":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:11499:45244":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:46952:12369":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:5400:41104":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"4:14513:56568":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"4:0:1329":{"crate_id":4,"path":["std"],"kind":"module"},"16:7549:3842":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:10520:146":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"16:2912:4005":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:8393:1864":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:7250:3907":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:52995:2554":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:7174:3900":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:511:37450":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:7333:3852":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:11405:2709":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:10275:109":{"crate_id":1,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"17:4157:4137":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:11665:45354":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"14:56:45029":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"4:10725:3482":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"1:53463:20628":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:4922:43630":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:12095:49419":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"6:1723:38356":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:46737:2503":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:48528:71":{"crate_id":1,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"4:2166:3075":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"6:6858:40625":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:1736:38357":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:6101:3829":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:12373:49496":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"4:13866:3118":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:11822:45537":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"4:14744:31986":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"4:9007:1923":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"4:11415:34190":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"4:10819:3074":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"4:11968:181":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"16:4641:43574":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:13564:50651":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:46288:2920":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:8860:2321":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:46934:12368":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:10926:44914":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"16:6964:2033":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:50143:2758":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:9239:2037":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"16:4890:43623":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:52534:2546":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"16:3365:3752":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:1533:38337":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:53247:2541":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:2733:3754":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:6864:40626":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"12:1103:3100":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:12699:2734":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:13574:50652":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:4449:40494":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:3772:43030":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:2171:578":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"4:12205:1914":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:12946:50048":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:7928:2457":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"5:7849:4319":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"12:162:3648":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:12155:49480":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:12537:49507":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:13865:50714":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:50307:190":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:13043:2361":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:13221:50158":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:24083:6164":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:23051:29175":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"16:5855:3744":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:624:37464":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:3561:1962":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"17:9719:44614":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:7073:3897":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"4:8414:3239":{"crate_id":4,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"1:23090:2349":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"16:7823:3845":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:49706:2749":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"16:5672:3733":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"13:0:1785":{"crate_id":13,"path":["std_detect"],"kind":"module"},"4:1463:3091":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:12408:49498":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:49904:2371":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:1596:38344":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:12685:49578":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"5:3970:4299":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:6887:40629":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:6208:3880":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:6087:3831":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"4:14518:57510":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:24699:165":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:9961:44619":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"12:787:3093":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"5:3748:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:2512:4154":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"4:4388:3275":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:51284:2535":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"4:1492:3092":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"4:10868:118":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:50123:2762":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:10529:44734":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"4:9662:4338":{"crate_id":4,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"1:2941:177":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"6:4083:40456":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:7843:3911":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:12480:49503":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:8380:136":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"0:41:1582":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"1:12810:2701":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:6155:41512":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"4:15955:1745":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"6:1563:38341":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:12741:49587":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"4:5994:3336":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:6068:38278":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:52108:2560":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"3:0:1782":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:49715:2750":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:11277:44590":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"5:4443:2596":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"4:15012:54679":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:11225:2702":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:1311:4182":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"14:231:3346":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:12775:2741":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"4:14566:118":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:12182:49482":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"4:12023:54667":{"crate_id":4,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"1:46595:2486":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"4:2937:179":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"4:10892:3038":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:13465:50638":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:46548:2481":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:13386:50603":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:10285:2267":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:5191:41089":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:24184:2850":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"4:8949:1707":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"1:10287:2268":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:11616:45316":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"4:11372:3337":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:49529:2708":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:10435:44731":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:6413:3664":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:10253:4156":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:46336:2750":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:13788:50705":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:9600:60470":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"17:9210:44608":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"12:2269:3101":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"4:15938:1731":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"4:14549:129":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"4:15296:3290":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:6085:41507":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"4:14898:4350":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"5:3040:57661":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:13429:50633":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"18:611:4204":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:46011:1882":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"4:6897:2989":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:5274:41095":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:11767:45531":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"12:1162:3644":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:50119:2760":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:51618:2536":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:3701:1966":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:24030:6140":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:46244:2637":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"16:5407:3718":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:1547:38339":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:14000:50789":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"4:7711:3118":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"4:14573:3025":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"16:4671:43579":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"5:783:222":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"4:4394:3277":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:5314:42983":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:10095:4175":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:13028:2357":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:50396:2328":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:56322:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:45821:194":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"17:9245:4077":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"4:4428:3046":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:5561:3729":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:13942:50747":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:3415:1959":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"16:4823:43606":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:0:798":{"crate_id":6,"path":["libc"],"kind":"module"},"4:12260:3174":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:49297:2719":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"4:7541:119":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"1:24767:167":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"6:5269:41094":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:5192:1886":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"4:12145:3205":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"4:1136:3004":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:5167:41087":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"18:678:142":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"9:1020:3581":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:6106:41510":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:45913:199":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:4306:40476":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:50173:2829":{"crate_id":1,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"16:6554:3889":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:6935:42065":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:11970:44838":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"4:15952:1742":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"16:7856:3912":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:6893:40630":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:49511:2707":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:10584:4136":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"4:11962:3119":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"1:32261:2811":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:4852:43610":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"4:8444:3465":{"crate_id":4,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"17:10041:44674":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:12465:2933":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:3392:4020":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:10887:44806":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:13018:2358":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"4:5532:3298":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:4386:43494":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:11015:44917":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:50127:2761":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:46706:2500":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"4:2793:3003":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"17:13488:50640":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:12598:49511":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:10950:44916":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:4401:40488":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"5:8160:2060":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:47541:2034":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:10052:44675":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:4052:40452":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:3166:227":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"9:603:42387":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:6620:4035":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:10266:4155":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:7360:194":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"4:14498:2992":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:24109:6183":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:4654:3015":{"crate_id":1,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"17:10448:4096":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"5:7111:4313":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"16:6591:3891":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:51846:51301":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:12759:2738":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"4:11464:34192":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"4:12220:3172":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"1:24091:6182":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"16:5927:3747":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:12659:49576":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:5469:41110":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:10558:44832":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"4:14993:3173":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"18:730:60653":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:4203:40467":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:6852:40624":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:10377:4157":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"5:0:277":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:3632:1965":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:5941:189":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"5:1674:3094":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:11143:2700":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"14:47:42903":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"4:8724:1911":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"4:15689:4351":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:6910:40632":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:3759:1890":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:10071:4181":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"5:4306:2597":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"4:15953:1743":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"17:9440:44611":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:13054:50102":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"4:14186:3047":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"16:6744:4042":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"18:775:60638":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"4:11140:2502":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"1:22896:2343":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:12343:49493":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:13912:50744":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:12456:49501":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:7884:3841":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:24495:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"4:15963:1753":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"16:7894:3869":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"4:3335:3257":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"6:3997:40445":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:22713:2407":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:24529:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:46943:3053":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:11186:2701":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:12712:49580":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:51092:2530":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:53364:20621":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"9:27:3563":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"16:7477:3855":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:3159:135":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"4:6493:3069":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:53410:20625":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:46918:12366":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:23904:2787":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:48748:52332":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"16:3488:4016":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:48795:52315":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"4:4072:205":{"crate_id":4,"path":["std","io","error","Result"],"kind":"typedef"},"16:7870:3840":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:11337:4082":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"16:6176:3879":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"12:971:3098":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"6:6812:42038":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"12:1784:4297":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:12028:49355":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"5:8176:3360":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:10160:44690":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"4:3555:3034":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"4:12363:4424":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"6:3990:40444":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:49214:2713":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:6718:4040":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"4:14523:2954":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"4:8009:4323":{"crate_id":4,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"12:940:3096":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:12521:49506":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:4425:40491":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:4060:40453":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"4:8515:3200":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:49350:2820":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:9729:60121":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:12568:49509":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"5:8379:3343":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"4:1045:3001":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:10081:4070":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:9162:4145":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:13927:51764":{"crate_id":1,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"6:5130:41044":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:51689:2524":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"4:13511:31984":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:45976:2426":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"17:13192:50156":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:49393:2731":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:5766:3741":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:12552:49508":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"9:234:3539":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"4:15175:3186":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"9:776:3561":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"17:10061:44691":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"5:2777:3478":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:13282:50204":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"5:3341:3406":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"4:11096:3025":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"16:4614:43572":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"16:3091:4066":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"5:6954:3348":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:48564:2265":{"crate_id":1,"path":["core","fmt","FlagV1"],"kind":"enum"},"16:7042:4052":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"4:5775:2945":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:3281:2332":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"4:15433:3676":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:9404:44610":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"5:8391:3344":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:12736:2737":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:13733:50666":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"5:1635:3090":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:47627:2060":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"6:616:37463":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:5815:3743":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:46636:2490":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:49629:2743":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:3743:4130":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:4183:40465":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"5:1215:3473":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"4:1079:2981":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"16:3800:43033":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"4:8422:3145":{"crate_id":4,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"6:4377:40485":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"4:9371:3068":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:605:37461":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:10211:44686":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:52270:2533":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"4:5831:2941":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:11298:2704":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"5:8330:3458":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"4:9667:4430":{"crate_id":4,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"16:7024:4051":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:47440:176":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"17:10673:44837":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"6:1554:38340":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:3352:1946":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:5292:41097":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"18:152:51110":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"4:1623:3100":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:3862:40433":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:9264:42983":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"4:3192:128":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"4:9208:57140":{"crate_id":4,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"1:3718:137":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"4:10829:2954":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:47567:205":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"16:5273:3758":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:6005:34190":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:13532:50647":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:24068:2611":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:51342:51371":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:10458:44732":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:3881:40435":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:88:37075":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:3489:1891":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:3424:1961":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:4395:40487":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:11779:45532":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:10283:2259":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"17:13810:50707":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:46448:2817":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"4:7826:3124":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"16:6032:3760":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"4:15937:1730":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"4:10615:3221":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"16:6391:3885":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"4:4391:3276":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"4:1021:3239":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"1:46413:100":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:12771:44628":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:3503:130":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:23432:29194":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"16:3338:3751":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:24147:6185":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"17:12645:49575":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:6768:4044":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"4:9889:4341":{"crate_id":4,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"1:37596:2295":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"16:6518:3888":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:11094:2596":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"18:858:4199":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"12:928:3092":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"4:10681:31025":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"5:3044:57658":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:11915:49301":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:2951:184":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"9:41:3564":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"4:6824:2986":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:6152:3833":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:6200:41515":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:46727:2502":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"4:15958:1748":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"16:5295:42985":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"4:2462:4425":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"1:3294:1861":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"6:4347:40481":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:37572:178":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"6:1602:38345":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"12:1147:3102":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"16:7406:3837":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:12632:49574":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:22766:2401":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"4:1497:3093":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:12982:50049":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"4:12082:3199":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"5:8146:58857":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:3411:1958":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"4:15951:1741":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"5:3882:3038":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"14:189:42903":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:32362:51645":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"4:7475:185":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"1:5014:1874":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"16:7279:4053":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"4:11130:2480":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"4:7683:3116":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"1:48217:2267":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:46257:2638":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:4325:40478":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"4:4735:3008":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"16:5330:42982":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"9:996:3580":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"16:7971:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:52317:2537":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"16:5505:3726":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:3287:4014":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:10407:4153":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:13933:50746":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:6999:3896":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"5:6411:223":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:10331:4098":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"4:6733:56494":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"4:6971:2990":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:3984:68":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"4:12215:1921":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:12010:49311":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:5522:41137":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:10279:119":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"4:11378:3303":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:2314:4158":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:11263:2703":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:7736:2479":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:9368:44609":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:4230:43413":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"4:10967:3165":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"4:6015:3339":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:157:37141":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:9476:44612":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:9551:4143":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:9332:4078":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:47829:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:1617:38346":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"4:15950:1740":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"4:11275:54673":{"crate_id":4,"path":["std","net","parser","AddrKind"],"kind":"enum"},"1:24212:2803":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:11045:44621":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:51951:2565":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"4:10704:31979":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"4:3317:2436":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"1:2253:2437":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:2843:4003":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:4494:40498":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:9809:60627":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:46365:2917":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"5:4643:4304":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"5:3038:2121":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:4066:40454":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:3271:1888":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:2381:1892":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"5:1472:3101":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:51021:2562":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"4:12200:1913":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"12:856:3091":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"17:10516:4100":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"4:9097:1917":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:4101:40458":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:13402:50631":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:45867:198":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:3253:211":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"4:11367:3334":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:56309:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:9943:60632":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"4:8942:1706":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"17:10279:4070":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"5:3300:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"4:12041:54694":{"crate_id":4,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"17:9799:44616":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:12507:49505":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:10788:44805":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:5611:779":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:47955:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:46342:2916":{"crate_id":1,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"1:11419:2710":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:3380:1951":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:13394:50604":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:13119:50106":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:11328:44628":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"18:705:60638":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:22955:2404":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:569:37457":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"5:8280:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"14:0:1791":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"4:9495:54832":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:46576:2484":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"5:3048:57662":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:13453:50637":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"5:7212:3075":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"5:2218:3409":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:5347:41099":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"4:8680:1910":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"6:3892:40436":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:10905:2349":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:12073:49413":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:1708:38354":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:6366:3665":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"16:3118:4019":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"4:14876:4348":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:47997:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:4419:40490":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"4:10594:3213":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"4:4294:3055":{"crate_id":4,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"1:46963:12371":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:47498:2060":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"16:6949:4048":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:7205:3903":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:13318:50270":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"4:1450:3090":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"16:7303:3908":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"7:85:42164":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:12262:49488":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"4:11360:2966":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:9748:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"4:4726:54852":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"4:15942:1734":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"1:48476:67":{"crate_id":1,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"16:3939:43147":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:6051:38275":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:51870:51403":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"4:7366:186":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"6:4073:40455":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:6464:3846":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"4:14985:57285":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:46235:11704":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"4:12011:3123":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"1:53373:20622":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:56283:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"4:3333:3256":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"1:50131:2765":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:5169:1885":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:7264:3849":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:6269:3883":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:300:205":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"18:695:4209":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:46696:2499":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:13258:50201":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:9933:44618":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:4013:40447":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"9:963:3579":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:22545:53109":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"9:157:3531":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"4:14748:2997":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"16:4417:43500":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"9:749:3516":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"1:49931:2372":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"5:1597:2596":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:13609:50656":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"4:15960:1750":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"4:903:3217":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"4:15274:2975":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"4:6729:56490":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:45805:196":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"4:9794:4339":{"crate_id":4,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"4:1432:2597":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"4:15070:3130":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:53325:2526":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:53399:20624":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"5:3362:3079":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:32296:2595":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"4:3730:3037":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"4:12019:57513":{"crate_id":4,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"6:1658:38349":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:12795:49654":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"4:1655:3103":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:10635:44803":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:22892:2349":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"4:1511:3096":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"5:7780:234":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:50996:51388":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:51540:2544":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:10844:4098":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"4:11166:2966":{"crate_id":4,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"1:11377:2707":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"12:777:2060":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:53074:2538":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:10623:44836":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:4133:40462":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"4:12700:3248":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:13857:15260":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"12:432:3649":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:0:430":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:49425:2704":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:4317:40477":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:13296:50206":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:5978:41504":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:46358:2749":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:13627:50663":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:4005:40446":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:2276:2442":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"18:812:4195":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"5:5875:4308":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"4:9655:4429":{"crate_id":4,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"4:4660:2961":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"17:11186:44625":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:9574:4089":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"12:1121:3101":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"5:3772:2597":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:46665:2496":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"4:2187:3079":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"5:6652:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"4:1505:3095":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:13590:50654":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:6873:2491":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:47550:2124":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"5:6257:3386":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"5:8203:2060":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"5:8463:3382":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:6636:41878":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:4255:3311":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:24461:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"5:69:3381":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:51261:2531":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"4:6116:3300":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"5:6688:3434":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:4262:40471":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:3041:4008":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:2267:2441":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"4:5986:3335":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:10222:2261":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:24563:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"0:39:1581":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"6:4095:40457":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:9240:2036":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:25205:2644":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"4:15954:1744":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"16:4304:43462":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:46379:2919":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:10304:4073":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"5:2553:3479":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"4:11437:2987":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"4:2170:3076":{"crate_id":4,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"4:8837:162":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:7295:3851":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:11026:44620":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:12957:2580":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:4523:40502":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"4:823:4341":{"crate_id":4,"path":["std","thread","local","os","Key"],"kind":"struct"},"5:2200:4301":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:7195:3902":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"5:792:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:49377:2729":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"5:7379:2060":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:1455:1705":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"9:722:3515":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"17:13348:50272":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"5:5315:200":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"16:547:3738":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"4:14050:4347":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"4:10620:3237":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"5:1644:3091":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:4478:40497":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:5996:3875":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"4:4426:3045":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:11888:2723":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"16:3264:4013":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"12:2072:3080":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"1:49224:2714":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"4:13904:3120":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:3156:149":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"16:6682:3847":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"4:1534:3099":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:10200:44687":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:11653:45353":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"0:38:1575":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"1:51714:2525":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:12671:49577":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"12:2040:3075":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:8849:4142":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"4:15032:3172":{"crate_id":4,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"17:13377:50286":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"4:2934:180":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"16:6691:3893":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"5:8362:58568":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"16:3549:42987":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:51044:2550":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:50975:51311":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"4:10666:31022":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:10827:4134":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"12:1703:3660":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:55912:2339":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:10281:2266":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"4:6591:2998":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:50135:2763":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:2847:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:8343:2351":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"4:15169:3185":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"18:886:4201":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:9528:2731":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:11147:44623":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:10140:4098":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:32302:2835":{"crate_id":1,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"17:12287:49490":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"4:10593:2349":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"5:3839:4299":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:11378:4080":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:13243:15010":{"crate_id":1,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"5:1560:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:11199:44626":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"5:3759:2596":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"5:4242:4299":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"14:194:42904":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:50299:4436":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:3258:1860":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"16:5960:3749":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"5:374:3405":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:10427:52461":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:49575:2740":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"4:12161:3206":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"15:230:3667":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"4:2751:3002":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"6:1540:38338":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:8863:2322":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:3730:1970":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:5428:41108":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"14:216:42912":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:13370:50274":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:12021:4359":{"crate_id":1,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"17:9971:60133":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"5:3488:3076":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"1:50366:158":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:525:37452":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:4905:1894":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"4:1156:31026":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"4:6731:56492":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:11254:4144":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:49284:2718":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"12:2036:2060":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:2484:44720":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:48203:2259":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:7146:3898":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:14043:2774":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:23101:2404":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"5:3370:3077":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"6:3978:40443":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"15:0:1792":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:13048:2362":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"4:13365:3305":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:9592:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"9:469:42282":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:5023:1876":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"4:11153:2700":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"1:49475:2736":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:47661:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:49724:2751":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"16:5595:3731":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:23997:2615":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"16:6644:3892":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:8902:44601":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:45969:1967":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:23427:2405":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:12467:49502":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:9959:2687":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"4:8166:3239":{"crate_id":4,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"1:56335:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"11:46:59751":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"1:3261:218":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:2866:4004":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:4410:40489":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:3320:4067":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:12699:49579":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"5:8138:3416":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"4:5020:2964":{"crate_id":4,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"6:6239:41518":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"4:12074:2596":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:13272:50203":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"4:14189:3043":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"5:2330:3475":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:6100:41509":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:10291:2269":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:49365:2582":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:32310:51680":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"12:2398:52091":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"4:12129:3204":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:53200:2523":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"12:2280:3102":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:48224:2268":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"4:1161:31027":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"4:12096:3202":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:49145:2706":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:3241:4012":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"4:3194:3249":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"16:3172:4009":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:22498:2295":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:51666:2521":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"9:686:3512":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"4:1501:3094":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:3565:1963":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:13685:50665":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:2203:1050":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"17:11640:45352":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"4:1194:4422":{"crate_id":4,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:2492:2302":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"4:5408:3291":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"4:14959:3121":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:4046:40451":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"13:232:59763":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"4:9094:1916":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:10864:44808":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:24131:6174":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:45936:1964":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:3262:217":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"5:8313:2816":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:9743:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:13842:50711":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:46604:52034":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:52741:2566":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:56348:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:45997:2457":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"5:4628:235":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:51125:2563":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:3429:3756":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:51641:2539":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:13898:50738":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:11118:44622":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:13620:50662":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"5:3336:3078":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"5:4599:4302":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"1:46496:4353":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:49993:2375":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:7119:3761":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:49383:2730":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"4:11411:2985":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:7226:3905":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:14130:141":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:14033:2303":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"4:1637:3101":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:46675:2497":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:6185:41514":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"5:2262:3476":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:3401:1956":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:4762:43595":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:47482:2596":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"12:353:4416":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:49968:2373":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:9065:44605":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:12582:49510":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:6357:3884":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"4:2460:4424":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"4:1476:3075":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:12208:49484":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:8087:3052":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"4:3642:3035":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"5:8130:3075":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:4040:40450":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"7:0:1478":{"crate_id":7,"path":["unwind"],"kind":"module"},"4:13882:4432":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"6:6923:42064":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:5359:41100":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"4:5405:3290":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"4:15949:1739":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"1:4362:2060":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"12:1203:3646":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"4:11087:3054":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"17:13062:50104":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"4:6471:2986":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"4:3197:2866":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"18:867:4200":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:3742:2258":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"10:0:1788":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:46586:2485":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"4:10405:54833":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:4050:2431":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"6:1760:38359":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"5:5788:4299":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:610:37462":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"4:14183:3045":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"4:6353:3310":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"4:786:4341":{"crate_id":4,"path":["std","thread","local","fast","Key"],"kind":"struct"},"18:645:4206":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:13041:50050":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:22526:53059":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"6:1630:38348":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"12:379:3651":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"4:5681:2994":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"12:880:3076":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"16:3604:42988":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"18:755:60650":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"5:4515:3447":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"12:399:3650":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"4:10884:3036":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:3957:40441":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"5:1195:58507":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:6807:3895":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:6124:41511":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:11835:45550":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:4008:44807":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:5436:59053":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"}},"external_crates":{"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":16}