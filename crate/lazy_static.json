{"root":"0:0:1667","crate_version":"1.4.0","includes_private":false,"index":{"1:12329:28541":{"id":"1:12329:28541","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12330:28542":{"id":"1:12330:28542","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12259:20452":{"id":"1:12259:20452","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12033:421"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43686:3264","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12236:2144":{"id":"1:12236:2144","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12311:1871":{"id":"1:12311:1871","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:11936:3236","`DoubleEndedIterator`":"1:7388:121","prim@char":"4:12033:421","str::rmatches":"1:12314:28535"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43920:3270","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11941:3250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12296:28532":{"id":"1:12296:28532","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:11936:3236","str::split":"1:12284:25488","prim@char":"4:12033:421","str::split_terminator":"1:12293:28531"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43784:3268","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11941:3250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11941:3250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11956:3252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12323:28538":{"id":"1:12323:28538","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12340:25499":{"id":"1:12340:25499","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12033:421","self::pattern":"1:11936:3236"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41755:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11941:3250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11941:3250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11956:3252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12258:25481":{"id":"1:12258:25481","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12257:25480"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12327:28540":{"id":"1:12327:28540","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12257:25480":{"id":"1:12257:25480","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:12258:25481"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12293:28531":{"id":"1:12293:28531","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:11936:3236","str::split":"1:12284:25488","prim@char":"4:12033:421","`DoubleEndedIterator`":"1:7388:121","str::rsplit_terminator":"1:12296:28532"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43766:3269","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11941:3250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12270:25497":{"id":"1:12270:25497","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:12033:421","self::pattern":"1:11936:3236"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11941:3250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12356:24820":{"id":"1:12356:24820","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12246:315":{"id":"1:12246:315","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12050:1526"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12244:28527":{"id":"1:12244:28527","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:3074":{"id":"5:5527:3074","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28:1667":{"id":"0:28:1667","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[167,0],"end":[179,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"inner":{"macro":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"}},"1:12266:20455":{"id":"1:12266:20455","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44008:3274","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29:1673":{"id":"0:29:1673","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[185,0],"end":[188,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"1:12287:20458":{"id":"1:12287:20458","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12033:421","self::pattern":"1:11936:3236"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:11752:3204","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11941:3250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12325:28539":{"id":"1:12325:28539","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5528:24818":{"id":"5:5528:24818","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12357:24821"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5529:24819":{"id":"5:5529:24819","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12358:24822"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12299:25493":{"id":"1:12299:25493","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12033:421","self::pattern":"1:11936:3236","str::rsplitn":"1:12302:25495"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43820:3193","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11941:3250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12320:28537":{"id":"1:12320:28537","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:11936:3236","`DoubleEndedIterator`":"1:7388:121","prim@char":"4:12033:421","str::match_indices":"1:12317:28536"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43884:3273","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11941:3250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11941:3250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11956:3252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12317:28536":{"id":"1:12317:28536","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:11936:3236","`DoubleEndedIterator`":"1:7388:121","prim@char":"4:12033:421","str::rmatch_indices":"1:12320:28537"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43866:3272","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11941:3250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12331:28543":{"id":"1:12331:28543","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12033:421","self::pattern":"1:11936:3236"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11941:3250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11941:3250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:11961:3251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12362:28550":{"id":"1:12362:28550","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4521:28550"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44033:3017","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12305:28533":{"id":"1:12305:28533","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41755:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11941:3250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12346:28546":{"id":"1:12346:28546","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12033:421","self::pattern":"1:11936:3236"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11941:3250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5509":{"id":"5:5509","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5510:29207","5:5511:2924","5:5514:29208","5:5517:29209","5:5525:29210","5:5526:29211","5:5527:3074","5:5528:24818","5:5529:24819"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12238:28525":{"id":"1:12238:28525","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1667":{"id":"0:0:1667","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[215,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\n# #[macro_use]\n# extern crate lazy_static;\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.4.0\")]","#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:29:1673","0:31:1674","0:28:1667"],"is_stripped":false}}},"1:12249:24215":{"id":"1:12249:24215","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41757:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41755:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10030:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10030:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12290:25491":{"id":"1:12290:25491","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:11936:3236","`DoubleEndedIterator`":"1:7388:121","prim@char":"4:12033:421","str::split":"1:12284:25488"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43734:3195","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11941:3250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11941:3250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11956:3252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12358:24822":{"id":"1:12358:24822","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12262:20469":{"id":"1:12262:20469","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12263:20447"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43990:3266","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12355:26614":{"id":"1:12355:26614","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39786:20747","Self::is_ascii":"1:12354:24816"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41755:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39786:20747","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12260:21317":{"id":"1:12260:21317","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12033:421"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43692:3263","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5526:29211":{"id":"5:5526:29211","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:1973","`String`":"5:7449:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:1973","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:8742","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12251:24216":{"id":"1:12251:24216","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10030:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10030:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12352:28548":{"id":"1:12352:28548","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:11897:127","`FromStr`":"1:11896:2773"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41899:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:11896:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:11896:2773","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12256:28529":{"id":"1:12256:28529","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12039:1423","crate::ops::IndexMut":"1:3056:2057","str::slice_unchecked":"1:12255:28528"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12265:28530":{"id":"1:12265:28530","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43980:3267","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5510:29207":{"id":"5:5510:29207","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:1973","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:8742","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:1973","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:8742","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12235:825":{"id":"1:12235:825","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12033:421"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12334:28544":{"id":"1:12334:28544","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12033:421","self::pattern":"1:11936:3236"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11941:3250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12237:28524":{"id":"1:12237:28524","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12349:28547":{"id":"1:12349:28547","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12033:421","self::pattern":"1:11936:3236"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11941:3250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11941:3250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11956:3252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12357:24821":{"id":"1:12357:24821","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12234":{"id":"1:12234","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12235:825","1:12236:2144","1:12237:28524","1:12238:28525","1:12240:28526","1:12243:26670","1:12244:28527","1:12245:316","1:12246:315","1:12247:1672","1:12249:24215","1:12251:24216","1:12253:24217","1:12255:28528","1:12256:28529","1:12257:25480","1:12258:25481","1:12259:20452","1:12260:21317","1:12261:21117","1:12262:20469","1:12263:20447","1:12264:27905","1:12265:28530","1:12266:20455","1:12267:21823","1:12270:25497","1:12273:25498","1:12276:2186","1:12280:2143","1:12284:25488","1:12287:20458","1:12290:25491","1:12293:28531","1:12296:28532","1:12299:25493","1:12302:25495","1:12305:28533","1:12308:28534","1:12311:1871","1:12314:28535","1:12317:28536","1:12320:28537","1:12323:28538","1:12325:28539","1:12327:28540","1:12329:28541","1:12330:28542","1:12331:28543","1:12334:28544","1:12337:24881","1:12340:25499","1:12343:28545","1:12346:28546","1:12349:28547","1:12352:28548","1:12354:24816","1:12355:26614","1:12356:24820","1:12357:24821","1:12358:24822","1:12359:28549","1:12361:2996","1:12362:28550"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12302:25495":{"id":"1:12302:25495","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12033:421","str::splitn":"1:12299:25493","self::pattern":"1:11936:3236"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43838:3189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11941:3250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11941:3250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11956:3252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5517:29209":{"id":"5:5517:29209","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12247:1672":{"id":"1:12247:1672","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41757:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41755:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10030:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10030:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12267:21823":{"id":"1:12267:21823","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12033:421","self::pattern":"1:11936:3236"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11941:3250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12308:28534":{"id":"1:12308:28534","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41755:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11941:3250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11941:3250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11956:3252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12354:24816":{"id":"1:12354:24816","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12264:27905":{"id":"1:12264:27905","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43970:3265","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31:1674":{"id":"0:31:1674","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[213,0],"end":[215,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["lazy",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"LazyStatic","id":"0:29:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12243:26670":{"id":"1:12243:26670","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11496:3256"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12253:24217":{"id":"1:12253:24217","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10030:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10030:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12240:28526":{"id":"1:12240:28526","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12238:28525"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12273:25498":{"id":"1:12273:25498","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12033:421","self::pattern":"1:11936:3236"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11941:3250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11941:3250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11956:3252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12343:28545":{"id":"1:12343:28545","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12033:421","self::pattern":"1:11936:3236"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11941:3250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11941:3250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11956:3252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12359:28549":{"id":"1:12359:28549","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4523:28549"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44015:3018","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12276:2186":{"id":"1:12276:2186","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41757:179","prim@char":"4:12033:421","self::pattern":"1:11936:3236"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41755:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11941:3250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12255:28528":{"id":"1:12255:28528","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12039:1423","str::slice_mut_unchecked":"1:12256:28529","crate::ops::Index":"1:3052:2056"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12261:21117":{"id":"1:12261:21117","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43702:3262","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5525:29210":{"id":"5:5525:29210","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12263:20447":{"id":"1:12263:20447","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12262:20469"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43999:3275","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12245:316":{"id":"1:12245:316","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12246:315","`u8`":"4:12050:1526"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12280:2143":{"id":"1:12280:2143","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41757:179","prim@char":"4:12033:421","self::pattern":"1:11936:3236"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41755:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11941:3250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11941:3250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11956:3252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12284:25488":{"id":"1:12284:25488","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:11936:3236","`DoubleEndedIterator`":"1:7388:121","prim@char":"4:12033:421","str::split_whitespace":"1:12262:20469","str::rsplit":"1:12290:25491"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43716:3191","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11941:3250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12361:2996":{"id":"1:12361:2996","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4524:2996"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44024:2997","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5511:2924":{"id":"5:5511:2924","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11941:3250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12337:24881":{"id":"1:12337:24881","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12033:421","self::pattern":"1:11936:3236"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41755:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11941:3250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5514:29208":{"id":"5:5514:29208","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11941:3250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12314:28535":{"id":"1:12314:28535","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:11936:3236","`DoubleEndedIterator`":"1:7388:121","prim@char":"4:12033:421","str::matches":"1:12311:1871"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43938:3271","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11941:3250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11941:3250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11956:3252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"4:7892:130":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"6:6573:10331":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"4:1570:8737":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:30278:2740":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"6:4401:12934":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:2284:14867":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:22842:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:2876:2048":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"0:28:1667":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"1:41891:193":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"17:14522:20232":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:4550:12952":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:11173:16244":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"5:5366:9041":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:11021:3203":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"16:3049:14924":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:13259:19453":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:12829:3335":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"4:8502:8969":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"16:6901:15876":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:2845:2038":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:44490:122":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:47931:8416":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:47573:8404":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"16:2766:14914":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"4:4498:8914":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:40682:3093":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:46058:8468":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:44642:211":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"5:7211:2457":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"4:5563:8983":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"5:3581:2689":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:14156:20209":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:4483:12944":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:10962:16157":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:11845:16260":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"16:6721:15870":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"5:3669:2435":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"4:2362:2932":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"17:11074:16241":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:6732:2157":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"4:8881:8996":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"4:4638:27432":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:2812:1967":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"4:10837:27258":{"crate_id":4,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:43784:3268":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"4:10106:25339":{"crate_id":4,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"16:2321:14895":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:6869:21270":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"4:7025:2519":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"13:0:1893":{"crate_id":13,"path":["std_detect"],"kind":"module"},"18:113:20248":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:43604:2720":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"4:12054:1522":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"1:44137:3291":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"4:1776:8754":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"1:42187:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:21387:8815":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"5:6485:2435":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:47885:8465":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"4:7715:8710":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:14:1872":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:39419:2058":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"4:6899:2518":{"crate_id":4,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"5:1273:8733":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:45850:8430":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"4:6470:2025":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:21185:8379":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"6:4664:12961":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:40581:3103":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:4774:15540":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"7:79:14670":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:10316:16090":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"4:12036:1063":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"1:12007:3283":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"5:5362:9040":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:47075:8464":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:5955:13656":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:40276:2997":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:13906:20185":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"5:6439:2457":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"4:9485:8809":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"5:1442:2149":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"4:2405:1907":{"crate_id":4,"path":["std","io"],"kind":"module"},"14:0:1899":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"4:7528:15987":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"4:5620:206":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:44280:3296":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:1569:10380":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"4:7641:8815":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"1:44243:3295":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:6868:14088":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:40558:20992":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:4944:12992":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:42811:68":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"11:1818:2689":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:43716:3191":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:3234:2063":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:43766:3269":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:46805:8449":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:2829:2039":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:11639:16023":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:8097:15915":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:526:9481":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:10788:16200":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:47011:8409":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:41706:3124":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"16:7342:31214":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:4626:12958":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"5:1492:8726":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"11:1048:30719":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"18:766:20261":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:1638:10386":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:5920:13655":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:39516:201":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:13135:19444":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"4:7857:8809":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"15:288:14844":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:2178:16083":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"4:7133:25217":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"6:1495:10371":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"4:4001:8878":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:1667:1101":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"17:9701:16009":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:13611:20167":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"4:12048:755":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"1:39786:20747":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:12645:19412":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:42527:3157":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:9589:145":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"4:11606:25342":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"6:4413:12935":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:13188:19448":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"4:8462:8967":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"16:5743:15831":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"4:3186:27831":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"16:6968:15880":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"16:6513:15863":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"6:6067:13666":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:10461:3193":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"4:4745:8893":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"4:6599:2026":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"4:9478:129":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"17:13215:19450":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:8898:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"4:10538:8850":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:13085:19441":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:4129:2001":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"4:10085:8765":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:12123:18906":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:32257:2967":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:40601:3104":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:4497:15455":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"4:635:8705":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"18:582:2962":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"5:5318:2435":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:12737:2511":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:43058:21248":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"4:11370:24927":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"5:7365:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:2855:2040":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:11098:16215":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"5:6079:2463":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"4:8222:3191":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"17:13949:20188":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"4:9195:27556":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"17:11719:16026":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:5987:13659":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:9896:16038":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"4:11290:2532":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"11:285:2670":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:11062:2956":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:21709:3185":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:5994:13660":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:22644:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:13071:19440":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"11:97:30713":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"4:3222:8852":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"4:4136:25212":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:8154:15918":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"11:817:2673":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:2810:14916":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"11:667:8726":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"5:4348:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:149:2419":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:0:446":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"9:177:14797":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"11:1852:8739":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"4:8837:8987":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:12162:112":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:1911:10558":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"4:2495:8843":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:4463:12941":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"4:11613:14853":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:482:9476":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:10012:16008":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:40383:3063":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:11961:3251":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"4:8317:8912":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:10771:16175":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:14282:20214":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:45951:8395":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:12452:19403":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:22003:20615":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:14378:20222":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:22088:21435":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:30597:21604":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"16:6485:15861":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:7546:13171":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:9790:31685":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"4:8155:8857":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"1:43980:3267":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"16:5588:15822":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"4:8554:2689":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"4:2215:2494":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"17:9172:15999":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"9:0:1895":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:6083:14866":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:11971:18896":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:13739:20174":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"4:8199:3096":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"6:4291:12925":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:12373:19400":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:11215:16211":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"4:4741:8889":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:2247:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"5:1464:8723":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:40489:3096":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:12726:107":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"17:11788:16258":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"5:3568:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:6834:14085":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"5:2959:2212":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"4:7933:2691":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"5:1473:8724":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:5905:15836":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:9374:3155":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"5:5839:2457":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:41046:3073":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:13685:20171":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:10489:3194":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:43734:3195":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"4:7687:2527":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"17:2012:16089":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"4:8412:8966":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"6:4917:12989":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"4:6647:217":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"4:6430:1812":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"4:8900:8994":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"18:690:20265":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:8472:2128":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:5805:13647":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"5:7261:28279":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:2596:14907":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:2867:2041":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:44748:24025":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:21396:8378":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:13244:19452":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"4:8301:8902":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:13202:19449":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:43660:3261":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"16:5363:15817":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"4:11388:24812":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"14:202:9046":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"5:7231:28321":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:11678:3281":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"5:1523:8744":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:7313:3084":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:9365:112":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"4:3677:8865":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:12184:18910":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:1075:16051":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:10903:16161":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"4:10989:8988":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:8765:15990":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:9711:31503":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"5:3212:8737":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:11717:3280":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"5:7449:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"4:4035:8879":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"4:531:2496":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"10:44:14802":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"6:7558:13173":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:2156:595":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:11448:16014":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:7694:15903":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:8893:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:42265:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"18:564:20275":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:22875:2779":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"5:1426:2690":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"4:12045:756":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"1:9340:132":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"4:3995:8877":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"5:7282:2149":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:22545:175":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"6:4524:12949":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"4:5634:2508":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:4992:12998":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"5:782:2438":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:14469:20228":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:6279:15848":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:2969:117":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:2670:14910":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:1506:10373":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:14056:20198":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"5:4363:2466":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:5798:15833":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"5:3720:2691":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:44455:3247":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:41741:3126":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"16:7768:15907":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:11641:3279":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:2514:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"17:11272:16247":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"4:12038:1393":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"4:946:8730":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:1756:2711":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:39474:199":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:3315:14927":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"5:7245:2149":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:4824:12979":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:5575:3089":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:4243:1981":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"11:1103:14812":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:10575:16143":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"16:4527:15461":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"6:6589:9360":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:7613:15899":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"4:8571:8972":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:43920:3270":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"6:4685:12962":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"5:4164:2463":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:10980:16008":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:5976:3114":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"18:614:31923":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:12531:19406":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:12543:19407":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:22710:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"4:7730:8711":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"4:8560:8971":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"1:43838:3189":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:5051:13003":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"4:3224:8853":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"4:915:8726":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"4:2885:2504":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:3632:2149":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"4:4045:8880":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"4:9030:25322":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"4:3502:3029":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"11:657:2149":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:48080:8363":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:5836:13650":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:11507:16017":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"4:3943:8873":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"4:8209:3110":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"4:11215:24984":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"5:2035:2691":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"4:8216:3262":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"17:12737:19419":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"4:10798:8810":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:46470:21421":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:9629:3172":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:7346:134":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"4:8993:8687":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:4365:1989":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:5866:15835":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:11473:16015":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:12911:19429":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:46181:8442":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:41604:3121":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"4:9103:167":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:12606:3330":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:6796:14082":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:3919:2463":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"6:4368:12930":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:14118:20205":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:12581:192":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:2834:2036":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:10227:16086":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:8686:15988":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"11:1822:2149":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:9650:16008":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:6560:2422":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:12111:18905":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:11573:16020":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"0:29:1673":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"1:44706:161":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:5995:15840":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:14296:20215":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:20780:21273":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"17:9070:15819":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"5:3330:2476":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:10370:16082":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"4:10828:2701":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:9376:3156":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:6687:15869":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:5015:13000":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:7575:13175":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"5:7438:2472":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:13710:20172":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:4:1028":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"17:10646:16194":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:12790:19423":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:48091:8364":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:4606:12956":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:9564:16006":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"4:4636:27430":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"5:6930:2489":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"4:11053:2531":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:11815:16259":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:12519:136":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"17:14346:20220":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:554:9485":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:2820:2955":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"1:12554:21955":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:46349:8414":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:14110:20204":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:1821:1999":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"4:5129:191":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"4:10535:8854":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"6:6820:14084":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:2839:2035":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"16:2548:14905":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:11124:16213":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"5:0:287":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:12711:19417":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:12098:18904":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:13826:20178":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:14536:20233":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:9998:16046":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:11710:16025":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:42109:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"11:630:2689":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:43251:3233":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:21270:8377":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:11896:2773":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"16:4835:15553":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:9350:15970":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:5767:13643":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:1702:8899":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:7554:15896":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"4:4318:8909":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:12698:19416":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"5:7382:8788":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"4:9023:25297":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"18:727:20267":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"4:7642:8701":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:13966:20189":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:39494:202":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:11936:3236":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"5:2962:28288":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:40246:3025":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:3232:14926":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"4:3937:8874":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:44467:3243":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"4:8361:8891":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:10410:16102":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:11316:16239":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:44151:3292":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:4389:12933":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:6618:14075":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"4:5432:8980":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"1:10503:3190":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:43674:3260":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:4770:21017":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:11991:18897":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"16:7862:15911":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:10478:16135":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:30525:68":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:1696:10392":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:7534:15894":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"11:1517:2682":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:7599:14646":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:582:15987":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:2772:228":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"5:5975:2695":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:2150:16124":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"4:6074:2509":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"4:10254:8990":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:2755:220":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:4098:2000":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:14033:20196":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:2763:1995":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"6:7523:13168":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"16:6376:15854":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:21055:8387":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"6:5799:13646":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"4:2364:8793":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:2993:1968":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:10456:16109":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:45726:8393":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"4:6543:2021":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:40397:3038":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"typedef"},"1:44328:3254":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:44294:3297":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:9607:16007":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:7513:15892":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:1500:10372":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:10030:222":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:7586:13176":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:43686:3264":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:2767:109":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"5:2131:2454":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"4:10104:2704":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:10588:16144":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"5:1011:2435":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:22185:21425":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"4:12058:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"1:44443:3246":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"4:8003:25302":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"18:599:31919":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:6671:10501":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:1520:10375":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:30503:2929":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:20810:21683":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"5:207:2433":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:6467:15860":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"16:6792:15872":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"4:6150:2511":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"16:3915:14993":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"5:1288:2677":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:4729:12967":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:10036:16052":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"4:6613:2027":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"4:12037:313":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"1:40291:3019":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"6:6607:14074":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:46040:8462":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:256:31637":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:4842:12981":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:11466:3182":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"18:624:31916":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:400:15985":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"5:6955:2493":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:10468:16140":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:46887:8397":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:9828:2499":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"6:4833:12980":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:10265:16085":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:10084:16045":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"4:6983:28157":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"11:1121:8734":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:8578:3250":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"4:10950:25288":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"4:8290:8910":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"4:586:8702":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:11281:16238":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:10397:16136":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:6261:15847":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:7802:2998":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:40812:3110":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"18:538:20274":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:5673:15827":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"4:12015:24888":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:62:9104":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:43011:3174":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:8471:2129":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:42851:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"6:4740:12968":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:7492:15890":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:11910:18893":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"4:6814:9003":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"11:2168:30714":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:2817:106":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:10112:16072":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:10637:16148":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"16:7568:15897":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:46775:8443":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"4:4476:8913":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"15:306:14845":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"4:4626:8878":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"5:629:28307":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:40540:3099":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"4:5784:2017":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:11617:16022":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"5:7545:2480":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:43595:3198":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:9277:16002":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"5:7337:8721":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:12970:19433":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:7462:15888":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"16:7884:15912":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:7295:14459":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:48034:8359":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"16:7582:15898":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"4:9043:15884":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:2450:14901":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"10:0:1896":{"crate_id":10,"path":["adler"],"kind":"module"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:9382:3158":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:8294:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"4:6546:2022":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:10240:16054":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:10561:16107":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"16:6818:15873":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"10:36:30703":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"4:8929:8995":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:3228:135":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:4543:12951":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:4984:12997":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:7792:15909":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:653:9538":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"5:1302:8734":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:42786:22255":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"6:1733:10395":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"4:0:1415":{"crate_id":4,"path":["std"],"kind":"module"},"17:13922:20187":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"5:7191:2149":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"4:12053:1525":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"4:5757:2016":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"4:6301:206":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"11:2049:2677":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:22776:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:14076:20200":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:12074:18902":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"4:6443:1813":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"17:9972:16048":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:9207:16000":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:5816:30833":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:6136:12842":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:14083:20201":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:11235:16246":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:13567:20165":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"4:1837:2290":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"17:13758:20158":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:7651:15901":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"4:9137:8819":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"1:31101:2962":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"4:8485:8968":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:7360:31185":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"8:0:1894":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:5712:15829":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:21721:21276":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:13422:20160":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:40658:3108":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:44305:3298":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:6332:15850":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:12778:19422":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:4489:12945":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:6720:14078":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:7278:14458":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:7006:15881":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"4:4822:8888":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"4:4907:8938":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"16:6156:15843":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:9370:120":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"17:12473:16201":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:2250:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"4:904:2476":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"6:5829:13649":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:2904:2050":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:10023:16009":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:6226:15845":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"4:7925:8844":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:2530:237":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"17:11761:16028":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:40268:3017":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:6156:13695":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:547:9484":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:11048:16228":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"16:6879:15875":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:9061:21684":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:4973:12996":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:2574:14906":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:44015:3018":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"4:12044:652":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"4:12043:650":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"1:3498:2457":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"16:6346:15851":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"5:1138:28301":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:13890:20183":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"9:357:14708":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:4854:12983":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:2765:226":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:13101:19442":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:4421:1992":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:10420:3196":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:6036:13665":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"5:1482:8725":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"4:356:8699":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"14:160:14820":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"4:3739:8869":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"11:723:8723":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:2305:14894":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"11:798:8728":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:41840:2125":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"4:12032:950":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"6:595:9491":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"4:4049:8881":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"11:311:30704":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:8195:15921":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:5882:13652":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:4794:12975":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"4:5241:190":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"1:40610:3090":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:6916:3067":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:1630:594":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"5:276:1973":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:8659:15968":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:43692:3263":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:10020:8815":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:41806:2148":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"6:1603:10384":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:10661:16195":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:14068:20199":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:4535:12950":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"4:4640:27434":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:39372:2067":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"17:10507:16111":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:4436:12938":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:41899:210":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"6:4800:12976":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"4:9118:9000":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"4:10532:8852":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"5:4032:2435":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:45981:8401":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:5818:13648":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"18:644:31912":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"4:8544:8970":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"17:12598:19410":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:46151:8436":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:41831:2149":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:48025:8358":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"4:12049:751":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"11:844:8731":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"5:4002:2457":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:11950:3253":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"11:2174:24317":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:4678:8872":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:13973:20190":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"16:7128:15884":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:21833:8376":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:46729:8437":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:1527:10376":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:12136:18907":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:13040:19438":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"11:2060:8733":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:14042:20197":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"4:11982:24976":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:41670:21492":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"4:9108:218":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:6189:31186":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:46297:8402":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:11393:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:500:9479":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"4:4238:8908":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:46395:8469":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:9445:16004":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:12208:18912":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:41079:3080":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"16:4949:15571":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:1595:10383":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:20808:21678":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"4:2572:2499":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"16:6386:15855":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:13024:19437":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:14090:20202":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"11:2194:30717":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"16:7722:15905":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:48007:8471":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:21617:8389":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"17:12196:18911":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"5:261:2435":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:2269:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"4:8945:8998":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:43494:3188":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:5737:13581":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:11886:18892":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:14355:20221":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:22112:2776":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:2933:14921":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:5849:13609":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:7564:13174":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:7609:14647":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"5:4234:2689":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"5:822:2441":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:44463:3242":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"4:3520:8813":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"6:4518:12948":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"4:12040:1507":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"4:3844:8870":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"11:695:8727":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:46571:21443":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:9823:16034":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:13816:20177":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:7660:15902":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:6821:3095":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:22139:22247":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:10698:16176":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"11:1012:8733":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:43938:3271":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"4:8235:8867":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:39434:200":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"4:3973:8875":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:6425:15858":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:3268:1996":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:2871:2043":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:8072:15914":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:44348:3255":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:44008:3274":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"16:5982:15839":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:41650:22246":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"16:4641:15479":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:488:9477":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"5:4194:2463":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"11:760:2476":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:22251:2777":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:2597:116":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"17:10685:16154":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:45796:8394":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"4:3511:27330":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:11337:16250":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"4:8283:3124":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"11:749:2457":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"11:986:2677":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"4:3183:25186":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"16:2406:14899":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"4:5396:8978":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"1:4796:807":{"crate_id":1,"path":["core","iter"],"kind":"module"},"6:4650:12960":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:4770:12972":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:13632:20168":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"4:10959:8982":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:9137:15974":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:2722:14912":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:11000:16164":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:10382:3195":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:11661:15972":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"9:426:14694":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:46965:8403":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"16:5017:15591":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"16:5661:15826":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:4556:12953":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:46105:8372":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"4:12034:1542":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"4:11382:25216":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:41030:23608":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"6:4723:12966":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:562:9486":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:5121:15623":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:43569:3086":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"16:6204:15844":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"5:2223:29448":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:40590:3113":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"16:6171:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:5384:15818":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:43543:3201":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"14:187:14828":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:4374:12931":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"4:11197:8819":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:9066:23705":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:2359:14897":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"4:12052:1524":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"16:7436:15887":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:13575:20166":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:4938:12991":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:21831:8815":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:11244:16022":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"6:5044:13002":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:2322:125":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"5:3800:2476":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:39599:2977":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"6:4872:12985":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:39333:2068":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:3764:14938":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"5:1503:8727":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:21132:8383":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"4:11594:9017":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"1:7125:1980":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"6:5900:13654":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:6841:14086":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:12685:19415":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:568:9487":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:4908:12988":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"11:1611:2429":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"11:736:8724":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"16:7782:15908":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:40502:2707":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:47823:8444":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:40303:3020":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"4:8118:8811":{"crate_id":4,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"16:7054:31157":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:43266:21101":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:6044:30354":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"4:1576:8738":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"18:660:20262":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:10547:16142":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:13113:19443":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:41061:2549":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"16:4344:15374":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:2824:2034":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"6:4764:12971":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"4:11355:24969":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:4568:12954":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:5058:13004":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:22512:178":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:2851:2037":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:20825:21680":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:41755:181":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"17:10520:16141":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"5:4846:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:40232:3023":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:9617:31515":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"5:2243:29372":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:44315:3299":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:6077:13667":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"5:7221:2447":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:2526:238":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"16:3065:14925":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"5:3594:2690":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:44693:3333":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:43999:3275":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:43443:23612":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:22124:21535":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:21099:8388":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"18:681:20264":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"5:7425:8787":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:6154:3091":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:10347:3205":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:21612:8381":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:9762:31523":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:11482:3184":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:13667:20169":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:40440:3062":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:42148:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:43512:2717":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"4:2558:2501":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:22230:24018":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"4:9205:27548":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"16:7597:31007":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:3888:14990":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:2766:225":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"18:80:20246":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:6160:24013":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"4:8805:8985":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"17:9867:16036":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"4:10744:8942":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:10270:3204":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"4:12051:1523":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"17:12496:19404":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"5:2690:29310":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"15:327:14849":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:1690:10391":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"18:521:20269":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:11872:16261":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"19:0:1045":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:50027:8391":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"4:7869:8810":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"16:4462:15444":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:43066:21249":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"9:486:14691":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"4:8394:8952":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:42774:110":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"16:8181:15920":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:4862:15556":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"11:968:8732":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:11407:16013":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:40672:3109":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"5:1257:8732":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"3:0:1892":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:22164:21431":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"4:7377:27333":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"16:3830:14956":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:12576:19409":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"11:1027:14811":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:14448:20226":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:2777:1994":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"4:8823:8986":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"4:48:1581":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"16:2864:14918":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:13851:20180":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"4:10473:2526":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"4:8968:2018":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:2317:188":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:6711:14077":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:11941:3250":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:32293:24185":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"5:676:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:2608:128":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"4:12033:421":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"18:652:31912":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"16:7269:31153":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:48144:8367":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:4787:12974":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:40530:3098":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"4:10808:130":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"6:4328:12928":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:10420:16137":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:6041:15842":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:14013:20194":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:10383:16081":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"13:226:30766":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:4428:12937":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:3600:14929":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"14:221:14830":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:14460:20227":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:13274:16025":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"14:7:14820":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:42756:68":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"5:7199:8741":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:3240:2065":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:12293:18918":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:11535:16018":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:44523:3307":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"5:7253:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:21218:8373":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"5:7290:2149":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:13778:16053":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:1637:2907":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:2762:1966":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"4:3189:27842":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"18:699:20266":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"7:0:1570":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:504:15986":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:44723:3338":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:1545:10378":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:10430:16138":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:1513:10374":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:6960:15879":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:2918:2053":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"11:0:1897":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:41942:2689":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:12532:151":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"4:929:8729":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:1649:10387":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:6775:14081":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:5068:13005":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:9581:141":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:45880:8435":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:532:9482":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:12997:19435":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"4:10578:2527":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:1918:2714":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:44632:205":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"4:11453:2534":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:41950:2690":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:48054:8361":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:12810:19424":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:9752:16010":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:8281:15924":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:40623:3105":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:43702:3262":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"4:2594:8836":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:9660:31451":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"4:11036:2529":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"4:10971:24903":{"crate_id":4,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:40204:3024":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:11367:16216":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"16:6415:15857":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"4:9156:9002":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:4862:12984":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"4:502:2454":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:3034:2066":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:43614:3199":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:40195:3001":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:40189:2997":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:47225:8398":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"15:394:14856":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"4:1761:617":{"crate_id":4,"path":["std","env"],"kind":"module"},"4:7764:8773":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:11162:16208":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"4:1426:144":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"6:5793:13645":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"11:1501:14813":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:6742:14838":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"4:12004:8712":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:22056:21545":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"4:7917:25295":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"14:31:14820":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"5:1776:2476":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:2898:2049":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:4417:15423":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:4590:3010":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:9886:16037":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:1557:10379":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:47431:8432":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"11:644:2690":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:44168:3293":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:12876:19427":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:12621:19411":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:47683:8438":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:4613:15475":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:40336:3016":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:4949:12993":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:41958:2149":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:1733:2958":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"4:11517:8868":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:45920:8447":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:10309:3192":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"5:5954:2013":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:6171:13696":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:20795:21273":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"6:1681:10390":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:536:30819":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:6705:14076":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"4:8246:8864":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"17:14420:20224":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:22611:177":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"4:6166:2514":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"12:0:1898":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:39560:2059":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:4394:1991":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:4745:15535":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:20827:21682":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"4:8178:8814":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"1:42384:2014":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"4:4057:8883":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"18:590:24026":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:12846:19426":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:3441:16163":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"11:1838:8737":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:9843:2559":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"4:8867:8999":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:1590:10382":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:45706:8428":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"16:7828:15910":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"4:555:2698":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"4:12047:754":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"17:14024:20195":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:4963:12995":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:41992:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:4506:12947":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"9:507:14695":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:7441:1971":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"6:1709:10393":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:434:14869":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"4:8875:2149":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:1747:22244":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:13298:19455":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"4:1927:663":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"1:2922:2054":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:2910:2051":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:7284:2125":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"4:12050:1526":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"18:671:20263":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:0:1901":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:6753:15871":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"5:5923:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:5877:13651":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:41693:3123":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"4:8859:2689":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"4:9078:24924":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:7250:9436":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"4:12031:374":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"4:8008:25326":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"1:7809:3083":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:1663:10388":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:4810:12977":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:26132:2775":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:2359:189":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"4:8013:8846":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:11701:3278":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:8794:15991":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:11351:16251":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:9390:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"4:10946:8773":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:13723:20173":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:10278:16084":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:4806:15548":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:10750:16155":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"11:399:30707":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:7067:30998":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"4:1839:2699":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"5:3204:8739":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:12062:18901":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"4:7862:8806":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:4304:12926":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:10949:16156":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:12422:19401":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:47041:8415":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"4:8229:3265":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"1:45902:8441":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"4:2378:8797":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"5:35:2431":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:6625:8943":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"4:4799:2505":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:1013:1811":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"4:4570:8931":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:11261:16237":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:1544:2463":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:4171:1809":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"4:5750:2015":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"4:11816:2538":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:8239:15923":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:39450:198":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"17:14324:20218":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"5:1514:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:10447:16110":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:48045:8360":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:11327:16249":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:3983:21819":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"4:837:2689":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:7474:15889":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:11306:16025":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:14173:20211":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"4:7852:8808":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"6:6015:13662":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"4:2634:8845":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"11:2180:30706":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:4716:12965":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:4315:12927":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:5863:13610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:13792:20175":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:9531:31854":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:3253:21407":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"4:1582:8739":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:3461:14928":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"5:4985:2463":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:42031:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"5:2049:2694":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"4:8811:186":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"5:5128:2013":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"4:6253:2507":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"4:11476:8869":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:10929:16160":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"0:31:1674":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"1:2809:2979":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"17:10494:16113":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:2815:2888":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"16:5963:15838":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:12671:19414":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"18:531:20273":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:21284:8378":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:4310:1987":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:11358:16252":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"4:11178:3305":{"crate_id":4,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:12658:19413":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:40367:21533":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:12750:19420":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:0:501":{"crate_id":1,"path":["core"],"kind":"module"},"4:4174:8906":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:43582:3200":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"4:8309:8867":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:44685:3332":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:4887:12986":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"5:6788:2486":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"4:3301:8850":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"4:2390:8803":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"4:10430:8985":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:2893:2047":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:10738:16199":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:6929:15878":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"14:165:14821":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:9811:2554":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:12267:18916":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"14:40:18894":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:13802:20176":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"4:643:8707":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:3305:1998":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:32297:15923":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"1:46021:8413":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"5:1411:2689":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:7540:13170":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:5088:15614":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:6844:15874":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:4496:12946":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:234:210":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:30539:21484":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:2478:2739":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:13868:20181":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:10292:16008":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:8167:15919":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:7846:21721":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:40256:3026":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"18:755:20268":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:41587:3120":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:541:9483":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:31073:183":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"17:11934:18894":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"4:9981:21489":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"4:1558:2149":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"4:11620:14853":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:9912:16039":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:21202:8815":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:7309:3085":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"4:4916:8939":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"6:4638:12959":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:46251:8396":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"16:2969:14922":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:2859:2044":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:13286:19454":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:12959:19432":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:10214:16087":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:12513:19405":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:32405:2982":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:7529:13169":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:506:9480":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"4:2212:8789":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"17:13055:19439":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"5:7396:21533":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:5890:13653":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"4:9057:24892":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:11389:16012":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:6944:31005":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:4030:3000":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"16:6893:30825":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:5080:13007":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:12934:19430":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:6401:15856":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:10178:2689":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"4:10342:2705":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:261:31673":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:13554:20164":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:2644:14909":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"5:3735:2694":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"4:6361:166":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"4:7741:8736":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"6:7517:13167":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:7805:3082":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:40826:3111":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:9624:3171":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:4239:207":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"17:10534:16112":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:2380:14898":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:7391:15886":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:9051:15969":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"9:393:14693":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:12043:18900":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:14308:20216":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:45750:8429":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"5:5769:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:21363:8815":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:12305:18919":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:6565:9526":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:13676:20170":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:9745:2551":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"4:2920:210":{"crate_id":4,"path":["std","io","error","Result"],"kind":"typedef"},"4:4704:8913":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:8926:15995":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:48159:8368":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"16:7015:15882":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"4:7539:25275":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:4380:12932":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:14499:20230":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"6:6688:10499":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:7090:31130":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"4:3113:8858":{"crate_id":4,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"4:3389:3075":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"16:6017:15841":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"4:11047:2530":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"4:9173:25290":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"4:1778:8755":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"16:5322:15800":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:10616:16146":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"4:11340:24882":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:2696:14911":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"4:5501:8982":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"1:48065:8362":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:2649:2972":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"5:7412:8786":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:42506:3155":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:40840:3112":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:40430:2542":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:13451:20161":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:46003:8407":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:10165:16075":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"6:7463:14618":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:10440:16139":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"16:5760:15832":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:7503:15891":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"4:3463:2700":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:8050:15913":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"16:7708:15904":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"18:96:20247":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"4:4187:8907":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:11490:16016":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"4:1064:8733":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"16:8134:15917":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:43884:3273":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"4:2922:128":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"4:10818:119":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:8473:2127":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:13693:20159":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:11752:3204":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:6268:31156":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:9488:31884":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:2339:14896":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"4:9113:219":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"9:52:14711":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:4557:15467":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:40460:3086":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"0:0:1667":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"11:1068:2679":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"4:5829:2024":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:11111:16214":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:2927:2055":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:7736:15906":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"16:2788:14915":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:20961:8815":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"4:3346:8840":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"4:1554:2689":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:14163:20210":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:11496:3256":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"14:215:14829":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:4848:12982":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:5574:15821":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:12945:19431":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:9852:16035":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:10672:16196":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:3232:16158":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:40549:3100":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:13162:19446":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"4:5566:8984":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"17:12724:19418":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:41564:155":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:10603:16145":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:14134:20207":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:42070:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"11:365:2427":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:14100:20203":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"4:10846:27250":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:6130:13694":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:11381:16253":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"5:3178:8738":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"16:5419:15820":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"4:11158:8987":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:7272:14457":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:8848:15993":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:11062:16240":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"4:6198:25273":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:43522:3197":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:11547:16019":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:4695:12963":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"5:895:2689":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:43503:3187":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"5:7463:9047":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"4:850:2690":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"4:10325:8981":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"4:481:2495":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"4:5416:8979":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"17:9985:16047":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"5:6769:2474":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:9574:31664":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"16:5648:15825":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:14126:20206":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"4:6434:2019":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"4:5083:25294":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"4:919:8727":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:7511:13166":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:40310:3021":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"4:1041:8732":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"5:1102:28304":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:13981:20191":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"11:2033:8732":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:32311:1988":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"17:11151:16243":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"4:11307:25298":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"4:1587:8740":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:32304:23994":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"16:4719:15533":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"4:12046:753":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"4:12056:1580":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"18:574:31912":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:4456:12940":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:5979:13658":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"5:2461:2684":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"16:5403:15819":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:44459:3248":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"4:9035:25344":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"18:736:20260":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"11:1831:2476":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:43036:145":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:4420:12936":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"5:7349:8722":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"4:11170:27256":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:14514:20231":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"4:12057:1146":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"17:8978:15997":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:21011:21061":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"16:5939:15837":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:11201:16209":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"4:3742:8868":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:12774:140":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:2863:2042":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:5025:13001":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:42802:71":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"6:579:9489":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:10197:16101":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:43866:3272":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:40520:3097":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"18:515:20272":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:119:9158":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"4:868:8723":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:39538:203":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"4:7579:2521":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"4:10763:27415":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"18:719:20259":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"11:2201:8721":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:474:9475":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:7505:13165":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"18:491:31927":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:6583:15867":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"11:805:8729":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"4:910:8725":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:42829:128":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:4374:1990":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"4:362:8700":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:41967:183":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"4:1565:2476":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"16:6915:15877":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:40350:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:10227:3191":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"16:6243:15846":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:10340:16088":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"4:3527:8834":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"1:44439:3244":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:22237:2780":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:12830:19425":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:4818:12978":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:4929:12990":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:6028:13664":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:6008:13661":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:2168:2942":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:7350:152":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"4:11144:8986":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"4:7909:119":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"4:1920:8784":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"1:30509:2930":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"4:5052:25294":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:4986:15584":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:7621:15900":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:2166:2941":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"4:7661:8691":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"1:46419:8470":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:44451:3249":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"5:6558:2149":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:40572:3102":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"16:5612:15823":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"4:3417:2463":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"6:6744:14080":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"4:7736:8735":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:43048:8967":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"16:7677:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:2523:133":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"16:7523:15893":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:44511:3306":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:6598:14073":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:4475:12943":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:2428:14900":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:46548:21605":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"5:3183:28316":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:20963:8380":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:0:1902":{"crate_id":17,"path":["object"],"kind":"module"},"16:5696:15828":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:44024:2997":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:46203:8448":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"13:110:30765":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:13989:20192":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:14478:20229":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"5:2960:28289":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"4:4166:8905":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:46327:8408":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"4:619:8703":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"16:5727:15830":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"11:1845:8738":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"4:1982:184":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:5074:13006":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:12554:19408":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"16:4053:15107":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:2881:14919":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"4:1891:8783":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"4:9000:24929":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:41823:2690":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"4:8146:3070":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"5:2970:28293":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:9372:16003":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:12888:19428":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:40355:3064":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:39613:2992":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:46517:21548":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:10475:3189":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:13914:20186":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:4320:1988":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:41023:3071":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"4:4965:8948":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"4:1979:185":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"4:3987:8876":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:43532:2719":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"18:481:20270":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:9455:31663":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"4:3303:8851":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:22743:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:10714:16197":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"4:5975:2507":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:11956:3252":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:43990:3266":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"4:11313:8991":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:3052:2056":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"17:10186:16076":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"4:8335:8941":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:41873:2126":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:43820:3193":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:4921:15567":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:6165:2548":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:10059:16050":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:10988:3202":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"16:6696:14839":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:21146:2941":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:22809:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"4:7748:8772":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"6:494:9478":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"5:1672:2435":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"4:1055:2677":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"4:11999:27345":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:6352:15852":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:1536:10377":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:2618:14908":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:2477:8815":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"4:860:2149":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:4585:15471":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:2832:14917":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:3213:2061":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:11023:16162":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"5:5612:2474":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:41815:2689":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"4:12039:1423":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"1:40317:3022":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:12024:18899":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:11951:18895":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"6:4955:12994":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:14401:20223":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:3995:21755":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:11226:16245":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"4:11234:9000":{"crate_id":4,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"4:414:165":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:6456:15859":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"4:12055:801":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"16:2744:14913":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:14145:20208":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:0:830":{"crate_id":6,"path":["libc"],"kind":"module"},"5:3238:8740":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"16:2907:14920":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"4:1814:8765":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"1:42306:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"4:4701:8940":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:45818:8400":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:587:9490":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"5:4426:2466":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"11:1858:8740":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:9330:3029":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:9384:3159":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:3389:69":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"17:8713:15989":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:4704:12964":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:3056:2057":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:5634:15824":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"9:450:14692":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:13546:20163":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"11:119:2423":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:2888:2046":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:2353:182":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"17:13897:20184":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"4:940:2673":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:10202:2690":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"4:8241:8866":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"4:3262:8854":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"11:2186:30716":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:14316:20217":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"4:4743:8892":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"4:724:142":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:40511:3088":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:41621:3122":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:12007:18898":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:14221:20212":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:22677:2778":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:3003:1817":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"11:1538:14814":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"9:237:8967":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"4:8166:2701":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"1:41052:3075":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"4:5991:206":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:5517:3101":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"4:4158:8904":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:3032:14923":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:9959:16049":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"4:10768:27557":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"16:6531:15864":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:4007:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"16:7544:15895":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:9921:16064":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"11:836:8730":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:3655:14930":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"18:0:1903":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:4395:12776":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"4:638:8706":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:13838:20179":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:45772:8434":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"5:2966:28294":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:13148:19445":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"5:4393:2463":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:3000:1970":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:48106:8365":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"18:609:31924":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"16:6545:15865":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:41037:1812":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:2209:16108":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:41071:3078":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:22147:21598":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:2520:149":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"17:10126:16073":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"17:10366:16095":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:43270:3209":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:21368:8374":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"16:2472:14902":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:1575:10381":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:9378:3157":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:9933:16058":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:6648:10516":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:12252:18915":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:44650:195":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"5:2170:29411":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:48221:8370":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"5:2141:28328":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:10628:16147":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"6:4748:12969":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:4754:12970":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"4:8339:8943":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:30703:21597":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"4:9490:2525":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:2982:1997":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:21394:8384":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:42345:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:44735:3336":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"17:12237:18914":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:42226:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:47761:8410":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:3565:16181":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"5:3217:28320":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:1717:10394":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"4:8851:8988":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"16:6600:15868":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"6:4469:12942":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"5:3171:2689":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:6726:14079":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:1673:10389":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:573:9488":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"4:1073:8734":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:14001:20193":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"4:2210:129":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"4:1561:2457":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:42513:3154":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"5:6886:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:21013:2941":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:41729:3125":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:22578:176":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:43970:3265":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"17:10139:16074":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:11586:16021":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"16:7041:31138":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"4:5382:8977":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"5:6306:9004":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:22072:23707":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:23322:2774":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:42520:3156":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"4:5447:8981":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"6:4616:12957":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"4:7666:8693":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"4:3264:8855":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:9521:16005":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:21950:20618":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"4:7768:24185":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"1:44122:3290":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:9328:3262":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:44033:3017":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"11:1826:2457":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:4781:12973":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:12172:18909":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:48129:8366":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"4:952:8731":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:7552:13172":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:22263:2781":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"18:707:3253":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:11742:16027":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:4879:1015":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:20767:2962":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:5967:13657":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:12983:19434":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"5:878:2443":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"4:2219:8790":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"17:13228:19451":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"4:8987:107":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:44471:3305":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"4:4390:8903":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:11137:16212":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:48182:8369":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:10726:16198":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:40642:3107":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:6361:15853":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"5:7182:8742":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:4248:1982":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:44435:3241":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"1:5457:2463":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"16:7318:15885":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:13174:19447":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"18:636:31911":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:9945:16054":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:123:9159":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:4895:12987":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:44216:3294":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"11:793:8725":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:11295:16248":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:13876:20182":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"4:10773:8806":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:5369:2463":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:11086:16242":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:21264:8375":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"16:2504:14903":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:6850:14087":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:3150:2060":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:21:691":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"1:30469:2928":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"4:11538:8870":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:9780:16011":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:1631:10385":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:12154:18908":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:20999:8382":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"17:9102:15973":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:47969:8450":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:8825:15992":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:5008:12999":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"7:32:14663":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:43019:23665":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:5775:13644":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:7388:121":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"4:8982:25319":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:46373:8463":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:2517:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"16:8205:15922":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:43624:2721":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:12765:19421":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:4446:12939":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:39592:2062":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:9003:15998":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:7497:159":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:32318:2976":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"5:6798:2488":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"11:403:30708":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"4:3445:8812":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"17:9242:16001":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"4:923:8728":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:11687:16024":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:12225:18913":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:13010:19436":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:3797:14947":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"5:7529:2476":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:44447:3245":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"5:7474:9048":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"16:7102:15883":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:13487:20162":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:11191:16023":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:6805:14083":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:12465:16203":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:12280:18917":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:10916:16159":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"4:7598:2523":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"4:9285:2290":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:12086:18903":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"18:507:31912":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:4749:391":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:40480:3087":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"11:332:2425":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"4:881:8724":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:40216:21495":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"4:5627:2507":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:2997:1969":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"17:9086:15820":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:6499:15862":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"5:1118:2683":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:22201:21544":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"5:6637:2435":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"4:5309:120":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"4:10786:24911":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"16:6569:15866":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:14269:20213":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:7065:3070":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:9380:194":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:44100:3289":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:4587:12955":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:8594:15971":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:5435:31136":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:40633:3106":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:1184:16059":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:8115:15916":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:14335:20219":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:6022:13663":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:4889:15559":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:14434:20225":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:40284:3018":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"4:8295:8911":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:10097:16044":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:41882:2219":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:43027:3173":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"4:894:2457":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:21262:8815":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:2914:2052":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:12437:19402":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:3223:234":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:8953:15996":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:2883:2045":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"4:2380:8798":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"16:5830:15834":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"15:0:1900":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:7359:1972":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:42746:22248":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:9372:3154":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"4:8913:8997":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"5:4074:2690":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:2526:14904":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"4:7879:8807":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"9:330:14748":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:12484:16202":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"16:6318:15849":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"4:10164:25351":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:8895:15994":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:46651:8431":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:4341:12929":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:5049:15599":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}