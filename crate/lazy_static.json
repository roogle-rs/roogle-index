{"root":"0:0:1543","crate_version":"1.4.0","includes_private":false,"index":{"1:3191:205":{"id":"1:3191:205","crate_id":1,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6087:3023":{"id":"5:6087:3023","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8341:201"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13245:55042":{"id":"1:13245:55042","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12826:2361","prim@char":"4:15735:1700","`DoubleEndedIterator`":"1:8323:116","str::split":"4:15741:1705"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"1:49157:2665","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12836:2362","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12836:2362","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12851:2365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5821:3325":{"id":"5:5821:3325","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5823:167","5:5824:14219"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3316:1919":{"id":"1:3316:1919","crate_id":1,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3318:167","1:3319:340"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3425:126":{"id":"1:3425:126","crate_id":1,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3427:360"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"1:3428:127","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:5705:2960":{"id":"4:5705:2960","crate_id":4,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5706:53278"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13222:52151":{"id":"1:13222:52151","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:15735:1700","self::pattern":"1:12826:2361"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12836:2362","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3252:1911":{"id":"1:3252:1911","crate_id":1,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3254:167","1:3255:1326"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2776:94":{"id":"1:2776:94","crate_id":1,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2778:1690"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3184:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:3311:1918":{"id":"1:3311:1918","crate_id":1,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3313:167","1:3314:337"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3350:1927":{"id":"1:3350:1927","crate_id":1,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3352:1208"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10129:2411":{"id":"1:10129:2411","crate_id":1,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10130:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13214:2730":{"id":"1:13214:2730","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:15735:1700"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"1:49109:2690","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:1075:3044":{"id":"4:1075:3044","crate_id":4,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:1076:2086","4:1077:2915","4:1078:53925","4:1079:53926","4:1080:53927","4:1081:53928","4:1082:53929"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13190:771":{"id":"1:13190:771","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:15735:1700"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13212:55032":{"id":"1:13212:55032","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"4:15741:1705"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13278:57019":{"id":"1:13278:57019","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6073:57667":{"id":"5:6073:57667","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8341:201"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3327:1922":{"id":"1:3327:1922","crate_id":1,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3329:167","1:3330:1207"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:22788:28162":{"id":"1:22788:28162","crate_id":1,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:22789:52037","1:22790:52038","1:22791:52039"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22781:2304","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3341:1925":{"id":"1:3341:1925","crate_id":1,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3343:341"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13198:53903":{"id":"1:13198:53903","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12297:2870"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6345:2917":{"id":"4:6345:2917","crate_id":4,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6346:3288","4:6347:3289","4:6348:53655","4:6349:56346","4:6351:56350","4:6353:56347","4:6354:56348","4:6356:56349"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10442:2304","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13201:55013":{"id":"1:13201:55013","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:15752:1714"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5693:2952":{"id":"4:5693:2952","crate_id":4,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5694:53285"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13295:55048":{"id":"1:13295:55048","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:15735:1700","self::pattern":"1:12826:2361"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12836:2362","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12836:2362","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12851:2365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3646:1934":{"id":"1:3646:1934","crate_id":1,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3648:50175"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:41:1550":{"id":"0:41:1550","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[213,0],"end":[215,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["lazy",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"LazyStatic","id":"0:39:1549","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"1:3088:213":{"id":"1:3088:213","crate_id":1,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3090:123","1:3091:1385"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3268:1910":{"id":"1:3268:1910","crate_id":1,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3270:167","1:3271:1081"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13217:14095":{"id":"1:13217:14095","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"4:15741:1705"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"1:49413:2707","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:4899:2936":{"id":"4:4899:2936","crate_id":4,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4900:2546","4:4901:56148"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3278:1912":{"id":"1:3278:1912","crate_id":1,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3280:251"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3333:1923":{"id":"1:3333:1923","crate_id":1,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3335:336"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13218:14133":{"id":"1:13218:14133","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"4:15741:1705"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"1:49422:2708","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:4614:2998":{"id":"4:4614:2998","crate_id":4,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4615:53294","4:4616:36290","4:4617:53295","4:4618:53296"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3014:2226":{"id":"1:3014:2226","crate_id":1,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:3013:2304","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13210:3060":{"id":"1:13210:3060","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"str::slice_mut_unchecked":"4:15741:1705","crate::ops::Index":"1:3483:1928","`str`":"4:15741:1705"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:10322:138":{"id":"1:10322:138","crate_id":1,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10323:695","1:10325:52982"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13216:3064":{"id":"1:13216:3064","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"1:49125:2692","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13220:57011":{"id":"1:13220:57011","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"1:49403:2706","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13289:57025":{"id":"1:13289:57025","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"1:12826:2361","prim@char":"4:15735:1700"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12836:2362","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6698:2917":{"id":"4:6698:2917","crate_id":4,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6699:53656"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10442:2304","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:5555:2973":{"id":"4:5555:2973","crate_id":4,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5556:53958","4:5557:3405"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10442:2304","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13254:55044":{"id":"1:13254:55044","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"1:12826:2361","prim@char":"4:15735:1700","str::rsplitn":"4:15741:1705"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"1:49243:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12836:2362","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3483:1928":{"id":"1:3483:1928","crate_id":1,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3485:167","1:3486:731"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3184:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:13284:57022":{"id":"1:13284:57022","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12845:2364":{"id":"1:12845:2364","crate_id":1,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:12847:2383","1:12848:900","1:12849:51691","1:12850:51692"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4684:2475":{"id":"1:4684:2475","crate_id":1,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4685:2025","1:4686:51743","1:4687:2027"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13938:137":{"id":"1:13938:137","crate_id":1,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:13939:262","1:13940:501","1:13941:265","1:13942:1058"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6861:2922":{"id":"4:6861:2922","crate_id":4,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6862:54396"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10367:2437":{"id":"1:10367:2437","crate_id":1,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10368:142","1:10369:13520","1:10370:53209"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13280:57020":{"id":"1:13280:57020","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3681:1858":{"id":"1:3681:1858","crate_id":1,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3184:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:13311:53928":{"id":"1:13311:53928","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5643:2955":{"id":"4:5643:2955","crate_id":4,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5644:53278","4:5645:53630"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13192:57006":{"id":"1:13192:57006","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10123:2409":{"id":"1:10123:2409","crate_id":1,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10124:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:22833:2302":{"id":"1:22833:2302","crate_id":1,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"1:23482:2296","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22824:2304","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:38:1543":{"id":"0:38:1543","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[167,0],"end":[179,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"kind":"macro","inner":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"},"1:13257:55046":{"id":"1:13257:55046","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:15735:1700","str::splitn":"4:15741:1705","self::pattern":"1:12826:2361"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"1:49261:2669","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12836:2362","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12836:2362","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12851:2365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12856:2360":{"id":"1:12856:2360","crate_id":1,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12851:2365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13315:3046":{"id":"1:13315:3046","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"4:15735:1700"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"1:49447:2711","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:7686:3096":{"id":"4:7686:3096","crate_id":4,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:7687:56429"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2779:2474":{"id":"1:2779:2474","crate_id":1,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2781:50091"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3184:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"1:2776:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3220:1829":{"id":"1:3220:1829","crate_id":1,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6088:53925":{"id":"5:6088:53925","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"4:15741:1705"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13225:54611":{"id":"1:13225:54611","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"1:12826:2361","prim@char":"4:15735:1700"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12836:2362","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13248:57012":{"id":"1:13248:57012","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"prim@char":"4:15735:1700","str::split":"4:15741:1705","`DoubleEndedIterator`":"1:8323:116","self::pattern":"1:12826:2361","str::rsplit_terminator":"4:15741:1705"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"1:49189:2696","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12836:2362","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13213:55033":{"id":"1:13213:55033","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"4:15741:1705"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13199:57009":{"id":"1:13199:57009","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"4:6771:2926":{"id":"4:6771:2926","crate_id":4,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6772:56297"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8756:2358":{"id":"1:8756:2358","crate_id":1,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"1:7803:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3299:1920":{"id":"1:3299:1920","crate_id":1,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3300:167","1:3301:931"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12765:2540":{"id":"1:12765:2540","crate_id":1,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:12766:122","1:12767:52639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13313:57029":{"id":"1:13313:57029","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"4:15735:1700"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"1:49438:2710","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13260:57014":{"id":"1:13260:57014","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12836:2362","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6066:57665":{"id":"5:6066:57665","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:1833","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8079:3331","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:1833","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8079:3331","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3286:1914":{"id":"1:3286:1914","crate_id":1,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3288:871"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:14010:2289":{"id":"1:14010:2289","crate_id":1,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:14011:51888","1:14012:51889","1:14013:51890","1:14014:51891","1:14015:51892","1:14016:51893","1:14017:2050"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3411:1859":{"id":"1:3411:1859","crate_id":1,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3412:526"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"1:3398:112","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:12851:2365":{"id":"1:12851:2365","crate_id":1,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:12853:2015","1:12854:52912","1:12855:52913"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"1:12845:2364","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6070:57666":{"id":"5:6070:57666","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8341:201"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12836:2362","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13221:14124":{"id":"1:13221:14124","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"1:49431:2709","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13193:57007":{"id":"1:13193:57007","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3188:202":{"id":"1:3188:202","crate_id":1,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13554:146":{"id":"1:13554:146","crate_id":1,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13555:167","1:13556:146","1:13557:745"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5635:2954":{"id":"4:5635:2954","crate_id":4,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5636:53278","4:5637:54302","4:5638:54303"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13211:57010":{"id":"1:13211:57010","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:15741:1705","str::slice_unchecked":"4:15741:1705","crate::ops::IndexMut":"1:3487:1929"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:13275:57018":{"id":"1:13275:57018","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"`DoubleEndedIterator`":"1:8323:116","str::match_indices":"4:15741:1705","prim@char":"4:15735:1700","self::pattern":"1:12826:2361"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"1:49307:2701","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12836:2362","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12836:2362","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12851:2365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13292:33461":{"id":"1:13292:33461","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:15735:1700","self::pattern":"1:12826:2361"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12836:2362","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10127:2410":{"id":"1:10127:2410","crate_id":1,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10128:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13539:134":{"id":"1:13539:134","crate_id":1,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13540:167","1:13541:992"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2877:170":{"id":"1:2877:170","crate_id":1,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2879:976","1:2880:804","1:2881:770","1:2882:693","1:2883:676"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3184:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"1:2831:169","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13202:1548":{"id":"1:13202:1548","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:47181:162"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10726:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10726:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3079:74":{"id":"1:3079:74","crate_id":1,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3081:2013"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3184:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"4:9222:2916":{"id":"4:9222:2916","crate_id":4,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:9223:56433","4:9224:56434","4:9225:56435","4:9226:56436","4:9227:2742","4:9228:28550","4:9229:56432"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10442:2304","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:6695:2969":{"id":"4:6695:2969","crate_id":4,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6696:53659","4:6697:54269"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10442:2304","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13206:53091":{"id":"1:13206:53091","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10726:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10726:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:2831:169":{"id":"1:2831:169","crate_id":1,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2833:585","1:2834:885"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3184:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:10058:2400":{"id":"1:10058:2400","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10059:1498","1:10060:50123","1:10062:50124"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13204:53090":{"id":"1:13204:53090","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:47181:162"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10726:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10726:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8275:132":{"id":"1:8275:132","crate_id":1,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8277:664"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3187:203":{"id":"1:3187:203","crate_id":1,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3290:1913":{"id":"1:3290:1913","crate_id":1,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3292:540"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5649:2956":{"id":"4:5649:2956","crate_id":4,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5650:56167","4:5651:53285","4:5652:53278","4:5653:56168","4:5654:3288","4:5655:3289","4:5656:56169","4:5657:1275","4:5658:56170","4:5659:56171","4:5660:56172","4:5661:56173","4:5662:56174","4:5663:56175","4:5664:56176","4:5665:56177"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2836:120":{"id":"1:2836:120","crate_id":1,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"1:2831:169","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13263:57015":{"id":"1:13263:57015","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12836:2362","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12836:2362","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12851:2365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6085:57668":{"id":"5:6085:57668","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8341:201"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3635:209":{"id":"1:3635:209","crate_id":1,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3636:167","1:3637:1934","1:3638:666","1:3639:353"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"1:3640:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"1:3635:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:6769:2925":{"id":"4:6769:2925","crate_id":4,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6770:54320"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8288:1832":{"id":"1:8288:1832","crate_id":1,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8290:2022","1:8292:2023","1:8293:2024"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3082:145":{"id":"1:3082:145","crate_id":1,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3084:2014"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6393:208":{"id":"5:6393:208","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6394:2089"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:0:1543":{"id":"0:0:1543","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[215,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\n# #[macro_use]\n# extern crate lazy_static;\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.4.0\")]","#![no_std]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:39:1549","0:41:1550","0:38:1543"]}},"1:3076:75":{"id":"1:3076:75","crate_id":1,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3078:289"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3184:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:13191:2021":{"id":"1:13191:2021","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8348:1831":{"id":"1:8348:1831","crate_id":1,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8349:771","1:8350:2021"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8474:153","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:5817:3327":{"id":"5:5817:3327","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5819:167","5:5820:415"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3184:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:3487:1929":{"id":"1:3487:1929","crate_id":1,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3489:732"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3184:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"1:3483:1928","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:2801:101":{"id":"1:2801:101","crate_id":1,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2802:392","1:2803:394"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2867:163":{"id":"1:2867:163","crate_id":1,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2868:398","1:2869:2065","1:2870:2066","1:2871:2085"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"1:2836:120","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"1:2877:170","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3465:1937":{"id":"1:3465:1937","crate_id":1,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3467:222","1:3468:192","1:3469:52953"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13304:57028":{"id":"1:13304:57028","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"1:12826:2361","prim@char":"4:15735:1700"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12836:2362","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12836:2362","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12851:2365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3906:68":{"id":"1:3906:68","crate_id":1,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3907:1398"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"1:3718:1939":{"id":"1:3718:1939","crate_id":1,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:4539:2967":{"id":"4:4539:2967","crate_id":4,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4540:2841","4:4541:54456","4:4543:54457","4:4544:54458","4:4545:2995","4:4546:54459","4:4547:53646","4:4549:54460","4:4550:2050","4:4551:3064","4:4552:2032","4:4554:2044"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13251:57013":{"id":"1:13251:57013","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split_terminator":"4:15741:1705","self::pattern":"1:12826:2361","prim@char":"4:15735:1700","str::split":"4:15741:1705"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"1:49207:2697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12836:2362","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12836:2362","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12851:2365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8752:2357":{"id":"1:8752:2357","crate_id":1,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8474:153","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:8749:2356":{"id":"1:8749:2356","crate_id":1,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8474:153","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13215:2390":{"id":"1:13215:2390","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:15735:1700"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"1:49115:2691","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8238:2283":{"id":"1:8238:2283","crate_id":1,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8240:2076"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8279:147":{"id":"1:8279:147","crate_id":1,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8280:2025","1:8281:2026","1:8282:746"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3306:1917":{"id":"1:3306:1917","crate_id":1,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3308:167","1:3309:335"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13310:53927":{"id":"1:13310:53927","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6593:2956":{"id":"4:6593:2956","crate_id":4,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6594:54406","4:6595:54377","4:6596:54378","4:6597:54380","4:6598:54379","4:6599:54381","4:6600:54382","4:6601:54384","4:6602:54385","4:6603:54388","4:6604:54389","4:6605:54390","4:6606:54391","4:6607:54392","4:6608:54393","4:6609:54386","4:6610:54387"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:39:1549":{"id":"0:39:1549","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[185,0],"end":[188,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3179:196":{"id":"1:3179:196","crate_id":1,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12273:2908":{"id":"1:12273:2908","crate_id":1,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:12274:2025","1:12275:51966"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13208:53092":{"id":"1:13208:53092","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10726:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10726:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:6089:53926":{"id":"5:6089:53926","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"4:15741:1705"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3274:1909":{"id":"1:3274:1909","crate_id":1,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3275:167","1:3276:891"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3640:133":{"id":"1:3640:133","crate_id":1,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3642:667"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"1:3635:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13285:57023":{"id":"1:13285:57023","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13312:53929":{"id":"1:13312:53929","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10726:199":{"id":"1:10726:199","crate_id":1,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:10728:167","1:10729:1548","1:10730:53090","1:10731:53091","1:10732:53092","1:10733:731","1:10734:732"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3184:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10717:2304","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10332:142":{"id":"1:10332:142","crate_id":1,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10333:632","1:10334:1728","1:10335:52169","1:10336:52170","1:10337:52171","1:10338:52172","1:10339:52173","1:10340:52174","1:10341:52175","1:10342:52176","1:10343:52177","1:10344:52178","1:10345:52179","1:10346:52180","1:10347:52181","1:10348:1498"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8242:2285":{"id":"1:8242:2285","crate_id":1,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8244:2077"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6086:57669":{"id":"5:6086:57669","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:421:1833","`String`":"5:8341:201"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:1833","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8079:3331","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13239:53681":{"id":"1:13239:53681","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12826:2361","str::rsplit":"4:15741:1705","str::split_whitespace":"4:15741:1705","prim@char":"4:15735:1700","`DoubleEndedIterator`":"1:8323:116"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"1:49139:2661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12836:2362","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13309:2915":{"id":"1:13309:2915","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9129:2002":{"id":"1:9129:2002","crate_id":1,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3247:1906":{"id":"1:3247:1906","crate_id":1,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3249:167","1:3250:250"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3294:1915":{"id":"1:3294:1915","crate_id":1,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3296:1082"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3085:131":{"id":"1:3085:131","crate_id":1,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3087:661"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3321:1921":{"id":"1:3321:1921","crate_id":1,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3323:167","1:3324:1204"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13307:2585":{"id":"1:13307:2585","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12765:2540","`FromStr`":"1:12765:2540"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47308:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"1:12765:2540","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"1:12765:2540","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3157:111":{"id":"1:3157:111","crate_id":1,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3158:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10108:106":{"id":"1:10108:106","crate_id":1,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10109:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10115:115":{"id":"1:10115:115","crate_id":1,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10116:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9128:2003":{"id":"1:9128:2003","crate_id":1,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13235:2020":{"id":"1:13235:2020","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"1:12826:2361","`None`":"1:47181:162","prim@char":"4:15735:1700"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12836:2362","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12836:2362","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12851:2365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3184:1828":{"id":"1:3184:1828","crate_id":1,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3337:1924":{"id":"1:3337:1924","crate_id":1,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3339:338"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10121:2408":{"id":"1:10121:2408","crate_id":1,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10122:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13200:288":{"id":"1:13200:288","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"4:15741:1705","`u8`":"4:15752:1714"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:2565:123":{"id":"4:2565:123","crate_id":4,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:2566:51626","4:2568:1764","4:2569:56247","4:2570:56248"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"1:10108:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"1:10115:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3554:1931":{"id":"1:3554:1931","crate_id":1,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3556:52149","1:3557:52150","1:3558:52151"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3184:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:3282:1916":{"id":"1:3282:1916","crate_id":1,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3284:1327"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3189:103":{"id":"1:3189:103","crate_id":1,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"1:2801:101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13269:57016":{"id":"1:13269:57016","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12826:2361","prim@char":"4:15735:1700","`DoubleEndedIterator`":"1:8323:116","str::matches":"4:15741:1705"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"1:49361:2704","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12836:2362","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12836:2362","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12851:2365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12836:2362":{"id":"1:12836:2362","crate_id":1,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:12838:2364","1:12839:53245","1:12840:53246","1:12841:53247","1:12842:53249","1:12843:53248","1:12844:53250"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5683:2957":{"id":"4:5683:2957","crate_id":4,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5684:53907","4:5685:53908","4:5686:53909","4:5687:53910"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13266:1727":{"id":"1:13266:1727","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"`DoubleEndedIterator`":"1:8323:116","prim@char":"4:15735:1700","self::pattern":"1:12826:2361","str::matches":"4:15741:1705"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"1:49343:2703","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12836:2362","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6067:2840":{"id":"5:6067:2840","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8341:201"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12836:2362","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3428:127":{"id":"1:3428:127","crate_id":1,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3430:361"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"1:3431:128","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:5697:2958":{"id":"4:5697:2958","crate_id":4,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5698:56159"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10442:2304","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3623:1932":{"id":"1:3623:1932","crate_id":1,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3184:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"1:3554:1931","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:5627:2953":{"id":"4:5627:2953","crate_id":4,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5628:53814","4:5629:53816","4:5630:53815","4:5631:53817"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10125:175":{"id":"1:10125:175","crate_id":1,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10126:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13316:57030":{"id":"1:13316:57030","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"4:15735:1700"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"1:49456:2712","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13228:54613":{"id":"1:13228:54613","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:15735:1700","self::pattern":"1:12826:2361"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12836:2362","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12836:2362","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12851:2365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3398:112":{"id":"1:3398:112","crate_id":1,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3399:206","1:3400:524"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6367:2920":{"id":"4:6367:2920","crate_id":4,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6368:54351","4:6369:36438","4:6370:54352","4:6371:54353","4:6372:54354","4:6373:54355"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10442:2304","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:4596:2400":{"id":"4:4596:2400","crate_id":4,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4597:1728","4:4598:53392","4:4600:53393","4:4601:3589","4:4602:53394","4:4603:53395","4:4604:50124","4:4613:2050"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:23482:2296":{"id":"1:23482:2296","crate_id":1,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:23483:2301"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:23478:2304","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"1:3189:103","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13231:2061":{"id":"1:13231:2061","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:47181:162","prim@char":"4:15735:1700","self::pattern":"1:12826:2361"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47181:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12836:2362","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10119:2407":{"id":"1:10119:2407","crate_id":1,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10120:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13286:57024":{"id":"1:13286:57024","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"1:12826:2361","prim@char":"4:15735:1700"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12836:2362","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12836:2362","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"1:12856:2360","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13189":{"id":"1:13189","crate_id":1,"name":null,"span":null,"visibility":{"restricted":{"parent":"1:12286:1311","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["1:13190:771","1:13191:2021","1:13192:57006","1:13193:57007","1:13195:57008","1:13198:53903","1:13199:57009","1:13200:288","1:13201:55013","1:13202:1548","1:13204:53090","1:13206:53091","1:13208:53092","1:13210:3060","1:13211:57010","1:13212:55032","1:13213:55033","1:13214:2730","1:13215:2390","1:13216:3064","1:13217:14095","1:13218:14133","1:13219:3666","1:13220:57011","1:13221:14124","1:13222:52151","1:13225:54611","1:13228:54613","1:13231:2061","1:13235:2020","1:13239:53681","1:13242:13730","1:13245:55042","1:13248:57012","1:13251:57013","1:13254:55044","1:13257:55046","1:13260:57014","1:13263:57015","1:13266:1727","1:13269:57016","1:13272:57017","1:13275:57018","1:13278:57019","1:13280:57020","1:13282:57021","1:13284:57022","1:13285:57023","1:13286:57024","1:13289:57025","1:13292:33461","1:13295:55048","1:13298:57026","1:13301:57027","1:13304:57028","1:13307:2585","1:13309:2915","1:13310:53927","1:13311:53928","1:13312:53929","1:13313:57029","1:13315:3046","1:13316:57030"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:13242:13730":{"id":"1:13242:13730","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"1:12826:2361","prim@char":"4:15735:1700"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"1:12618:2662","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12836:2362","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13272:57017":{"id":"1:13272:57017","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"prim@char":"4:15735:1700","str::rmatch_indices":"4:15741:1705","`DoubleEndedIterator`":"1:8323:116","self::pattern":"1:12826:2361"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"1:49289:2700","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12836:2362","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13298:57026":{"id":"1:13298:57026","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"1:12826:2361","prim@char":"4:15735:1700"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12836:2362","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12836:2362","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12851:2365","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3262:1907":{"id":"1:3262:1907","crate_id":1,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3264:167","1:3265:539"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3257:1908":{"id":"1:3257:1908","crate_id":1,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3259:167","1:3260:870"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6767:2923":{"id":"4:6767:2923","crate_id":4,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6768:53865"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13219:3666":{"id":"1:13219:3666","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"1:49393:2705","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3345:1926":{"id":"1:3345:1926","crate_id":1,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3347:1205"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3422:1830":{"id":"1:3422:1830","crate_id":1,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3423:559"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8474:153":{"id":"1:8474:153","crate_id":1,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8475:2025","1:8476:900","1:8477:2027","1:8478:478","1:8480:2028","1:8483:2029","1:8484:2030","1:8485:2031","1:8486:2032","1:8488:2033","1:8490:2034","1:8491:2035","1:8493:819","1:8496:2036","1:8503:2037","1:8505:2038","1:8508:2039","1:8509:2040","1:8510:2041","1:8512:2042","1:8514:2043","1:8517:1279","1:8518:2044","1:8519:2045","1:8523:2046","1:8526:2047","1:8527:2048","1:8528:2049","1:8530:2050","1:8531:1838","1:8533:2051","1:8536:2052","1:8538:2053","1:8548:2054","1:8563:2055","1:8565:2056","1:8569:2057","1:8578:2058","1:8581:2059","1:8583:2060","1:8586:261","1:8593:278","1:8600:2061","1:8607:2062","1:8616:2063","1:8626:993","1:8633:2064","1:8640:2065","1:8641:2066","1:8642:2067","1:8654:2068","1:8661:2069","1:8673:2070","1:8680:2071","1:8681:2072","1:8686:2073","1:8689:2074","1:8692:2075","1:8693:2076","1:8695:2077","1:8697:398","1:8700:2078","1:8703:976","1:8706:2079","1:8709:585","1:8712:2080","1:8715:885","1:8717:804","1:8719:770","1:8721:693","1:8723:676","1:8725:2081","1:8726:2082","1:8734:2083"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6065":{"id":"5:6065","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5885:1311","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6066:57665","5:6067:2840","5:6070:57666","5:6073:57667","5:6085:57668","5:6086:57669","5:6087:3023","5:6088:53925","5:6089:53926"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:13301:57027":{"id":"1:13301:57027","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"1:12826:2361","prim@char":"4:15735:1700"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12836:2362","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:7803:2359":{"id":"1:7803:2359","crate_id":1,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7804:52558","1:7805:52559","1:7806:52556","1:7807:52554","1:7808:52560","1:7809:52557","1:7810:52555"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"1:2801:101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"1:2877:170","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:4621:3001":{"id":"4:4621:3001","crate_id":4,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4622:53677","4:4623:53678","4:4624:53679","4:4626:3000","4:4627:53680","4:4629:53681","4:4630:3666"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"4:4539:2967","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3092:212":{"id":"1:3092:212","crate_id":1,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3094:123","1:3095:1384"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5561:2971":{"id":"4:5561:2971","crate_id":4,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5562:4123","4:5563:53903"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10442:2304","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:22639:2303":{"id":"1:22639:2303","crate_id":1,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22629:2304","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3431:128":{"id":"1:3431:128","crate_id":1,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3433:167","1:3434:362"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10117:2406":{"id":"1:10117:2406","crate_id":1,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10118:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8323:116":{"id":"1:8323:116","crate_id":1,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8324:2015","1:8325:2016","1:8326:2017","1:8327:2018","1:8331:2019","1:8334:2020"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8474:153","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13282:57021":{"id":"1:13282:57021","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6465:3047":{"id":"4:6465:3047","crate_id":4,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6466:56215","4:6467:56216"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:772:207":{"id":"5:772:207","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:773:2086","5:774:2087","5:775:2088"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13195:57008":{"id":"1:13195:57008","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"4:15741:1705"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"4:4267:3250":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:10117:2406":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:47738:82":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"12:396:3622":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"12:774:2026":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:10906:2546":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"18:667:4179":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"5:4627:4275":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"10:0:1756":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"4:9610:3260":{"crate_id":4,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"12:160:3620":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:6166:3849":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:4241:39580":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"18:744:59552":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:46189:2793":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:13609:49468":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:3079:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"6:5210:40201":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"4:3116:2995":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"1:50753:2347":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:51446:2310":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:9790:2647":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:49557:2369":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"12:2045:3073":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"4:2171:3070":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"5:3954:4270":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:22430:53081":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:10058:2400":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:49115:2691":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:10930:2547":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:7514:3824":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:12480:48315":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"4:11845:3092":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:3465:1937":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"6:4401:39598":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"5:8223:3063":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:8749:2356":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:3311:1918":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"12:354:4387":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:5330:41794":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"18:896:4173":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"9:900:41420":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"4:7182:53619":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"18:0:1763":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:4790:42410":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"16:6518:3859":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"4:10530:30032":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:23482:2296":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:4083:39566":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:4203:39577":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"5:3325:3396":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:13296:49018":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:49859:2722":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:47291:2090":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:10160:43502":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"18:849:4169":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:4060:39563":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:5159:40196":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"4:11945:3176":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:12456:48313":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"5:4683:4275":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"4:4346:3021":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:13506:49454":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"4:820:4312":{"crate_id":4,"path":["std","thread","local","os","Key"],"kind":"struct"},"17:9551:4045":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:52932:2308":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:11604:44127":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:10448:4099":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"18:774:59548":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:10001:43484":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:49207:2697":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:23798:2587":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"5:781:105":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:5386:40213":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:9795:2648":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"4:10957:2999":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"16:6605:3819":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:45970:2711":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:4262:39581":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"4:15701:56291":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"4:12034:1879":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"5:3313:2546":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"16:5273:3729":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:9245:4056":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:46659:11298":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"4:1493:3143":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"5:3878:3409":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"4:15748:1710":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"17:1311:4153":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:4535:42330":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:24374:2614":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:49058:2683":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:47945:2406":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:13665:14223":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:9128:2003":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:12583:2702":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:4364:39593":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:23647:2753":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:10975:43704":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"9:603:41497":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"14:216:41724":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:9264:41795":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:542:3735":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:3345:1926":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:13205:48969":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:10516:4115":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:2004:2987":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"4:1507:3146":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"4:6698:2917":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:11189:2668":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"16:2968:3977":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"4:70:1459":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"1:45631:183":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:55796:221":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:2733:3725":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:3316:1919":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"4:11124:53608":{"crate_id":4,"path":["std","net","parser","AddrKind"],"kind":"enum"},"1:51200:2341":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:49189:2696":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:9088:43418":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:10117:4148":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:48229:104":{"crate_id":1,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"12:429:3621":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:49735:2379":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:13620:49474":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:6999:3867":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:299:59062":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:47938:2407":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:9759:43427":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:53105:19604":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:6569:4008":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:5488:3696":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:46377:2506":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:49109:2690":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"6:4306:39586":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:4112:39569":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:49125:2692":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"18:704:59548":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:47959:2409":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"4:13450:3081":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"6:5407:40215":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:2484:43532":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:11378:4105":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"4:4480:3026":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"14:0:1759":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:12845:2364":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"12:2315:58666":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"4:11161:3267":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:13963:49560":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:13810:49519":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:2543:4111":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:4317:39587":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:3064:4036":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"4:11405:3116":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:569:36566":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:46060:2890":{"crate_id":1,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"6:5359:40210":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:11794:44347":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:7174:3871":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:10372:2438":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"16:3338:3722":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"16:7333:3823":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:13865:49526":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:23942:2780":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"4:10936:3027":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"4:8626:1889":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:12297:2870":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:53210:19611":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"5:1669:180":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:10988:43703":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:547:3709":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:45677:1930":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"16:6014:3847":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"4:11492:3121":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"4:11009:2705":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"6:4501:39609":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:8341:201":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:4629:2470":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:12537:48319":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:11148:2666":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"5:1475:3153":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:23383:2299":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"4:7863:4294":{"crate_id":4,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"16:4417:42312":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:10844:4079":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"16:5672:3704":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"9:469:41392":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"4:3539:4292":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:45654:185":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:53085:19602":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:1584:37453":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:8756:2358":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:9649:43425":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:9368:43421":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:46693:11301":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"4:9648:4311":{"crate_id":4,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"1:22639:2303":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:5130:40154":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"12:556:139":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:46704:11303":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:12221:48297":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:22692:2301":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:11678:44167":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:4095:39567":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:525:36561":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"5:6746:2987":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:4371:39594":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:2912:3976":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:3951:39550":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:12507:2695":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:3287:3985":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"4:7525:3085":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"4:1415:2546":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:10123:2409":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:51016:2320":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"5:3346:3072":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"4:6861:2922":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:4304:42274":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"14:11:41715":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:13539:134":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"16:3172:3980":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:3118:3990":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:11199:43438":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"16:7264:3820":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:10403:4075":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:9961:43431":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:2108:559":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"17:12795:48466":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"5:909:93":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:47239:2026":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"5:1591:2547":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:11118:43434":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"12:853:3141":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"1:3085:131":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"5:421:1833":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"14:56:43841":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:49883:117":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"6:5241:40182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:48726:2912":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:4517:39611":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"4:6227:3285":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:12234:48298":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"6:616:36572":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"5:4499:3422":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"1:52806:2323":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"4:9504:4400":{"crate_id":4,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"17:11231:4048":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:10322:138":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"4:8527:1876":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:3635:209":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:4013:39557":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:32039:2599":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"16:5736:3708":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:510:43410":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:49905:2804":{"crate_id":1,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"1:50116:2294":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:14000:49601":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"4:10816:3137":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"17:9659:59134":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:3428:127":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"12:761:2547":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"16:7843:3882":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:46368:2508":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:6636:3821":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:24238:2757":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:46120:2894":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:55809:221":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:11588:44126":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:12771:43440":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:22835:2301":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"16:6072:3787":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:11082:4052":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:8242:2285":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:10239:51663":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"12:463:58664":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"4:14340:56328":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:50039:176":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"5:6393:208":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"5:3023:56883":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:9637:83":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:46267:2495":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:4127:39571":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"18:694:4180":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:9769:59410":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"9:1056:3545":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"4:5683:2957":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"18:712:2280":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:3488:3987":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"15:269:3643":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:1717:37465":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:10926:43726":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"4:14680:4319":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"4:8081:4294":{"crate_id":4,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"1:55874:221":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:10071:4152":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"4:14335:53662":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"17:11981:43651":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"4:2362:581":{"crate_id":4,"path":["std","env"],"kind":"module"},"5:8271:3402":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:10317:4064":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"5:6457:3068":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"4:10929:3025":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"12:747:2546":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:5717:3707":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"5:375:3395":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:1602:37455":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:49261:2669":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:5282:40206":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:4410:39599":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:5269:40204":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:11147:43435":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"6:5255:40183":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:5066:1852":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"4:11868:56332":{"crate_id":4,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"1:24272:2758":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"5:1658:3144":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:12442:48312":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:7360:180":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:4052:39562":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:9186:4109":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"4:1438:2026":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"18:152:49922":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:13582:49465":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:5002:1849":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:24306:2759":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:10353:4070":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:12946:48860":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"4:1302:139":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"5:8094:3435":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"16:7884:3812":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:12208:48296":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"7:85:41274":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"4:2166:3069":{"crate_id":4,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"4:11872:53546":{"crate_id":4,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"4:1152:30033":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"16:6491:3858":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"4:10243:43412":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"4:10454:54350":{"crate_id":4,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"1:13630:173":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"4:4307:3019":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:47308:191":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"6:1736:37467":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"8:0:1754":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:13733:49478":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"4:11994:3179":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:10611:43647":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"16:4995:42465":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:10108:106":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"16:2991:3988":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"12:2309:52037":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:8275:132":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:10111:106":{"crate_id":1,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"17:4157:4142":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:4734:42404":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:2140:1029":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:51546:50293":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"4:2433:31006":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"6:537:36563":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"18:811:4166":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:6644:3863":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:1723:37466":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:6005:33183":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:10726:199":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:1617:37456":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:10331:4079":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"4:14971:3062":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:32103:50301":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"12:2323:58668":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:24578:2766":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"18:620:59563":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:5528:39459":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:5433:3691":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:5231:42651":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:46237:4324":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"16:6252:3853":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:7042:4023":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:1563:37451":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"4:14763:3091":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:49571:2372":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:12010:48123":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:3714:41809":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:6893:39740":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:11993:48120":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:300:191":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"4:1041:3050":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:23834:4997":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"4:1633:3151":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:5528:757":{"crate_id":1,"path":["core","iter"],"kind":"module"},"17:9809:59215":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:4331:39589":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:7467:3806":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:49361:2704":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:6780:3865":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"4:3261:3236":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"17:13282:49016":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"4:2723:2975":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"16:5295:41797":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"4:10536:3076":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"17:11738:44334":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:10673:43649":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"16:7823:3816":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:1527:37446":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:12275:48301":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:7738:3880":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"9:963:3550":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:23826:4979":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:11696:44168":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:11075:2664":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:3972:2448":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"16:5855:3715":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"4:3955:123":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"4:8534:1877":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"4:14034:3020":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"4:5860:3308":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"4:13752:3090":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:46247:11012":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"16:6357:3855":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:10304:4065":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:6620:4006":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:6858:39735":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"4:1459:3141":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:13221:48970":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:5347:40209":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:6106:40620":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:6068:37388":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"4:10464:3195":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"1:3197:1856":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"17:10558:43644":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:1455:1671":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"1:8348:1831":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:13685:49477":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:9971:59092":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:27759:2288":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:46468:2517":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"4:8861:1890":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:624:36573":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:3772:41842":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:0:413":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"6:4215:39578":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"4:4539:2967":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"1:23740:2592":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"4:11313:33186":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:12836:2362":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:13637:49476":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"4:7815:3212":{"crate_id":4,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"1:46289:2497":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:3014:2226":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"12:2303:58667":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:8288:1832":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:51421:2309":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:48202:129":{"crate_id":1,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"5:7194:3068":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:13841:2468":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"4:15736:1701":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"4:7151:53619":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:6085:40617":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:22364:2280":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:6812:41148":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:12182:48294":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:3191:205":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"5:3472:3069":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"4:15760:1722":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"6:5969:36440":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:591:36568":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:49725:2378":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:45752:1850":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"4:8796:1672":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"6:5978:40614":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:9729:59274":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:11434:43839":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"4:2582:53620":{"crate_id":4,"path":["std","error","from","StringError"],"kind":"struct"},"16:5360:3687":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:46437:2514":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:2843:3974":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"4:7228:172":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"1:46029:2895":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"4:14696:4320":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:49700:2376":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:4377:39595":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:10127:2410":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"4:6839:2927":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"4:6593:2956":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:11726:44225":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"6:1760:37469":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"4:13213:3280":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:3076:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:7545:2033":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:13180:48966":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"9:41:3535":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"5:7093:4284":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"1:49588:2373":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"4:1619:3150":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:11100:4054":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"5:8303:3403":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:4419:39600":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"4:9511:4309":{"crate_id":4,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"16:3145:3989":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"16:3365:3723":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"4:15756:1718":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"17:10489:4114":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"5:3354:3070":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:47654:80":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:12598:48323":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:37337:2280":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:46113:2893":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"17:12262:48300":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:7856:3883":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"12:976:3149":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"4:15717:53557":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"12:2013:3068":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"5:8436:3375":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"0:41:1550":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"4:15754:1716":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"6:4511:39610":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"4:9473:4308":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:2512:4063":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"5:1602:2026":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:1540:37448":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:9574:4053":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"6:1676:37461":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:4477:42322":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"4:8813:2218":{"crate_id":4,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"16:6413:3635":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:38557:2273":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:32004:2787":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"9:927:41386":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"4:10741:3011":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:12645:48387":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:13590:49466":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"5:7797:4284":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:6899:39741":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"4:3110:3223":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"4:6695:2969":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:46014:2565":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"4:10811:3136":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"4:7559:3087":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"4:7337:171":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"16:4614:42384":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:51840:2345":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"4:15758:1720":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"1:49871:2725":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"6:4073:39565":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:7355:2026":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"18:820:4167":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:8929:43414":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:48880:2667":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"4:11260:2968":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:7804:3814":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:13589:50378":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:4341:39590":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:11217:2670":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"4:4621:3001":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"4:12088:3163":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"1:3341:1925":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"16:6464:3817":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:46666:1672":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:46425:2513":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:5469:40220":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"12:1667:3630":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"16:7119:3732":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:12273:2908":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:9296:43403":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"12:1855:141":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"4:4383:3016":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:9943:59496":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"6:3997:39555":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:10125:175":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:46359:2503":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"5:5399:2987":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:543:36564":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:51923:2330":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"4:10673:3222":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"18:885:4172":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:11809:44348":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"5:4226:4270":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"4:11965:3177":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"4:14548:31008":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:11358:4106":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:6744:4013":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"4:5766:3303":{"crate_id":4,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"17:11519:44057":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:13370:49086":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:5927:3718":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:13780:49516":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"12:930:3145":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:51319:2317":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:13258:49013":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:12247:48299":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:3483:1928":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"6:1658:37459":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"4:15757:1719":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"19:117:59568":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"4:14952:3056":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:5502:2465":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:48491:2439":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"4:1524:3148":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:51223:2344":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:88:36184":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:3179:196":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"4:10443:3187":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"4:11002:2661":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"1:49519:2363":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"4:9595:3259":{"crate_id":4,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"17:9689:59167":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:6091:40618":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:53195:19610":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:10332:142":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"5:1637:3142":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"9:0:1755":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:10377:4068":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:49875:2719":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"5:2202:3399":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:49157:2665":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"5:3380:3073":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:46336:2502":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"13:232:58671":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:13912:49556":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:22788:28162":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"4:10821:3012":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:5436:58073":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:7250:3878":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:53180:19609":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"9:776:3532":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"17:13488:49452":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"0:0:1543":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"1:5309:2887":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:49139:2661":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:50098:154":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:46345:51631":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"19:0:973":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:12467:48314":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"6:5945:36481":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:10052:43487":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:51074:50178":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"4:5705:2960":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:48178:67":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"17:11962:43652":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:5197:40200":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:7928:2531":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:22781:2304":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"4:14037:3016":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"6:4281:39583":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"4:14371:125":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:50930:50179":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:3350:1927":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"12:0:1758":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"17:10266:4066":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:4653:99":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"16:3800:41845":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:46307:2499":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:45976:10622":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"4:11264:33183":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:578:32210":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"5:1430:3150":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"4:11104:54346":{"crate_id":4,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"17:13163:48923":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"4:11978:3178":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"5:1678:3443":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"4:13730:4403":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"16:3091:4037":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"16:7185:3872":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:10028:43485":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:46684:3026":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"4:1132:2977":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:3411:1859":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:5185:40198":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:6239:40628":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:49097:2542":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:9476:43424":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"5:5299:186":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:51498:50208":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"5:912:3433":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"16:3218:3982":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:13933:49558":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"5:3024:56514":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:9162:4047":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:10543:43643":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:11001:43702":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:46077:2711":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:50728:50212":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:14010:2289":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"6:4358:39592":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"4:3908:3139":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:11231:2671":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"16:5472:3695":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:1554:37450":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:12659:48388":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:8474:153":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:8902:43413":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"9:1075:3553":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:5012:1850":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"17:11665:44166":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"4:5868:3309":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:12373:48308":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"4:2458:4396":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"1:3718:1939":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:2866:3975":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:52080:2325":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:13453:49449":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"18:660:4178":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"4:9024:1886":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"4:5838:3306":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"4:14828:3162":{"crate_id":4,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"6:6155:40622":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:10635:43615":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"4:11015:2938":{"crate_id":4,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"1:22432:53083":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"18:857:4170":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"4:1482:3069":{"crate_id":4,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"1:22629:2304":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:10128:4149":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:12507:48317":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:46457:2516":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"4:14921:3054":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"4:11923:2546":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"4:14405:53562":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:38494:2225":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"5:5520:1875":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:51762:2338":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"5:1827:4270":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"5:7615:3380":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"4:15752:1714":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"5:6239:3379":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:3487:1929":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:10435:43543":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:10367:2437":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:12521:48318":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:49847:2718":{"crate_id":1,"path":["core","str","LinesAnyMap"],"kind":"struct"},"17:12385:48309":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:11733:2685":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:47780:89":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:3422:1830":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"4:2155:2546":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:53057:2311":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"4:1488:3142":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:12343:48305":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"4:11286:2924":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"4:3563:3003":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"4:7511:3084":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"5:7822:4290":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"5:8176:2026":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"5:5821:3325":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:9592:124":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"17:12168:48293":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"6:4439:39603":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:2431:2476":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:4494:39608":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:5996:3846":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"4:3440:3007":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"4:10733:3009":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:10081:4077":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:51578:50336":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"4:15070:2947":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"4:11172:3269":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"1:51122:2349":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"16:2889:3994":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:23811:2588":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:13318:49082":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:5312:40208":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:5595:3702":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"4:15740:1704":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"17:13540:49460":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:7392:3810":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:6807:3866":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:5707:3705":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"1:49243:2668":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"4:11475:2546":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"6:1908:37604":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"6:5428:40218":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:9065:43417":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"4:7915:3213":{"crate_id":4,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"17:13627:49475":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"18:739:59567":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"6:3905:39547":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"5:7239:4270":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:12765:2540":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:13598:49467":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"4:15750:1712":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"4:7545:3086":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"4:8376:3175":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"4:15739:1703":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"4:12541:124":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:52616:2319":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"5:8111:3436":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"12:2331:3063":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"4:9222:2916":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:3241:3983":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"4:2765:2976":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"4:4344:3020":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"5:3320:3071":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"4:2852:166":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:3554:1931":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:22377:53045":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"5:6936:3332":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:46298:2498":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"4:1530:3149":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"4:9643:4310":{"crate_id":4,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"17:11616:44128":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:49447:2711":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:48530:51677":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:22824:2304":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:563:36565":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"4:1149:30031":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"4:900:3191":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:1729:3279":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:49039:2681":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:50021:187":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"6:605:36570":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"4:4270:3251":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"5:8088:2026":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:47231:2547":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"5:1184:57847":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"4:3113:2841":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"1:46478:2518":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"16:7195:3873":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"4:3953:191":{"crate_id":4,"path":["std","io","error","Result"],"kind":"typedef"},"1:3306:1917":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:2320:1860":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:8323:116":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:5548:40248":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:4866:1669":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:6399:2505":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:9129:2002":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:3185:1857":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:51035:50186":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"4:11830:3091":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"1:50776:2335":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:3681:1858":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:12568:48321":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:1630:37458":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:13942:49559":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"4:11075:3132":{"crate_id":4,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"1:45797:2607":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"12:112:58663":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:519:36560":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:52266:2331":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:4227:39579":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:3978:39553":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:3604:41800":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:13554:146":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:48940:2673":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:47181:162":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:4:958":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:13851:2735":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"11:46:58659":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"4:15240:3647":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:5414:40216":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:46159:2791":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:4347:39591":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:3189:103":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"6:5987:40615":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:1533:37447":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:4046:39561":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:6870:39737":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:49855:2723":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"4:5876:3311":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"4:10546:3154":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:50993:2316":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"4:5643:2955":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:55822:221":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:53272:19613":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:13772:49515":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"4:6605:54390":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"9:234:3510":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"4:5627:2953":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"4:10996:2692":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"1:24442:2762":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"4:8369:3174":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:3640:133":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:4478:39607":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:48315:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:45608:184":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"5:8079:3331":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"4:1157:30034":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:9404:43422":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:48522:51687":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"4:2162:3068":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"4:11235:3267":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:10149:43429":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:49004:2678":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"16:2754:3724":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"5:3032:56513":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:11640:44164":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:13547:49461":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:13377:49098":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:6110:3842":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:6949:4019":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:49048:2682":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:7420:3825":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"5:3935:3069":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"12:1253:3153":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"0:38:1543":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"4:5693:2952":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:2213:2234":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"5:2537:3451":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"4:10678:2965":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:3957:39551":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:48968:2676":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"4:14702:4321":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"4:4385:3017":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"4:8578:1878":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:6424:3857":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:10912:43717":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"12:1200:3618":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"12:1235:3619":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:9632:76":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:46052:2712":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:5522:40247":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:3188:202":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:47214:2025":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"17:12195:48295":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:13192:48968":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"4:8362:188":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"5:2294:3464":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"4:4557:2996":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"4:0:1302":{"crate_id":4,"path":["std"],"kind":"module"},"9:692:3485":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"5:3743:2546":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"5:1647:3143":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:10211:43498":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"5:1000:2546":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"4:15734:1699":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"17:13924:49557":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"14:194:41716":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"5:3284:92":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:10468:4113":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:13574:49464":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"11:54:3606":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"5:3756:2547":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"4:2565:123":{"crate_id":4,"path":["std","error","Error"],"kind":"trait"},"16:7453:3805":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:49017:2679":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"4:15753:1715":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"1:14:1728":{"crate_id":1,"path":["core","write"],"kind":"macro"},"16:6208:3851":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:4671:42391":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:10962:43705":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"4:5406:3273":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:13272:49015":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:50824:2315":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:584:36567":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:10938:43727":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:10801:43616":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"5:6654:1875":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:5057:1851":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:13056:13960":{"crate_id":1,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"1:10998:2662":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:24408:2761":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:3274:1909":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"4:15706:30035":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:47368:2026":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"12:1762:4268":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:11482:43841":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:13331:49083":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:50075:2733":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"7:38:41267":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:9933:43430":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:50031:4407":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"17:11915:48113":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"5:5871:4282":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"6:4459:39605":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"18:801:4165":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:9886:43429":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"4:15229:3647":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"4:1428:2547":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:6881:39738":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:4133:39572":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"4:4305:3018":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"5:0:262":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:9210:43420":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"5:8253:98":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:10119:2407":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"18:829:4168":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:157:36250":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"4:11039:2939":{"crate_id":4,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"16:4955:42450":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:6935:41175":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:4040:39560":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:3966:39552":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:12671:48389":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:5766:3712":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:48211:67":{"crate_id":1,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"1:52115:2307":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"4:13378:4402":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"12:937:3146":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:12826:2361":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"1:49289:2700":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:23478:2304":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:13172:48924":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:51602:50296":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:7549:3813":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:46406:2511":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"5:1204:3445":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"4:6367:2920":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"4:11481:3120":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"4:15755:1717":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"6:5400:40214":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:12725:48398":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:47352:2546":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:46675:11300":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:9849:59337":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:50128:2292":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:10068:130":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"18:677:138":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"4:13714:3088":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:11406:43831":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:49748:13961":{"crate_id":1,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"1:51055:2305":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:9133:43419":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:10717:2304":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:45470:1940":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"4:6345:2917":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"4:15735:1700":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"1:8279:147":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:12610:48337":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:13154:48922":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"16:4823:42418":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:12783:48463":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:5953:37384":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:13386:49415":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:6176:3850":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:8238:2283":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:3082:145":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"4:15151:3273":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:12567:2699":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:49636:2374":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:6126:3848":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"5:8335:56882":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"17:10827:4139":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"4:6603:54388":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"16:7226:3876":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:13477:49451":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:6366:3636":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"16:6964:1999":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:531:36562":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"0:39:1549":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"1:11833:4330":{"crate_id":1,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"6:6176:40623":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"15:0:1760":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:8954:4110":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"5:3823:4270":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:8055:1841":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"4:8020:3213":{"crate_id":4,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"16:7870:3811":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:46317:2500":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"4:2177:3071":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:11932:48114":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"4:11167:3268":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"4:1190:4393":{"crate_id":4,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"17:13041:48862":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:6136:3843":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:57110:50283":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"1:10115:115":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:4935:1843":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"17:1236:43501":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:3252:1911":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"4:11382:3115":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"17:11767:44343":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:13760:49480":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:1690:37462":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:49851:2721":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:52869:2343":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"4:2188:3073":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:13119:48918":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"4:9738:4312":{"crate_id":4,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"1:3431:128":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:9719:43426":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"4:12108:3164":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:51272:2329":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:12699:48391":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:11045:43433":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"4:10725:3243":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:55835:221":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:6554:3860":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:4300:39585":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:10061:43503":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:3652:1936":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:12544:2698":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:7406:3808":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"4:14358:53616":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:10814:4138":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"16:4448:42318":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"4:12054:1881":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"5:8119:56534":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"4:7820:4398":{"crate_id":4,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"1:32051:50347":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"1:49431:2709":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:11572:44125":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:3333:1923":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:4822:1862":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:50962:2328":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"4:15741:1705":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"17:12712:48392":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:9130:2001":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"4:4899:2936":{"crate_id":4,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"16:7205:3874":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"4:10304:4313":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:6214:40626":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:49438:2710":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"5:4199:3068":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:22833:2302":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"4:14388:114":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:3278:1912":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:0:776":{"crate_id":6,"path":["libc"],"kind":"module"},"17:11653:44165":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:12051:48224":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"4:10579:2496":{"crate_id":4,"path":["std","error","Chain"],"kind":"struct"},"6:4023:39558":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"5:6634:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:46099:2710":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"12:2032:3071":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:7216:3875":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"4:8276:3115":{"crate_id":4,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"1:53076:19601":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"16:5522:3698":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:6614:36518":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"4:14031:3018":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"5:3866:3011":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"16:5346:3803":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:2836:120":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"16:7279:4024":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"12:1100:3150":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:4066:39564":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"4:6767:2923":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:7342:3837":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:11110:2665":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:11030:123":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"16:6021:3973":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:10599:43646":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:23874:4989":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"4:14552:2974":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:2190:2229":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"4:11811:3089":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"1:2692:560":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:6326:2504":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"3:0:1750":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:53096:19603":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:53131:19606":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:6718:4011":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:4145:39573":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"5:5817:3327":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:48722:2913":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"4:14866:3100":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:11254:4046":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:45498:1938":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"16:2816:3993":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"4:13577:3098":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:46416:2512":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:11822:44349":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"4:3233:2228":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"1:10129:2411":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:50911:2340":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:4005:39556":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"18:636:59548":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:4922:42442":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:12552:48320":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"5:8170:2026":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:1622:37457":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:24204:2756":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:607:43411":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:3862:39543":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:57131:50189":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"12:1688:3631":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:24476:2763":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:21:652":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"16:5753:3711":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:11458:43840":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"12:812:3144":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:3664:2354":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:511:36559":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:13938:137":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:3321:1921":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"4:4596:2400":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"16:6391:3856":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:12040:48223":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:5379:40212":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:12408:48310":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:50801:2327":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"5:4583:4273":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"6:5167:40197":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:10656:43630":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"5:69:3374":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:49082:2795":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:3290:1913":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:4183:39575":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:48475:2440":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:5456:3692":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"18:720:51664":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"4:2456:4395":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"4:14345:2965":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"4:894:3190":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:3522:41798":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:6185:40624":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"4:15214:54345":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"1:48512:3115":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"4:11147:32578":{"crate_id":4,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"4:5697:2958":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"18:754:59557":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"14:250:41723":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"16:2794:3726":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:11337:4107":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"4:5990:3275":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:3320:4038":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"4:14858:53622":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:47402:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:6910:39742":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"4:15733:1698":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"6:5998:40616":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:52727:2339":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:45745:2532":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:47300:174":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:2779:2474":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:5561:3700":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"12:892:3608":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"4:15738:1702":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"1:47377:164":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"12:2025:3070":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:13497:49453":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:11539:44117":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"4:11069:2945":{"crate_id":4,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"6:1596:37454":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:7733:2544":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:52979:2326":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:3041:3979":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:12856:2360":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"9:722:3486":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"1:23757:51962":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:13788:49517":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"18:650:4174":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"14:47:41715":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"14:189:41715":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"4:1018:3213":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"1:46397:2510":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"4:15759:1721":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"5:2314:3447":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"4:15749:1711":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"17:10571:43645":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:11159:43436":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"4:11817:167":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"17:12028:48167":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"16:5975:3845":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:13520:49456":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:5109:1854":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:3247:1906":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"6:4293:39584":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:24948:2569":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:46139:2567":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"12:2018:3069":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"17:9440:43423":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:5580:3701":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"4:3235:3226":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:670:36603":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"6:5191:40199":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:12756:48400":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:0:471":{"crate_id":1,"path":["core"],"kind":"module"},"17:10529:43546":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:5371:40211":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:5941:175":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:49714:2377":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:3892:39546":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:1708:37464":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:0:1761":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:5421:3690":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:5029:42474":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:6520:53239":{"crate_id":1,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"1:46106:2892":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"6:1665:37460":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:11714:44224":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"4:12068:3162":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"6:4425:39601":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:7303:3879":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:6152:3804":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"4:11939:2026":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"12:1159:3616":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:46276:2496":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"15:230:3638":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"5:5857:4279":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"17:9332:4104":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:3207:2272":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"6:4272:39582":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"5:1080:4270":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:12287:48302":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:23927:2825":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"16:7146:3869":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"4:11209:2938":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:5274:40205":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"4:2855:165":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:32203:50277":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"17:12073:48225":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:11037:2663":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:46039:2896":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:6923:41174":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:11499:44056":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"4:15130:3266":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"4:4512:2987":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"1:51373:2324":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"4:12548:3222":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:10179:43500":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"4:5281:3265":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:48483:51659":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:12142:48291":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"16:7378:3809":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:3945:39549":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:7761:3881":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:12155:48292":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:13062:48916":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"5:1923:3069":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"1:3187:203":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"5:8286:2792":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:13051:13959":{"crate_id":1,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"6:6100:40619":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:3337:1924":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"4:12550:4317":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:11847:44363":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"4:1501:3145":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:47528:85":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"4:10469:3211":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"12:1180:3617":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"4:9516:4401":{"crate_id":4,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"5:4290:2547":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:7982:3025":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"4:13359:31006":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"12:1118:3151":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:6577:3861":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"4:2027:141":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:13819:49522":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:51683:2350":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:47223:2546":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"17:10420:4061":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:9839:4079":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:4704:42399":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:13446:49446":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:12494:48316":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"13:0:1753":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:3939:41959":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"4:11890:53553":{"crate_id":4,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"1:48978:2677":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:3990:39554":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:5292:40207":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"4:10979:2496":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"6:4164:39574":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"5:5772:4270":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"4:14937:3055":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"5:4612:220":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:632:36574":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"16:4762:42407":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"4:10717:114":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"6:5459:40219":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:5221:40202":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:49343:2703":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"17:12685:48390":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:12431:48311":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"4:3251:3231":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"4:8691:158":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:11628:44163":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:45710:1933":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:55861:221":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"4:11931:3173":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"9:686:3483":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"6:3881:39545":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:10955:2661":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"17:11015:43729":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"12:1651:3629":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:23576:2750":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:3743:4135":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"4:7013:33185":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"1:48196:70":{"crate_id":1,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"5:8419:3069":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"11:0:1757":{"crate_id":11,"path":["adler"],"kind":"module"},"1:3906:68":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"17:10887:43618":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:10140:4079":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"5:1549:91":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:3092:212":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"4:15092:3265":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"4:4273:3252":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:13356:49085":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"4:14789:3163":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"6:4387:39596":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:45998:2563":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"4:4614:2998":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"17:2314:4069":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"5:7426:4270":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"4:5561:2971":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"4:11860:3093":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"16:5384:3688":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:45985:2562":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"16:7971:123":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"4:8948:1883":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:6644:40989":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:47282:2000":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"4:10574:3454":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"6:6636:40988":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:6051:37385":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:50707:50348":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:12582:48322":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:10224:43504":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"16:3264:3984":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"12:840:3140":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"4:10668:3042":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"16:3506:3986":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"16:6087:3802":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:8849:4044":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:4852:42422":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:6852:39734":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:53018:2346":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:2831:169":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:10864:43620":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"9:809:3115":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:10477:4112":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"4:11045:2944":{"crate_id":4,"path":["std","net","ip","IpAddr"],"kind":"enum"},"14:244:41717":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"16:6238:3807":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:4033:39559":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"9:749:3487":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"4:14776:3092":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"5:8103:3068":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:10950:43728":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"4:1651:3153":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:49413:2707":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:4395:39597":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"4:12059:1887":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"4:6607:54392":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"4:783:4312":{"crate_id":4,"path":["std","thread","local","fast","Key"],"kind":"struct"},"12:181:3624":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"5:8236:3157":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:13799:49518":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:3429:3727":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"6:5228:40203":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:12741:48399":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"4:15485:4322":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:22409:53078":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:13986:49567":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:13306:49080":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:13402:49443":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"4:13898:4318":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"5:7753:219":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:47248:1999":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:2115:7493":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:48299:2405":{"crate_id":1,"path":["core","fmt","FlagV1"],"kind":"enum"},"17:13429:49445":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"12:784:3143":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:22633:2300":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"4:15742:1706":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"1:3282:1916":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"18:644:4177":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:4255:3286":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"4:11221:3310":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:23852:4998":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:11277:43402":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"4:8298:3408":{"crate_id":4,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"1:31864:2820":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"17:13746:49479":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"4:7686:3096":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"1:46447:2515":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"4:11042:2940":{"crate_id":4,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"1:22392:53045":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:49456:2712":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:51169:2337":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:10200:43499":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:49422:2708":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:4523:39612":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:47444:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"16:5314:41795":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:23920:4999":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:49542:2366":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:49403:2706":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:50888:2336":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:2801:101":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:23718:4966":{"crate_id":1,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"1:24510:2764":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:6101:3800":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"9:996:3551":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"4:12211:4395":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:11203:2669":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:13884:49532":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:12618:2662":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"4:12063:1888":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"12:866:3068":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"4:14395:2997":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"16:3195:3981":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:9034:43416":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"4:2159:2026":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:7631:2452":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:10584:4141":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:46172:2792":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:2867:163":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:49918:2805":{"crate_id":1,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"6:4193:39576":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:3294:1915":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:8039:51622":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"4:8727:53631":{"crate_id":4,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"4:1518:3147":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"5:4427:2546":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:4641:42386":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"18:837:2364":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"4:6769:2925":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"5:772:207":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:3184:1828":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:53157:19608":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:4431:39602":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:0:1762":{"crate_id":17,"path":["object"],"kind":"module"},"1:12902:2368":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"18:790:4164":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:4940:1844":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"4:1472:3068":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"4:7628:3090":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"1:47570:79":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"4:10989:2517":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"4:15746:1708":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"16:7158:3870":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:11779:44344":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:5563:40249":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"4:15745:1707":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"17:13348:49084":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"5:1446:3152":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"12:377:3623":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"5:1619:3140":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"4:13825:3089":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:11947:48115":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"4:4173:3028":{"crate_id":4,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"12:2039:3072":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"16:4386:42306":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"12:949:3147":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:48263:71":{"crate_id":1,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"18:866:4171":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"5:8352:3319":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:10106:4147":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:10502:43545":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:10279:4077":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:11750:44335":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:13978:49565":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:53142:19607":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:3268:1910":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:4284:2026":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"4:5889:3312":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:13240:48972":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:4684:2475":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:3157:111":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"5:8317:3404":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:9005:43415":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:7803:2359":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:49663:2375":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:47952:2408":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:47486:78":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:3868:39544":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:7295:3822":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"5:3028:56512":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"16:3549:41799":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:12632:48386":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:55848:221":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:49393:2705":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:3286:1914":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"16:2945:3999":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:10095:4146":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:45717:2443":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:23890:5000":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"16:7073:3868":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"4:2395:30994":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"4:696:3186":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"4:7683:3094":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"17:11304:43439":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:1522:37445":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:13842:49523":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:13898:49550":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:49307:2701":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"4:5284:3266":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"5:1461:3151":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:6028:37411":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:681:43412":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"4:11227:3278":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:45562:180":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:49867:2724":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:3262:1907":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:5481:11011":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:47696:87":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:49030:2680":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"4:5649:2956":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:12851:2365":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:12307:48303":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"4:3529:3008":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"4:1642:3152":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:3918:39548":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:48241:123":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"5:8364:3320":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"12:877:3069":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"1:49879:2720":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:6221:40627":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"18:610:4175":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"5:8149:3318":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"4:11331:3105":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"16:5505:3697":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"4:1075:3044":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"15:248:3639":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:51809:2342":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:4101:39568":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"4:1446:3140":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:4641:2471":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:9528:2692":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:11186:43437":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"7:0:1449":{"crate_id":7,"path":["unwind"],"kind":"module"},"6:610:36571":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:10407:4062":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:4325:39588":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"4:14965:3061":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:4120:39570":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"18:136:49921":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:294:59327":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:11700:2684":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"4:8803:1673":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"4:9059:53631":{"crate_id":4,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"1:50084:2734":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"4:8177:3213":{"crate_id":4,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"6:6864:39736":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:6219:3852":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:5086:1853":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:12917:48859":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:12095:48231":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"4:14808:53558":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"5:3022:2086":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:48931:2672":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"4:14320:2970":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"4:8951:1884":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:1744:37468":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"4:2183:3072":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:5790:3713":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"5:1581:2546":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"4:10685:2966":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"17:9799:43428":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"5:2761:3450":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"4:7573:3088":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"18:169:49923":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"4:10254:53634":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"4:4605:56147":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:52049:2322":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"16:4890:42435":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:9280:41794":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:32045:2810":{"crate_id":1,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"4:2397:30995":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"4:11465:3118":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"1:46154:97":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:51350:2321":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"13:120:41670":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"4:10515:30029":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"4:10329:4315":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"4:10487:2220":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"4:14112:2220":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:2877:170":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:23773:4954":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:3425:126":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:48949:2674":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"4:12049:1880":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:24340:2760":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:46083:2891":{"crate_id":1,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"16:4350:42295":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:11026:43432":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:10121:2408":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"18:729:59560":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:7024:4022":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:4470:39606":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"4:12010:3180":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:48500:142":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"4:8268:3213":{"crate_id":4,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"16:6269:3854":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:3392:3991":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:10041:43486":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:2776:94":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:46488:2454":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"4:6107:3284":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:7477:3826":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:12327:48304":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:12118:48232":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:13564:49463":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"16:5407:3689":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"4:15205:34905":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"16:6768:4015":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"6:6124:40621":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"5:8141:180":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:4008:43619":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:3327:1922":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:7786:3815":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"4:10699:125":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"1:4576:2987":{"crate_id":1,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"6:161:36251":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:13902:187":{"crate_id":1,"path":["core","task","ready","Ready"],"kind":"struct"},"1:37313:164":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"4:15747:1709":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"5:2246:3448":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"9:1020:3552":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:47360:2547":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:22411:53080":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:10236:4043":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:3646:1934":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:10788:43617":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"5:7593:3379":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:13054:48914":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:47612:86":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"16:5960:3720":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"12:968:3148":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:51398:2306":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:24544:2765":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"12:925:3142":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:1547:37449":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:10458:43544":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:45546:182":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"5:3359:3397":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"4:14565:3093":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:12982:48861":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"18:782:59548":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:9896:59094":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:46327:2501":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:13735:50426":{"crate_id":1,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"4:10570:31008":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"4:11422:3117":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"5:3732:156":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"4:6465:3047":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:11328:43440":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"5:2184:4272":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"4:5555:2973":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:13532:49459":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:11835:44362":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"4:11883:53650":{"crate_id":4,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"1:3088:213":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"6:4449:39604":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"9:157:3502":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"1:3220:1829":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"16:3018:3978":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"4:7403:115":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"12:1144:3152":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"4:11241:3287":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"12:2005:2546":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:50857:2348":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"18:766:59554":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:4230:42225":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"4:3249:3230":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"4:3617:3010":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:3299:1920":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"16:2773:4000":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:8752:2357":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:1572:37452":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:53116:19605":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:5815:3714":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:599:36569":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:13394:49416":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:11970:43650":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:52002:2318":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:53233:19612":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"5:1224:3446":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"16:7894:3840":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:9600:59470":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"5:6670:3350":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"4:10553:31001":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"6:5420:40217":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:6731:4012":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"4:5635:2954":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:1700:37463":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:6768:2507":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:13465:49450":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:6682:3818":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:6887:39739":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"4:10442:2304":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"1:3398:112":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"4:10945:2997":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"1:45587:181":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:46388:2509":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"12:2009:2026":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"16:6691:3864":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:52473:2351":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:6200:40625":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:13554:49462":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"16:6032:3731":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:49863:2726":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"5:983:3434":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:10623:43648":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"5:8133:2026":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:3623:1932":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"5:1628:3141":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:23955:2779":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"4:15751:1713":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"16:7571:3801":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:10253:4067":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"4:11072:2946":{"crate_id":4,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"4:11216:3307":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"4:6771:2926":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:7236:3877":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"9:27:3534":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"17:11555:44118":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:2204:2233":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:3972:39399":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"12:469:58660":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:4786:1861":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"14:231:3322":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:55716:2536":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:9250:2362":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"4:1497:3144":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:4931:1842":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"16:6591:3862":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"4:9346:56135":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"4:3108:124":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"16:4506:42326":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:13098:48917":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:3013:2304":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:3257:1908":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:5632:3703":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:45738:2531":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"1:48958:2675":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":15}