{"root":"0:0:1616","crate_version":"1.4.0","includes_private":false,"index":{"1:11952:26715":{"id":"1:11952:26715","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:11896:412","self::pattern":"1:11551:3116"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11556:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:31:1623":{"id":"0:31:1623","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[213,0],"end":[215,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["lazy",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"LazyStatic","id":"0:29:1622","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11926:1808":{"id":"1:11926:1808","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:11551:3116","`DoubleEndedIterator`":"1:7173:120","prim@char":"4:11896:412","str::matches":"1:11926:1808"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"1:42854:3149","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11556:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11940:31220":{"id":"1:11940:31220","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:28:1616":{"id":"0:28:1616","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[167,0],"end":[179,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"kind":"macro","inner":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"},"1:11917:29027":{"id":"1:11917:29027","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:11896:412","str::splitn":"1:11914:29025","self::pattern":"1:11551:3116"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"1:42772:3067","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11556:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11556:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11571:3132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11958:31226":{"id":"1:11958:31226","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:11896:412","self::pattern":"1:11551:3116"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11556:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11556:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11571:3132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11945:31223":{"id":"1:11945:31223","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11860:312":{"id":"1:11860:312","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:11861:28994","`u8`":"4:11913:1477"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11876:23247":{"id":"1:11876:23247","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"1:42636:3141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5341:2945":{"id":"5:5341:2945","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7192:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11870:31209":{"id":"1:11870:31209","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:11902:1380","str::slice_mut_unchecked":"1:11871:31210","crate::ops::Index":"1:2988:1996"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:11955:29029":{"id":"1:11955:29029","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:11896:412","self::pattern":"1:11551:3116"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11556:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11556:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11571:3132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11864:23063":{"id":"1:11864:23063","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:40660:177"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9732:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9732:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11880:31211":{"id":"1:11880:31211","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"1:42914:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11944:31222":{"id":"1:11944:31222","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11875:21053":{"id":"1:11875:21053","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:11896:412"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"1:42626:3142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11891:2126":{"id":"1:11891:2126","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:40660:177","prim@char":"4:11896:412","self::pattern":"1:11551:3116"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11556:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11862:1621":{"id":"1:11862:1621","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:40660:177"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9732:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9732:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11914:29025":{"id":"1:11914:29025","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:11896:412","self::pattern":"1:11551:3116","str::rsplitn":"1:11917:29027"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"1:42754:3071","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11556:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11932:31217":{"id":"1:11932:31217","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:11551:3116","`DoubleEndedIterator`":"1:7173:120","prim@char":"4:11896:412","str::rmatch_indices":"1:11935:31218"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"1:42800:3151","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11556:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11872:29013":{"id":"1:11872:29013","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:11873:29014"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11923:31215":{"id":"1:11923:31215","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11556:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11556:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11571:3132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11964:31228":{"id":"1:11964:31228","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:11896:412","self::pattern":"1:11551:3116"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11556:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11556:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11571:3132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11861:28994":{"id":"1:11861:28994","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:11913:1477"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1616":{"id":"0:0:1616","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[215,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\n# #[macro_use]\n# extern crate lazy_static;\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.4.0\")]","#![no_std]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:29:1622","0:31:1623","0:28:1616"],"is_stripped":false}},"1:11879:28453":{"id":"1:11879:28453","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"1:42904:3144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11858:26716":{"id":"1:11858:26716","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11119:3136"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11851:2085":{"id":"1:11851:2085","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11970:27421":{"id":"1:11970:27421","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:29:1622":{"id":"0:29:1622","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[185,0],"end":[188,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:11866:23064":{"id":"1:11866:23064","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9732:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9732:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:11859:31208":{"id":"1:11859:31208","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:11881:23017":{"id":"1:11881:23017","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"1:42942:3153","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5343:27420":{"id":"5:5343:27420","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:11972:27423"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11949:31225":{"id":"1:11949:31225","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:11896:412","self::pattern":"1:11551:3116"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11556:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11902:23004":{"id":"1:11902:23004","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:11896:412","self::pattern":"1:11551:3116"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"1:11375:3082","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11556:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5325:2792":{"id":"5:5325:2792","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7192:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11556:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11942:31221":{"id":"1:11942:31221","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5324:31880":{"id":"5:5324:31880","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:1913","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6939:8571","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:1913","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6939:8571","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11874:23015":{"id":"1:11874:23015","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:11896:412"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"1:42620:3143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11882:20991":{"id":"1:11882:20991","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:11896:412","self::pattern":"1:11551:3116"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11556:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11853:31206":{"id":"1:11853:31206","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11855:31207":{"id":"1:11855:31207","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:11853:31206"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11885:28628":{"id":"1:11885:28628","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:11896:412","self::pattern":"1:11551:3116"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11556:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11905:29023":{"id":"1:11905:29023","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:11551:3116","`DoubleEndedIterator`":"1:7173:120","prim@char":"4:11896:412","str::split":"1:11899:28452"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"1:42668:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11556:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11556:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11571:3132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11911:31213":{"id":"1:11911:31213","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:11551:3116","str::split":"1:11899:28452","prim@char":"4:11896:412","str::split_terminator":"1:11908:31212"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"1:42718:3147","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11556:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11556:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11571:3132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11920:31214":{"id":"1:11920:31214","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11556:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11935:31218":{"id":"1:11935:31218","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:11551:3116","`DoubleEndedIterator`":"1:7173:120","prim@char":"4:11896:412","str::match_indices":"1:11932:31217"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"1:42818:3152","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11556:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11556:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11571:3132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5342:27419":{"id":"5:5342:27419","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:11971:27422"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11946:31224":{"id":"1:11946:31224","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:11896:412","self::pattern":"1:11551:3116"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11556:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11556:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:11576:3131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11888:28630":{"id":"1:11888:28630","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:11896:412","self::pattern":"1:11551:3116"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11556:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11556:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11571:3132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11868:23065":{"id":"1:11868:23065","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9732:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9732:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:11971:27422":{"id":"1:11971:27422","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11850:802":{"id":"1:11850:802","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:11896:412"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11975:2865":{"id":"1:11975:2865","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4514:2865"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"1:42958:2866","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5339:31883":{"id":"5:5339:31883","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7192:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5331:31882":{"id":"5:5331:31882","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7192:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11973:31230":{"id":"1:11973:31230","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4513:31230"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"1:42949:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11878:23024":{"id":"1:11878:23024","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:11877:23018"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"1:42933:3154","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11899:28452":{"id":"1:11899:28452","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:11551:3116","`DoubleEndedIterator`":"1:7173:120","prim@char":"4:11896:412","str::split_whitespace":"1:11877:23018","str::rsplit":"1:11905:29023"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"1:42650:3069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11556:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11938:31219":{"id":"1:11938:31219","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11849":{"id":"1:11849","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["1:11850:802","1:11851:2085","1:11852:31205","1:11853:31206","1:11855:31207","1:11858:26716","1:11859:31208","1:11860:312","1:11861:28994","1:11862:1621","1:11864:23063","1:11866:23064","1:11868:23065","1:11870:31209","1:11871:31210","1:11872:29013","1:11873:29014","1:11874:23015","1:11875:21053","1:11876:23247","1:11877:23018","1:11878:23024","1:11879:28453","1:11880:31211","1:11881:23017","1:11882:20991","1:11885:28628","1:11888:28630","1:11891:2126","1:11895:2084","1:11899:28452","1:11902:23004","1:11905:29023","1:11908:31212","1:11911:31213","1:11914:29025","1:11917:29027","1:11920:31214","1:11923:31215","1:11926:1808","1:11929:31216","1:11932:31217","1:11935:31218","1:11938:31219","1:11940:31220","1:11942:31221","1:11944:31222","1:11945:31223","1:11946:31224","1:11949:31225","1:11952:26715","1:11955:29029","1:11958:31226","1:11961:31227","1:11964:31228","1:11967:31229","1:11969:27417","1:11970:27421","1:11971:27422","1:11972:27423","1:11973:31230","1:11975:2865","1:11976:31231"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11908:31212":{"id":"1:11908:31212","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:11551:3116","str::split":"1:11899:28452","prim@char":"4:11896:412","`DoubleEndedIterator`":"1:7173:120","str::rsplit_terminator":"1:11911:31213"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"1:42700:3148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11556:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11873:29014":{"id":"1:11873:29014","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:11872:29013"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11972:27423":{"id":"1:11972:27423","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11895:2084":{"id":"1:11895:2084","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:40660:177","prim@char":"4:11896:412","self::pattern":"1:11551:3116"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11556:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11556:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11571:3132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11929:31216":{"id":"1:11929:31216","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:11551:3116","`DoubleEndedIterator`":"1:7173:120","prim@char":"4:11896:412","str::matches":"1:11926:1808"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"1:42872:3150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11556:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11556:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11571:3132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11877:23018":{"id":"1:11877:23018","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:11878:23024"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"1:42924:3145","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11852:31205":{"id":"1:11852:31205","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11976:31231":{"id":"1:11976:31231","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4511:31231"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"1:42967:2886","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11871:31210":{"id":"1:11871:31210","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:11902:1380","crate::ops::IndexMut":"1:2992:1997","str::slice_unchecked":"1:11870:31209"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:11969:27417":{"id":"1:11969:27417","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5340:31884":{"id":"5:5340:31884","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:286:1913","`String`":"5:7192:222"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:1913","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6939:8571","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11961:31227":{"id":"1:11961:31227","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:11896:412","self::pattern":"1:11551:3116"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11556:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5323":{"id":"5:5323","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5324:31880","5:5325:2792","5:5328:31881","5:5331:31882","5:5339:31883","5:5340:31884","5:5341:2945","5:5342:27419","5:5343:27420"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11967:31229":{"id":"1:11967:31229","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:11513:126","`FromStr`":"1:11512:2642"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:40802:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"1:11512:2642","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:11512:2642","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5328:31881":{"id":"5:5328:31881","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7192:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11556:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"17:10026:15901":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:5000:15327":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:40490:2990":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:38821:198":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:5655:15560":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"4:7826:129":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"6:4389:12688":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:1687:10222":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:21569:23830":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:13082:19781":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:45090:20680":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"5:6381:2328":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:4396:12689":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"4:5690:1956":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:41055:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:43657:3219":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"4:3322:2946":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"1:9875:2558":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:2807:1983":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"4:1435:143":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:2840:1990":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:7509:15627":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:6059:12588":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"5:7115:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"11:2053:8552":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"6:7521:14392":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:12770:19766":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:11946:19021":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:42558:2590":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"5:286:1913":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:1509:10204":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"5:3537:2559":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:3387:2838":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"17:9534:15780":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:4248:12675":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:2824:1986":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:11446:18515":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:13667:19826":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:40658:179":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"5:6543:2381":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"5:4976:1953":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:8996:2899":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"17:9028:15737":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:3241:1938":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:40853:2559":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"6:546:9302":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:13879:19841":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"4:11911:735":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"1:50299:21455":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"16:5594:15556":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:12318:19044":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:20626:8265":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"5:4855:2357":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"18:727:19874":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:4483:12700":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"4:4432:8735":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:4231:205":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"6:6764:13831":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:11220:15966":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"6:4820:12734":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"4:6930:2410":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"4:11143:2423":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:20839:8261":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"4:6751:8825":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"4:4679:8714":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"4:10700:118":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"5:3741:2328":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"4:8740:8807":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"1:39413:2934":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:505:9298":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"5:1609:2328":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:9443:15770":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:594:9309":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:21553:20688":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"16:7488:15625":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:12358:19047":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:6594:10145":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:21609:2645":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:0:1841":{"crate_id":17,"path":["object"],"kind":"module"},"17:9683:15800":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:20600:8264":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:29970:2796":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:6717:14578":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:2677:224":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"4:938:8549":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:10039:15859":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:5402:14600":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:42700:3148":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"4:8181:8684":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"17:9796:15802":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:13744:19831":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"4:8772:8809":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"4:2474:8663":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"4:5716:1957":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"4:3167:8673":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:4322:12681":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:3176:2005":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"4:3205:8674":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"16:6671:14579":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:11556:3130":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:42456:3075":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:39257:2895":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:10580:15950":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:4766:12728":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:31798:2837":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"17:8598:15731":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:11844:19015":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:12510:19057":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"4:2384:1846":{"crate_id":4,"path":["std","io"],"kind":"module"},"4:2359:8619":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"4:6363:1750":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"4:6615:27899":{"crate_id":4,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"1:9060:3036":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"4:6580:215":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:6293:15582":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"5:3946:2328":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"4:3969:8699":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:11532:18521":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:2770:1976":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:4549:12705":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"4:7803:8631":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"6:4805:12733":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:12902:19770":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"5:7175:8608":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:39672:2977":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:1727:21359":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:6521:13818":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:1527:10207":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:10897:15752":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:9895:15822":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:13791:19834":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:6520:15598":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"4:919:8545":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:8573:15730":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:6460:15594":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"14:165:14564":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:20394:26330":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"4:3246:8671":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"4:3871:8694":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:9839:15795":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:13053:19779":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"14:160:14563":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"11:2205:8541":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"4:8151:3141":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"4:2864:208":{"crate_id":4,"path":["std","io","error","Result"],"kind":"typedef"},"1:20729:8259":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:41697:67":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:5449:2971":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:39620:2983":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:20411:26467":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"4:6182:2399":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:46763:8251":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:1589:10214":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:7173:120":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:1895:2584":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:2819:1985":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:40734:2090":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"4:8489:2558":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"16:5708:15563":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:45012:20681":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"4:7579:8522":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"4:9874:20720":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"6:4649:12713":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:2502:14641":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:9907:15851":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"4:733:141":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:44693:8318":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:22108:175":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"5:3653:2560":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:3931:2357":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:9064:3037":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:7697:15638":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:2850:1992":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"5:2404:2553":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:7094:2956":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"4:11384:8688":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:13812:19836":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:12167:25978":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:40935:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:3988:21664":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:4662:12715":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:6904:15611":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:22306:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"6:6548:8764":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:50278:21462":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"11:1845:2317":{"crate_id":11,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:48925:244":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:11060:15758":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"5:1055:2552":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:30010:2798":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"0:0:1616":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"1:3086:2000":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"4:2866:127":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"1:9513:2446":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"4:2341:2800":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"1:20434:26465":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:7859:15645":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"4:10929:2420":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:45973:8331":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:13324:19799":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"5:5648:2352":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:473:9293":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:38881:200":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:11136:15963":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:21447:21266":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:21734:2649":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"5:1440:8547":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:9148:33990":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:11105:3063":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"16:3640:14668":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"5:6939:8571":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"16:2967:14660":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:5104:15359":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:4714:12721":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"11:669:8546":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"4:1567:2090":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"4:11902:1380":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"17:13376:19804":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"4:11320:2427":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:4743:12725":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"4:7665:8555":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"11:815:8548":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"4:3921:8696":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:13332:19800":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:40467:153":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:11089:3061":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:2404:14637":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:39602:2972":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"5:1992:2562":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:4457:12697":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:10316:15862":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"4:9997:2574":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:44891:8305":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"16:3782:14685":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"6:481:9294":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:30040:20556":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:2744:2757":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"16:7065:33221":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:10186:3072":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"4:4756:8708":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"4:5331:8800":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"17:11969:19022":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:10615:15942":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"0:28:1616":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"16:7042:32951":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:43566:203":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"6:4261:12676":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:42800:3151":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:6061:14605":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"5:877:2558":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:11282:18505":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:30574:181":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:1527:2357":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"6:1645:10218":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:8605:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:43150:3173":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:6819:15607":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:3170:2003":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:13344:19801":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"4:3935:8698":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:242:33991":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"4:8397:8789":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"4:11913:1477":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"1:43627:3214":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:4828:12735":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"4:6479:1962":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:499:9297":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:9512:15782":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:44915:8287":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"4:3057:8678":{"crate_id":4,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"11:1840:2352":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:6496:10144":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"16:7478:15624":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:10555:15914":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"3:0:1829":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"2:0:436":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"4:620:8525":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:9322:33984":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:229:208":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:40507:2991":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:10923:15753":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"4:8347:8788":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"1:11119:3136":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:39948:1750":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:46511:8327":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"9:0:1834":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:2426:14638":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:10158:3071":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"9:421:14439":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"16:6488:15596":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"6:4703:12720":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:10681:15954":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:44462:20525":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:20813:8255":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:11319:18507":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:46587:8241":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:4787:12731":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"5:7217:8864":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"4:7851:27914":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"15:0:1839":{"crate_id":15,"path":["addr2line"],"kind":"module"},"4:9115:26833":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","fast","DtorState"],"kind":"enum"},"1:39304:2866":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:12592:19063":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:43393:3128":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"4:11912:731":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"6:4812:990":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:12085:19030":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"4:557:2566":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:5959:13410":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:21661:20566":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:11653:18530":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:39279:2886":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:48938:244":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:39310:2888":{"crate_id":1,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"4:10710:2571":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"4:3673:8689":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"4:5317:8799":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"17:11037:15757":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:21260:26334":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"5:1410:8544":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"5:7192:222":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:1677:10221":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:9275:33980":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:6981:15614":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:39663:2976":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:22009:176":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:39470:2933":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"4:7038:28608":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"16:4728:15271":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"4:2537:2393":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:44268:20555":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:12059:19028":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:11090:15760":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:40845:2558":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"4:11914:1474":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"5:3524:2558":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:2905:116":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"4:3244:8670":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"4:1984:183":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:487:15719":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:10142:15905":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"4:8085:2941":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"1:11512:2642":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:6571:10171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:3375:2839":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"4:8746:184":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"17:12419:19051":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:11813:15908":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"4:3129:28426":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"4:7942:27731":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"17:13842:19838":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"4:3991:8703":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:10747:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:1618:2775":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"4:4092:8725":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:2933:15863":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"4:10680:8631":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"5:6700:2385":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:13698:19829":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"16:5963:15572":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:3504:2352":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"16:6146:192":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:4163:1747":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:39631:2974":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"5:3604:2328":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:2678:223":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:46549:8292":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:9722:8710":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"18:96:19854":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:10626:15952":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:40718:2558":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:43369:3121":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"18:699:19873":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:39579:2970":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:6757:13830":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"4:8230:8732":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"4:3352:2357":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"16:5032:15335":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"4:8786:8810":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"17:11391:18511":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"4:4675:8709":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:12550:19060":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:10465:15919":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"4:6831:2425":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","fast","Key"],"kind":"struct"},"1:40709:2089":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:2229:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"4:354:8520":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:13488:19816":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"4:8975:27737":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"11:353:2315":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"18:644:34007":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"18:564:19882":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:2988:1996":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:40726:2559":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:44582:8286":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:2587:127":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"5:1363:2559":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"5:2913:30955":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:11821:15906":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"11:1065:32830":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"4:11916:1476":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"11:1085:2549":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:20682:8256":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"4:11896:412":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"17:11520:18520":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"4:11862:27748":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:6662:15602":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:8389:15724":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:9265:15742":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"4:360:8521":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:4904:15303":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"4:7268:27732":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"1:22240:168":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"9:352:14453":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"5:6183:2352":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"4:1987:182":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"4:6532:1966":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"6:4520:12703":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:5886:15569":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:11573:18524":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"4:7578:8710":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"1:38806:1998":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:41295:1954":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:4687:12718":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"11:810:8545":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"16:6890:15610":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"16:7529:15629":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:40553:21456":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:39397:20711":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:7016:33259":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"4:10310:8807":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:22141:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"6:62:8922":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"16:6854:15608":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:9469:15772":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"4:3676:8688":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:6022:15575":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"4:11917:1473":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"4:10668:26869":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:2490:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"5:6675:2371":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"4:5064:189":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"6:4408:12691":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:2939:1755":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:13249:19793":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:9653:15815":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:2502:236":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"16:8214:15656":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:13257:19794":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"16:6506:15597":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"4:3207:8675":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"5:2166:30389":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:12385:203":{"crate_id":1,"path":["core","task","ready","Ready"],"kind":"struct"},"6:5759:13395":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"18:80:19853":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:4429:12694":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:45059:20573":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:2858:1994":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:4346:12683":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:21682:20589":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"13:0:1832":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:9545:15779":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"4:7813:8628":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"1:21091:8260":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:8186:2067":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:7452:12901":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:9200:25365":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:39751:2982":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:45113:20590":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"4:10720:27865":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:11301:3160":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:12345:19046":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:10516:15913":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:22807:2643":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:9188:34000":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:44793:8310":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:7386:14363":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:8269:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"4:11052:8639":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:11600:18526":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:12461:19054":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:39982:2949":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:42958:2866":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:6743:13829":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"4:1574:2317":{"crate_id":4,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"6:7195:14202":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:39541:2959":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"16:7467:15623":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:13041:19778":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"4:10824:26758":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:31794:25367":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"17:12194:19037":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:9853:15849":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:39588:23011":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"16:5071:15350":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"6:586:9308":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"4:9069:8822":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"6:6667:13825":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:11339:18508":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:41438:3036":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:2760:1974":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"16:6696:15603":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:7201:14203":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:20841:8259":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:9866:15816":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"14:187:14571":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"4:11845:26888":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"6:4571:12707":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"5:5754:1953":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"9:481:14436":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:2931:14659":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"5:3181:8560":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:9545:2451":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"4:5560:2399":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:39013:20852":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"6:4882:12741":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:2338:187":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"5:1194:8552":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"5:1451:196":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:6442:15593":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:7511:14391":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:44338:8308":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:39333:2890":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"16:6431:15592":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"5:6983:30424":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"18:491:34029":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:4218:12672":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:20379:26330":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"4:5367:8802":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"4:483:2387":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:41175:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:5800:13396":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"5:217:2326":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:43177:3174":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"4:4850:8760":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:9052:119":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"16:6132:15576":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:13612:19821":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:12622:15758":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:9047:111":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"4:412:163":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:42529:3076":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:12098:19031":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:43381:3125":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:44600:20516":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:9218:15741":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:2992:1997":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"11:98:32833":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:12923:19772":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:6535:2310":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"1:41015:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:39990:2951":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"18:636:34017":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:7487:12906":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:12224:19038":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"15:219:14586":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"16:3585:14667":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:7103:15617":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:20563:8263":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"17:13821:19837":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"5:1239:8554":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"4:10650:26850":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:4412:1932":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:2808:14654":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"5:1210:8553":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"11:2184:20394":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"5:3988:2559":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"4:9181:2229":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"4:1770:601":{"crate_id":4,"path":["std","env"],"kind":"module"},"4:7702:25367":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"4:9059:216":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:41957:23806":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"4:11921:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"1:41974:144":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"4:877:8543":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:21621:20596":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:9946:15824":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:10428:15946":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:6390:15590":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:1710:10225":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:11422:18513":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:12138:19034":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:38903:199":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"4:5382:8803":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"16:5811:15567":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"11:2198:32827":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"18:507:34007":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"18:113:19855":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"4:3289:8660":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"4:11903:1459":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"18:609:34036":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:2918:1937":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:10452:15920":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:42854:3149":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"17:10000:15899":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:4091:1940":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"16:7029:33264":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"11:697:8547":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"18:614:34011":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:4568:15207":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:9886:15823":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"5:4148:2558":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:46427:8289":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:42818:3152":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:13145:19784":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"16:7743:15640":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:39027:2862":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:41417:3034":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"4:8164:3144":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"6:6634:13822":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:4872:15295":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:2791:1980":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:2854:1993":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"4:3397:2570":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:8184:2069":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"11:1029:8553":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:11777:111":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:10068:15902":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"4:8134:2966":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"16:3300:14665":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:2846:1991":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:5741:15565":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:6512:9177":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:31807:2846":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:7524:2953":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"4:5351:8801":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"16:6243:33302":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:2718:2841":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:48964:244":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:13292:19796":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:10569:15916":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"16:7588:15632":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"4:11897:1493":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"6:6611:10148":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:6053:13439":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:41135:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:4910:12744":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"4:4100:8726":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"11:1138:8554":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"4:1787:8576":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"4:6290:164":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:42967:2886":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:46633:8245":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"4:3983:8701":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:44647:8253":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"18:515:19879":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:5902:13403":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:10685:3080":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"14:215:14572":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:46701:8249":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:13385:19805":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"4:949:2544":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"11:632:2558":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:43056:3169":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:4489:12701":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:6400:15591":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:20413:26463":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:39215:2894":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:43669:3217":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"10:36:32824":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"6:1695:10223":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:2668:14648":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:4583:12708":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:40895:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:6701:2938":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"8:0:1833":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"4:11919:1530":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"5:1348:2558":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:12158:19035":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"4:11894:369":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"1:39611:2973":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"14:202:8862":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"11:1003:2548":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:2936:1910":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"5:7087:8541":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:5951:13409":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"4:10690:129":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"4:11229:26895":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"4:10418:8670":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:1611:580":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"17:13433:19810":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"11:1852:8557":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"4:3436:2899":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"11:861:8551":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:1723:10226":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:5910:13404":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:5920:2984":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:6607:2965":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:10491:15917":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"16:8156:15653":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:386:15718":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"4:5244:119":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"1:11565:3133":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:4781:12730":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:8788:15733":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:46607:8243":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:2332:180":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"17:13639:19823":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:4240:1922":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:9312:15743":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"14:31:14563":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:4400:15159":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"4:8506:8794":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:8971:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"1:9732:220":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:40609:2994":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:39020:1928":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"17:12293:19042":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:2731:1907":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:20832:8710":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:4422:12693":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:4720:2907":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:39941:23019":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:5696:21185":{"crate_id":1,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"1:2834:1989":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:10172:3067":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"4:504:2345":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:43445:3185":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"4:4070:28607":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:12915:19771":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"5:1039:31002":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"4:8101:2571":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"17:11993:19023":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"10:0:1835":{"crate_id":10,"path":["adler"],"kind":"module"},"5:3126:30918":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:4741:26166":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:2454:2608":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:13101:19765":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"4:8864:8817":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"4:8236:8723":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"4:7516:2412":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:43377:3126":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"11:659:2090":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:4313:12680":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"4:3611:8685":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"4:8157:3069":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"1:48568:8332":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"6:4890:12742":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:39510:2958":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:43584:193":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"17:11891:19018":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:13309:19797":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"11:725:8543":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"5:7132:8609":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"4:645:8529":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"4:2206:128":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"1:2130:581":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"11:853:8550":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"5:7013:30403":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"5:5132:2328":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:8773:26508":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:20366:2830":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:42942:3153":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:10743:15745":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"18:582:2830":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:11800:19014":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"4:10940:2421":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"5:3273:2317":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"4:1064:2548":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:13411:19807":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"4:2215:8611":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"18:671:19870":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:42204:20416":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"4:903:2352":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:10721:15921":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:10589:15951":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"5:0:284":{"crate_id":5,"path":["alloc"],"kind":"module"},"4:7590:8513":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"4:9383:2416":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:11785:19013":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"16:6254:15581":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:7626:15634":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"5:4277:2360":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:11484:18518":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:45507:8299":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:42718:3147":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:12046:19027":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:13015:19775":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"16:2694:14649":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:13169:19786":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"4:913:2317":{"crate_id":4,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"17:8753:15732":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:43385:3129":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:9617:15778":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:22075:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"6:4795:12732":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"4:11405:8690":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:22207:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:45347:8326":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"4:4252:8730":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:578:9307":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:6868:33256":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:4510:15197":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:21698:20515":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:9924:3069":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"17:10712:15957":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:12113:19032":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"4:7843:118":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:13066:19780":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:49003:244":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"4:7467:15720":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"11:119:2311":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:44314:8316":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"5:780:2331":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:4988:12751":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"4:11263:2425":{"crate_id":4,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"4:6003:2401":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"11:1120:14555":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:13419:19808":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:7683:15637":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:4720:12722":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"4:8092:8677":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"9:174:14540":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:12634:19065":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:42772:3067":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"4:4324:8724":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"6:487:9295":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"4:7698:8594":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:10635:15943":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"16:2720:14650":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:5367:14604":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"5:7005:196":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:6544:15599":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:6541:13820":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:10257:15866":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:43373:3124":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"11:2190:32826":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"11:822:8549":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:5772:13357":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:11410:18512":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"4:8963:27886":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"6:4757:12727":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:4727:12723":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"4:2211:2386":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"6:7434:12898":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:6079:13440":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:3160:30913":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:4900:12743":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:2829:1987":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"11:1872:8560":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"6:1559:10211":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:12835:19768":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:6179:15577":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:7475:12904":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"5:6948:8837":{"crate_id":5,"path":["alloc","alloc","AllocErrorPanicPayload"],"kind":"struct"},"17:9340:15744":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:10125:15880":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:12576:19062":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:5813:13398":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:9721:15799":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"4:9018:26811":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"16:3030:14661":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"4:859:2559":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:9380:15767":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:9068:33989":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:9986:15853":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:3639:2090":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"4:6403:1965":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"11:300:32831":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:44523:8297":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"4:10820:8594":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"4:8176:8686":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:43401:3123":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:2675:1935":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:12411:139":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:39972:2441":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"6:1534:10208":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:10660:15758":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:40870:181":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:11770:19012":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"11:1832:2558":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:46365:8324":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:2319:14633":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:13399:19806":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:13506:19818":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"11:274:2541":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:12307:19043":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:46671:8247":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:13625:19822":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:39570:2969":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:10303:15861":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"16:2470:14640":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:44839:8298":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:4302:1927":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:2573:115":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:2493:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"16:2616:14646":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:8180:15655":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"4:10845:26847":{"crate_id":4,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"6:4697:12719":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:13453:19812":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:2812:1988":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"4:4574:26741":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"5:3155:8557":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:4312:1928":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"18:755:19875":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"11:1555:14557":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:2795:1984":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:42594:3140":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:2863:1995":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:45767:8312":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"5:5176:8856":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:10079:3073":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"4:924:8546":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:39326:2889":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:38986:2840":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"4:11918:780":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"6:4611:8692":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:2765:1979":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:9409:15768":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:8283:15721":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:4416:12692":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"11:738:8544":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"9:388:14438":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"18:481:19877":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:11324:3157":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:43262:3134":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:38720:2008":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:43249:3178":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:39347:2892":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:9967:3082":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"16:6943:15613":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:8683:15706":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:39702:2979":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:9056:3034":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:9267:140":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"6:123:8977":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:4962:12749":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:7098:2955":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"5:1401:8543":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"4:8816:8818":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"4:7947:8666":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:20651:8254":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"17:13240:19792":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"4:8420:8790":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:13651:19824":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"5:3114:2558":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:39653:2975":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:21636:21463":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:41215:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:11109:15761":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"16:6474:15595":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:4624:15215":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"4:3445:27383":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:46622:8244":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"4:11878:26749":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:2742:14651":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"4:9978:8586":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:13689:19828":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:12126:19033":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"5:5770:2563":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:45583:8306":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:1550:10210":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:5917:13405":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:7635:15635":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"5:7272:2317":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"16:5976:15573":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:42626:3142":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:9628:15777":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"4:10645:26839":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"4:640:8528":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:2506:235":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:38979:2002":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:7077:15616":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:9917:15848":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:9098:15738":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:1978:15821":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"4:11907:634":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"1:44937:8290":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"7:0:1520":{"crate_id":7,"path":["unwind"],"kind":"module"},"6:567:9305":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:4334:12682":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:12006:19024":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:12354:2403":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"16:5305:15536":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:7469:12903":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:40802:208":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"17:13469:19814":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"5:7099:8542":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:10735:15958":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:10967:15755":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"5:7289:2374":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"5:3121:8558":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"11:762:2317":{"crate_id":11,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"16:7837:15644":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:2879:14657":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"4:5496:8805":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"1:21:672":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"1:42650:3069":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"4:1897:8604":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"16:6361:15588":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:5722:13391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:9566:15742":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"4:4108:8727":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"18:766:19868":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:653:9357":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:8360:15723":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:9424:15769":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"13:110:32884":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:7428:12897":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:860:2336":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"4:7786:8629":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"4:10047:27492":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"6:5945:13408":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:10354:15869":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:12959:19773":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:41095:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:7135:150":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:5998:15574":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:4751:12726":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:25617:2644":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:41667:67":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"4:4899:8769":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"1:42477:3079":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"4:3907:8695":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:6728:15604":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:4733:12724":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:7366:15619":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"11:2178:32829":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:10798:15747":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:8142:15652":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"4:7867:2560":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:10402:15933":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"4:2611:8665":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:8667:14600":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"5:5426:2367":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:9748:15741":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"4:0:1372":{"crate_id":4,"path":["std"],"kind":"module"},"6:4237:12674":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"4:7791:8630":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"17:12894:19769":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"4:5553:204":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:10377:15867":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"9:445:14437":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:11879:19017":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"18:736:19867":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:12607:19064":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"4:11247:26836":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:5797:33086":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:41965:3053":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:13121:19782":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:8610:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"4:5759:1964":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:48951:244":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:46596:8242":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:2970:2006":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:39340:2891":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"4:1823:8586":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"1:1002:1749":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"4:11199:26762":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:42620:3143":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"4:4635:8761":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:2594:14645":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"11:1836:2090":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"16:4540:15203":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"4:11906:633":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"1:10117:3074":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:4618:12710":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:2496:148":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"4:3979:8700":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:41789:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"4:4638:8734":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:21760:2650":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"4:8225:8731":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:2756:2845":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"17:11193:15965":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"4:961:8551":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:13659:19825":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"4:11166:8813":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:14:1809":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:30004:2797":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:4952:12748":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:525:9299":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:1652:10219":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"4:4572:26739":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"5:1713:2317":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"6:4656:12714":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:10823:15748":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:9478:15789":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:42428:3066":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"18:719:19866":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:1609:10216":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:5693:15562":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"5:1379:2090":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"16:6336:15586":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"11:1518:14556":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:2674:1906":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"17:13477:19815":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"5:7040:2090":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:9670:15801":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:8931:15704":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"4:4504:8752":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"4:10655:8627":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:8548:15729":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:11615:18527":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:11163:15964":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:13024:19776":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"4:11501:14590":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:3815:14694":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:40632:2995":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:11576:3131":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"14:221:14573":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:2686:1934":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"11:0:1836":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:43102:3172":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"11:751:2352":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:4841:12736":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"4:1563:2558":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:42446:2586":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:1736:2581":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:42437:3065":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:5990:13411":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:43071:3170":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:572:9306":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:22174:2647":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"18:574:34007":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:10527:15949":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:46473:8307":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"5:4340:2360":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:5752:13394":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:8632:15702":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:9054:3033":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"6:5698:13389":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:4871:12739":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"4:9064:217":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:42208:3087":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"16:8170:15654":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"16:5571:15555":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"5:5843:2357":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:10545:15756":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:9822:15809":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"11:985:8552":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"16:7411:15620":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:1583:10213":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:531:9300":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:11011:15705":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:4445:15180":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"4:4172:8729":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:5944:15571":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:41685:109":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"11:777:2321":{"crate_id":11,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"4:6095:2406":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"4:10412:8672":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"0:29:1622":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"17:10104:15860":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:44392:8329":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"4:5920:204":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:40785:2159":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"5:677:229":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:30026:67":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:9523:15781":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"5:6032:8826":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:11234:18503":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:42548:3077":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:7173:9254":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:5890:13402":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:5346:15553":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:8909:3141":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:13219:19790":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"4:8983:15617":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:43239:3177":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:9228:33995":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"4:6367:1959":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:10885:15751":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"4:3126:27702":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:8443:15726":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:12522:19058":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"4:3132:28427":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:12483:19055":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:3047:14662":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"4:11909:733":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"17:13803:19835":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:9488:15787":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:0:1840":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:8072:15648":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:40776:2066":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:4628:12711":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:9350:33997":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:13316:19798":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:39206:2870":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"16:3899:14730":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:4000:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"5:3665:2562":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:43214:3175":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:9062:192":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"16:2905:14658":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"5:1460:8563":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"4:8479:8792":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"17:10270:15864":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:2830:14655":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:4369:12686":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"4:11901:1350":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"16:8025:15646":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:46576:8240":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"4:1591:8559":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"4:10205:8803":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:247:33986":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:38947:1999":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:21354:8710":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"16:8109:15650":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:8291:3130":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:2781:1978":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:11471:18517":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"4:1846:2229":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"1:45317:8323":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:9557:15741":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:31758:2835":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"5:7162:8607":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"5:6631:242":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"4:8252:8733":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"16:5779:15566":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:9596:15783":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:43576:209":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"4:8495:8793":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"16:7596:15633":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:20808:8710":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"6:493:9296":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:4274:12677":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:8256:15657":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:11551:3116":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"4:5904:2399":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:8718:15707":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:2572:14644":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:9641:15790":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:38925:201":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"4:7682:8593":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"4:11214:26723":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"4:4841:8759":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"4:11070:26753":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:13516:19819":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"5:3147:8559":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"4:8437:8791":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"1:39560:2968":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:8185:2068":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"15:198:14582":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"5:6952:2090":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:4929:12746":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:8979:33996":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:7131:133":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"5:4078:2357":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:5931:13406":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"4:9088:8639":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"16:7317:33303":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:13194:19788":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:13233:19791":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:6307:15583":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"18:538:19881":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:12033:19026":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:9772:15804":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:2764:14652":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"4:10458:2418":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"7:32:14408":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"4:4677:8713":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"4:11867:8532":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:1663:10220":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"12:0:1837":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"11:834:2544":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"4:7616:2418":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"1:20432:26468":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:40794:191":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:39006:15656":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"17:10936:15754":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"16:6793:15606":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"4:8922:106":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"16:2862:14656":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:1787:15803":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"11:387:32835":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"4:11508:14590":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:2667:218":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"17:13443:19811":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:7144:1912":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"4:10415:8674":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"5:2903:30953":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:9310:3051":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:11628:18528":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:42608:3139":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"5:2633:30399":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"4:1050:8552":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:3189:20359":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"11:1534:2551":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:40524:2992":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:4994:12752":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:11355:18509":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:4023:2869":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:9933:15826":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:22339:167":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"16:4480:15191":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:7440:12899":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:5716:13390":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"4:5683:1955":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:553:9303":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:1747:10228":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"11:320:2313":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:6518:2098":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:9006:131":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"6:4681:12717":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:10200:3068":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"4:7595:8514":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"6:4379:12687":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:6164:33242":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"4:1585:8558":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:7196:1911":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:4818:15289":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"4:7859:8664":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:6698:13826":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:45617:8288":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:4921:12745":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:40644:2996":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"4:5567:2400":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:41737:71":{"crate_id":1,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"4:8218:2994":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:21500:21268":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:6773:13832":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"4:1570:2352":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:9138:15739":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:39723:2980":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:10505:15948":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"4:11910:734":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"16:2546:14643":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"9:502:14440":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"5:2902:2152":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"4:10946:2422":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:11340:3159":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:6649:13824":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:4789:15284":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:12282:19041":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:6351:15587":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:7498:15626":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"16:4969:15320":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:45429:8311":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:29781:2609":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:42949:2889":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:40743:2065":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"17:12646:19066":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"4:2547:2391":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"16:4037:14844":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:44545:8301":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:4501:12702":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"4:3877:8693":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"4:11089:8822":{"crate_id":4,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"16:4845:15292":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"9:52:14456":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:2787:1977":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"4:932:8548":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"4:11696:2431":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:4775:12729":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"4:2208:8610":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"1:46648:8246":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"4:533:2388":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"1:46567:8239":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"4:7535:2414":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:5557:15554":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"4:11025:27870":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:5677:15561":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"4:8917:27751":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:45271:8319":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"16:2786:14653":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:11434:18514":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:4224:12673":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"4:8940:26709":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"6:6000:13412":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"4:7659:8531":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:38861:197":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:7669:15636":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"4:1579:8557":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:42377:23027":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:12466:3216":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"6:540:9301":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"5:6533:2379":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:42904:3144":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:2301:124":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:43282:3135":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:7335:33329":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:7218:14204":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:7259:2065":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"4:6326:27899":{"crate_id":4,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:45193:8330":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:39519:2966":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"4:11013:8809":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"4:3778:8690":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:9734:15798":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"4:10353:2417":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"4:8270:8762":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:40596:2993":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"4:8794:2558":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:10670:15944":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:11902:19019":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:39934:2942":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:7767:15642":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:4850:12737":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:9453:15771":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:4767:786":{"crate_id":1,"path":["core","iter"],"kind":"module"},"4:5436:8804":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"17:1919:15837":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:5805:13397":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:5728:13392":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:8310:15722":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"4:1082:8554":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:13181:19787":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:9826:15796":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"4:678:2567":{"crate_id":4,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"4:4733:2397":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"5:3085:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:39957:2944":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"4:8329:8773":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:13865:19840":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"4:5018:27901":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:9530:2391":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:11585:18525":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"4:8144:2980":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"1:42754:3071":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"4:1848:2569":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"6:5741:13393":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:9899:2559":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:10015:15900":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:39427:2909":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"typedef"},"16:3749:14676":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"4:11001:8808":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:10705:15956":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"5:3513:161":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:39532:2577":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"16:3446:14666":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:10718:3081":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:42924:3145":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:12236:19039":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"11:646:2559":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:11375:3082":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"13:226:32885":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:43389:3127":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:4307:12679":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:13356:19802":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:10598:15755":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"6:1617:10217":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:7803:15643":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:7528:2954":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:42872:3150":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:42503:2957":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:1604:10215":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"5:6302:2090":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:12019:19025":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"4:48:1531":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"6:0:807":{"crate_id":6,"path":["libc"],"kind":"module"},"5:6967:2352":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:2248:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"17:13857:19839":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:2296:186":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:13159:19785":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:4121:1941":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:10691:15955":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:11258:18504":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:3164:134":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"4:5499:8806":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"17:13721:19830":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:48990:244":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:1225:2548":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"5:7034:2090":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:11459:18516":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:13135:19783":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"9:234:8789":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:44563:20697":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:7446:12900":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"4:637:8527":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"5:7146:20711":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:43085:3171":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"5:4307:2357":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:39688:2978":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:44723:8322":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:1514:10205":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:42189:3113":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"16:535:33250":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"5:2909:30952":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"4:8970:27747":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"4:8244:8687":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"18:681:19871":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"5:4108:2357":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"6:6488:9345":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:6643:13823":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:10052:15881":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"4:3379:8633":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"17:8490:15727":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:2499:132":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"4:10833:8804":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:10006:3070":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:4877:12740":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:975:15784":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"16:3225:14664":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:2681:226":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"6:1704:10224":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"18:531:19880":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"4:8113:8635":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"16:3872:14727":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:12403:19050":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:13211:19789":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"4:6888:27491":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"4:11920:1112":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"1:2453:8710":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"16:4596:15211":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"4:11895:926":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"17:9876:15850":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"4:8802:8821":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:8129:15651":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:9178:15740":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:10092:15904":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:39712:2963":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"11:2080:8553":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:7481:12905":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"6:4439:12695":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:41657:21461":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"14:0:1838":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"6:561:9304":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"5:1311:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:4235:1921":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:39227:20692":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"14:40:18505":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"4:6079:2403":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:43405:3184":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:2226:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:20688:8258":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:8953:15736":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:1034:15788":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:41996:23816":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:5000:12753":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:11264:3158":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"5:7206:8863":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:4559:12706":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"16:5386:14602":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"4:10626:8763":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:12133:135":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"16:6321:15584":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:2799:1982":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:562:15720":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"4:8296:8712":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"4:11343:8689":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:12178:19036":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:5843:13400":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:7711:15639":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"10:44:14545":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:4366:1930":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"11:1859:8558":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:44360:8296":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:39267:2896":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:44869:8302":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"16:2642:14647":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:12343:106":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:43397:3122":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:4539:12704":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"4:3461:8654":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"1:42538:2589":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:8858:15735":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"4:846:2558":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"11:444:141":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:7437:15621":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:21727:23804":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"4:7675:8556":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:13265:19795":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:8090:15649":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:6728:13828":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"16:4702:15269":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:21585:20606":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"4:6376:1751":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"9:325:14492":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"16:8047:15647":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:3324:68":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"17:13033:19777":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"4:9048:165":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"5:1429:8546":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:1899:10367":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:39200:2866":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:9696:15786":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:41986:8789":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"18:624:34006":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:11571:3132":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"4:11160:26807":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:41431:3035":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"4:8274:8764":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"5:812:2334":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:39287:2887":{"crate_id":1,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"16:4327:15110":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:3266:15886":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:46686:8248":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:30098:20511":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"17:10334:15741":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"5:2113:30421":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:7449:15622":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:13678:19827":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:6376:15589":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:12219:3211":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:7251:157":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"5:35:2324":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:4673:12716":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:9577:15785":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:9431:2443":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"4:955:8550":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:5526:2960":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:12194:190":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"5:6229:2328":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:22372:2648":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"11:1628:2322":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"5:2074:2345":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:6327:15585":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:1801:1939":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"5:1075:31003":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"5:2905:30388":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:3149:2001":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:11502:18519":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:21356:8257":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"5:6975:2340":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:21644:20578":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:12563:19061":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:11372:18510":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:4328:12523":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:420:14608":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:12536:19059":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:7557:15631":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"5:3722:2317":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"16:5920:15570":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:42668:3073":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"16:2448:14639":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:42914:3146":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:9038:33983":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"4:4987:27901":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:6850:2941":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:5690:13388":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:6094:13441":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"4:10222:2575":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"4:8810:2090":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"4:7937:27889":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"5:3916:2352":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:55:14601":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"1:20639:8710":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"6:6628:13821":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"18:652:34007":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:39243:2893":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"4:2343:8614":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:11641:18529":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:11861:19016":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:2775:1975":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"17:8823:15734":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:7757:15641":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:22273:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"6:1716:8720":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"4:5176:188":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"17:10857:15750":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"4:11899:1037":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"1:7521:2867":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:39963:2946":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:12259:19040":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:10416:15945":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:9973:15825":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"4:7796:8627":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"4:587:8524":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:39380:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:7565:26509":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:13367:19803":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:119:8976":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:46115:8300":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:2929:1908":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:11832:15907":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"18:521:19876":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:44493:8309":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:6791:13833":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:4576:2879":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"0:31:1623":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"1:43034:3168":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"4:3165:8672":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:1713:2826":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"4:9378:8630":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"4:869:2090":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:41949:3054":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:11721:19011":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:5643:15559":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:10440:15947":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"16:2357:14635":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"6:4353:12684":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"18:599:34015":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:21748:2646":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"11:2069:2548":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:8778:24714":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:11069:15759":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:4981:12750":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:13461:19813":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"5:6958:8561":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:38837:196":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"4:4410:8734":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:686:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:12388:19049":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"16:4932:15307":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:39737:2981":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:8195:15703":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"18:0:1842":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:12146:3210":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"4:2369:8624":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"6:7463:12902":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"4:8997:26767":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"4:3454:8634":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"6:1541:10209":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:40975:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"4:4560:8698":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"5:960:2328":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:1571:10212":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"16:5847:15568":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"7:79:14415":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"4:6127:27746":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:10761:15746":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"4:8052:8632":{"crate_id":4,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"6:5967:32327":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"18:660:19869":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"14:7:14563":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:9315:3052":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:5938:13407":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"4:928:8547":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:2298:14606":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:7572:33089":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:39640:2961":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"4:7478:27493":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:4386:1931":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:40573:20723":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:44745:8325":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"4:8880:8820":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:44422:8317":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:45553:8303":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"5:4759:202":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:40861:2090":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"11:1681:143":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:1731:10227":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:9108:33992":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:10649:15953":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"6:4451:12696":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:30204:20644":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:41773:3043":{"crate_id":1,"path":["core","fmt","FlagV1"],"kind":"enum"},"16:6558:15600":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:2378:14636":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:43640:159":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:6530:13819":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:6236:15580":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"4:890:8544":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:42636:3141":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"4:2829:2396":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:44961:8291":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"4:8170:8687":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"18:707:3133":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:44292:8328":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:44444:8321":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:4468:12698":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"4:1073:8553":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:3976:23028":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:4402:12690":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:11299:18506":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"11:60:32834":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"5:6115:2371":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"17:8256:15701":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:38759:2007":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"16:5616:15557":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:39460:2435":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"16:6990:15615":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:3159:232":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:4862:12738":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:21248:3064":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:42516:3078":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"5:5582:230":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"4:8848:8819":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:10283:15865":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:10840:15749":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:41255:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:43457:3186":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:13777:19833":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:20680:8710":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"5:777:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:5823:13399":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"4:8758:8808":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"15:180:14581":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"5:6514:2367":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:10080:15903":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:30602:2830":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:39550:2967":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:12449:19053":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"5:2084:30397":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"4:4121:8728":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:5630:15558":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:21096:8283":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"16:2337:14634":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"4:6476:1961":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:39490:2957":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"4:9371:128":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:9275:144":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:43228:3176":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"5:630:30374":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:4357:1929":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:7293:15618":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:6919:32955":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:2933:1909":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"17:11556:18523":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"4:8903:1958":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"5:4262:243":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"11:393:32836":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:12980:19774":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:10478:15918":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:11622:3162":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:8521:15728":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"4:10134:8812":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:41715:127":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"17:12496:19056":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:46303:8304":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:4:1002":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"17:12433:19052":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"4:8928:8509":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:46225:8320":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"5:271:2328":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:1520:10206":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:2524:14642":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:13763:19832":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:7244:33305":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:10044:3083":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:42933:3154":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"4:11900:310":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"16:6935:15612":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"4:1926:8605":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"4:11476:26876":{"crate_id":4,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"11:1866:8559":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:42466:2588":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"4:6546:1967":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:4597:12709":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:39385:2935":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:46724:8250":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:43619:3213":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:22042:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:42004:23815":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"5:1978:2560":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"5:6997:2090":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"4:11241:26763":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"4:11033:3184":{"crate_id":4,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"4:10863:8810":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"5:5180:8857":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:1648:1075":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"17:12799:19767":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:2679:108":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"6:7498:12907":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"5:1419:8545":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"16:5724:15564":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"4:2571:8656":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:48977:244":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:8651:14602":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:6876:15609":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"16:7543:15630":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"18:590:23807":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"11:1044:14554":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:43424:121":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"19:0:1019":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:6654:20411":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:5878:13401":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"4:1596:8560":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"4:4570:26737":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"17:11924:19020":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"16:154:2307":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:12372:19048":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:3142:15868":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"4:1785:8575":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"4:11461:8835":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"17:10989:15756":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:44248:20584":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"16:4757:15276":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:4361:12685":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"4:11908:736":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"17:1947:15797":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:6201:15578":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:4476:12699":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:6218:15579":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:2803:1981":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:11544:18522":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:4637:12712":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:9066:3038":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"4:6230:204":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:3063:14663":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:9498:15786":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"5:2186:30391":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:0:489":{"crate_id":1,"path":["core"],"kind":"module"},"5:5734:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"16:7519:15628":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"4:9107:8824":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:6575:15601":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:6910:1920":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"6:4301:12678":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:6719:13827":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:13426:19809":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"16:5418:33215":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"18:690:19872":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:39366:2885":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:4945:12747":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:13499:19817":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"4:11915:1475":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"17:12072:19029":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:7652:196":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:9959:15852":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"4:3929:8697":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"4:7644:8530":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"16:6767:15605":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:9058:3035":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:13564:19820":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:41424:3033":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:5786:13358":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"4:2357:8618":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"17:12331:19045":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"4:8835:8816":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:5660:13329":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:3204:1936":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:8420:15725":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}