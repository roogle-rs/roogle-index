{"root":"0:0:1755","crate_version":"1.4.0","includes_private":false,"index":{"1:12456:20985":{"id":"1:12456:20985","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12066:447","self::pattern":"1:12105:3310"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:11921:3278","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12110:3324","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12453:26607":{"id":"1:12453:26607","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12105:3310","`DoubleEndedIterator`":"1:7517:125","prim@char":"4:12066:447","str::split_whitespace":"1:12431:21027","str::rsplit":"1:12459:26610"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43519:3265","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12110:3324","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12449:2233":{"id":"1:12449:2233","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41559:194","prim@char":"4:12066:447","self::pattern":"1:12105:3310"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41557:196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12110:3324","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12110:3324","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12125:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12477:26617":{"id":"1:12477:26617","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41557:196","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12110:3324","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12110:3324","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12125:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12471:26614":{"id":"1:12471:26614","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12066:447","str::splitn":"1:12468:26612","self::pattern":"1:12105:3310"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43641:3263","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12110:3324","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12110:3324","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12125:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5532:29571":{"id":"5:5532:29571","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7487:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12442:26152":{"id":"1:12442:26152","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12066:447","self::pattern":"1:12105:3310"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12110:3324","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12110:3324","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12125:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12418:24498":{"id":"1:12418:24498","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41559:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41557:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10195:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10195:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5524:29570":{"id":"5:5524:29570","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7487:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12405:2234":{"id":"1:12405:2234","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12415:338":{"id":"1:12415:338","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12083:1608"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12409:28887":{"id":"1:12409:28887","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12407:28886"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12426:26599":{"id":"1:12426:26599","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:12427:26600"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12431:21027":{"id":"1:12431:21027","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12432:21031"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43793:3340","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12523:26004":{"id":"1:12523:26004","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12530:3071":{"id":"1:12530:3071","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4573:3071"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43827:3072","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12521:28907":{"id":"1:12521:28907","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12066:131","`FromStr`":"1:12065:2851"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41702:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12065:2851","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12065:2851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12445:2276":{"id":"1:12445:2276","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41559:194","prim@char":"4:12066:447","self::pattern":"1:12105:3310"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41557:196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12110:3324","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12494:28898":{"id":"1:12494:28898","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12503:28903":{"id":"1:12503:28903","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12066:447","self::pattern":"1:12105:3310"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12110:3324","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12500:28902":{"id":"1:12500:28902","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12066:447","self::pattern":"1:12105:3310"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12110:3324","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12110:3324","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12130:3325","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12403":{"id":"1:12403","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12404:868","1:12405:2234","1:12406:28885","1:12407:28886","1:12409:28887","1:12412:25620","1:12413:28888","1:12414:339","1:12415:338","1:12416:1760","1:12418:24498","1:12420:24499","1:12422:24500","1:12424:28889","1:12425:28890","1:12426:26599","1:12427:26600","1:12428:21015","1:12429:20762","1:12430:21557","1:12431:21027","1:12432:21031","1:12433:27869","1:12434:28891","1:12435:21017","1:12436:20678","1:12439:26150","1:12442:26152","1:12445:2276","1:12449:2233","1:12453:26607","1:12456:20985","1:12459:26610","1:12462:28892","1:12465:28893","1:12468:26612","1:12471:26614","1:12474:26616","1:12477:26617","1:12480:1961","1:12483:28894","1:12486:28895","1:12489:28896","1:12492:28897","1:12494:28898","1:12496:28899","1:12498:28900","1:12499:28901","1:12500:28902","1:12503:28903","1:12506:24807","1:12509:26618","1:12512:28904","1:12515:28905","1:12518:28906","1:12521:28907","1:12523:26004","1:12524:26523","1:12525:26005","1:12526:26001","1:12527:26000","1:12528:28908","1:12530:3071","1:12531:28909"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12506:24807":{"id":"1:12506:24807","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12066:447","self::pattern":"1:12105:3310"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41557:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12110:3324","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12407:28886":{"id":"1:12407:28886","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5517:29568":{"id":"5:5517:29568","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2062","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7220:8817","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2062","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7220:8817","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29:1761":{"id":"0:29:1761","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[185,0],"end":[188,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"1:12404:868":{"id":"1:12404:868","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12066:447"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5516":{"id":"5:5516","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5517:29568","5:5518:2998","5:5521:29569","5:5524:29570","5:5532:29571","5:5533:29572","5:5534:3149","5:5535:26003","5:5536:26002"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12486:28895":{"id":"1:12486:28895","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12105:3310","`DoubleEndedIterator`":"1:7517:125","prim@char":"4:12066:447","str::rmatch_indices":"1:12489:28896"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43669:3346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12110:3324","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12462:28892":{"id":"1:12462:28892","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12105:3310","str::split":"1:12453:26607","prim@char":"4:12066:447","`DoubleEndedIterator`":"1:7517:125","str::rsplit_terminator":"1:12465:28893"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43569:3343","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12110:3324","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12498:28900":{"id":"1:12498:28900","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5533:29572":{"id":"5:5533:29572","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2062","`String`":"5:7487:246"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2062","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7220:8817","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12424:28889":{"id":"1:12424:28889","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12072:1502","str::slice_mut_unchecked":"1:12425:28890","crate::ops::Index":"1:3072:2146"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12434:28891":{"id":"1:12434:28891","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43783:3341","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12496:28899":{"id":"1:12496:28899","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12480:1961":{"id":"1:12480:1961","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12105:3310","`DoubleEndedIterator`":"1:7517:125","prim@char":"4:12066:447","str::rmatches":"1:12483:28894"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43723:3344","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12110:3324","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12499:28901":{"id":"1:12499:28901","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5534:3149":{"id":"5:5534:3149","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7487:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12512:28904":{"id":"1:12512:28904","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12066:447","self::pattern":"1:12105:3310"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12110:3324","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12110:3324","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12125:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12435:21017":{"id":"1:12435:21017","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43811:3348","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12518:28906":{"id":"1:12518:28906","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12066:447","self::pattern":"1:12105:3310"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12110:3324","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12110:3324","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12125:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12430:21557":{"id":"1:12430:21557","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43505:3336","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12526:26001":{"id":"1:12526:26001","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12459:26610":{"id":"1:12459:26610","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12105:3310","`DoubleEndedIterator`":"1:7517:125","prim@char":"4:12066:447","str::split":"1:12453:26607"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43537:3269","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12110:3324","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12110:3324","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12125:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12492:28897":{"id":"1:12492:28897","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12489:28896":{"id":"1:12489:28896","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12105:3310","`DoubleEndedIterator`":"1:7517:125","prim@char":"4:12066:447","str::match_indices":"1:12486:28895"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43687:3347","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12110:3324","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12110:3324","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12125:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12433:27869":{"id":"1:12433:27869","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43773:3339","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535:26003":{"id":"5:5535:26003","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12526:26001"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12413:28888":{"id":"1:12413:28888","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:31:1762":{"id":"0:31:1762","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[213,0],"end":[215,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["lazy",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"LazyStatic","id":"0:29:1761","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12436:20678":{"id":"1:12436:20678","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12066:447","self::pattern":"1:12105:3310"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12110:3324","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12427:26600":{"id":"1:12427:26600","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12426:26599"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12468:26612":{"id":"1:12468:26612","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12066:447","self::pattern":"1:12105:3310","str::rsplitn":"1:12471:26614"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43623:3267","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12110:3324","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12524:26523":{"id":"1:12524:26523","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39513:20981","Self::is_ascii":"1:12523:26004"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41557:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39513:20981","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12406:28885":{"id":"1:12406:28885","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12428:21015":{"id":"1:12428:21015","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12066:447"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43489:3338","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12525:26005":{"id":"1:12525:26005","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12474:26616":{"id":"1:12474:26616","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41557:196","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12110:3324","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12416:1760":{"id":"1:12416:1760","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41559:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41557:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10195:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10195:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12414:339":{"id":"1:12414:339","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12415:338","`u8`":"4:12083:1608"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12465:28893":{"id":"1:12465:28893","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12105:3310","str::split":"1:12453:26607","prim@char":"4:12066:447","str::split_terminator":"1:12462:28892"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43587:3342","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12110:3324","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12110:3324","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12125:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12432:21031":{"id":"1:12432:21031","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12431:21027"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43802:3349","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12412:25620":{"id":"1:12412:25620","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11665:3330"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12425:28890":{"id":"1:12425:28890","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12072:1502","crate::ops::IndexMut":"1:3076:2147","str::slice_unchecked":"1:12424:28889"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12528:28908":{"id":"1:12528:28908","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4572:28908"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43818:3093","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12509:26618":{"id":"1:12509:26618","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12066:447","self::pattern":"1:12105:3310"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41557:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12110:3324","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12110:3324","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12125:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12429:20762":{"id":"1:12429:20762","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12066:447"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43495:3337","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12439:26150":{"id":"1:12439:26150","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:12066:447","self::pattern":"1:12105:3310"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12110:3324","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12515:28905":{"id":"1:12515:28905","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12066:447","self::pattern":"1:12105:3310"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12110:3324","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12527:26000":{"id":"1:12527:26000","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1755":{"id":"0:0:1755","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[215,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\n# #[macro_use]\n# extern crate lazy_static;\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.4.0\")]","#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:29:1761","0:31:1762","0:28:1755"],"is_stripped":false}}},"5:5536:26002":{"id":"5:5536:26002","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12527:26000"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12531:28909":{"id":"1:12531:28909","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4570:28909"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43836:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12420:24499":{"id":"1:12420:24499","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10195:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10195:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5518:2998":{"id":"5:5518:2998","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7487:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12110:3324","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12422:24500":{"id":"1:12422:24500","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10195:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10195:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12483:28894":{"id":"1:12483:28894","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12105:3310","`DoubleEndedIterator`":"1:7517:125","prim@char":"4:12066:447","str::matches":"1:12480:1961"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43741:3345","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12110:3324","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12110:3324","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12125:3326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28:1755":{"id":"0:28:1755","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[167,0],"end":[179,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"inner":{"macro":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"}},"5:5521:29569":{"id":"5:5521:29569","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7487:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12110:3324","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"16:2788:15009":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:1760:2784":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:12810:19517":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"4:4943:9017":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"16:5816:30924":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:13135:19537":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:11886:18985":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:501:9557":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:4501:13028":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:7624:14739":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:8594:16065":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:11023:16255":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:10240:16148":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:6352:15946":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"4:4195:8984":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"4:11213:3379":{"crate_id":4,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"16:4835:15647":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"4:8323:8989":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"4:1573:8812":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"14:215:14923":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"4:5808:2107":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:13148:19538":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"4:7555:16081":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"11:1876:8814":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:4949:13074":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:9530:115":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"16:7792:16003":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:2380:14992":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:43669:3346":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:13546:20256":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:6811:14174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:3915:15087":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"4:3457:8887":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"4:11342:24918":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"11:298:2742":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:7006:15975":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:14401:20316":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"4:1817:8840":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"6:7601:13258":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:20889:24711":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"16:8294:132":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:41685:2311":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:6835:14176":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:9912:16133":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:6613:14165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:4683:8950":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:9488:32025":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"4:2382:8872":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"16:149:2509":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:9545:209":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"16:5322:15894":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"16:6944:31055":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"11:483:148":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:3037:2058":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"16:6456:15953":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:3232:16251":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:11407:16107":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:7538:13250":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:3653:2239":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:43903:3363":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:21107:3015":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:2891:2133":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:6043:13756":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:3764:15032":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"16:4557:15561":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:536:31232":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"4:7792:8848":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:4346:13011":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:44449:230":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:39099:2156":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"4:1076:8809":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"5:4985:2553":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"4:4411:8981":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"6:6622:14166":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:1710:10471":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:7438:3160":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"18:538:20367":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:4529:13031":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:40754:3146":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:2908:2136":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"5:0:310":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:10430:16231":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:13451:20254":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:234:229":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:13693:20252":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:44097:3371":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"4:8851:9063":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"4:4772:8971":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:5866:15929":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"5:676:253":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:11337:16343":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:10628:16240":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:42187:2104":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:2835:2961":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"6:4488:13026":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:47898:8438":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:7342:31316":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"11:829:8804":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:11535:16112":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:2543:137":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:43385:3274":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:11761:16122":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:9172:16093":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:22165:21923":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"11:2058:8807":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"11:122:2513":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"18:707:3327":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"4:3236:8931":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"0:0:1755":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"6:4480:13025":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"4:2394:8878":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"1:11186:3277":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"4:853:2763":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:14355:20314":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:22232:21863":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:7015:15976":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:44083:3370":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:7517:125":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:5508:2553":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:44293:126":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:46134:8482":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:489:9555":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:13575:20259":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"4:10359:108":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:9564:16100":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"4:10850:123":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"11:2368:2547":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"5:1523:8819":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:14434:20318":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:9945:16148":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:574:9566":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:40561:3187":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:13989:20285":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"13:110:30896":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:12724:19511":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:4943:13073":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:2540:156":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"4:9010:24921":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"5:3581:2762":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:10640:3263":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:7194:3145":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"16:6513:15957":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:41761:2239":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"6:6145:13786":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"4:8206:8889":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"4:884:8799":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:13922:20280":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"5:7420:8863":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:22605:192":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:47814:8545":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"4:11006:25240":{"crate_id":4,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"16:5403:15913":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"5:7387:8797":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"16:8181:16014":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:10949:16249":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:11261:16330":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:5790:13736":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:533:9560":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:6808:2247":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:14269:20306":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:40776:3150":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"5:4002:2547":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:5049:13084":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"16:4497:15549":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:22278:21887":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"4:9131:179":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:46582:8517":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:7614:14738":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"5:5994:2768":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:41745:2762":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"6:1501:10450":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:12895:110":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"16:6243:15940":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"5:2141:29859":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:40383:3183":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"4:3125:8936":{"crate_id":4,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"17:10227:16180":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"11:1051:14904":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"4:943:2745":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"4:9512:8884":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"16:7597:31164":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"4:10869:25241":{"crate_id":4,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:40326:3179":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"18:521:20362":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:1703:8977":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:4523:13030":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"4:3964:8951":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:10685:16247":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"4:10805:8881":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:9985:16141":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:7975:24460":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"4:8244:3336":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"17:12543:19500":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:5063:13086":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:4067:3075":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:11847:3355":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:9505:136":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:30236:3004":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"18:113:20341":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:4393:2553":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:30230:3003":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"4:8311:3199":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:12119:3327":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"16:6753:15965":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:42861:21942":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"16:6361:15947":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:10008:2648":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:3072:2146":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:2497:8890":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:47913:8439":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:2832:2056":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:44542:3410":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"17:10456:16203":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"16:7269:31298":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:7462:15982":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:6726:14169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:2883:2132":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:43519:3265":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"17:12098:18997":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:4462:2082":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"5:6584:2239":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:8848:16087":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:22217:22837":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"4:12086:1607":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"4:2929:132":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"1:44457:210":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:43417:3273":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:11815:16352":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:12778:19515":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:9102:16067":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:10668:3264":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:9051:16063":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:1737:3031":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:12888:19521":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:11742:16121":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:20921:20768":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:43297:3262":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"5:6814:2576":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:8134:16011":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:4734:13049":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"4:8957:9073":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:7555:13252":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:4548:13033":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:43477:3334":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:6849:14177":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"6:4494:13027":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"15:327:14943":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:4621:13039":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:6588:10409":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:10139:16168":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"9:0:1985":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:1776:2566":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"5:7403:104":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:41702:229":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"4:8928:9072":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:45533:8467":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:11991:18990":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"4:4157:28104":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:14448:20319":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:6687:15963":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:40245:3172":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"11:1525:14906":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:9445:16098":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:13567:20258":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"11:1862:8812":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:3288:2087":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"4:4663:25325":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"4:6638:2117":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:4892:13068":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"16:2450:14995":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:4425:13018":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:39146:2148":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:2254:99":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:2903:2135":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:47936:8440":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:5994:13750":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"4:11640:28040":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:3273:24681":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:9549:3234":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:6205:3166":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:45603:8468":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"4:11325:2621":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:13826:20271":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"4:5853:2114":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"5:5325:2525":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:14110:20297":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:40283:21511":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:41694:208":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"5:1257:8807":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:4611:13038":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:32045:3052":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:43069:21991":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"11:1010:2749":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:3441:16256":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"4:6672:236":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:21356:8890":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"4:8895:9077":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:45810:8481":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"4:7689:8766":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"1:22803:186":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:11124:16306":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:30324:21792":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"5:3142:97":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:47872:8436":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:21149:8461":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"17:13055:19532":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:7828:16004":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"5:2223:29906":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:14420:20317":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:32038:2078":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"1:9030:81":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:4877:13067":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"6:1570:10458":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:11586:16115":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"4:1585:8814":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"5:7249:2547":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"4:10795:25312":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"17:10340:16182":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:3254:2152":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:4978:13078":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"4:9136:237":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"4:2568:2591":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"4:5660:2603":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"9:426:14786":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:15:1962":{"crate_id":1,"path":["core","write"],"kind":"macro"},"4:2644:8923":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:10112:16166":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:4385:13014":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:14221:20305":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:13101:19535":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:42614:68":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:39161:216":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:45657:8504":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"4:8036:24926":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"1:43741:3345":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"11:1850:2547":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:1521:10453":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:11162:16301":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"18:644:32044":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:12373:19493":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:10435:3278":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:5420:2553":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"4:4597:9009":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:9328:3336":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"18:660:20355":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:8205:16016":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"11:2260:2749":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"6:4867:13066":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:4406:2079":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"4:10285:9067":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"11:693:2239":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:14296:20308":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:9535:124":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"16:6960:15973":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:12701:158":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:2810:15010":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:8825:16086":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"18:736:20353":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"4:6385:178":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:9217:24462":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:5030:13083":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"16:6332:15944":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:45788:8475":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"16:6721:15964":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"4:6222:24935":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:7782:16002":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"4:12091:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"4:2604:8914":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:2947:2145":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"5:6332:9081":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"15:394:14950":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"6:4968:13077":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:7478:14710":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"4:8513:9046":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:9789:3245":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:12130:3325":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:11573:16114":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"5:1672:2525":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:14076:20293":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:2472:14996":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:44254:3323":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"4:12081:793":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"1:44046:3369":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:45625:8474":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:43925:3364":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:39221:218":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"4:8839:201":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"6:4540:13032":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"5:7259:2537":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:7287:14549":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:6226:15939":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:22096:20849":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"14:7:14914":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:22294:21716":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:4167:2091":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"4:9201:28026":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"1:44131:3328":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:11327:16342":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:12465:16296":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:6720:14168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:11153:3276":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"11:1635:2519":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"11:841:2745":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:9794:3246":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:6082:13758":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"16:7391:15980":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"4:12037:8787":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:7532:13249":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:11639:16117":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"4:10840:134":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"4:7796:24199":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"4:8422:9030":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:43407:2793":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"4:10860:2774":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"7:31:14755":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"5:3238:8815":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:22968:187":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:10023:16103":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"4:2582:2589":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"4:3234:8930":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:1734:10473":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:6790:14173":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"5:3594:2763":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:40348:3180":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:5892:13743":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:2339:14990":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:41990:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"5:1514:213":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:5970:13748":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"11:1882:8815":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"6:4934:13072":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:46180:8537":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:10520:16234":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"4:955:8806":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"4:6494:2115":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"4:4078:8961":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:9752:16104":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"4:9071:15978":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"10:44:14894":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"4:10982:25270":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:10698:16269":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:6041:15936":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"4:6277:2603":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"16:4921:15661":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"4:10573:8932":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:12125:3326":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:9070:15913":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"5:4032:2525":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"11:2461:30835":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"4:1983:200":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"4:638:8780":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:4282:2069":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"4:7897:8885":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"9:237:9045":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:5782:13735":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:6425:15952":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"16:2618:15002":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:7503:15985":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"5:1118:2756":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:41951:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:4379:13013":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:6171:13787":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"11:2334:2763":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:3170:214":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:22323:24407":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:0:472":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"17:12496:19497":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"5:4234:2762":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:9823:16128":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:3888:15084":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:2991:2155":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"17:12484:16295":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:2930:2141":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:9574:31991":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"4:8363:9019":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:11490:16110":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:7534:15988":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:5833:13740":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"16:4641:15573":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:14156:20302":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"11:0:1987":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"16:5419:15914":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"18:699:20359":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"14:160:14914":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:9660:32022":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:11151:16336":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"4:364:8775":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"5:2970:28878":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:40265:3174":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"5:207:2523":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:21462:8448":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:41345:3197":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"16:5743:15925":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"4:5999:2603":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:1017:1901":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"1:43325:3271":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:12970:19526":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"6:1718:10472":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"4:913:8800":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:21488:8458":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:2782:2055":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"6:5851:13742":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:8926:16089":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:7254:2068":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"4:9051:28032":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"5:7434:22834":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:11358:16345":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"4:558:2771":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:9541:3231":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:39319:2151":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:13949:20281":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"4:8146:8886":{"crate_id":4,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"1:40315:3188":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:2787:112":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"16:5963:15932":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"4:5459:9058":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"1:2628:132":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:41608:2238":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:40397:3184":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:9701:16103":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:13778:16147":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:7054:31299":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"4:589:8777":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:11235:16339":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:12043:18993":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:8686:16082":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:30800:198":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"13:226:30849":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:41617:2762":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"17:13487:20255":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:6186:13788":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:4829:13061":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"4:12085:1606":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"4:4497:8991":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:13422:20253":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"4:11348:9068":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:1671:1151":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:44330:3381":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:43505:3336":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:11173:16337":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:4:1075":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"4:3358:8918":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:43641:3263":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"16:7318:15979":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"14:0:1989":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"4:5156:206":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"1:4435:2081":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:7284:2214":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:47887:8437":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:6204:15938":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:4373:13012":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"4:3539:8909":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"1:2924:2140":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:23415:239":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"5:7269:29857":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:14522:20325":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:14316:20310":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"4:922:8802":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:9487:3104":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:42559:68":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:46458:8505":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:11651:3258":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"6:4838:13062":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:43940:3365":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:42605:72":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:12911:19522":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"18:609:32061":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"5:7450:8861":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:40061:3091":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:44250:3319":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"16:8154:16012":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:9896:16132":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:43836:3092":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:41912:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"4:10511:2615":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"4:7670:8776":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"4:5596:9060":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"6:1674:10467":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:6759:14172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:8050:16007":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:7567:13254":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:1507:10451":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:43495:3337":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"4:1044:8807":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"4:12076:687":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"1:10626:3267":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"5:7501:9124":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"11:2317:2762":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:21057:8454":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"16:2696:15005":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"16:6171:209":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"4:5268:205":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"11:785:2547":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:582:16081":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"4:12077:689":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"6:5905:13745":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:12934:19523":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:20874:24711":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:44266:3316":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"12:0:1988":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:14346:20313":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"11:817:8800":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"16:3600:15023":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:9886:16131":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"4:11082:2619":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"4:12072:1502":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"1:2324:203":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"4:918:8801":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:12007:18991":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:8794:16085":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"5:778:98":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:2012:16183":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:45988:8516":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:13966:20282":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:5673:15921":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:10903:16254":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:9972:16142":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:8115:16010":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:11547:16113":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"4:6568:2111":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:39060:2157":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:5820:13739":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:4351:2077":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"4:2368:8868":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"16:6318:15943":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:6268:31304":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:7736:16000":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"16:8072:16008":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:30266:21758":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:14499:20323":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:12998:3409":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:40335:3165":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:42830:3247":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:21815:24709":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"11:731:8802":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"4:11405:25228":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:47032:8472":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"4:4022:8956":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"4:4667:25329":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"4:1590:8815":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"4:11390:24890":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"5:4846:220":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:10265:16179":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:40035:3096":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"16:5727:15924":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"4:12069:1112":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"17:11367:16309":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"16:4949:15665":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:12280:19010":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:12723:24620":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:22330:2854":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"5:4363:2556":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"6:5844:13741":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:5878:13700":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:2859:2125":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"5:1482:8800":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"4:7669:8890":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"4:4187:8983":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"4:7406:24927":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"4:483:2585":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"5:6824:2578":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:46536:8511":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"4:871:8798":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:4210:1899":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"4:12083:1608":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"16:7102:15977":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"6:7590:13257":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:14308:20309":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:44108:3372":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:2329:129":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"17:13010:19529":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"4:11071:2618":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"4:6571:2112":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:6633:14167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:12645:19505":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"5:1442:2239":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"4:4992:9026":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"8:0:1984":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:4585:15565":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:119:9235":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"6:4643:13041":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"4:8887:2762":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"9:177:14889":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"14:31:14914":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:14163:20303":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"16:4774:15634":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:9035:88":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"4:3958:8952":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"11:992:8807":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"5:7299:28455":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"4:4934:9016":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"5:5973:2103":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"4:9141:238":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:46202:8543":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"16:4527:15555":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"4:5443:9057":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"4:5781:2106":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:6879:15969":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:30828:3038":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"17:14024:20288":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:9746:147":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"4:9058:24930":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:4669:13043":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:5079:13088":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:40547:3186":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:13851:20273":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"4:6467:1903":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"6:4745:13050":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:12943:146":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:10185:8890":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:10447:14900":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:9372:16097":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:11507:16111":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:13890:20276":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"11:2487:30830":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"4:12078:794":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"17:11910:18986":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:43971:3367":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"4:12090:1211":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"17:10478:16228":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"4:7885:8884":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"17:9003:16092":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:12598:19503":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:43463:3335":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"4:11628:9094":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"1:21378:8452":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"4:1764:654":{"crate_id":4,"path":["std","env"],"kind":"module"},"9:330:14840":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"4:534:2586":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"11:796:2566":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"6:5982:13749":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:4690:13044":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:7938:3158":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"4:10376:2778":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:9650:16102":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"18:564:20368":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:5626:3164":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"18:590:24419":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:40537:3185":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"16:8239:16017":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:5905:15930":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"4:4056:8957":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"4:8530:9047":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"1:7931:3073":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"15:0:1990":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:8765:16084":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:14282:20307":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"5:3669:2525":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:39340:3067":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"4:10830:8885":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"14:165:14915":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:4415:2080":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"4:358:8774":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:40075:103":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:8605:2218":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:9222:21934":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:6002:13751":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:40028:3095":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:41642:2214":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"17:11086:16335":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:39513:20981":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"4:8227:3171":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"5:6098:2553":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:45513:8502":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:45912:8446":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:42068:92":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"4:907:2566":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"6:4418:13017":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:10278:16178":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:10637:16241":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:43489:3338":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"18:574:32044":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"16:5661:15920":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:6211:24417":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"4:1986:199":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:47380:8478":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:12172:19002":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:39201:215":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:12945:19524":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:13244:19545":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:41536:3201":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:11635:3256":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"4:9021:8762":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"11:1145:8809":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:40761:1902":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:41753:2763":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"16:7722:15999":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:42577:113":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"16:4986:15678":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:10397:16229":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"18:681:20357":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:7677:213":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"4:10878:25210":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:4821:22474":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:12196:19004":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:41675:2215":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:1548:2553":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:2498:2812":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:40001:3072":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:7475:138":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"11:1127:14905":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:11215:16304":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"16:2526:14998":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:13685:20264":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:5760:15926":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:11788:16351":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:10468:16233":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"4:3201:25973":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:3065:15019":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:43954:3366":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"4:2214:133":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"4:8250:3265":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"17:12750:19513":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"4:10978:8848":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:10126:16167":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"17:10059:16144":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"4:8367:9021":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:2284:14961":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:3040:2059":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:11048:16321":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"16:6376:15948":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:7520:13247":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"11:2473:30834":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:12671:19507":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:43587:3342":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:10012:16102":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:2864:15012":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:13981:20284":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"16:5696:15922":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"11:427:30844":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"4:12032:24899":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:7513:15986":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"11:2085:8808":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:9547:3233":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:4468:13023":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:13611:20260":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"4:1568:2566":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:13162:19539":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"4:11232:8894":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:1922:2787":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:11473:16109":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:10343:2762":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"4:4339:8987":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"4:10776:9020":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:22240:21878":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"4:7769:8811":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"16:2406:14993":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:2574:15000":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:43315:2790":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:6696:14933":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"4:4066:8958":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:7570:2060":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"4:10135:28021":{"crate_id":4,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"1:40185:3161":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:43687:3347":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"5:2170:28469":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:12437:19495":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:39971:3100":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:6216:2637":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"5:2035:2764":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"4:4826:2595":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:3409:69":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"4:5336:124":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"1:44242:3318":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"4:2216:8864":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"1:3260:2154":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:13286:19547":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"4:3274:8932":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:40236:3163":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"4:6454:1902":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"1:30430:21856":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"5:5631:2564":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:8281:16018":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"16:5939:15931":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"5:782:2528":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:13868:20274":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"5:1302:8809":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"11:2238:8807":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:43537:3269":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"16:5121:15717":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:43054:3307":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"16:6792:15966":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:4823:13060":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:14145:20301":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:2766:15008":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:2276:107":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"4:12082:789":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"6:4631:13040":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:22181:21872":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:13667:20262":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"4:416:177":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:22671:190":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:14460:20320":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:400:16079":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:42851:9045":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"5:878:2533":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:40042:3097":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:2172:3016":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:44513:173":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:12737:19512":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"4:8996:2108":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:14056:20291":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:12293:19011":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:7568:15991":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:1184:16153":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:11306:16119":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:5712:15923":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:6030:13754":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:1075:16145":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"5:5858:2547":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:9521:16099":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"5:7571:2566":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"4:12079:791":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"1:22638:189":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:11886:3354":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:6909:3170":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:43346:3275":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:7265:9514":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:10084:16139":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:2170:3015":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"6:6856:14178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:4799:13057":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"4:10114:8840":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"5:6956:2579":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"4:9517:2614":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:46277:21717":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"4:949:8805":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:40205:3162":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:43335:2792":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"4:3865:8948":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"11:2351:2239":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"6:569:9565":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"11:2479:30833":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:20919:20763":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:2550:259":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:22149:21775":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"4:2219:2584":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"6:123:9236":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:1912:10636":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"6:4769:13053":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:21358:8449":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"4:6015:223":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:2871:2127":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:7544:13251":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:10654:3268":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:44118:3373":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"4:3475:2773":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:6560:2512":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"5:5369:9117":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"4:4653:8956":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"4:5528:9059":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"11:680:2763":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:12997:19528":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"5:1273:8808":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:47832:8432":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"5:2960:28880":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:4400:12857":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:6703:10577":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:6818:15967":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:495:9556":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:40274:3175":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:48028:8444":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:10962:16250":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:40155:2631":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"18:515:20365":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"5:895:2762":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"4:9233:28223":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"5:3178:8813":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:44318:3380":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:41311:3195":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:39287:2149":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:45758:8469":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"4:10800:28229":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:12184:19003":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:2837:109":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:14090:20295":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:11687:16118":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"5:1288:2749":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:5798:15927":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:2844:2124":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"6:6037:13755":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:9867:16130":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"4:3523:24812":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:41795:86":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:2537:76":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:40770:3148":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"5:5788:254":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"11:2303:14908":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:44258:3321":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:11295:16341":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:43827:3072":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:42814:3248":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"4:5110:28011":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"4:8599:9050":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:10392:3265":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"6:5085:13089":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"4:8174:3145":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"1:1634:630":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"16:2722:15006":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"4:11088:2620":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:39177:213":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"11:324:30841":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:256:32026":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"5:7375:8796":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:11665:3330":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"4:11205:25235":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:596:9569":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"4:3401:3150":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"11:2286:8808":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"5:6981:2583":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:5020:13082":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"9:507:14787":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:5056:13085":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:9455:32024":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:46324:21892":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:9277:16096":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"5:7587:2570":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:2938:2143":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:12331:115":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:10616:16239":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"4:11423:25446":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:6893:31245":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"5:3183:29868":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:7579:13256":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:46882:8538":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"3:0:1982":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"5:1473:8799":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"4:3763:8946":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"5:3171:2762":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"18:690:20358":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:14324:20311":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:8978:16091":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:2933:15015":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"4:48:1665":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"1:44019:3368":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:21457:8890":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"4:6839:9080":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:8715:3324":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:7660:15996":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:10214:16181":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:4786:13055":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"18:491:32035":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:13298:19548":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:7884:16006":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:11098:16308":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"4:2894:2594":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:6600:15962":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:41458:22826":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"6:1596:10461":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:10980:16102":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:7573:13255":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"4:11647:14947":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:5995:15934":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:39941:21761":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:10370:16176":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:40785:2638":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"4:622:8778":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:20904:20769":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:4806:15642":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:12698:19509":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:6741:14171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:4333:13010":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"4:5774:2105":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"4:11024:9065":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:1641:2980":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:4847:849":{"crate_id":1,"path":["core","iter"],"kind":"module"},"17:13816:20270":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:7708:15998":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"4:3315:8929":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:43372:3161":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"4:7715:2616":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"6:6009:13752":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:5935:13747":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:9207:16094":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:12830:19518":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"11:2494:8796":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:4709:13046":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:6415:15951":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:7310:14551":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:10366:16189":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"4:8588:9049":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"4:7625:2612":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"5:1426:2763":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"4:8031:28053":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:10440:16232":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"16:2670:15004":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:8607:2216":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"5:5942:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:2785:248":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"11:772:8799":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"4:8833:9062":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"16:4053:15201":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:47776:8524":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:12024:18992":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"10:36:30829":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"14:187:14922":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:4997:13080":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:6686:10579":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:4805:13058":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"5:2049:2767":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"4:8318:8988":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:12531:19499":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"4:2927:229":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"17:9711:31985":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"4:3195:25136":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:40306:3178":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:10186:16170":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:11281:16331":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:5808:13737":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"4:8879:9065":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"17:12237:19007":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"16:4862:15650":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:10410:16196":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:4417:15517":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:5897:13744":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:527:9559":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:14083:20294":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:685:114":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:45709:8515":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:12554:19501":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"4:4728:9018":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:9531:32015":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:47841:8433":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:10726:16291":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:1639:10464":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"5:7229:2239":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:21481:8890":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:12765:19514":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:29981:2813":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"18:481:20363":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:4775:13054":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:6968:15974":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"4:8582:2762":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"17:14469:20321":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:40747:24165":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"16:5648:15919":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"4:8269:8944":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"4:1579:8813":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:7561:13253":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"11:1092:2751":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:1558:10457":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"4:7961:2764":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:2366:204":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:2617:120":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:4044:105":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:2829:3055":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"18:80:20339":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:40165:3137":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:39981:3101":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:8659:16062":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"4:9028:24803":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:1825:181":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:32024:16017":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"17:10165:16169":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:46010:8522":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:44246:3320":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"6:6151:12924":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"4:4849:8966":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:7436:15981":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:21279:8453":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"6:4759:13052":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:40367:3182":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"5:2962:28877":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:13758:20251":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:2546:260":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:9976:2643":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"11:1842:2762":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:483:9554":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:11137:16305":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:14478:20322":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"5:7220:8817":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"14:221:14924":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"5:4426:2556":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:42822:21983":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:43306:3261":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:580:9567":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"4:9063:24928":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:22770:193":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:21312:8447":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"5:3330:2566":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"6:1682:10468":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:5814:13738":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:46156:8488":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"5:6795:2564":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"4:0:1494":{"crate_id":4,"path":["std"],"kind":"module"},"4:1067:8808":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"11:860:8805":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:12513:19498":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"11:2467:22753":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"7:0:1654":{"crate_id":7,"path":["unwind"],"kind":"module"},"5:7320:2239":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"4:9223:28240":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"1:41517:3200":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:13113:19536":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:43811:3348":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"16:3032:15017":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"11:822:8803":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:9959:16143":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:12105:3310":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"1:46226:8544":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"5:261:2525":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:4511:13029":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"11:2394:2566":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:40016:3094":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"16:2644:15003":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"9:393:14785":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:5915:13746":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:30196:3002":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:39265:219":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:11971:18989":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"4:4665:25327":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"16:6261:15941":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:10494:16206":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:11845:16353":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"4:9146:155":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"1:20902:20766":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:14100:20296":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"5:3204:8814":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"14:40:18987":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"4:1557:2762":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:45865:8542":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:22205:2852":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:12154:19001":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:8097:16009":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"18:766:20354":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"4:1840:2382":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"1:9537:3229":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"16:6083:14960":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"4:505:2544":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:40009:3093":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"4:8345:8990":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"4:7880:8883":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"4:1429:150":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"18:548:147":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:12711:19510":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:14335:20312":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:5588:15916":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"4:863:2239":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"5:7476:2562":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"16:6485:15955":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:4815:13059":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"4:3514:3104":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"4:11654:14947":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:22869:184":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:9390:133":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"16:7651:15995":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:2596:15001":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"4:10570:8930":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:21711:8463":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:4020:24489":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:1537:10455":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:1496:10449":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:14013:20287":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:12688:142":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"4:11417:28103":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:43793:3340":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:654:9616":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"0:31:1762":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"1:2934:2142":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:42654:74":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:41625:2763":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"17:11272:16340":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"4:3760:8947":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:42549:21774":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"16:6569:15960":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"5:629:28374":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:11921:3278":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"4:7937:123":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:12846:19519":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:11934:18987":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:44492:3406":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:9754:151":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"4:10468:9062":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"5:1011:2525":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"5:4194:2553":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"11:1846:2239":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:11719:16120":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"4:8865:9064":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:5088:15708":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"4:4008:8954":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"4:11269:155":{"crate_id":4,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"6:4700:13045":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:3655:15024":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:2881:15013":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:3076:2147":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:11617:16116":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:4361:2078":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"5:3217:29872":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:3022:2088":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:2849:2129":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"4:7890:8881":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:11316:16332":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:11111:16307":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:12225:19006":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"4:9165:8894":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"1:44238:3315":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"16:2428:14994":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"4:12015:25151":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"18:582:3038":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:10507:16204":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:3043:1907":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"16:2305:14988":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"6:4913:13070":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:11062:16333":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"4:2384:8873":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"17:13188:19541":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:43398:3272":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:6844:15968":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:42632:132":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"16:6346:15945":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:9242:16095":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"11:666:2762":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:41374:21889":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"9:52:14803":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:4441:13020":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"4:10818:25229":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"4:8263:8945":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:12876:19520":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"14:202:9123":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:2840:3028":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"6:7526:13248":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:10672:16289":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:49852:8465":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"5:6663:2525":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:2178:16177":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:47568:8484":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:12267:19009":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"11:1036:8808":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:4728:13048":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:41834:93":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:21093:8456":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"6:6059:30425":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:22737:188":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"4:8973:9076":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:10316:16184":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:1691:10469":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:10561:16201":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:12621:19504":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:9852:16129":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"4:11375:24892":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:40092:22834":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:4719:15627":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:21055:8890":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:25817:269":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"16:7862:16005":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:6017:15935":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:41288:164":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:46104:8476":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:43623:3267":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:10585:3270":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:12123:18999":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"18:96:20340":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:14126:20299":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:40407:3168":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:12422:19494":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:47989:8443":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:0:1992":{"crate_id":17,"path":["object"],"kind":"module"},"11:2165:14900":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"4:1842:2772":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"17:14378:20315":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:13071:19533":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:40080:3139":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:21105:22069":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:39326:3053":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"17:13202:19542":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:5634:15918":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:46848:8489":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"4:12071:1470":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"1:21706:8455":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"4:641:8781":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:14001:20286":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:45847:8536":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"18:531:20366":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:10534:16205":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:5435:31243":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:42330:3232":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"16:3049:15018":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:11393:132":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"16:6156:15937":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:12086:18996":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:12473:16294":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:42589:21768":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"5:2690:28509":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:11389:16106":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"18:0:1993":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:9933:16152":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:2786:247":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:46378:21867":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"4:11250:25206":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"4:6174:2599":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:40227:2780":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:21193:8462":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:21240:3015":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"17:10588:16237":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"16:7360:31293":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"18:719:20352":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:21296:8890":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"11:389:2517":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:1604:10462":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:13228:19544":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"4:1779:8829":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"17:14134:20300":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"4:12070:336":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"1:2875:2130":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"4:12089:1664":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"4:7945:25847":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"0:29:1761":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"4:9505:133":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:9539:3230":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"4:9184:9079":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:43773:3339":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"4:8257:3339":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"17:11710:16119":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"9:357:14800":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:4461:13022":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:14033:20289":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:4900:13069":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:2797:2085":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"6:1514:10452":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:13876:20275":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:7621:15994":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:13040:19531":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:45828:8487":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"4:5409:9055":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"1:39914:3072":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:43427:2794":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"5:1503:8802":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"5:3720:2764":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"16:5574:15915":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"16:2969:15016":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:2257:100":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"4:2223:8865":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"6:4859:13065":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"4:926:8803":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"16:3315:15021":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:7626:171":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:1576:10459":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:43723:3344":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:47951:8441":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:3243:256":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"5:3735:2767":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:8953:16090":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:10383:16175":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:43783:3341":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:13723:20266":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:6973:24161":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:4721:13047":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"5:4074:2763":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"4:7011:25732":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"16:3461:15022":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"5:4164:2553":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:12658:19506":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:12176:3357":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:43073:3283":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:4960:13076":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:40255:3173":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"16:7041:31294":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"11:868:8806":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"4:12088:843":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"16:5363:15911":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"16:6915:15971":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"4:10193:25307":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"4:11551:8946":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:3009:121":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:10575:16236":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:41873:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"4:6624:2116":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"4:11572:8948":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:6386:15949":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:12074:18995":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:8167:16013":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:6604:9437":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:12983:19527":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:10292:16102":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:5017:15685":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"11:759:8798":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"4:6924:2607":{"crate_id":4,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"6:4847:13063":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:3518:2547":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"17:11000:16257":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:11870:3352":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:0:873":{"crate_id":6,"path":["libc"],"kind":"module"},"6:62:9181":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:10929:16253":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:9910:2640":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:42309:3230":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:22257:21858":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"4:1561:2239":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:32031:22318":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:22356:2855":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:41770:198":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"4:7566:25729":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:44262:3322":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:13259:19546":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"16:5982:15933":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:45687:8509":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"4:5474:108":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"17:13802:20269":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:14514:20324":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:12252:19008":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:2744:15007":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"9:450:14784":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:12959:19525":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"4:7053:2608":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"4:4259:8986":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"4:7743:8785":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:44439:222":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:21364:8451":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:3565:16274":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"4:8237:3185":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"1:2534:77":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"17:10547:16235":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:9086:15914":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:12208:19005":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:44274:3379":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"5:7283:2239":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"4:9312:2382":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"6:5013:13081":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:6051:13757":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:5864:13699":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:1664:10466":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"11:423:30848":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:6583:15961":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"4:7776:8847":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"1:47852:8434":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:44500:3407":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"4:12066:447":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"18:652:32044":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:6023:13753":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:41557:196":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"17:13739:20267":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"5:2131:2544":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:4406:13016":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:4792:13056":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:2854:2126":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"5:1102:29877":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"4:10133:2777":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:10195:242":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:2887:2131":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:44151:3329":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:7582:15992":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:4320:13009":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:42109:87":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:2150:16217":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:7024:3142":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"16:6929:15972":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"11:1562:14907":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"11:357:2515":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:2160:631":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:10036:16146":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:9607:16101":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:2942:2144":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:0:528":{"crate_id":1,"path":["core"],"kind":"module"},"5:1464:8798":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"4:2409:1997":{"crate_id":4,"path":["std","io"],"kind":"module"},"1:4639:3085":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:10420:16230":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:22344:2853":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:6092:13759":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:1591:10460":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:4655:13042":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"11:703:8801":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"4:6325:223":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"4:9085:25232":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"4:10616:2616":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:12790:19516":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:2783:2086":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"17:261:32005":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:2907:15014":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:4800:416":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"17:14173:20304":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"4:10009:22823":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:9790:31999":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"4:8274:8942":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"5:7487:246":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:44530:3412":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:4474:13024":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"18:624:32054":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:45727:8521":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:4573:13036":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"11:1072:30842":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:7090:31321":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:11448:16108":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"4:4016:8955":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:13024:19530":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:11244:16116":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:44555:24405":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:14536:20326":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:10788:16293":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"4:7162:28105":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:45958:8510":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:4278:224":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"17:10661:16288":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"11:1855:2566":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"4:7606:2610":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:6901:15970":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"11:344:30837":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:11810:3353":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:6189:31275":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"18:599:32034":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"4:8194:2774":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"4:2501:8921":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"5:7237:8816":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:14068:20292":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"5:276:2062":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:21803:3259":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"5:5373:9118":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:9543:3232":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:548:9562":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"4:11179:9063":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"4:8183:8935":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"4:5423:9056":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"1:47630:8518":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:11191:16117":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"5:2243:28498":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:4394:13015":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"4:3532:8888":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"16:7492:15984":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"11:1541:2754":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:46612:8523":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:46694:8471":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"18:671:20356":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:7067:31108":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:6883:14180":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:40803:3155":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:21490:8452":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:12576:19502":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:10547:3269":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"5:2461:2757":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"4:12064:398":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"4:8389:8969":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:5568:3176":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:13676:20263":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:4136:2090":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"4:3313:8928":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:32020:24199":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"6:588:9568":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"4:7953:8922":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:22836:183":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"4:4070:8959":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:22043:20835":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"4:4770:8970":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"15:306:14939":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"4:2366:3006":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"1:7479:159":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:6742:14932":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"4:8941:9075":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"4:11488:2623":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:40122:3113":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"4:8903:2239":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"4:897:2547":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"11:1687:150":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"4:1895:8858":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"6:6663:10594":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:1632:10463":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"4:1058:2749":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"4:10991:9059":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"5:1492:8801":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:2865:2128":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:4889:15653":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:4561:13035":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:507:9558":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:13215:19543":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:9617:31986":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"4:3994:8953":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:11381:16346":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"4:3276:8933":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:10367:2763":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"11:101:30843":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:4853:13064":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:8606:2217":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"4:1931:700":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"10:0:1986":{"crate_id":10,"path":["adler"],"kind":"module"},"16:2321:14989":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:7128:15978":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:2548:14999":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:41328:3196":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"5:1411:2762":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:13838:20272":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:2669:3048":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"4:3698:8943":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"9:486:14783":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"5:1138:29875":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"5:5135:2103":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:9921:16158":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"4:11511:8947":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"4:4768:8967":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:6820:14175":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"4:3198:25970":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"16:5830:15928":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:2913:2137":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:4989:13079":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:11661:16066":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"6:4954:13075":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"5:6912:266":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:4032:24483":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:13973:20283":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"5:7463:8862":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:10512:3279":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"4:7764:8810":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:22:728":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"4:12065:995":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"1:39957:3098":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"4:5599:9061":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"17:13710:20265":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:9998:16140":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:13085:19534":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:14042:20290":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:11351:16344":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"5:3800:2566":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"4:7907:8882":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"1:4287:2070":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"4:4731:8991":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:7544:15989":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:11201:16302":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:47238:8506":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"4:12048:25227":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:32132:3058":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"5:2966:28876":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:47490:8512":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:47738:8490":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:21927:8450":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:40108:3138":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"11:1869:8813":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"4:7920:134":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"1:6027:3189":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:6401:15950":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:47692:8539":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:6545:15959":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"16:7554:15990":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"5:3212:8812":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:13906:20278":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:5049:15693":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:13792:20268":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:3325:2089":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"13:0:1983":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:12111:18998":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"4:8490:9045":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"16:5384:15912":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:10603:16238":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"4:6098:2597":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"16:4745:15629":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"4:7758:8786":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:8895:16088":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:1546:10456":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"4:12067:1624":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"16:2832:15011":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:3248:139":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:10750:16248":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:12136:19000":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:1751:21725":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"16:4344:15468":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:43569:3343":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:3830:15050":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:8713:16083":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"4:1564:2547":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"6:1528:10454":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:4884:1061":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"4:646:8782":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"18:507:32044":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"11:2074:2749":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"4:8337:8945":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:12065:2851":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"4:8329:8980":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:9350:16064":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:12062:18994":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"4:11193:9064":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:504:16080":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:46355:21868":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:21925:8890":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"5:6465:2547":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:40297:3177":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:41481:3198":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"6:4296:13007":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:43802:3349":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:45579:8508":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"5:822:2531":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:10097:16138":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:39243:217":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"4:12084:1605":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"16:0:1991":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:44270:3317":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:1697:10470":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:41494:3199":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"16:7768:16001":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:39993:3092":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"5:3568:175":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:4433:13019":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:30252:68":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:20861:3038":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"18:755:20361":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:7442:3159":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:8195:16015":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"4:1924:8859":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"6:4753:13051":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"4:1781:8830":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"1:46818:8483":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"4:12080:792":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"17:12305:19012":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:13914:20279":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:11951:18988":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"6:475:9553":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"4:4519:8992":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:4592:13037":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"4:8909:9074":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:10474:3266":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:12110:3324":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:12906:2599":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:39920:3076":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"5:4348:267":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:10771:16268":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"18:636:32050":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:46058:8470":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"7:78:14762":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"0:28:1755":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"17:10916:16252":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:31984:3043":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"16:6531:15958":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:46772:8477":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:43818:3093":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:12685:19508":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:22902:185":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:41633:2239":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"6:6640:9021":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:13274:16119":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:10738:16292":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"4:932:8804":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:42323:3231":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:7293:14550":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:42316:3229":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:11074:16334":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"4:4208:8985":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"4:12073:1589":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"5:7291:213":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:9993:2589":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"4:7694:8768":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"4:5653:223":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"18:727:20360":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:43246:24166":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:7474:15983":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:3948:2553":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"5:7512:9125":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:39929:3099":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:6865:14179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"4:727:148":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"4:8440:9044":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"5:35:2521":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:9780:16105":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"15:288:14938":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:4555:13034":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:14118:20298":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:42839:151":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:2359:14991":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:42869:21979":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:10197:16195":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"4:6190:2602":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"16:4613:15569":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:22935:182":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:10646:16287":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:13174:19540":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"4:9106:24913":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"19:0:1092":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"4:3429:2553":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"16:3232:15020":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:5752:13671":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:11227:3029":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:21226:8457":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"16:7694:15997":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:11872:16354":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"18:614:32048":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:13632:20261":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:4462:15538":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:6511:2525":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:40795:3153":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"4:4179:8982":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:22704:191":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"6:5073:13087":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:2896:2138":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:12775:3404":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:2775:240":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:2792:250":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"6:563:9564":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:2504:14997":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:2918:2139":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:434:14963":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:42148:94":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:6279:15942":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:9137:16068":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:3233:2150":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:4451:13021":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:42029:85":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:542:9561":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"5:7328:2239":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:47966:8442":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"16:6467:15954":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:7934:3157":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:12750:207":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"16:6499:15956":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"4:6458:2109":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:13554:20257":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:2360:197":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"17:12452:19496":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"16:3797:15041":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"4:11850:2627":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"4:8572:9048":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"1:45557:8503":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"4:8041:8924":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:5612:15917":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:3033:2057":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"4:12087:1604":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"6:4922:13071":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"16:7613:15993":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:9762:32009":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"6:555:9563":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:6735:14170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"5:2959:2302":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:40214:3171":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:1650:10465":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:11226:16338":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"4:9015:110":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"4:840:2762":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:47861:8435":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:10714:16290":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"4:5667:9069":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:4309:13008":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:6580:9604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:2209:16202":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:13897:20277":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:7523:15987":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:40358:3181":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"4:10576:8928":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"4:5079:28011":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:2879:2134":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:7488:2061":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"5:1374:96":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}