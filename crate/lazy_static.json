{"root":"0:0:1614","crate_version":"1.4.0","includes_private":false,"index":{"1:11985:27721":{"id":"1:11985:27721","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11876:1619":{"id":"1:11876:1619","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:40591:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11934:30995":{"id":"1:11934:30995","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:3133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11878:23188":{"id":"1:11878:23188","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:40591:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11887:27932":{"id":"1:11887:27932","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"1:11886:27931"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11922:30993":{"id":"1:11922:30993","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:11565:3118","str::split":"1:11913:27939","prim@char":"4:11857:411","`DoubleEndedIterator`":"1:7174:120","str::rsplit_terminator":"1:11925:30994"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"1:42636:3151","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:3133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11896:24179":{"id":"1:11896:24179","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:11857:411","self::pattern":"1:11565:3118"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:3133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11888:20673":{"id":"1:11888:20673","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:11857:411"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"1:42556:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5332:31666":{"id":"5:5332:31666","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:277:1911","`String`":"5:7180:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:277:1911","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6931:8578","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5323:31664":{"id":"5:5323:31664","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7180:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1614":{"id":"0:0:1614","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[215,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\n# #[macro_use]\n# extern crate lazy_static;\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.4.0\")]","#![no_std]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:29:1620","0:31:1621","0:28:1614"],"is_stripped":false}},"1:11949:30999":{"id":"1:11949:30999","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:11565:3118","`DoubleEndedIterator`":"1:7174:120","prim@char":"4:11857:411","str::match_indices":"1:11946:30998"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"1:42754:3155","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:3133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11570:3133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11585:3135","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5331:31665":{"id":"5:5331:31665","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7180:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11873:30989":{"id":"1:11873:30989","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:11931:27946":{"id":"1:11931:27946","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:11857:411","str::splitn":"1:11928:27944","self::pattern":"1:11565:3118"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"1:42708:3069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:3133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11570:3133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11585:3135","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5335:27722":{"id":"5:5335:27722","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:11986:27720"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11958:31003":{"id":"1:11958:31003","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11866:30986":{"id":"1:11866:30986","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11869:30988":{"id":"1:11869:30988","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"1:11867:30987"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11890:26152":{"id":"1:11890:26152","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"1:42572:3144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11952:31000":{"id":"1:11952:31000","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11895:20675":{"id":"1:11895:20675","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"1:42878:3156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11960:31005":{"id":"1:11960:31005","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:11857:411","self::pattern":"1:11565:3118"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:3133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11570:3133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:11590:3134","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11867:30987":{"id":"1:11867:30987","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11959:31004":{"id":"1:11959:31004","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11978:31009":{"id":"1:11978:31009","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:11857:411","self::pattern":"1:11565:3118"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:3133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11570:3133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11585:3135","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11916:20692":{"id":"1:11916:20692","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:11857:411","self::pattern":"1:11565:3118"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"1:11389:3084","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:3133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11983:27724":{"id":"1:11983:27724","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5315":{"id":"5:5315","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5316:31662","5:5317:2791","5:5320:31663","5:5323:31664","5:5331:31665","5:5332:31666","5:5333:2946","5:5334:27723","5:5335:27722"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11880:23189":{"id":"1:11880:23189","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:11946:30998":{"id":"1:11946:30998","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:11565:3118","`DoubleEndedIterator`":"1:7174:120","prim@char":"4:11857:411","str::rmatch_indices":"1:11949:30999"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"1:42736:3154","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:3133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11966:27133":{"id":"1:11966:27133","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:11857:411","self::pattern":"1:11565:3118"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:3133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11954:31001":{"id":"1:11954:31001","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11956:31002":{"id":"1:11956:31002","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11972:31007":{"id":"1:11972:31007","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:11857:411","self::pattern":"1:11565:3118"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:3133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11570:3133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11585:3135","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5334:27723":{"id":"5:5334:27723","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:11985:27721"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11872:30159":{"id":"1:11872:30159","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11133:3139"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5320:31663":{"id":"5:5320:31663","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7180:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:3133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:28:1614":{"id":"0:28:1614","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[167,0],"end":[179,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"kind":"macro","inner":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"},"1:11894:30992":{"id":"1:11894:30992","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"1:42850:3149","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11882:23190":{"id":"1:11882:23190","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:11885:30991":{"id":"1:11885:30991","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:11863:1378","crate::ops::IndexMut":"1:2993:1995","str::slice_unchecked":"1:11884:30990"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:11984:27725":{"id":"1:11984:27725","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11874:311":{"id":"1:11874:311","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:11875:27912","`u8`":"4:11874:1475"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11986:27720":{"id":"1:11986:27720","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:29:1620":{"id":"0:29:1620","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[185,0],"end":[188,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:11892:20698":{"id":"1:11892:20698","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:11891:20666"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"1:42869:3157","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11905:2124":{"id":"1:11905:2124","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:40591:176","prim@char":"4:11857:411","self::pattern":"1:11565:3118"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:3133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11863":{"id":"1:11863","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["1:11864:801","1:11865:2083","1:11866:30986","1:11867:30987","1:11869:30988","1:11872:30159","1:11873:30989","1:11874:311","1:11875:27912","1:11876:1619","1:11878:23188","1:11880:23189","1:11882:23190","1:11884:30990","1:11885:30991","1:11886:27931","1:11887:27932","1:11888:20673","1:11889:22603","1:11890:26152","1:11891:20666","1:11892:20698","1:11893:29659","1:11894:30992","1:11895:20675","1:11896:24179","1:11899:27948","1:11902:27949","1:11905:2124","1:11909:2082","1:11913:27939","1:11916:20692","1:11919:27942","1:11922:30993","1:11925:30994","1:11928:27944","1:11931:27946","1:11934:30995","1:11937:30996","1:11940:1806","1:11943:30997","1:11946:30998","1:11949:30999","1:11952:31000","1:11954:31001","1:11956:31002","1:11958:31003","1:11959:31004","1:11960:31005","1:11963:31006","1:11966:27133","1:11969:27950","1:11972:31007","1:11975:31008","1:11978:31009","1:11981:31010","1:11983:27724","1:11984:27725","1:11985:27721","1:11986:27720","1:11987:31011","1:11989:2864","1:11990:31012"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11975:31008":{"id":"1:11975:31008","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:11857:411","self::pattern":"1:11565:3118"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:3133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11886:27931":{"id":"1:11886:27931","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"1:11887:27932"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11963:31006":{"id":"1:11963:31006","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:11857:411","self::pattern":"1:11565:3118"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:3133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5317:2791":{"id":"5:5317:2791","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7180:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:3133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11919:27942":{"id":"1:11919:27942","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:11565:3118","`DoubleEndedIterator`":"1:7174:120","prim@char":"4:11857:411","str::split":"1:11913:27939"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"1:42604:3075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:3133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11570:3133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11585:3135","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11884:30990":{"id":"1:11884:30990","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:11863:1378","str::slice_mut_unchecked":"1:11885:30991","crate::ops::Index":"1:2989:1994"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:31:1621":{"id":"0:31:1621","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[213,0],"end":[215,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["lazy",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"LazyStatic","id":"0:29:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11940:1806":{"id":"1:11940:1806","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:11565:3118","`DoubleEndedIterator`":"1:7174:120","prim@char":"4:11857:411","str::matches":"1:11940:1806"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"1:42790:3152","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:3133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11969:27950":{"id":"1:11969:27950","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:11857:411","self::pattern":"1:11565:3118"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:3133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11570:3133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11585:3135","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5316:31662":{"id":"5:5316:31662","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:277:1911","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6931:8578","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:277:1911","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6931:8578","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11928:27944":{"id":"1:11928:27944","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:11857:411","self::pattern":"1:11565:3118","str::rsplitn":"1:11931:27946"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"1:42690:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:3133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11891:20666":{"id":"1:11891:20666","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:11892:20698"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"1:42860:3148","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11943:30997":{"id":"1:11943:30997","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:11565:3118","`DoubleEndedIterator`":"1:7174:120","prim@char":"4:11857:411","str::matches":"1:11940:1806"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"1:42808:3153","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:3133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11570:3133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11585:3135","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11902:27949":{"id":"1:11902:27949","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:11857:411","self::pattern":"1:11565:3118"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:3133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11570:3133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11585:3135","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11913:27939":{"id":"1:11913:27939","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:11565:3118","`DoubleEndedIterator`":"1:7174:120","prim@char":"4:11857:411","str::split_whitespace":"1:11891:20666","str::rsplit":"1:11919:27942"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"1:42586:3071","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:3133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5333:2946":{"id":"5:5333:2946","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7180:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11937:30996":{"id":"1:11937:30996","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:3133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11570:3133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11585:3135","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11899:27948":{"id":"1:11899:27948","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:11857:411","self::pattern":"1:11565:3118"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:3133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11990:31012":{"id":"1:11990:31012","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4512:31012"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"1:42903:2885","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11909:2082":{"id":"1:11909:2082","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:40591:176","prim@char":"4:11857:411","self::pattern":"1:11565:3118"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:3133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11570:3133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11585:3135","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11875:27912":{"id":"1:11875:27912","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:11874:1475"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11981:31010":{"id":"1:11981:31010","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:11527:126","`FromStr`":"1:11526:2640"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:40733:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"1:11526:2640","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:11526:2640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11893:29659":{"id":"1:11893:29659","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"1:42840:3147","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11889:22603":{"id":"1:11889:22603","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:11857:411"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"1:42562:3145","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11989:2864":{"id":"1:11989:2864","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4515:2864"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"1:42894:2865","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11865:2083":{"id":"1:11865:2083","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11864:801":{"id":"1:11864:801","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"4:11857:411"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11925:30994":{"id":"1:11925:30994","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:11565:3118","str::split":"1:11913:27939","prim@char":"4:11857:411","str::split_terminator":"1:11922:30993"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"1:42654:3150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:3133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11570:3133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11585:3135","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11987:31011":{"id":"1:11987:31011","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4514:31011"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"1:42885:2888","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"12:853:8557":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"4:5168:187":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"12:810:8552":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"16:2579:14737":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:2679:222":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:4389:12701":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:2705:14742":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:5823:13412":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:6079:13453":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:4001:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"16:7278:15713":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"5:3713:2315":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"1:43021:3174":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:7267:15712":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"5:3732:2326":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:29941:2797":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:11873:19016":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:9288:144":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"14:215:14664":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:41910:144":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"18:681:19852":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:10845:15848":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"4:10458:2416":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"4:9064:216":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:8494:14693":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"4:8758:8816":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"6:4921:12758":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:13031:19779":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:11528:15996":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:8781:21523":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:39594:2977":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:46532:8245":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:2841:1988":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:8293:3133":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:22123:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"4:7798:8634":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:3566:14766":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:44775:8301":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:10583:15837":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"6:4628:12724":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"4:5309:8807":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"16:7909:15739":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:2676:1933":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"17:11485:18993":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"5:3937:2326":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:2507:234":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:38910:2000":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:45207:8322":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:5931:13419":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"5:7134:22257":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:2282:14724":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:6865:32924":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:42878:3156":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"12:1628:2320":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"6:5910:13417":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:42125:3115":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"6:1731:10240":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"5:277:1911":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"9:19:14521":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"12:1845:2315":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:39562:2975":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"4:8230:8740":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:5447:15648":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:11106:18492":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:43360:121":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"17:13184:19795":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:8526:15796":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"4:10700:118":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"6:4766:12741":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:2835:1987":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:5664:15658":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:46447:8330":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:10394:16038":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:9263:15859":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"5:5726:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:12609:19750":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"5:3076:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:10997:18486":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:13158:19792":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:9274:15860":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"9:111:14465":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"18:538:19862":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:39316:2936":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:7117:33316":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"4:10645:27135":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"17:12768:19760":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:43341:3187":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:9873:15990":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"16:4817:15417":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:38690:2005":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"12:1085:2547":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"5:208:2324":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:9339:15868":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"4:8225:8739":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"4:9059:215":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:6210:15680":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"4:10845:27097":{"crate_id":4,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:9382:15873":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"16:5411:15646":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:3388:2838":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"4:1074:8560":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:11565:3118":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"1:43305:3123":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"4:904:2350":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"4:8794:2556":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:9031:33985":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"12:1866:8566":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:40906:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:44296:8299":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"16:5703:15659":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:46558:8247":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:30035:22247":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:40575:2997":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"4:7580:8718":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"18:80:19834":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"4:11229:26661":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"5:1230:8561":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:41106:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:9060:3036":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"5:3151:31820":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"4:11863:1378":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"4:1568:2088":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"13:0:1830":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:6472:14670":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"4:8495:8801":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"1:40725:190":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:6851:2942":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:21584:21586":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"4:11247:27110":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"5:1392:8550":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:11536:15994":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"9:977:14454":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:39264:2889":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:39510:2971":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"9:896:14453":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:45283:8329":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:40801:180":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:6668:33285":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:43038:3175":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"5:2075:30689":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:44358:8320":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:4703:12733":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"4:7939:29859":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"4:2385:1844":{"crate_id":4,"path":["std","io"],"kind":"module"},"1:29963:67":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:46409:8310":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:386:15808":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"6:567:9318":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"4:10205:8811":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"4:1575:2315":{"crate_id":4,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"17:13114:19787":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"12:119:2309":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:9722:15936":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"4:7704:22389":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"16:6200:15679":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:2906:116":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:6488:9358":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:13082:19784":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:39519:23102":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"16:5596:15656":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"4:2370:8631":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"1:9544:2389":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:2455:2606":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:41355:3035":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:8613:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:5951:13422":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:44536:23100":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"4:891:8551":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"4:9107:8832":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:12955:19773":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"4:5751:1962":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"4:8940:26829":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"6:1589:10227":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:39146:2893":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:41369:3038":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:4261:12689":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:7059:2063":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:39472:2960":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"4:7661:8538":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:7942:15741":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"9:956:14450":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:11661:19002":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:13478:19813":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:6773:13845":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"4:9181:2228":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"4:8746:183":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"6:4890:12755":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:12909:19769":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:7603:15732":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:39865:2943":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:1710:10238":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:473:9306":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:10310:16035":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"16:7372:33186":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:4241:1920":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:6594:10158":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:8881:33990":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:12674:19754":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:39491:2969":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"4:6538:1965":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:13413:19810":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:2297:185":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:9064:3038":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"4:4062:29927":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"12:1029:8560":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"4:1586:8565":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:43393:3189":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"4:2358:8625":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"17:10121:15950":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:10708:15843":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:43198:3137":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:39344:2935":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:4322:12694":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:2302:124":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:9070:3040":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:10546:15836":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:12485:19747":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:21371:8260":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"16:2683:14741":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"4:6318:29862":{"crate_id":4,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"17:9658:15937":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"4:11872:734":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"9:0:1832":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:3171:2001":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:12874:19766":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"4:2207:128":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"16:5374:15644":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:12850:19764":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:8871:15827":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:4795:12745":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:8752:3144":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"9:649:14472":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"6:119:8989":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"16:3010:14753":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"16:4721:15393":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:12748:19758":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:4805:12746":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"16:2487:14733":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"5:5746:1951":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:39888:2945":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:6000:13425":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:29977:22203":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:8368:15818":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:7298:15715":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"16:6781:15703":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:42556:3146":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"6:1534:10221":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:6270:15683":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"4:558:2564":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:12022:19024":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"9:800:14585":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:42808:3153":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"5:3504:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:20615:8267":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"6:7440:12912":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"5:5640:2350":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:4720:12735":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"6:553:9316":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:1527:2355":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:42604:3075":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:44729:8313":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:8137:15811":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:2557:14736":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:6521:13831":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:0:1839":{"crate_id":17,"path":["object"],"kind":"module"},"6:5843:13413":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:20854:8264":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:4697:12732":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:48939:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:12322:19045":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"4:5488:8813":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"6:4649:12726":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:1687:10235":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"4:8420:8798":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"4:10668:27168":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"6:4571:12720":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:578:9320":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"5:2900:30744":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"4:8997:26793":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:43164:3179":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"4:7469:15810":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:4357:15293":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:2930:14751":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:20823:8718":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:9913:2557":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"5:2893:2150":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:39921:2952":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"5:2904:30745":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"4:11858:1491":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"16:5203:14693":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:10476:16041":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:39188:2894":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"12:834:2542":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:40784:2557":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"4:10824:27126":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:12147:135":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:39401:2934":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:7566:22356":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:1695:10236":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"4:5545:203":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:4962:12762":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"5:7001:30384":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:6877:15705":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"12:1859:8565":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:39174:2892":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:41026:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:46569:8248":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"12:985:8559":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"4:11504:14681":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"4:11823:30296":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:41725:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:44518:8289":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"5:1704:2315":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"4:7618:2416":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"17:11853:19015":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"4:534:2386":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"1:11103:3063":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:40563:2996":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:2491:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"17:9193:33980":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"12:1534:2549":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:586:9321":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"4:8437:8799":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"4:3869:8701":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"4:11033:3187":{"crate_id":4,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:44250:8319":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:20409:23817":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:39633:2980":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:44481:8304":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:39682:2983":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:4313:1926":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:44398:23064":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:5698:13402":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:4232:204":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"4:5428:8812":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"17:12756:19759":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"5:1370:2088":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:12926:19770":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:7483:15726":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:20428:23899":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:7249:15711":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"4:11166:8821":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:20654:8718":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"4:3975:8709":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:12176:19035":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:8339:15817":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:7135:33342":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:7872:15737":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:13231:19800":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:12934:19771":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:10207:16021":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"5:1066:31860":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"16:7825:15735":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:13168:19793":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:2678:223":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"5:1600:2326":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:7511:14404":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:7396:15722":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:7659:15734":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:11343:18509":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"15:0:1837":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:11909:19018":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:2574:115":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"17:1931:15885":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:2680:108":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:2919:1935":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"15:214:14677":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:7136:149":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"5:6373:2326":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"16:7329:15718":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"5:3907:2350":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:12211:19037":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:10283:16006":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:40640:2087":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"17:9885:15991":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"16:3689:14817":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"4:9115:27172":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","fast","DtorState"],"kind":"enum"},"4:956:8557":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"4:679:2565":{"crate_id":4,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"18:755:19856":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:8441:15821":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:7475:12917":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"5:5835:2355":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:12781:19761":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:5628:15657":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:31729:2837":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"16:4385:15297":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:44995:23063":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:10062:15954":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:9051:111":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"18:699:19854":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:6519:2096":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:2993:14752":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:42413:3081":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:5772:13370":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:7343:15719":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:1716:8728":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:9627:15897":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:5558:15655":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:1002:1747":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"16:5780:15662":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:12087:19029":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:44851:8290":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:46699:8254":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:4841:12749":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:12103:19030":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"5:7163:8615":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:6690:15699":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:9362:15831":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"4:8506:8802":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:41639:109":{"crate_id":1,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"4:8274:8772":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:11217:18500":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:12739:19757":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:10182:15955":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"5:3138:8566":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"6:5813:13411":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:9323:3053":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:123:8990":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:20666:8257":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"17:8272:15815":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"4:2572:8663":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:48926:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:4297:15281":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:2687:1932":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"4:1580:8564":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:9446:15878":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:10445:15848":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:3125:15956":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:4334:12695":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"4:8347:8796":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"6:5660:13342":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:5981:33239":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"12:1138:8561":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:6719:13840":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:1903:15925":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"11:36:32840":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"1:2800:1980":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"12:659:2088":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"4:6395:1963":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:3599:14775":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:3150:1999":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:43381:3188":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:9671:15904":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:10973:18485":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"4:9383:2414":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"4:11869:735":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"1:7095:2957":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"12:300:32845":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:8186:2067":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:1617:10230":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"4:7592:8520":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"17:8510:14691":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:3932:2355":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"5:2177:30676":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"4:4566:27154":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"4:10655:8634":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:46363:8292":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:1611:579":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"12:274:2539":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"5:6175:2350":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"4:3344:2355":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"1:9736:8718":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"16:7426:15723":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:3190:23894":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:4539:12717":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"4:8880:8828":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:4862:12751":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"16:2605:14738":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:10854:15849":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:39481:2968":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"4:11879:779":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"18:521:19857":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"4:8397:8797":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"1:41885:3056":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:7521:14405":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:0:1838":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:1652:10232":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:4545:15361":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:39584:2976":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"4:3428:2898":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"17:1021:15876":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:2894:14750":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"4:10720:27194":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"4:2216:8618":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"1:4:1000":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"5:668:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:2825:14747":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:38937:15745":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"4:4092:8734":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:21600:21564":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:39297:2884":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:9700:15910":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"12:1003:2546":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:38856:200":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:42850:3149":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:4328:12536":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:29901:2795":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:13340:19803":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:10332:16036":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:39654:2981":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:39218:2886":{"crate_id":1,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"12:1832:2556":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:10088:15953":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"4:4667:8717":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:39571:2962":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:13176:19794":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"18:644:34013":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:11034:18488":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:2300:14725":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:2771:1974":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:10058:3085":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"4:8052:8639":{"crate_id":4,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"4:4630:8742":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:6359:15689":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"6:4910:12757":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"7:32:14421":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"4:8181:8691":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"4:48:1529":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"1:9328:3054":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"12:2069:2546":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:39278:2891":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:2782:1976":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:5815:15664":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:42392:3077":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"4:11343:8696":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:5494:15651":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"6:6649:13837":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"5:3528:2557":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"4:8329:8781":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:7428:12910":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:44659:8325":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:4871:12752":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"4:7684:8600":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"16:153:2306":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"4:2475:8670":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"5:5168:8869":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:20381:2830":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:594:9322":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:4520:12716":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:2129:580":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:43593:3222":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:2993:1995":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:6791:13846":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:11734:19006":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"12:2053:8559":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:21651:23048":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:41901:3055":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:11893:19017":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:12073:19028":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:41893:21598":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"5:6955:2350":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:9155:15833":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:11356:18510":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"18:590:23058":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:4413:1930":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:44499:23051":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"4:7518:2410":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:6161:15676":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"5:7103:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:9981:3084":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:420:14699":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"5:6985:2088":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:43325:3130":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"5:6623:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:44328:8332":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:46637:8252":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"4:1436:143":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"4:9997:2572":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"6:4781:12743":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"4:3049:8685":{"crate_id":4,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"6:540:9314":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:46607:8250":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:10608:15838":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:22222:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"14:31:14655":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"4:5236:119":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"9:382:14556":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:4361:12698":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"0:28:1614":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"17:13192:19796":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:12630:19752":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"4:6087:2404":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"18:491:34014":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:4237:12687":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"4:4424:8743":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:45365:8314":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:10520:16044":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:40986:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:21697:22298":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"4:8236:8731":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:4408:12704":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:4301:12691":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"4:3371:8640":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"4:10820:8601":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:50214:23109":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"16:5510:15652":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:9371:15832":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"4:7480:27248":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"5:2624:30679":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:8911:33995":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"4:8970:29846":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:12233:3214":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:9183:15834":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:2682:225":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"5:7022:2088":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"4:8848:8827":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:40776:2556":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:2792:1978":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"12:2205:8548":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"9:863:14452":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:4689:15385":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:1800:1937":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"5:3644:2558":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:43576:158":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:50235:23124":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"17:9422:15866":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:44948:23019":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"16:6123:15673":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:9527:2444":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:39619:2979":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:42562:3145":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:22387:2646":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"6:5890:13415":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:7201:14216":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"5:4298:2355":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"4:2538:2391":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"4:6880:27242":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:4812:988":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"4:6743:8833":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:4757:12740":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"4:11089:8830":{"crate_id":4,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"4:7581:8529":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:11570:3133":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:6743:13842":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"4:8244:8694":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"4:10310:8815":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:4476:12712":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:2367:14728":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:11199:18499":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"4:8164:3147":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"17:10682:15842":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:38944:24009":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"17:13091:19785":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:12225:19038":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:40657:2557":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"16:7890:15738":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:39501:2970":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:9350:15867":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:0:435":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"6:1723:10239":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:3854:14934":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"4:4552:8706":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:4751:12739":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:11389:3084":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"5:1339:2556":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"12:2198:32852":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:11761:19008":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:42708:3069":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"4:4627:8769":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"14:165:14656":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"6:4583:12721":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"4:1083:8561":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"4:7805:8638":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"1:42530:3143":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"16:6593:15695":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:4248:12688":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:21624:2643":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"5:621:30721":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:43337:3126":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:43605:3220":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"4:11881:1110":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"4:11199:26666":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"4:3770:8697":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:6070:15671":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:7319:15717":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:11787:19010":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"12:1518:14648":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:11721:19005":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:7237:15710":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:42140:21847":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"4:10415:8681":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:20703:8261":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:22288:168":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:42690:3073":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:6146:15675":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:2333:179":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:1894:2582":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"4:1051:8559":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:562:15810":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"4:11384:8695":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:40733:207":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:39603:2978":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"5:2894:31801":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:9204:26610":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"17:10350:15846":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:10497:16043":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:7145:1910":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"18:690:19853":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:21763:2644":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:12357:106":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:7522:2866":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:39903:2439":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"4:6071:2401":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"4:4100:8735":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"4:3665:8696":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"4:5374:8811":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"12:2178:32851":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:4574:15366":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"12:725:8550":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"10:0:1833":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:13366:19805":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:10949:18484":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:3177:2003":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"4:1065:2546":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:40421:2991":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:1747:10241":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:9764:15940":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"4:621:8532":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:42894:2865":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:45909:8334":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:1618:2774":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"6:5902:13416":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"4:10690:129":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"0:31:1621":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"1:41348:3036":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"4:9018:27183":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"16:2261:14697":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:4274:12690":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:11579:3136":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"16:6241:15681":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:45443:8302":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"4:3971:8708":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"4:4564:27152":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:11259:18503":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:6496:10157":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:13404:19809":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:7481:12918":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:10321:16001":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"4:8983:15706":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:6654:15697":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:5921:2985":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:20578:8266":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"4:939:8556":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"5:7205:8877":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:1509:10217":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:8162:15812":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"4:11877:1474":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"6:5805:13410":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:41066:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:1726:23016":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"4:1788:8583":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"4:11263:2423":{"crate_id":4,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"17:8393:15819":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"16:2433:14731":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"16:5122:15626":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:7132:133":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:12797:19762":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:9712:15939":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"12:1872:8567":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"1:40455:2993":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:2757:2844":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"17:2916:15951":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:5472:15650":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"13:226:32855":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:22057:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:10221:16032":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"16:7469:15725":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:10921:16048":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:8110:15791":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"4:355:8527":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:6816:33257":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:10075:15952":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:4635:15379":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:2509:14734":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:21749:2647":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:13393:19808":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:4994:12765":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"4:8928:8516":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:42869:3157":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:7099:2956":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"4:925:8553":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"4:10134:8820":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:39551:2984":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"16:2868:14749":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:2225:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"6:4775:12742":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:12514:19748":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"14:160:14655":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"9:709:8797":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:43329:3131":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:13527:19817":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:12164:19034":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"5:1401:8551":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"18:0:1840":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:8295:15816":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:10172:3073":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"18:582:2830":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"4:11862:1348":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"4:10940:2419":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"5:3515:2556":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:9897:15992":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"4:1571:2350":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:13024:19778":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:30516:180":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:39913:2950":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:38737:1996":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"18:727:19855":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:44380:8324":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"4:646:8536":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:8631:15823":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:6517:14669":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"4:8151:3144":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"5:6024:8834":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:21713:22169":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:9066:191":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"6:1559:10224":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"4:3124:29619":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:2631:14739":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:41606:70":{"crate_id":1,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"4:11871:733":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"0:0:1614":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"12:1065:32848":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"4:9088:8646":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"9:188:14493":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"17:11368:18511":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"5:1216:2546":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:11559:18996":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"4:5559:2398":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:6186:15678":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"12:1120:14647":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:13492:19814":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:4662:12728":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:0:806":{"crate_id":6,"path":["libc"],"kind":"module"},"1:38812:199":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:6611:10161":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:6053:13452":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:4501:12715":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"12:815:8555":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:8187:2066":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:6094:13454":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:10721:15844":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"5:2104:30693":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"12:738:8551":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"1:2934:1907":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"4:4244:8738":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"4:7845:118":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"4:10626:8771":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"6:493:9309":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:4379:12700":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:9778:15913":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:6735:15701":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"4:860:2557":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:4577:2878":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"4:11828:8539":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:9445:2441":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"16:4217:15249":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:43520:192":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"17:10420:16030":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:31689:2835":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"6:6059:12601":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"4:588:8531":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"16:2727:14743":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:6764:13844":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:4743:12738":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:11054:18489":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"4:11461:8847":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"17:13374:19806":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:12550:19749":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"4:962:8558":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:2675:1904":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"4:11241:27127":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:42903:2885":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:41226:1952":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"16:2320:14726":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"4:10680:8638":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"12:393:32842":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:39894:2947":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:8561:15797":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:42465:3078":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:4307:12692":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:21462:22821":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:4888:15440":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:8241:15814":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:2771:14745":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"4:10929:2418":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"4:8270:8770":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:3989:26108":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"3:0:1827":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"16:5761:15661":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:10822:15847":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:3087:1998":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"4:3238:8678":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"4:1597:8567":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"4:10833:8812":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:44827:8308":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"5:4253:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"4:7949:8673":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"5:2065:2343":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:40540:2995":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"4:6368:1749":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"6:4929:12759":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:4733:12737":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:4346:12696":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:44681:8328":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"4:6355:1748":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"17:9577:15892":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:4422:12706":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"12:1852:8564":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:1899:10380":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:42840:3147":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:44629:8321":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:13557:19819":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"6:7452:12914":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:10466:16040":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"9:505:14631":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:2454:8718":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"4:5896:2397":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"6:4850:12750":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"6:5741:13406":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:2820:1983":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:5878:14696":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:7288:15714":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:11791:111":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"5:5172:8870":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:3188:14755":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:43150:3178":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:8014:15745":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:6171:15677":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"4:10222:2573":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:39131:2865":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:7511:15728":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:25596:2642":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"5:4268:2358":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:9553:15831":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:40665:2088":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"17:8941:15828":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"12:646:2557":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:46485:8295":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:12349:19046":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:525:9312":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"5:6294:2088":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:1677:10234":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:7309:15716":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:5388:15645":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:41922:8797":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"6:4618:12723":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:41146:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:39533:2973":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:48504:8335":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"4:8802:8829":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"4:1786:8582":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"16:6316:15686":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:9293:15875":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:11813:19012":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"16:4519:15359":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:967:15872":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:4656:12727":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:572:9319":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:12425:139":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:11278:3161":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"4:3314:2947":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"17:11800:19011":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:39137:2869":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"4:8810:2088":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:9691:15911":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"4:5323:8808":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"6:6541:13833":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"18:481:19858":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:30141:22291":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"16:7929:15740":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:5800:13409":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"4:8170:8694":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:9328:15869":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:21111:8286":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"4:8101:2569":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"4:3121:29613":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:9601:15890":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:39542:2974":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:11119:3065":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"16:7567:15731":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"4:5056:188":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"1:21676:22181":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:21775:2648":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"5:851:2334":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"5:3264:2315":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"6:4900:12756":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"4:10047:27228":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"12:387:32841":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"4:734:141":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:7357:15720":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"4:10710:2569":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:8981:15829":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:9947:15993":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"4:11860:1035":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"1:42382:2584":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"12:822:8556":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"12:2184:23621":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:2588:127":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:30533:2830":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"4:0:1370":{"crate_id":4,"path":["std"],"kind":"module"},"12:1840:2350":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"4:4113:8736":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"4:10412:8679":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"4:641:8535":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"5:951:2326":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:2940:1753":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:2989:1994":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"9:622:14471":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"16:7166:15708":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:20394:23817":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"4:8176:8693":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:20449:23897":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:10642:15840":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:5917:13418":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"5:3595:2326":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:677:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"4:11052:8646":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:39235:2865":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:43113:3177":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:5527:2961":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:4457:12710":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:11137:18494":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"4:7853:29614":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:8776:22355":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:4164:1745":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:10020:3072":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:11235:18501":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"4:11511:14681":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:2808:1981":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:2389:14729":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:11997:19022":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:12118:19031":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:11125:18493":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"4:6282:163":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:9021:15830":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"4:7030:29928":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"5:35:2322":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"18:507:34013":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:40438:2992":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:38768:195":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"4:8296:8720":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:44429:8312":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:12836:19763":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:4687:12731":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:8608:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"5:6506:2365":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"4:7828:129":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"6:7446:12913":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:39391:2433":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:8666:15824":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:9501:15874":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:1609:10229":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:11014:18487":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:39358:2908":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"typedef"},"1:42736:3154":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:43555:3216":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"4:6471:1960":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:6903:15706":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:40707:2064":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"9:586:14519":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"17:11974:19021":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:43086:3176":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:40716:2157":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:5697:24506":{"crate_id":1,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"4:7944:29896":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"4:6922:2408":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:7093:15707":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:2830:1985":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:4952:12761":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"4:3983:8711":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:43563:3217":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"4:3236:8677":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:2719:2841":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"4:8252:8741":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:9165:33979":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:12307:19044":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:9857:15969":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:6284:15684":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"4:3453:8661":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"4:1592:8566":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:46622:8251":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:4787:12744":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:9303:15874":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"18:736:19848":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:44873:8293":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:40866:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"4:1988:181":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"4:11214:26652":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:22024:175":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"5:7260:2315":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"1:3242:1936":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"14:202:8875":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:1541:10222":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:4721:2906":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"4:11699:2429":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"12:777:2319":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"1:11636:3165":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:11338:3160":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:42144:3089":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:561:9317":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"4:2830:2394":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"4:8092:8684":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"1:3505:2350":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:40946:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:4681:12730":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:5786:13371":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"12:669:8553":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:9930:15968":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"4:6607:29862":{"crate_id":4,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"5:3656:2560":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:22189:2645":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:2825:1984":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:12033:19025":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"4:4891:8777":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"1:48887:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:10385:16037":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:7469:12916":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:4236:1919":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"6:6571:10184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:42790:3152":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"4:5552:2397":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:5460:15649":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"4:11876:1473":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"1:4358:1927":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"5:1185:8559":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"16:7044:33318":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"4:5675:1953":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"12:697:8554":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"4:8917:29850":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"4:9048:164":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"4:847:2556":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:7180:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:41940:21584":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:42484:3079":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"11:0:1834":{"crate_id":11,"path":["adler"],"kind":"module"},"4:4084:8733":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"4:11873:730":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"6:6757:13843":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:42860:3148":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"4:6222:203":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:8056:15746":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"16:6345:15688":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"15:193:14673":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"5:7028:2088":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:12208:189":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"16:7388:15721":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:11186:18498":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:12148:19033":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:12638:19753":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"4:1771:600":{"crate_id":4,"path":["std","env"],"kind":"module"},"12:762:2315":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"17:12361:19047":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"5:1410:8552":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:4369:12699":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:39421:2958":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:8596:15822":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:5759:13408":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:12695:19755":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:6704:15700":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:9889:2556":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"5:5124:2326":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"4:11864:1457":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"17:242:33977":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:21742:23121":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:9010:131":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:43333:3125":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"4:3921:8705":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:6655:23606":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:9000:2898":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"16:4921:15449":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:11087:18491":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:4606:15374":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"5:3112:8565":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:42474:2587":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:41588:67":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"4:10946:2420":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:12368:2401":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:2796:1982":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:5752:13407":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"4:11160:27165":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"5:6535:2379":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"5:4069:2355":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:42373:3067":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:20695:8718":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:5541:15654":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:21515:22814":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"12:2080:8560":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:10360:16002":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:11315:18507":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"0:29:1620":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"17:11576:18997":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"4:8816:8826":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:45703:8315":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:20697:8259":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"16:6743:15702":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:3640:2088":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:42636:3151":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"4:1849:2567":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"17:8212:15813":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:9526:15887":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:6330:15687":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"12:98:32854":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:12617:19751":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:38958:2861":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:4092:1938":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:39441:2959":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:10139:15831":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:44583:8256":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:10233:16033":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:12399:202":{"crate_id":1,"path":["core","task","ready","Ready"],"kind":"struct"},"4:11839:27187":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:12181:26395":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:2937:1908":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:46584:8249":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"5:1046:2550":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:4597:12722":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:6137:15674":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:7197:1909":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:247:33981":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:45129:8333":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:40649:2556":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"4:8134:2967":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"17:10159:15957":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"4:7677:8563":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:12134:19032":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:5967:32396":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:22321:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:10670:15841":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:10732:3083":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"12:2190:32850":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:39643:2964":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"6:4353:12697":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:9820:15988":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"16:4662:15382":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:43502:202":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"4:10353:2415":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:13141:19790":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:8475:15792":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:12265:19041":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:48861:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:2745:2755":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"7:79:14428":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"5:1420:8553":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"4:4496:8760":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:11300:18506":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"18:574:34013":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:9844:15947":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:31725:22389":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:2766:1977":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:7218:14217":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:4988:12764":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:2813:1986":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"5:1431:8554":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"4:5343:8809":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"5:4968:1951":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:10403:15845":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:13203:19797":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"5:1354:2557":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:11271:18504":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:11330:18508":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:10257:16008":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:22090:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"16:3716:14820":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:2930:1906":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:1735:2579":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"16:6252:15682":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:4367:1928":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:3376:2839":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"1:46239:8307":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:4429:12707":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:41621:67":{"crate_id":1,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"1:7252:156":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"16:4144:15200":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"4:505:2343":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:22255:167":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"4:8922:106":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:12160:3213":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"5:768:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:2411:14730":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:11594:18998":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:4882:12754":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:40826:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"8:0:1831":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"6:5938:13420":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"4:7815:8635":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"17:11748:19007":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"4:4164:8737":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:6567:15694":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"4:8113:8642":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"17:13354:19804":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"4:2612:8672":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:4303:1925":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"4:8218:2995":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:1663:10233":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:11708:19004":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:42572:3144":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:44459:8300":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:1550:10223":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:11951:19020":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:4714:12734":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"4:3863:8702":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:12964:19774":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"4:6572:214":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:7980:15744":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:7498:12920":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:10528:15835":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:21636:22163":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:10296:16005":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"5:4331:2358":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:39241:2887":{"crate_id":1,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"4:4316:8732":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"4:3961:8707":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"4:11874:1475":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"6:4637:12725":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"5:7087:8549":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:29935:2796":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"5:6931:8578":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:20828:8258":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:11639:19001":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"5:4751:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"4:638:8534":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:11684:19003":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:9061:15831":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:1527:10220":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"4:1985:182":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"4:9978:8593":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"4:6468:1959":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:12278:19042":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:12896:19768":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:12480:3219":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:4122:1939":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:9831:15989":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:1571:10225":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:45489:8306":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:7434:12911":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"16:5793:15663":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:2971:2004":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"18:636:34026":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:5716:13403":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:6829:33248":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"4:8489:2556":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"1:14:1807":{"crate_id":1,"path":["core","write"],"kind":"macro"},"6:4396:12702":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"5:3105:2556":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"16:6376:15690":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:11070:18490":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"5:1030:31859":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:21263:3066":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:10200:3074":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:10108:15949":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:10752:15845":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:1712:2825":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:11247:18502":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:2859:1992":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"16:6496:15692":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"16:4413:15301":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:10699:3082":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:9274:140":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"17:13059:19782":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:3205:1934":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:13148:19791":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:4945:12760":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:2668:217":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"6:4877:12753":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"16:5163:15643":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"4:7667:8562":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"4:6823:2423":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","fast","Key"],"kind":"struct"},"5:3146:8564":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:43313:3129":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:2497:147":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"4:8963:29872":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"4:2548:2389":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:48900:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:43317:3128":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"16:6059:33313":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:9062:3037":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:2341:14727":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:43218:3138":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"4:10418:8677":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"16:534:33241":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:4549:12718":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:46512:8243":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:481:9307":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:20847:8718":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"16:2842:14748":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:8796:15826":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"18:96:19835":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:10245:16034":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"4:933:8555":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:8822:33978":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"4:4669:8721":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:2500:132":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"4:11878:1471":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"17:13506:19815":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:9805:15987":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"4:11875:1472":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"5:6963:2338":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"18:515:19860":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:11590:3134":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"4:3389:2568":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:11174:18497":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"16:7847:15736":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:48913:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"4:11857:411":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"14:7:14655":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:46161:8323":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:46051:8303":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"4:2344:8621":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:1604:10228":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:2503:235":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"5:6525:2377":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:2494:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"16:4786:15410":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:11436:18992":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"4:5682:1954":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:12237:19039":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"4:4562:27150":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:1647:1073":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"4:11070:26667":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"4:5010:29889":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:42970:3171":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"4:929:8554":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"4:11861:309":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"1:40674:2063":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"16:4849:15425":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:1514:10218":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"4:8740:8815":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"4:484:2385":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:45049:23062":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:9458:15903":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:41612:130":{"crate_id":1,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"1:42654:3150":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:29712:2607":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"16:5737:15660":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"4:8157:3071":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"19:0:1017":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:7956:15742":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:11939:19019":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:11828:19013":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"5:7120:8616":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:38928:2840":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:39872:23060":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"16:6790:15704":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:7463:12915":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:12198:19036":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:8188:2065":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"16:2657:14740":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"4:4842:8768":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"6:5990:13424":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"5:6692:2383":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:6298:15685":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"4:3927:8706":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:1962:15909":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"4:11405:8697":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:13214:19798":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:42586:3071":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"12:1836:2088":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:13279:19801":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"15:175:14672":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:9751:15912":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"4:361:8528":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:6676:15698":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:10186:3069":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:9909:15948":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:3977:26129":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:42754:3155":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:40527:2994":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:10270:16007":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"4:7537:2412":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:6463:15691":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:12730:19756":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"4:7700:8601":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:2248:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"9:33:14522":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"16:5433:15647":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"12:1555:14649":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:39257:2888":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:9056:119":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"4:11868:633":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"6:653:9370":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:9559:2449":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"4:7788:8636":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"16:2465:14732":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:7970:15743":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"4:3281:8667":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:41651:127":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"6:4559:12719":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:13580:19821":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"5:4847:2355":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:43512:208":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:48874:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"18:660:19850":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"4:4671:8722":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:38834:198":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"4:8975:29885":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:9108:15832":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:4483:12713":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:39450:2967":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:12008:19023":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:4820:12747":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"5:803:2332":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"16:7211:15709":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:43309:3127":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:4611:8700":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:10625:15839":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:5690:13401":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:4327:15287":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:11606:18999":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:38752:197":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"4:11013:8817":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"4:7597:8521":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"5:262:2326":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:12337:15848":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:46503:8242":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"4:3437:27607":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:13436:19811":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:39198:2895":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"4:6119:29894":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"14:0:1836":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"6:4828:12748":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:22354:166":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"4:8864:8825":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"4:4725:2395":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:11149:18495":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"4:920:8552":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"5:6107:2369":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"1:7174:120":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"4:7861:8671":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:4981:12763":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:2851:1990":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:13039:19780":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:22786:2641":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:10214:3070":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"16:7557:15730":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:11500:18994":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"4:2360:8626":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"6:4439:12708":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:9223:15857":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:13518:19816":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"5:6971:30707":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:4313:12693":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:11585:3135":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:7386:14376":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:1645:10231":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:42885:2888":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:5728:13405":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:44228:8331":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"5:2157:30715":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:43185:3181":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:4673:12729":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:1704:10237":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"4:9069:8830":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"4:8479:8800":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"5:1442:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:10774:15846":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:12972:19775":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"5:7075:8548":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:546:9315":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"18:624:34024":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:39463:2575":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"4:1824:8593":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"1:46660:8253":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"13:110:32902":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"5:6221:2326":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"16:7435:15724":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:13459:19812":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:5450:2972":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"5:7194:8876":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:0:488":{"crate_id":1,"path":["core"],"kind":"module"},"6:6667:13838":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:20744:8262":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:9631:15884":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"4:11001:8816":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"4:11856:925":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"4:878:8550":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:5959:13423":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:11841:19014":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"5:6993:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"4:1847:2228":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"16:5996:15667":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:5000:12766":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"5:6946:8568":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:12046:19026":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:46543:8246":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:229:207":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:5949:15666":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"12:861:8558":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"18:531:19861":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"4:10863:8818":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"6:531:9313":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:13134:19789":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"12:0:1835":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"17:12251:19040":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:42313:26105":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:505:9311":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:21369:8718":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:31738:2845":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:21275:23820":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:9283:15877":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:40792:2088":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:39271:2890":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"17:13007:19777":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:10455:16031":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:3402:14757":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:2864:1993":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:42992:3172":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:4727:12736":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:22156:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:11774:19009":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:20856:8262":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"16:6842:33140":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:5839:15665":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:6528:15693":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:38651:2006":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:3457:14758":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:11315:3163":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"5:1969:2558":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:9738:15914":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:3632:14784":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"5:3117:31826":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:3249:15974":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:12060:19027":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:38951:1926":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"17:8701:15825":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"4:8786:8818":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"1:45519:8309":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:9539:15886":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"4:9874:22209":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:12291:19043":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:6643:13836":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:9488:15888":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"18:113:19836":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"6:4402:12703":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:7543:15729":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"4:11880:1528":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"5:2395:2551":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"4:4833:8767":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"9:676:14461":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"4:11320:2425":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:6548:8772":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"4:7271:30302":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"1:40398:152":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"4:7793:8637":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"12:320:2311":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:2776:1973":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:6702:2939":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:39311:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:11288:18505":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"4:914:2315":{"crate_id":4,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"1:7525:2954":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"5:6940:2088":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:3263:14756":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:487:9308":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"4:2867:127":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"1:42402:2586":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:40504:22212":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"6:4416:12705":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:9068:3039":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"4:1927:8612":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"4:6524:1964":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"16:4749:15397":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:9401:15871":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:39158:22294":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:1771:15891":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"5:2896:30677":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"4:9378:8637":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"4:3118:27088":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"9:920:14451":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:46301:8327":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"14:187:14663":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:6017:15668":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"4:950:2542":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:3165:134":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"14:40:18486":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:12884:19767":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"9:827:14553":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:6109:15672":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:10506:16009":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"5:1201:8560":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"4:8085:2942":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"4:3197:8681":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"5:7150:8614":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:6608:2966":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:44897:8294":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"5:3172:8567":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:6634:13835":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"18:609:34019":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"6:62:8935":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:44184:23054":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:4768:785":{"crate_id":1,"path":["core","iter"],"kind":"module"},"4:4748:8716":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"4:5912:203":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:487:15809":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:44274:8311":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"9:592:14470":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"1:21568:21543":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"4:5708:1955":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:11161:18496":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:6911:1918":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"5:868:2556":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"18:564:19863":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:41186:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:42494:2588":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:4451:12709":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:42364:3068":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"4:3159:8680":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:10796:15795":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:9250:15858":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:9938:3071":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"4:8835:8824":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"12:60:32847":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"16:6619:15696":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:4742:22885":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"5:1451:8570":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:3160:231":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:11617:19000":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:20447:23900":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:499:9310":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:5722:13404":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:39879:1748":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"4:11882:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"18:766:19849":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"4:413:162":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:20426:23895":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:45026:23118":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:12860:19765":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"5:5574:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"4:2865:207":{"crate_id":4,"path":["std","io","error","Result"],"kind":"typedef"},"1:2788:1975":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"4:11855:368":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"12:632:2556":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"4:1898:8611":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"4:10650:27178":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:13382:19807":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:38878:1997":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"14:221:14665":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:41673:71":{"crate_id":1,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"4:3199:8682":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:6512:9190":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:42439:2958":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"12:1044:14646":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:13572:19820":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:9475:15889":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:6728:13841":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"11:44:14637":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"6:1583:10226":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"4:11025:27191":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:2339:186":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"16:2535:14735":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:9317:15870":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:2749:14744":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:1520:10219":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:10875:15850":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"5:5762:2561":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:4468:12711":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:9746:219":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"4:5491:8814":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"1:2761:1972":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:41362:3037":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:6698:13839":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:4489:12714":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:13594:19822":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"4:870:2088":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"12:751:2350":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"4:6174:2397":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:11515:18995":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:9681:15938":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:11354:3162":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:2732:1905":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"18:707:3136":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:6628:13834":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:21659:22216":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:9433:15865":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"18:652:34013":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:8055:15793":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"5:4139:2556":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:13221:19799":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:21:671":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"4:2209:8617":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"17:13047:19781":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:8951:33984":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:3325:68":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:46523:8244":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"16:5235:33236":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"16:5614:33036":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:8418:15820":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:45253:8326":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"5:1983:2560":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"4:9371:128":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"5:1302:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:13126:19788":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"4:11867:632":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"1:10093:3075":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"18:671:19851":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:11526:2640":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"4:3913:8704":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:12980:19776":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:13327:19802":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:10490:16042":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"4:11143:2421":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"4:2342:2799":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"5:771:2329":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:20641:8268":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"16:5525:15653":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"4:3446:8641":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"18:719:19847":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:39210:2885":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:42452:3080":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:21106:8263":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:43007:3173":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:43175:3180":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"4:8144:2981":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"7:0:1518":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:9644:15883":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:13536:19818":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:5945:13421":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:42544:3142":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:13100:19786":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"5:7277:2372":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:39328:22257":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:7497:15727":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"4:11479:27098":{"crate_id":4,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:2228:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:45553:8291":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:44805:8305":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:4224:12686":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:40484:21560":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:2847:1989":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"4:4402:8742":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:9118:33976":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:13071:19783":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"4:3668:8695":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:12816:19746":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:10894:15851":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:7195:14215":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:8774:15794":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:44204:23061":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:11547:15995":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"4:4979:29889":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"18:599:34032":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:41709:3045":{"crate_id":1,"path":["core","fmt","FlagV1"],"kind":"enum"},"1:7529:2955":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:10131:3076":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"16:4441:15305":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"4:2212:2384":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"16:2793:14746":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"4:11870:732":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"4:8903:1956":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"5:6667:2369":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:39668:2982":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"16:6052:15670":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:10434:16039":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"6:7173:9267":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"18:614:34029":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"4:6359:1957":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:12948:19772":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"4:3157:8679":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:11133:3139":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"4:1564:2556":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"4:3603:8692":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"4:8772:8817":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:4387:1929":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:5878:13414":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:4218:12685":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:43321:3132":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:4262:15270":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:5418:2365":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:38792:196":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:41932:21541":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"12:353:2313":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:2804:1979":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"16:3026:14754":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:40589:178":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"5:4099:2355":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"6:6530:13832":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:6034:15669":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:7637:15733":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:2855:1991":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"4:5359:8810":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"6:7487:12919":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:6719:33192":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:8991:33986":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:9058:3035":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"16:5184:14695":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:9071:33996":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:4024:2868":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"17:10374:16004":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"4:3899:8703":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:9791:15941":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"4:7646:8537":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"16:5219:14691":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"4:7869:2558":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"4:5995:2399":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"5:3979:2557":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}