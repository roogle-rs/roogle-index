{"root":"0:0:1642","crate_version":"1.4.0","includes_private":false,"index":{"1:12085:31145":{"id":"1:12085:31145","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41403:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:3213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12035:31140":{"id":"1:12035:31140","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:11900:1399","str::slice_mut_unchecked":"1:12036:31141","crate::ops::Index":"1:2981:2028"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5398:31816":{"id":"5:5398:31816","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12014":{"id":"1:12014","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12015:813","1:12016:2116","1:12017:31136","1:12018:31137","1:12020:31138","1:12023:29276","1:12024:31139","1:12025:314","1:12026:29293","1:12027:1647","1:12029:25695","1:12031:25696","1:12033:25697","1:12035:31140","1:12036:31141","1:12037:29312","1:12038:29313","1:12039:22263","1:12040:21876","1:12041:26792","1:12042:22081","1:12043:22112","1:12044:28303","1:12045:31142","1:12046:22265","1:12047:21333","1:12050:28859","1:12053:28861","1:12056:2157","1:12060:2115","1:12064:28302","1:12067:22087","1:12070:29322","1:12073:31143","1:12076:31144","1:12079:29324","1:12082:29326","1:12085:31145","1:12088:31146","1:12091:1841","1:12094:31147","1:12097:31148","1:12100:31149","1:12103:31150","1:12105:31151","1:12107:31152","1:12109:31153","1:12110:31154","1:12111:31155","1:12114:31156","1:12117:27529","1:12120:29328","1:12123:31157","1:12126:31158","1:12129:31159","1:12132:31160","1:12134:27083","1:12135:29209","1:12136:27087","1:12137:27088","1:12138:27089","1:12139:31161","1:12141:2953","1:12142:31162"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5401:27085":{"id":"5:5401:27085","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12137:27088"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12017:31136":{"id":"1:12017:31136","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12053:28861":{"id":"1:12053:28861","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:11894:419","self::pattern":"1:11716:3199"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:3213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11721:3213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11736:3215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12137:27088":{"id":"1:12137:27088","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12138:27089":{"id":"1:12138:27089","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5382":{"id":"5:5382","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5383:31813","5:5384:2880","5:5387:31814","5:5390:31815","5:5398:31816","5:5399:31817","5:5400:3031","5:5401:27085","5:5402:27086"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12039:22263":{"id":"1:12039:22263","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:11894:419"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43336:3227","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12060:2115":{"id":"1:12060:2115","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41405:179","prim@char":"4:11894:419","self::pattern":"1:11716:3199"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41403:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:3213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11721:3213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11736:3215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5400:3031":{"id":"5:5400:3031","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12043:22112":{"id":"1:12043:22112","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12042:22081"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43649:3238","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12091:1841":{"id":"1:12091:1841","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:11716:3199","`DoubleEndedIterator`":"1:7244:121","prim@char":"4:11894:419","str::matches":"1:12091:1841"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43570:3233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:3213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12117:27529":{"id":"1:12117:27529","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:11894:419","self::pattern":"1:11716:3199"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41403:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:3213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12038:29313":{"id":"1:12038:29313","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12037:29312"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12142:31162":{"id":"1:12142:31162","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4537:31162"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43683:2974","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12037:29312":{"id":"1:12037:29312","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:12038:29313"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12016:2116":{"id":"1:12016:2116","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12029:25695":{"id":"1:12029:25695","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41405:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41403:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12070:29322":{"id":"1:12070:29322","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:11716:3199","`DoubleEndedIterator`":"1:7244:121","prim@char":"4:11894:419","str::split":"1:12064:28302"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43384:3158","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:3213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11721:3213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11736:3215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12114:31156":{"id":"1:12114:31156","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:11894:419","self::pattern":"1:11716:3199"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:3213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5390:31815":{"id":"5:5390:31815","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12105:31151":{"id":"1:12105:31151","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12050:28859":{"id":"1:12050:28859","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:11894:419","self::pattern":"1:11716:3199"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:3213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12015:813":{"id":"1:12015:813","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:11894:419"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5402:27086":{"id":"5:5402:27086","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12138:27089"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1642":{"id":"0:0:1642","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[215,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\n# #[macro_use]\n# extern crate lazy_static;\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.4.0\")]","#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:29:1648","0:31:1649","0:28:1642"],"is_stripped":false}}},"1:12129:31159":{"id":"1:12129:31159","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:11894:419","self::pattern":"1:11716:3199"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:3213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11721:3213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11736:3215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12041:26792":{"id":"1:12041:26792","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43352:3225","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12103:31150":{"id":"1:12103:31150","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12025:314":{"id":"1:12025:314","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12026:29293","`u8`":"4:11911:1501"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12135:29209":{"id":"1:12135:29209","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39561:20584","Self::is_ascii":"1:12134:27083"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41403:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39561:20584","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12044:28303":{"id":"1:12044:28303","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43620:3228","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12026:29293":{"id":"1:12026:29293","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:11911:1501"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12111:31155":{"id":"1:12111:31155","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:11894:419","self::pattern":"1:11716:3199"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:3213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11721:3213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:11741:3214","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28:1642":{"id":"0:28:1642","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[167,0],"end":[179,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"inner":{"macro":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"}},"1:12110:31154":{"id":"1:12110:31154","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12064:28302":{"id":"1:12064:28302","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:11716:3199","`DoubleEndedIterator`":"1:7244:121","prim@char":"4:11894:419","str::split_whitespace":"1:12042:22081","str::rsplit":"1:12070:29322"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43366:3154","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:3213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12094:31147":{"id":"1:12094:31147","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:11716:3199","`DoubleEndedIterator`":"1:7244:121","prim@char":"4:11894:419","str::matches":"1:12091:1841"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43588:3234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:3213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11721:3213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11736:3215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12082:29326":{"id":"1:12082:29326","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:11894:419","str::splitn":"1:12079:29324","self::pattern":"1:11716:3199"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43488:3152","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:3213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11721:3213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11736:3215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12126:31158":{"id":"1:12126:31158","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:11894:419","self::pattern":"1:11716:3199"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:3213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12136:27087":{"id":"1:12136:27087","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12018:31137":{"id":"1:12018:31137","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12076:31144":{"id":"1:12076:31144","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:11716:3199","str::split":"1:12064:28302","prim@char":"4:11894:419","str::split_terminator":"1:12073:31143"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43434:3231","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:3213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11721:3213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11736:3215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12107:31152":{"id":"1:12107:31152","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12046:22265":{"id":"1:12046:22265","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43658:3237","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5387:31814":{"id":"5:5387:31814","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:3213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12073:31143":{"id":"1:12073:31143","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:11716:3199","str::split":"1:12064:28302","prim@char":"4:11894:419","`DoubleEndedIterator`":"1:7244:121","str::rsplit_terminator":"1:12076:31144"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43416:3232","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:3213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5399:31817":{"id":"5:5399:31817","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:280:1945","`String`":"5:7241:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:280:1945","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:6990:8708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12056:2157":{"id":"1:12056:2157","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41405:179","prim@char":"4:11894:419","self::pattern":"1:11716:3199"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41403:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:3213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12042:22081":{"id":"1:12042:22081","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12043:22112"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43640:3229","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12023:29276":{"id":"1:12023:29276","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11283:3219"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12024:31139":{"id":"1:12024:31139","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12123:31157":{"id":"1:12123:31157","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:11894:419","self::pattern":"1:11716:3199"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:3213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11721:3213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11736:3215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12036:31141":{"id":"1:12036:31141","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:11900:1399","crate::ops::IndexMut":"1:2985:2029","str::slice_unchecked":"1:12035:31140"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:29:1648":{"id":"0:29:1648","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[185,0],"end":[188,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"1:12067:22087":{"id":"1:12067:22087","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:11894:419","self::pattern":"1:11716:3199"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:11539:3167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:3213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31:1649":{"id":"0:31:1649","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[213,0],"end":[215,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["lazy",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"LazyStatic","id":"0:29:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12040:21876":{"id":"1:12040:21876","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:11894:419"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43342:3226","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12033:25697":{"id":"1:12033:25697","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12100:31149":{"id":"1:12100:31149","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:11716:3199","`DoubleEndedIterator`":"1:7244:121","prim@char":"4:11894:419","str::match_indices":"1:12097:31148"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43534:3236","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:3213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11721:3213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11736:3215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12120:29328":{"id":"1:12120:29328","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:11894:419","self::pattern":"1:11716:3199"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41403:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:3213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11721:3213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11736:3215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12139:31161":{"id":"1:12139:31161","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4539:31161"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43665:2975","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12045:31142":{"id":"1:12045:31142","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43630:3230","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12031:25696":{"id":"1:12031:25696","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12097:31148":{"id":"1:12097:31148","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:11716:3199","`DoubleEndedIterator`":"1:7244:121","prim@char":"4:11894:419","str::rmatch_indices":"1:12100:31149"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43516:3235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:3213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12027:1647":{"id":"1:12027:1647","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41405:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41403:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12141:2953":{"id":"1:12141:2953","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4540:2953"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43674:2954","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12047:21333":{"id":"1:12047:21333","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:11894:419","self::pattern":"1:11716:3199"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:3213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12088:31146":{"id":"1:12088:31146","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41403:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:3213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11721:3213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11736:3215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12020:31138":{"id":"1:12020:31138","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12018:31137"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12079:29324":{"id":"1:12079:29324","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:11894:419","self::pattern":"1:11716:3199","str::rsplitn":"1:12082:29326"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43470:3156","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:3213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12132:31160":{"id":"1:12132:31160","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:11677:127","`FromStr`":"1:11676:2729"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41547:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:11676:2729","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:11676:2729","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5384:2880":{"id":"5:5384:2880","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:3213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5383:31813":{"id":"5:5383:31813","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:280:1945","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:6990:8708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:280:1945","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:6990:8708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12109:31153":{"id":"1:12109:31153","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12134:27083":{"id":"1:12134:27083","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"4:4903:8910":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"17:9148:34384":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:568:9449":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:4381:1961":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"9:352:14668":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"4:10718:2658":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:10527:16165":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:13159:20001":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:5848:13569":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:1708:10354":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"4:8226:8873":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"8:0:1866":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"6:4455:12900":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:5978:13618":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:42922:20880":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"4:10663:8768":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:41760:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:43310:3224":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:44117:3206":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:8953:15952":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"4:7948:8808":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"5:1454:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:40417:3063":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"4:1924:8746":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"1:4046:2957":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:5876:13611":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:10649:16169":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"18:766:20084":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:40735:3037":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"4:8433:8931":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"5:6097:8966":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"4:3782:8832":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:2774:2010":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:6506:15813":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"11:1540:2638":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:47730:8327":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:12236:19255":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:41615:183":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:44343:3296":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:11615:18743":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:13121:19998":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"4:7596:8654":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"6:6804:14043":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:41521:2098":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"4:1048:8693":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:30284:2886":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:7169:3041":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"4:888:8685":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:3152:234":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:39374:22278":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:12312:151":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:9796:16018":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:5643:15775":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:42692:145":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:9153:3117":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"4:2614:8807":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:40277:2664":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"16:6919:33462":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:8360:3213":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"4:3170:8815":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:8214:15872":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:2515:133":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"6:6066:13626":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"16:4327:15326":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:11428:3242":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:10068:16118":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"4:3129:27346":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:21839:2732":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:6155:13655":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:4932:15523":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"18:574:34495":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:8718:15923":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:44385:3299":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"17:10691:16171":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"4:1561:2645":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"16:5571:15771":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"4:8924:8650":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:13744:20047":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:12609:3298":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"16:5402:14816":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:41377:3081":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:43324:3223":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:6833:14045":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:47223:8369":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"11:1839:2645":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:7249:9398":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:6460:15810":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:39388:2949":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"5:5235:9002":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"16:2378:14852":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"4:5570:2483":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:44140:122":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"5:3688:2649":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"4:480:2470":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"4:5719:1989":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:45901:8361":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"5:7044:2121":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:10290:3153":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:1526:10337":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"11:1688:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:45671:8378":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:12980:19990":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:4510:15413":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:45530:8400":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"5:2916:30936":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:30300:68":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:2684:220":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"17:10491:16133":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:4326:1959":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:43093:22254":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:0:1874":{"crate_id":17,"path":["object"],"kind":"module"},"1:47695:8324":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:1672:10350":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"9:421:14654":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"16:7859:15861":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:8170:15870":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"5:863:2419":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:9138:15955":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:10354:16085":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:9469:15988":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:3182:26922":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:10626:16168":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"16:7437:15837":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:12449:19269":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:13461:20029":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"5:7014:2435":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"11:2060:8693":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:8788:15949":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:1695:10353":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"4:6101:2489":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"6:4555:12913":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"5:3276:2400":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"17:9424:15985":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"4:10728:27662":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:42000:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"5:5642:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"6:4769:12932":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:22503:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:10735:16174":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:40324:3056":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"16:5367:14820":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"4:1768:610":{"crate_id":4,"path":["std","env"],"kind":"module"},"4:2832:2479":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:9523:15997":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:2701:228":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"0:0:1642":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"1:41920:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:4394:12737":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"4:4845:8900":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"4:9009:27046":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"18:736:20083":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"4:3995:8845":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:43998:3218":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:10000:16115":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"4:11455:8979":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"4:4574:28601":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:4765:389":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:12506:107":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"4:5370:8942":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"16:5724:15780":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"11:821:8689":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:11721:3213":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"4:8844:8959":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:39204:198":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"17:9488:16003":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"4:926:8688":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:4904:15519":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:4954:12954":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:4886:12946":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"16:4845:15508":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:45552:8406":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"4:4074:30773":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:2502:14857":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:4763:12931":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:8389:15940":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:5071:15566":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:6254:15797":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:42412:68":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:46167:20779":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"11:359:2398":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:4145:1973":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"16:7803:15859":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:2242:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"5:5798:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"4:1931:655":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"1:2843:2024":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"4:3383:8774":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"17:9038:34141":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:13678:20043":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:579:9451":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"4:5563:2482":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:11520:18736":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:5708:15779":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"4:867:2121":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"4:4508:8893":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:20576:25774":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"5:7164:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:4786:25397":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"18:531:20096":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"4:11906:747":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"1:43649:3238":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:119:9120":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:9557:15957":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:12158:19251":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:13488:20032":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"18:564:20098":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:30372:20727":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"5:3622:2411":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:6597:14033":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"4:7844:119":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"4:3925:8838":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:9530:2525":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"6:4400:12894":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:13257:20010":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:9617:15994":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"4:731:142":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:154:2390":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:9299:22286":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:22239:178":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"4:2362:8760":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"18:719:20082":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:43352:3225":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:7539:13130":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"5:7005:8702":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:12059:19244":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"6:6867:14048":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:5346:15769":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"5:265:2411":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:11741:3214":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"16:2319:14849":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:41389:3082":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:12006:19240":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:3047:14878":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"0:29:1648":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"1:41680:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"5:4818:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:1821:1971":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:6164:33699":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:7592:2955":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:12361:192":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"6:5817:13608":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:7595:3039":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"16:3899:14946":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"4:11895:1517":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"1:42467:68":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"6:4823:12939":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"5:7338:2457":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:9374:145":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"16:2808:14870":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"4:6912:2494":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"4:4679:8851":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"4:4737:2480":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:4786:12934":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"6:474:9437":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:3872:14943":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:10465:16135":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:2827:2021":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:12318:19260":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"18:481:20093":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"4:6236:206":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"18:0:1875":{"crate_id":18,"path":["memchr"],"kind":"module"},"4:10056:28280":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"6:6606:14034":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:4747:12929":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"4:2869:128":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"1:45400:8394":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"5:4914:2440":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:2746:106":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"11:867:8692":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"4:5021:28564":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:815:2417":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"16:4568:15423":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:30876:2918":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"11:2219:8682":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"4:1594:8701":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:11902:19235":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"4:8325:8914":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:11037:15973":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"4:6373:1991":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:7837:15860":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:386:15934":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"5:2087:31106":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:47741:8328":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:494:9440":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"4:7792:8771":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"17:9721:16015":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:2862:14872":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:9512:15998":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:488:9439":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:1747:21855":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:7322:159":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"5:2169:32088":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"5:4366:2440":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"18:590:22302":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:46198:20730":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"4:10698:130":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"16:2524:14858":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:42430:110":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:40385:3047":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"16:7509:15843":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"4:6009:2484":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"16:6336:15802":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:13506:20034":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"4:10428:8812":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:45446:8359":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"4:11009:8948":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"5:4137:2440":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"4:11168:27079":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"18:113:20071":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"4:10425:8816":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"16:7519:15844":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:10478:16134":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:9817:222":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:7652:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"3:0:1862":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"4:5320:8939":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"4:11914:1500":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"1:3157:135":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:12345:19262":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:4624:15431":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"5:2077:2428":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"4:7577:8664":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"5:211:2409":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:7543:15846":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:22602:2735":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"16:4872:15511":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"4:922:8687":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:5889:13613":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:7294:14419":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:13426:20025":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:22536:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:4:1016":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:30053:2696":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"13:226:33324":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:40286:3045":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"5:1058:2639":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:1544:2440":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:43193:3164":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:6589:2129":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:1637:2863":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"4:3911:8837":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"4:10871:8950":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"7:0:1545":{"crate_id":7,"path":["unwind"],"kind":"module"},"4:9068:8781":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"17:9409:15984":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:8679:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:45601:8360":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"4:11399:8832":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"4:936:8690":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"4:4642:8875":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:40457:3049":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"4:8736:8947":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"4:7622:2502":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"7:79:14630":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:4841:12941":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:12138:19250":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"4:10422:8814":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"4:3355:2440":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"1:2922:1940":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:2738:2930":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:41298:21868":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:4303:12886":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:40708:3032":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:5032:15551":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:39087:2040":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:13433:20026":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:5899:13614":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:4728:15487":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:40315:3055":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:13316:20014":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:11844:19231":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:21783:20742":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"4:11909:746":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"16:7488:15841":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"4:8974:15833":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:43630:3230":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:8598:15947":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:12433:19268":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"4:4096:8866":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:10316:16078":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"5:1228:2634":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"5:3975:2435":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:6990:15831":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:6868:33691":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:6671:14795":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"11:393:33322":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:4419:12896":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:12388:19265":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:11410:18728":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:40059:2975":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"4:11912:1498":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"17:12483:19271":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:7244:33483":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"4:930:8689":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"4:1565:2121":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"4:1062:2634":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:42458:71":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"6:5986:13619":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:10428:16162":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:9566:15958":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:8667:14816":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"4:11899:1369":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"17:9772:16020":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:10660:15974":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"5:1463:8704":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:8195:15919":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:6624:8905":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"4:11901:1483":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"17:12098:19247":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:45947:8367":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"4:2208:8751":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"14:187:14787":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"4:6085:2486":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:9478:16005":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:11471:18733":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:12019:19241":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"4:11908:745":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"4:3933:8839":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"5:3158:8698":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:2780:2009":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:1680:10351":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:47619:8415":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:2805:2020":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"16:6132:15792":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:44356:161":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"5:680:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:4928:12950":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:41318:20756":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"18:671:20086":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:6840:14046":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:4817:12938":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:8858:15951":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:11770:19228":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:11736:3215":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"4:11916:791":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"16:6662:15818":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"16:7669:15852":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:13453:20028":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"4:8899:1990":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:47081:8397":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:40365:3069":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"4:11876:27657":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:43470:3156":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:6678:3051":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"4:9034:167":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:2312:188":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:46455:8414":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:6027:13624":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:6022:15791":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:42675:22258":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"4:5910:2482":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"16:6890:15826":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"6:1630:10346":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:13516:20035":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:4722:12926":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"4:3680:8830":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:3169:2037":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:4799:12936":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:13689:20044":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:21344:8343":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"4:8475:8932":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"6:4739:12928":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"4:4112:8868":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:2851:2026":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:4410:1963":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:3585:14883":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:2404:14853":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:1648:10348":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:4314:12887":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:43172:3160":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:12307:19259":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:7767:15858":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"4:6757:8965":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"11:1859:8698":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"4:10708:119":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:10416:16161":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"4:9883:20753":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"16:5944:15787":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"14:221:14789":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:13240:20008":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:6236:15796":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:10276:3157":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:43342:3226":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:2163:2898":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:20608:26454":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"4:7465:15936":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:9839:16011":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:13145:20000":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:20589:26456":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"15:180:14797":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:4011:22287":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"14:160:14779":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:8842:26499":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"16:5693:15778":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:8674:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:6014:13622":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"4:8088:8819":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"1:47809:8332":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:11721:19227":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:4715:12925":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:12293:19258":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:12386:3293":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"5:7089:2121":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"5:5818:1985":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:47704:8325":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"4:3325:3032":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"16:2830:14871":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"4:3987:8843":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"4:11897:1051":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"5:1213:8694":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:1535:10338":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:43384:3158":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:6076:13627":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"4:3615:8827":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:22404:2734":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:43674:2954":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"10:0:1868":{"crate_id":10,"path":["adler"],"kind":"module"},"17:11282:18721":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:44113:3205":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"4:4436:8876":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:41547:210":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"17:10721:16137":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:9807:8777":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"16:6819:15823":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:2151:589":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:9826:16012":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:4480:15407":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"4:11917:1555":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"4:10653:27462":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:40408:3062":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:6876:15825":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:2317:125":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"17:10039:16075":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"5:1413:8685":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:5418:33698":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"4:676:2654":{"crate_id":4,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:39188:200":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:10057:3167":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:13385:20021":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"5:1314:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:46301:8396":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:2753:2006":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"17:11946:19237":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:44161:3269":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"11:2212:33313":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:13812:20052":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:20782:2897":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"11:1035:8694":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:40702:3030":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:13469:20030":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"4:10828:8735":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"5:5191:2411":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:42176:3119":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:11434:18730":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:6307:15799":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:1014:1781":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"17:13651:20040":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:7599:3040":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"4:3875:8836":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:5050:12963":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:2763:2008":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"4:10948:2505":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:14:1842":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:10169:3158":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:41488:2097":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"17:9866:16032":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:6390:15806":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"4:9049:8962":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"1:3163:2035":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"4:8502:8934":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:10283:16081":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:9596:15999":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:13249:20009":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:11785:19229":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:9163:3121":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:12085:19246":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:21:683":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"0:28:1642":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"16:6535:2393":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:2933:16079":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:4878:1003":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"5:2905:2183":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:1733:2914":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"4:8782:8950":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"17:3266:16102":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"11:991:8693":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"4:10676:27459":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:10897:15968":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:43588:3234":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:1787:16019":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:32159:2933":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"11:279:2627":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:2985:2029":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:40205:2517":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"5:7081:2121":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:11484:18734":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:13865:20056":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"5:6597:2462":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"4:7650:8671":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:4336:1960":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"16:7743:15856":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"4:11860:27065":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:6943:15829":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"18:755:20091":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"4:10954:2506":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"4:857:2646":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:30478:20650":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"6:4677:8834":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"18:652:34495":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"16:6904:15827":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"4:11919:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"6:4517:12908":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:5811:15783":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"16:2642:14863":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:6819:14044":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:7516:13127":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:1701:8861":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:7596:15849":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:6774:14041":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:11861:19232":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:41606:2121":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"4:9392:2500":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:1978:16037":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:8047:15863":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:3753:2400":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"4:6369:1782":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"17:12461:19270":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:9340:15960":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:3079:2032":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:22470:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:12536:19275":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"4:11915:1497":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"4:11893:938":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"6:4694:12923":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:8254:2100":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"11:828:8690":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"5:6180:2454":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"5:4005:2411":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:11136:16179":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"4:4328:8865":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:3234:1970":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:5966:13617":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:41640:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:11163:16180":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"16:5305:15752":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:11716:3199":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"1:41530:2190":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:43965:3262":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"18:727:20090":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"16:6575:15817":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:5998:15790":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:43893:3258":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:10545:15972":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"4:8232:8864":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:21730:21567":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"11:326:2396":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:5792:13605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:4702:15485":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"4:5556:206":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:10681:16170":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:41840:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"4:4578:28605":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:2695:225":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"4:6409:1997":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"4:7938:28584":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"11:1071:33323":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:10808:3166":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:40078:2977":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:6725:22310":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:2692:1967":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"6:6725:14039":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:9155:3118":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"16:8129:15867":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:42169:3117":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:2898:117":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:2518:238":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"6:62:9066":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:4462:12901":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:7529:15845":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"4:7852:28258":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"5:5035:1985":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"14:215:14788":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:1689:10352":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:5774:13604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:9414:3135":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"16:7557:15847":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"4:8812:8958":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:41471:2646":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"17:8573:15946":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:6854:15824":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:13399:20022":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:43944:3260":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:9312:15959":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:3197:1968":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:13309:20013":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:43416:3232":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:9121:132":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"16:5886:15785":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:4948:12953":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:11060:15974":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"4:1846:2656":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"17:9748:15957":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"6:6170:13656":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:11011:15921":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"5:7241:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"4:1071:8694":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:4468:12902":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:6617:14035":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"4:9190:2261":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:13211:20005":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:47473:8409":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:1556:10340":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:4916:12949":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:13698:20045":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:12576:19278":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"4:8754:8948":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"17:13265:20011":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:11109:15977":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"16:5104:15575":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:47756:8329":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"5:1981:2647":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:9028:15953":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:39991:20799":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"16:6728:15820":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:5919:13615":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:2594:14861":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:9322:33960":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:13763:20048":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:2546:14859":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:6179:15793":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"4:3983:8842":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:3318:69":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"4:8248:8874":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"11:744:8685":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"4:7576:8777":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"4:11201:27679":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"5:1351:2645":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:9161:194":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"4:635:8668":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:46725:8429":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"18:624:34488":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:12634:19281":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:2696:109":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"6:6572:10292":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"4:7787:8770":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"11:675:8687":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:9098:15954":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:2469:8777":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"5:2189:30872":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"4:6188:2482":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:11821:16122":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:41720:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"11:2204:33316":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:4991:12958":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"4:361:8663":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:9734:16014":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:12592:19279":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"4:413:165":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:20996:8339":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:12126:19249":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:12033:19242":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:1505:10334":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:41598:2646":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"17:13667:20042":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:573:9450":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"4:1982:185":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:562:15936":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:10402:16149":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"0:31:1649":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"16:8072:15864":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:7626:15850":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:30314:20759":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:45356:8393":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:25859:2731":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"5:7211:8748":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:9886:16039":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:42485:128":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"5:2407:2640":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:2932:1787":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:45755:8336":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"4:3449:27036":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:7065:33685":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:13791:20050":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"9:502:14655":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:5797:33413":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:8651:14818":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"4:11174:8953":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:6588:9322":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:5616:15773":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:10440:16163":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"4:901:2435":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:7215:1944":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:43801:3255":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:6007:13621":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:10505:16164":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"4:10006:2661":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:45690:8427":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:2981:2028":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:47715:8326":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"4:9380:129":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"5:1716:2400":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"17:13169:20002":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:40305:3054":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:10377:16083":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:247:34220":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"4:3458:8775":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"16:8180:15871":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"16:6061:14821":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:9876:16066":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:45422:8399":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"5:6607:2464":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"6:1519:10336":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:3300:14881":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"5:5239:9003":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:9157:3119":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:8548:15945":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:4649:12920":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:9151:120":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"14:7:14779":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:40085:2978":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"4:6133:27064":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:39346:2034":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:6921:3027":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"4:2540:2476":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"4:5926:206":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:10014:3154":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"6:4567:12914":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:6361:15804":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"5:7195:20784":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"4:11905:644":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"17:8753:15948":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"4:1821:8727":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"4:10363:2501":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"6:532:9444":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:4812:797":{"crate_id":1,"path":["core","iter"],"kind":"module"},"5:3150:8700":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:8310:15938":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:21912:20765":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:4540:15419":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:9188:34346":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"4:6842:2493":{"crate_id":4,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:3142:2033":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:11355:18725":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:43336:3227":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"4:2574:8798":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"4:8109:8776":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"6:4605:12916":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:9111:2986":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"17:13777:20049":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:6647:10477":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"4:8130:3052":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"4:8081:3027":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"6:482:9438":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:12403:19266":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:43274:2677":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"4:5764:1996":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:7462:14578":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:4549:12912":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:13367:20019":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"16:7467:15839":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:10775:3165":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:9641:16006":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:4972:12956":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:4943:12952":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:2512:149":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"4:7943:27077":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"1:21957:25333":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:11800:19230":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"11:1847:2435":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"4:11231:27669":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:47832:8333":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"5:5834:2650":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:21126:8346":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"5:6446:2411":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:32072:2925":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"16:2572:14860":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"4:7703:20951":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"1:47871:8334":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:9596:2528":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:43264:3162":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:12194:19253":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:1034:16004":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:12259:19256":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"18:582:2918":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:8109:15866":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:11628:18744":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"11:638:2645":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:12072:19245":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:13015:19991":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"4:11892:371":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"4:6621:28545":{"crate_id":4,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"16:7411:15836":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"11:60:33318":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:4962:12955":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:42907:3196":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"4:11033:27666":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"5:1422:8686":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"4:3677:8831":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:4427:12897":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:20561:25774":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"6:5014:12960":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:4789:15500":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"5:5908:2440":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"5:2912:30934":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"5:2636:31103":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:12835:19984":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:4388:12893":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:4703:12924":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:8283:15937":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:40727:3035":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:21964:2736":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:40125:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"11:768:2400":{"crate_id":11,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"4:2215:8752":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"17:13041:19994":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:49677:8356":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:2509:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"4:8166:8829":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:43366:3154":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"17:9696:16002":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:47333:8403":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"14:40:18721":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:40021:2982":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:43232:3163":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"4:10215:8943":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"4:11474:28477":{"crate_id":4,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"16:4757:15492":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:9577:16001":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:2694:226":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"4:3060:8820":{"crate_id":4,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"6:653:9500":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:22371:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"6:7522:13128":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:13564:20036":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"16:7317:33561":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:43750:3252":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:7711:15855":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:3935:2440":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"4:7665:8672":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:12299:136":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"5:1042:32395":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:41479:2121":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"16:7635:15851":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"4:6482:1993":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:42926:3172":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"5:7266:9010":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:13024:19992":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:11600:18742":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:10705:16172":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"6:5079:12967":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:13135:19999":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:4373:12891":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"9:52:14671":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:4780:12933":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:11258:18720":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:1756:2668":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"9:325:14707":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:12113:19248":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"4:355:8662":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:4037:15060":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:5386:14818":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"4:8742:186":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"1:2354:189":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"4:48:1556":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"4:5686:1987":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"4:11378:8830":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"5:6294:2411":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"19:0:1033":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"5:7136:8682":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:535:33634":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"15:219:14802":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:46615:8368":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:4753:12930":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:8360:15939":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:2742:14867":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"4:2211:2469":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"17:10452:16136":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:44335:3295":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:10823:15964":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:11283:3219":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:2839:2023":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:2470:14856":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:12522:19274":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:10589:16167":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:4445:12899":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:2298:14822":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:20950:8337":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"6:587:9452":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:12799:19983":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:42714:21356":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"16:2879:14873":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"4:4639:8902":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"4:8966:27052":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:12607:19280":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"6:4861:12944":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:5976:15789":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:4832:12940":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:0:818":{"crate_id":6,"path":["libc"],"kind":"module"},"4:8160:3228":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"16:7498:15842":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:3648:2121":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"4:5385:8943":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"4:8961:27076":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"4:11913:1499":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"1:2822:2019":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"4:844:2645":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:9973:16041":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"4:7699:8735":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:32068:20951":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"9:388:14653":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:10936:15970":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:39126:2039":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"14:0:1871":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:9683:16016":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:10885:15967":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:8971:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"16:5920:15786":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:11813:16124":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:43665:2975":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"5:35:2407":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"4:11078:27658":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"16:2764:14868":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:40130:3021":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:7335:33708":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:13181:20003":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:10303:16077":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:1494:10332":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:1916:2671":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:43955:3261":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:11969:19238":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:12224:19254":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"16:3815:14910":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:12178:19252":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:47794:8331":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:21349:8353":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"17:10569:16132":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"4:11314:2509":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:7545:13131":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:21891:20737":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:42162:3118":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"11:97:33312":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:2796:2013":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"5:7052:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:4542:12911":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:9670:16017":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"4:9987:8727":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"5:3184:8701":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"4:1568:2435":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"6:1574:10342":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"4:11910:742":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"6:541:9445":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:9453:15987":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:4437:1964":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"5:1366:2646":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:10989:15972":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"4:8768:8949":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:40398:3061":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:4637:12919":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:4523:12909":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:20934:8777":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:20548:2918":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:13292:20012":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:43434:3231":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:44121:3268":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"16:7683:15853":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"4:643:8670":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"11:1524:14772":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"4:1783:8716":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"4:8240:8829":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"5:689:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"18:660:20085":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:5043:12962":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:7504:13125":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:11653:18746":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"10:44:14760":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"5:4336:2443":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"5:7181:8750":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:7016:33516":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:47657:8436":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:500:9441":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:12331:19261":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:11459:18732":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"5:783:2414":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:13857:20055":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:22305:176":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:11502:18735":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:40347:3058":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:43488:3152":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:12563:19277":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:45977:8373":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:4937:12951":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"18:507:34495":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:7267:1943":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"6:4871:12945":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"4:3973:8841":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"4:7601:8656":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"1:20741:8347":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"6:5073:12966":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"4:11216:27640":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"4:11499:14806":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:5828:13609":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:8909:3225":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"5:3521:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:5057:12964":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"5:2116:30887":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:2506:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"16:7293:15834":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:6351:15803":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:6488:15812":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:20921:8352":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"4:5334:8940":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"18:538:20097":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"5:1078:32393":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:39979:2981":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:2603:128":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"4:6538:1998":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"11:2192:33317":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"4:11907:744":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"6:6021:13623":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:5067:12965":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:6035:13625":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"4:11911:1501":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"14:31:14779":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"4:6586:217":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:21866:21869":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:3446:14882":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:4340:12889":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:2812:2017":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:12554:140":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:9653:16031":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:4367:12890":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:10142:16121":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"4:3292:8802":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:44300:195":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"17:9108:34396":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"16:6327:15801":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"5:7030:31122":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"5:7148:8683":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"4:11337:8831":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:45853:8413":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:6218:15795":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:21990:2737":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"11:731:8684":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:11488:3241":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"4:5439:8944":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"5:3124:8699":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"5:7022:2423":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"4:8913:27071":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:41539:193":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:20591:26452":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:13053:19995":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"11:816:8686":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"4:8393:8929":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"6:4495:12906":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"11:757:2435":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"4:4576:28603":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"16:4818:15505":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:44398:22251":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:11891:19234":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:39228:199":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:12770:19982":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"4:530:2471":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"1:4255:207":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:7636:26497":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:10840:15965":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:41590:2645":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"11:119:2394":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:2788:2016":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"4:5179:190":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"4:10658:30514":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"5:1382:2121":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:9380:15983":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:46661:8374":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:41403:181":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"17:11532:18737":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"6:4894:12947":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:40693:1782":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:10712:16173":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"11:305:33310":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:9498:16002":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:39173:2030":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"5:4047:2646":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:2245:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:2720:14866":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:40031:2983":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"4:875:8684":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:13194:20004":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"11:703:8688":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:20754:8348":{"crate_id":1,"path":["core","core_simd","cast","SimdCastPtr"],"kind":"trait"},"16:55:14817":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"16:5000:15543":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:44085:3204":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"17:10967:15971":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"4:2372:8765":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"1:40172:2995":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"typedef"},"4:1583:8699":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:13477:20031":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:10104:16076":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:44089:3207":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:43516:3235":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"4:2477:8805":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:11069:15975":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:10635:16159":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"18:699:20089":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"4:7683:8734":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"4:10144:8952":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:41212:155":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:13376:20020":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:11299:18722":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"6:1716:10355":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"5:3775:2411":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"4:8954:28556":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:8521:15944":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"4:11151:2507":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"16:6767:15821":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"4:6332:28545":{"crate_id":4,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:2847:2025":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:44101:3212":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:43658:3237":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"4:10634:8904":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:8683:15922":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:43772:3253":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:12902:19986":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:5736:13541":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"4:1572:2400":{"crate_id":4,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"4:8416:8930":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:595:9453":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:7563:13134":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"4:959:8692":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:5007:12959":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:10743:15961":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:9178:15956":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"4:10841:8944":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"4:11041:3268":{"crate_id":4,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:46023:8428":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"4:4125:8869":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:42683:3136":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:12358:19263":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"5:5712:2435":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"4:4681:8854":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:13612:20037":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"4:7476:28273":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:45570:8412":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:11879:19233":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:20606:26457":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"4:947:2630":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"4:8270:8905":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:12046:19243":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:8847:26740":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:46425:8408":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:0:1873":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:13625:20038":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"4:9387:8771":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"4:3247:8812":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:2744:2844":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"1:21815:20424":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"4:3132:28117":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:9159:3120":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"4:3210:8817":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:13419:20024":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:39367:15872":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"16:2426:14854":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:10857:15966":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"18:636:34503":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:6544:15815":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"5:1995:2649":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"4:10688:8772":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:13721:20046":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:562:9448":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"4:3465:8796":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"17:8490:15943":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:13332:20016":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:13344:20017":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"5:1432:8687":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"9:234:8929":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:4728:12927":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"5:3673:2647":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"4:4256:8871":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:4625:12918":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"11:1050:14770":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"11:399:33319":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:7598:14606":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"18:614:34501":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"4:7797:8768":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:13101:19981":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:9165:3122":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"4:10320:8947":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:40433:3064":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:4264:1954":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:39353:2928":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:11539:3167":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:6704:14036":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"4:8177:8826":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"17:13233:20007":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:12923:19988":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"11:2198:26115":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:46120:20757":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:40447:3065":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:7271:14417":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:9959:16068":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:45468:8365":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:9146:112":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"17:10555:16130":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"16:4400:15375":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:43930:3259":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"4:4176:8870":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"11:0:1869":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"4:9087:8964":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"4:5693:1988":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"4:2346:8755":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:4167:2440":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:44173:3270":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:4847:12942":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"4:7676:8697":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:45631:8366":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"5:963:2411":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"4:6296:166":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"4:1985:184":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"4:5499:8945":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"4:8053:8773":{"crate_id":4,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"1:43570:3233":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"17:11234:18719":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"4:11249:27997":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:7510:13126":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"16:6474:15811":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:9907:16067":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"5:1404:8684":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"4:11904:642":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"17:10798:15963":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:7202:134":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:5557:15770":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"5:6248:2435":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"4:10937:2504":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"5:780:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:4615:12917":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:11339:18724":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:41463:2645":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:43683:2974":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"4:7804:8772":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"16:4969:15536":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:11556:18739":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:9409:3134":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:22338:177":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"4:4990:28564":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:40482:3067":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"11:1873:8700":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:5835:13610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"4:8214:3080":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:39970:2958":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"14:202:9008":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:3749:14892":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"4:8343:8928":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"17:9895:16038":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"4:8806:2121":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"18:80:20069":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"4:7671:8696":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"4:11694:2513":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:7588:15848":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:40111:2973":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:975:16000":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:9265:15958":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:40679:3028":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:47535:8430":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:9628:15993":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:5993:13620":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:9933:16042":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:13082:19997":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:32032:2923":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"17:12372:19264":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:4596:15427":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:7449:15838":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:1499:10333":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:2792:2014":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"5:6764:2468":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:30244:2884":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:40092:2979":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"4:8292:8853":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"4:5247:120":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"1:42667:3137":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:5963:15788":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"4:7020:30774":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:10262:3152":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:2470:2695":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"4:1895:8745":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"16:5677:15777":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:42722:21355":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:11832:16123":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"11:1091:2636":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:39248:202":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"13:110:33371":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:6710:14037":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"4:6485:1994":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:6558:15816":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:43162:2673":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:4907:12948":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"6:1637:10347":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"4:3881:8835":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"4:8485:2645":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"16:7029:33712":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:7697:15854":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"4:554:2653":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:43219:3043":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:1667:1089":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"16:5655:15776":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"11:1126:14771":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:40264:3052":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"5:4399:2443":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:44292:211":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"5:2906:30942":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"5:280:1945":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"18:491:34510":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:2522:237":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"6:4983:12957":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:44093:3209":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:10096:3155":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:2786:14869":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:3640:14884":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"4:11097:8962":{"crate_id":4,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"17:9443:15986":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:44097:3208":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"16:8269:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:2800:2015":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:4259:1953":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:40142:20784":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:21978:2733":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"4:7814:8769":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"1:2758:2011":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:2161:2897":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"17:8823:15950":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"12:0:1870":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:20891:2897":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"4:3939:8840":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"16:2905:14874":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"5:6990:8708":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"5:3547:2646":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:13033:19993":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:41341:3079":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"4:8491:8933":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"6:4684:12922":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"4:11865:8673":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"4:8221:8872":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"4:3135:28260":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:7206:152":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:4327:12888":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"4:3440:2986":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"4:8831:8956":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"4:585:8665":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"16:7103:15833":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"5:6739:2454":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:42442:21863":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"4:11894:419":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"17:9228:34210":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:11446:18731":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:6376:15805":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:6849:14047":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:43640:3229":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:9350:34300":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:21874:20786":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"5:7321:2400":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"1:43866:3257":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"4:1080:8695":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:11676:2729":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"5:2908:30935":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"11:1879:8701":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:11090:15976":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:5881:13612":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:4793:12935":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:21128:8342":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:21677:21565":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"4:4854:8901":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:11391:18727":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:2691:1938":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"17:8256:15917":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:2963:2038":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"16:6431:15808":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:12510:19273":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"4:7860:8806":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"16:6243:33486":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:8256:15873":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:8253:2101":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:8255:2099":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:13659:20041":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"4:8172:8828":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"5:4321:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:10923:15969":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:6129:13654":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:40007:2980":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"16:8090:15865":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:6935:15828":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:0:443":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"6:6670:10462":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:13324:20015":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:20780:22886":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"17:9853:16065":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"4:7868:2647":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:0:497":{"crate_id":1,"path":["core"],"kind":"module"},"1:40255:3044":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:1732:10356":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:5384:2440":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:10670:16160":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"5:7060:30924":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:6719:14038":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:3782:14901":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"6:1589:10343":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:3374:2927":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"17:13411:20023":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"4:2344:2888":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"5:1197:8693":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:45999:8379":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:2929:1942":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:9986:16069":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"4:3208:8816":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"6:6043:33202":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"11:1852:2400":{"crate_id":11,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"13:0:1865":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:4023:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:46537:8362":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:40686:22279":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"9:0:1867":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:20816:8350":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"17:8931:15920":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"18:681:20087":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:6981:15830":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:40295:3053":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:21851:20675":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"5:3534:2645":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:10015:16116":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"16:6400:15807":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:242:34004":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:22272:175":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:21119:8777":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:12282:19257":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:2706:1966":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"11:1843:2121":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:7528:13129":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"4:11243:30517":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"4:7262:27078":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"17:3142:16084":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:30848:183":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"16:6717:14794":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"7:32:14623":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:12959:19989":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:6981:1952":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"4:8918:107":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:3386:2926":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"1:40356:3059":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"18:644:34495":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:6201:15794":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"4:1589:8700":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"11:840:2630":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:11372:18726":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"4:10468:2502":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"6:4379:12892":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:7244:121":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"11:859:8691":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"6:7574:13135":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"5:1242:8695":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"4:911:2400":{"crate_id":4,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"1:43245:3161":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:41269:3078":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:10052:16097":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"4:2867:210":{"crate_id":4,"path":["std","io","error","Result"],"kind":"typedef"},"4:2550:2474":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:45801:8401":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:41800:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:42507:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"11:1634:2405":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"6:5954:13616":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:1594:10344":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"4:638:8669":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"9:174:14755":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"4:953:8691":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:43182:2675":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"6:5024:12961":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"18:707:3216":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:1602:10345":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:10080:16119":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:9534:15996":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:4390:1962":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"4:6870:28272":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"18:521:20092":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"11:1144:8695":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:2589:116":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"17:13803:20051":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:7077:15832":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:3999:22239":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:45500:8395":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:12550:19276":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:46221:20747":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"4:7514:2496":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:2856:2027":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"4:11506:14806":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:13443:20027":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:1512:10335":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:7042:33533":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:21571:8777":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:41880:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:13639:20039":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:5766:13603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:42704:8929":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:10207:3159":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:39270:201":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"4:5354:8941":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"17:10270:16080":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:12334:22978":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:1568:10341":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:4505:12907":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:4114:1972":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"16:7259:2097":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"4:1577:8698":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"4:11918:1128":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"1:11787:3246":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:13066:19996":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:41960:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:10026:16117":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:5532:3057":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"5:1612:2411":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:41354:3080":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:21455:25778":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:1630:588":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:41235:3076":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:6564:9488":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:23049:2730":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"9:445:14652":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"4:3249:8813":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:40215:3019":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"11:2087:8694":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:46045:8434":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:39381:1960":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"1:5590:3046":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:11544:18738":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"4:8790:2645":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"4:6552:1999":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:45376:8358":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:20994:8777":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:7551:13132":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"4:8097:2658":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"1:43254:2676":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"4:3401:2657":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:9613:2474":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"16:2694:14865":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"16:2448:14855":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:229:210":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"4:10853:27729":{"crate_id":4,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:2784:2012":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"4:11900:1399":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"6:554:9447":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:2926:1941":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"6:4290:12885":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:5798:13606":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:21928:20389":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"16:5594:15772":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:43620:3228":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"6:506:9442":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"5:3163:31121":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:10092:16120":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:11422:18729":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:10598:15971":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"4:4564:8840":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"16:2668:14864":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:547:9446":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"11:1866:8699":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:4586:12915":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:21443:3148":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:12894:19985":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"16:6146:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:44109:3211":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"5:3088:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:2264:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"6:7585:13136":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:10747:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:12496:19272":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:6442:15809":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:5804:13607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"4:11843:27647":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"4:8931:27538":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"11:665:2121":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:7165:3042":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"4:9044:219":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"18:515:20095":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:2749:2911":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"17:8420:15941":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"9:481:14651":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:7757:15857":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:41252:3077":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:20772:8344":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"1:42183:3120":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"11:1561:14773":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:39292:203":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"4:4414:8875":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"4:8266:8903":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:43534:3236":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"16:8142:15868":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"16:2357:14851":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"5:7255:9009":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:13356:20018":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:6293:15798":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"4:7533:2498":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:47411:8375":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:4474:12903":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:5630:15774":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"11:783:2404":{"crate_id":11,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"1:2911:1969":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:11220:16182":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"5:6695:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:2931:14875":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:39561:20584":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"10:36:33309":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:39964:2954":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:40043:2974":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:40376:3060":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"5:7224:8749":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:526:9443":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"4:8798:8961":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:46691:8380":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"4:8140:3066":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"1:9989:2646":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:4187:1779":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"6:1662:10349":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:123:9121":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:8632:15918":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:6743:14040":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:43153:3150":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:9917:16064":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"11:652:2646":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:9965:2645":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:44373:3301":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:42402:21851":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"16:8156:15869":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:11924:19236":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:20853:8351":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"16:5847:15784":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:6321:15800":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"5:3129:31116":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:2337:14850":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"11:452:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"4:9039:218":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:40158:3020":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:12517:2486":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"18:609:34506":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:46875:8363":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:4488:12905":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:42040:1986":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:40235:3043":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:2833:2022":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:4809:12937":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:10248:3156":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:13879:20057":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:7277:14418":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:3225:14880":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:11730:3216":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"18:690:20088":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:10580:16166":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:21799:25336":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"5:4207:2645":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:12419:19267":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"4:4104:8867":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:6687:10460":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:11504:3243":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:9068:34418":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:30278:2885":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:43818:3256":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"4:8860:8957":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:8979:34483":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:47581:8381":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"5:880:2645":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:7557:13133":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:40333:22093":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:45708:8433":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:11993:19239":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:47675:8322":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"18:599:34494":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"11:2076:2634":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:43978:3217":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"5:1443:8688":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:10134:3168":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:9822:16025":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:21095:8777":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"15:0:1872":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:3514:2435":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"4:9104:28571":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"6:4663:12921":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:6795:14042":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"4:8147:3225":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"1:45831:8407":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:1910:10519":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"16:6696:15819":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:4853:12943":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:1947:16013":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:40051:2954":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"4:6382:1783":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"1:5991:3070":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:5779:15782":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:11573:18740":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:6135:12802":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"4:9126:28475":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"6:4435:12898":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:13499:20033":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:9218:15957":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:47779:8330":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"4:917:8686":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"5:633:30955":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"14:165:14780":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:46379:8402":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:11641:18745":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:21016:8342":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:2967:14876":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:2741:1939":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:22437:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:11193:16181":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"16:5741:15781":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:8025:15862":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:487:15935":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:39314:2031":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"5:6999:2121":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"4:11021:8949":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:11319:18723":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:11465:3244":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:9946:16040":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"4:10232:2662":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:43787:3254":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:44105:3210":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:1919:16053":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"4:5067:191":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"4:618:8666":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:9545:15995":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:41454:2120":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:2348:182":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:46069:8435":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:43144:3151":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"4:1433:144":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"4:2387:1879":{"crate_id":4,"path":["std","io"],"kind":"module"},"16:7478:15840":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:10257:16082":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"4:0:1391":{"crate_id":4,"path":["std"],"kind":"module"},"17:13842:20054":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:10334:15957":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"4:11467:28559":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"4:11898:312":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"17:12646:19282":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:420:14824":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:21573:8340":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:13219:20006":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:3030:14877":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:40496:3068":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:45653:8372":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"4:501:2428":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"5:5485:2450":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:12915:19987":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"4:11060:8781":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"6:4482:12904":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:7572:33711":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"4:2360:8759":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"4:8876:8960":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:44282:205":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"5:6367:2121":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:21100:8338":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:40066:2976":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:5472:2440":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"18:96:20070":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"4:8988:27043":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"4:1785:8717":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"4:7827:130":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"16:4445:15396":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"15:198:14798":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:22569:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"4:2206:129":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"4:3168:8814":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:2616:14862":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:3063:14879":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:11942:112":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"16:7366:15835":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:11269:3147":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:9366:141":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:40717:2523":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:11253:3145":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:11585:18741":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"4:5502:8946":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"16:6520:15814":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"4:1844:2261":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"17:12622:15974":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"4:4683:8855":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:6793:15822":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:5862:13570":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:9628:2533":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"5:6578:2450":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"6:4534:12910":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:7608:14607":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"11:1009:2634":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"4:4760:8850":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:8443:15942":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:40468:3066":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:47684:8323":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"4:10832:27461":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:4606:2967":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:2768:2007":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:6772:3024":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"17:13821:20053":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:10761:15962":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:20881:8345":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"4:8153:3154":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"1:2817:2018":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:1544:10339":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:3117:2645":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:9275:34130":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:21002:8341":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:4412:12895":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:10125:16096":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:10615:16158":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:10516:16129":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}