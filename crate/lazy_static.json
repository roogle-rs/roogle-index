{"root":"0:0:1585","crate_version":"1.4.0","includes_private":false,"index":{"5:5121:3073":{"id":"5:5121:3073","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:6990:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6990:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7731:2052-0:12:1719":{"id":"a:1:7731:2052-0:12:1719","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:7731:2052","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7731:2052","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:12:1719","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:2243:51008":{"id":"1:2243:51008","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:23":{"id":"0:23","crate_id":0,"name":null,"span":{"filename":"src/inline_lazy.rs","begin":[49,0],"end":[49,40]},"visibility":{"restricted":{"parent":"0:4:1575","path":"::lazy"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2680:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2680:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:12:1719","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5111:58948":{"id":"5:5111:58948","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:6990:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6990:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11365:58294":{"id":"1:11365:58294","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"1:50280:2761","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2536:1423":{"id":"1:2536:1423","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48192:206","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"1:2501:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11367:51864":{"id":"1:11367:51864","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12374:407","self::pattern":"1:11036:2390"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11041:2389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11349:52762":{"id":"1:11349:52762","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:48050:175"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48048:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9133:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9133:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2532-0:12:1719":{"id":"b:1:2532-0:12:1719","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2491:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2501:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:12:1719","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2535:126","1:2536:1423"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:2531:1424":{"id":"1:2531:1424","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48192:206","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"1:2501:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11443:58309":{"id":"1:11443:58309","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"1:11036:2390","prim@char":"4:12374:407"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11041:2389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11041:2389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11056:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11335:786":{"id":"1:11335:786","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12374:407"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7732:2051-0:12:1719":{"id":"a:1:7732:2051-0:12:1719","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7732:2051","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:12:1719","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"1:11357:55249":{"id":"1:11357:55249","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:11358:55250"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11396:58296":{"id":"1:11396:58296","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split":"1:11384:55257","self::pattern":"1:11036:2390","prim@char":"4:12374:407","str::split_terminator":"1:11393:58295"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"1:50084:2752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11041:2389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11041:2389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11056:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11366:51746":{"id":"1:11366:51746","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"1:50308:2764","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11437:54671":{"id":"1:11437:54671","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"1:11036:2390","prim@char":"4:12374:407"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48048:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11041:2389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11405:58297":{"id":"1:11405:58297","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48048:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11041:2389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11359:2785":{"id":"1:11359:2785","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12374:407"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"1:49986:2745","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11336:2070":{"id":"1:11336:2070","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11338:58289":{"id":"1:11338:58289","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:20:1590":{"id":"0:20:1590","crate_id":0,"name":"get","span":{"filename":"src/inline_lazy.rs","begin":[26,4],"end":[46,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline(always)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2942:1722","args":{"parenthesized":{"inputs":[],"output":{"kind":"generic","inner":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11393:58295":{"id":"1:11393:58295","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"`DoubleEndedIterator`":"1:7075:119","str::split":"1:11384:55257","str::rsplit_terminator":"1:11396:58296","self::pattern":"1:11036:2390","prim@char":"4:12374:407"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"1:50066:2751","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11041:2389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11429:58305":{"id":"1:11429:58305","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11458:58312":{"id":"1:11458:58312","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4471:58312"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"1:50315:2765","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11417:58300":{"id":"1:11417:58300","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:11036:2390","`DoubleEndedIterator`":"1:7075:119","str::rmatch_indices":"1:11420:58301","prim@char":"4:12374:407"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"1:50166:2755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11041:2389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11345:308":{"id":"1:11345:308","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:11346:55230","`u8`":"4:12391:1445"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11384:55257":{"id":"1:11384:55257","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::rsplit":"1:11390:55260","self::pattern":"1:11036:2390","prim@char":"4:12374:407","`DoubleEndedIterator`":"1:7075:119","str::split_whitespace":"1:11362:51646"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"1:50016:2716","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11041:2389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2520:2063":{"id":"1:2520:2063","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2494:131"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2521-0:12:1719":{"id":"b:1:2521-0:12:1719","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2494:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:12:1719","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2523:670"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11430:58306":{"id":"1:11430:58306","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11362:51646":{"id":"1:11362:51646","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:11363:51706"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"1:50290:2762","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11334":{"id":"1:11334","crate_id":1,"name":null,"span":null,"visibility":{"restricted":{"parent":"1:10599:1349","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["1:11335:786","1:11336:2070","1:11337:58288","1:11338:58289","1:11340:58290","1:11343:55220","1:11344:58291","1:11345:308","1:11346:55230","1:11347:1590","1:11349:52762","1:11351:52763","1:11353:52764","1:11355:58292","1:11356:58293","1:11357:55249","1:11358:55250","1:11359:2785","1:11360:2421","1:11361:3416","1:11362:51646","1:11363:51706","1:11364:3738","1:11365:58294","1:11366:51746","1:11367:51864","1:11370:55266","1:11373:55267","1:11376:2111","1:11380:2069","1:11384:55257","1:11387:51731","1:11390:55260","1:11393:58295","1:11396:58296","1:11399:55262","1:11402:55264","1:11405:58297","1:11408:58298","1:11411:1775","1:11414:58299","1:11417:58300","1:11420:58301","1:11423:58302","1:11425:58303","1:11427:58304","1:11429:58305","1:11430:58306","1:11431:58307","1:11434:58308","1:11437:54671","1:11440:55268","1:11443:58309","1:11446:58310","1:11449:58311","1:11452:2547","1:11454:2977","1:11455:54549","1:11456:54550","1:11457:54551","1:11458:58312","1:11460:2980","1:11461:58313"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11440:55268":{"id":"1:11440:55268","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"1:11036:2390","prim@char":"4:12374:407"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48048:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11041:2389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11041:2389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11056:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3327:1437":{"id":"1:3327:1437","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"1:46521:2337","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11457:54551":{"id":"1:11457:54551","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11363:51706":{"id":"1:11363:51706","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:11362:51646"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"1:50299:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5120:58950":{"id":"5:5120:58950","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:6990:220","`Box<str>`":"5:286:1881"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6735:3098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6990:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11411:1775":{"id":"1:11411:1775","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"prim@char":"4:12374:407","str::matches":"1:11411:1775","self::pattern":"1:11036:2390","`DoubleEndedIterator`":"1:7075:119"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"1:50220:2758","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11041:2389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:19:1720":{"id":"0:19:1720","crate_id":0,"name":"INIT","span":{"filename":"src/inline_lazy.rs","begin":[23,4],"end":[23,60]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"generic","inner":"Self"},"default":"_"}},"1:11346:55230":{"id":"1:11346:55230","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12391:1445"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11461:58313":{"id":"1:11461:58313","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4469:58313"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"1:50333:2767","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11351:52763":{"id":"1:11351:52763","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9133:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9133:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:11449:58311":{"id":"1:11449:58311","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"1:11036:2390","prim@char":"4:12374:407"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11041:2389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11041:2389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11056:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2240:1734":{"id":"1:2240:1734","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11455:54549":{"id":"1:11455:54549","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5123:54548":{"id":"5:5123:54548","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:11457:54551"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6990:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11414:58299":{"id":"1:11414:58299","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"str::matches":"1:11411:1775","self::pattern":"1:11036:2390","prim@char":"4:12374:407","`DoubleEndedIterator`":"1:7075:119"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"1:50238:2759","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11041:2389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11041:2389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11056:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5122:54547":{"id":"5:5122:54547","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:11456:54550"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6990:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2238-0:12:1719":{"id":"b:1:2238-0:12:1719","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2673:1874","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:12:1719","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2240:1734"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2730:1875-0:12:1719":{"id":"a:1:2730:1875-0:12:1719","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2730:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2730:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:12:1719","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:11356:58293":{"id":"1:11356:58293","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"1:2995:1978","`str`":"4:12380:1349","str::slice_unchecked":"1:11355:58292"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2517-0:12:1719":{"id":"b:1:2517-0:12:1719","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2494:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2491:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:12:1719","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2520:2063"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11361:3416":{"id":"1:11361:3416","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"1:50002:2747","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11452:2547":{"id":"1:11452:2547","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"1:10997:2467","FromStr::Err":"1:10998:125"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48192:206","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"1:10997:2467","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:10997:2467","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"src/inline_lazy.rs","begin":[21,0],"end":[47,1]},"visibility":{"restricted":{"parent":"0:4:1575","path":"::lazy"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2680:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:12:1719","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:19:1720","0:20:1590"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:2530:126":{"id":"1:2530:126","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"1:2501:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"b:1:2527-0:12:1719":{"id":"b:1:2527-0:12:1719","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2501:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:12:1719","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2530:126","1:2531:1424"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11427:58304":{"id":"1:11427:58304","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11340:58290":{"id":"1:11340:58290","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:11338:58289"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5103":{"id":"5:5103","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5014:1349","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5104:58946","5:5105:2591","5:5108:58947","5:5111:58948","5:5119:58949","5:5120:58950","5:5121:3073","5:5122:54547","5:5123:54548"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11431:58307":{"id":"1:11431:58307","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"1:11036:2390","prim@char":"4:12374:407"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11041:2389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11041:2389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:11061:2394","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1585":{"id":"0:0:1585","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[215,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\n# #[macro_use]\n# extern crate lazy_static;\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.4.0\")]","#![no_std]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:29:1591","0:31:1592","0:28:1585"],"is_stripped":false}},"1:11364:3738":{"id":"1:11364:3738","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"1:50270:2760","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11370:55266":{"id":"1:11370:55266","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"1:11036:2390","prim@char":"4:12374:407"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11041:2389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11373:55267":{"id":"1:11373:55267","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12374:407","self::pattern":"1:11036:2390"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11041:2389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11041:2389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11056:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5119:58949":{"id":"5:5119:58949","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:6990:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6990:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11337:58288":{"id":"1:11337:58288","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11446:58310":{"id":"1:11446:58310","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"1:11036:2390","prim@char":"4:12374:407"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11041:2389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11376:2111":{"id":"1:11376:2111","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"self::pattern":"1:11036:2390","`None`":"1:48050:175","prim@char":"4:12374:407"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48048:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11041:2389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11420:58301":{"id":"1:11420:58301","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"`DoubleEndedIterator`":"1:7075:119","str::match_indices":"1:11417:58300","prim@char":"4:12374:407","self::pattern":"1:11036:2390"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"1:50184:2756","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11041:2389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11041:2389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11056:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11358:55250":{"id":"1:11358:55250","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:11357:55249"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:31:1592":{"id":"0:31:1592","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[213,0],"end":[215,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["lazy",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"LazyStatic","id":"0:29:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11380:2069":{"id":"1:11380:2069","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"1:11036:2390","prim@char":"4:12374:407","`None`":"1:48050:175"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48048:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11041:2389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11041:2389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11056:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:12:1719":{"id":"0:12:1719","crate_id":0,"name":"Lazy","span":{"filename":"src/inline_lazy.rs","begin":[19,0],"end":[19,48]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null,null]},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2680:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:17","a:1:7731:2052-0:12:1719","a:1:2730:1875-0:12:1719","a:1:2666:216-0:12:1719","a:1:7732:2051-0:12:1719","b:1:2238-0:12:1719","b:1:2527-0:12:1719","b:1:2532-0:12:1719","b:1:2241-0:12:1719","b:1:2521-0:12:1719","b:1:3325-0:12:1719","b:1:2517-0:12:1719","0:23"]}},"1:11344:58291":{"id":"1:11344:58291","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:11343:55220":{"id":"1:11343:55220","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:10604:2931"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5105:2591":{"id":"5:5105:2591","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:6990:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6990:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11041:2389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11434:58308":{"id":"1:11434:58308","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12374:407","self::pattern":"1:11036:2390"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11041:2389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11425:58303":{"id":"1:11425:58303","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11347:1590":{"id":"1:11347:1590","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:48050:175"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48048:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9133:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9133:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11408:58298":{"id":"1:11408:58298","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48048:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11041:2389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11041:2389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11056:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2523:670":{"id":"1:2523:670","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11387:51731":{"id":"1:11387:51731","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12374:407","self::pattern":"1:11036:2390"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"1:10860:2717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11041:2389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2535:126":{"id":"1:2535:126","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"1:39293:2315","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"1:11355:58292":{"id":"1:11355:58292","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"str::slice_mut_unchecked":"1:11356:58293","crate::ops::Index":"1:2991:1977","`str`":"4:12380:1349"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:11456:54550":{"id":"1:11456:54550","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11353:52764":{"id":"1:11353:52764","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9133:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9133:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:11402:55264":{"id":"1:11402:55264","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"1:11036:2390","prim@char":"4:12374:407","str::splitn":"1:11399:55262"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"1:50138:2724","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11041:2389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11041:2389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11056:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3325-0:12:1719":{"id":"b:1:3325-0:12:1719","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2673:1874","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3323:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:12:1719","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:3327:1437"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:11":{"id":"0:11","crate_id":0,"name":null,"span":{"filename":"src/inline_lazy.rs","begin":[16,0],"end":[16,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"import","inner":{"source":"self::std::sync::ONCE_INIT","name":"ONCE_INIT","id":"4:6681:1718","glob":false}},"1:11454:2977":{"id":"1:11454:2977","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2666:216-0:12:1719":{"id":"a:1:2666:216-0:12:1719","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2666:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2666:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:12:1719","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:5108:58947":{"id":"5:5108:58947","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:6990:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6990:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11041:2389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11399:55262":{"id":"1:11399:55262","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12374:407","str::rsplitn":"1:11402:55264","self::pattern":"1:11036:2390"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"1:50120:2723","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11041:2389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5104:58946":{"id":"5:5104:58946","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6735:3098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6735:3098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11423:58302":{"id":"1:11423:58302","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11360:2421":{"id":"1:11360:2421","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12374:407"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"1:49992:2746","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11390:55260":{"id":"1:11390:55260","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"`DoubleEndedIterator`":"1:7075:119","str::split":"1:11384:55257","self::pattern":"1:11036:2390","prim@char":"4:12374:407"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"1:50034:2720","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11041:2389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11041:2389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11056:2393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:28:1585":{"id":"0:28:1585","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[167,0],"end":[179,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"kind":"macro","inner":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"},"1:11460:2980":{"id":"1:11460:2980","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4472:2980"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"1:50324:2766","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2241-0:12:1719":{"id":"b:1:2241-0:12:1719","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2673:1874","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:12:1719","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2243:51008"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:29:1591":{"id":"0:29:1591","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[185,0],"end":[188,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"paths":{"6:4179:39933":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:1654:37589":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"5:6329:3397":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"4:6439:54681":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"4:11714:54491":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:53564:2619":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:13100:50330":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:21329:51373":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"18:80:50847":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"4:11860:3316":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:9857:4207":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"4:4266:3018":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"14:40:44683":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:11061:2394":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"16:7461:3801":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:1550:37580":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:11107:2397":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:7374:3898":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"12:1003:3187":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"4:6681:1718":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"4:8377:2994":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"5:217:3441":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"4:8215:3200":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:513:36688":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:2478:4073":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:50447:2401":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"4:1632:3125":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:4626:43189":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:2402:4091":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:5534:40610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:13506:50453":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:12909:49954":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:10506:44518":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"4:965:3179":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:2816:1966":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"4:12028:3719":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:51697:51711":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:48192:206":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"12:1845:3122":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"12:1065:3689":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:8551:130":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"4:4115:3324":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:50981:2789":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"4:6494:3220":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"5:677:227":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:49986:2745":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:8596:118":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"6:4346:39953":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:13382:50414":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"12:1085:3690":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:9475:4157":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:7098:1879":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"9:33:3616":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"16:7297:3896":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:2743:2264":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"4:3158:3308":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:11056:2393":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"16:4208:43059":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"4:6783:1933":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:10088:44427":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:2792:1965":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:51942:2628":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:4816:40001":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:7095:4066":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"12:632:2289":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:7934:3803":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:11756:51224":{"crate_id":1,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"1:50220:2758":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"4:12378:306":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"17:8418:4204":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:9947:44457":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"16:3393:42567":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"6:4534:39969":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"5:1358:2290":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"4:12394:1444":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"1:47541:3076":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"11:44:3678":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"4:12399:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"1:49371:51729":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:2991:1977":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:7731:2052":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"12:320:3694":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:6820:60229":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"4:8074:3027":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:6763:3075":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:47532:11620":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"12:1044:3688":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:21706:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:49078:108":{"crate_id":1,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"6:6392:37518":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"4:11588:54495":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:6614:2448":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"16:4253:43080":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:5974:3865":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:12850:49886":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:12073:49184":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"4:9519:54644":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:9873:44454":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:46438:197":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"5:6967:3462":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"4:11458:4459":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:1021:4277":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"5:781:3466":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:11436:48979":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"14:31:42485":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:646:36729":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"16:7276:3894":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:2666:216":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"16:6087:3815":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"4:6638:54659":{"crate_id":4,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"16:5681:3856":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"4:8486:3101":{"crate_id":4,"path":["std","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:50066:2751":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:4449:39962":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"4:2256:3050":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"16:4840:43235":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:12022:49180":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:46800:2534":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:4199:1890":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:1033:1716":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"6:4274:39944":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:49148:2355":{"crate_id":1,"path":["core","fmt","FlagV1"],"kind":"enum"},"1:2939:1878":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:2673:1874":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"17:8526:4238":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"5:2476:3490":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:12060:49183":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:9539:4154":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:13374:50413":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"4:5392:187":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"1:2973:1987":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"16:5519:3851":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"5:1425:3180":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"4:5693:2984":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"17:8981:44236":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"4:8145:3064":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"16:4740:43207":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:9422:44302":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:29637:2835":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:2837:1971":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:9791:44351":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:3203:1905":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"4:1611:3121":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"4:6780:1932":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:11853:49169":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"4:9335:2990":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"12:815:3181":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"4:5678:2983":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"6:1574:37582":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:5628:52308":{"crate_id":1,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"6:1714:37595":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:3323:68":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"4:8104:128":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"16:7350:4114":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"4:2381:2887":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"6:5582:40612":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"4:7847:3237":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"16:2548:4075":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:12337:4259":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:8510:42560":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"5:6486:4437":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:22402:2470":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:1608:37586":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"4:6007:1926":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:12730:49793":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:5733:40625":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:52364:2606":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:9274:44290":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:2717:2261":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"6:560:36693":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"4:3228:3070":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:8541:2351":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"14:202:3414":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:49745:2722":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"12:1872:3126":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"5:5974:3121":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"4:2399:3288":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"17:13536:50456":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:3125:44430":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"16:7907:3901":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"9:863:3524":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"4:1826:31289":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"1:53422:2651":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:11271:45071":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:2491:146":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"16:6597:3881":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"4:8069:3278":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"12:444:140":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:50280:2761":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:519:36689":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:6441:3877":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"5:6990:220":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:7237:40127":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:5503:3850":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:11087:44864":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:8319:2702":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"4:681:30334":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:11161:44903":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:10721:44242":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:8863:2296":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"4:6919:54659":{"crate_id":4,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"4:8862:3157":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"9:977:3527":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"4:9719:4538":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:51011:2664":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"16:6807:4108":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"4:11551:2860":{"crate_id":4,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:9021:44237":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"4:11363:54670":{"crate_id":4,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:3151:1982":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"16:6030:3868":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"4:12396:764":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"6:4778:39997":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"5:2954:3124":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:9250:44288":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:10997:2467":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:2488:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:20966:2439":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:7279:41605":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:50731:2773":{"crate_id":1,"path":["core","str","LinesAnyMap"],"kind":"struct"},"17:10420:4293":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"4:12380:1349":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"5:6300:3395":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:39342:2262":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:48808:2359":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"4:8220:3201":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"17:8137:44227":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:6632:3882":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:21838:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:10123:2739":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"6:5480:40605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:58293:51741":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"4:7746:54640":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:9339:4274":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:9778:4224":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"4:8427:2747":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"17:11330:45083":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"4:8611:3111":{"crate_id":4,"path":["std","net","socket_addr","SocketAddrV4"],"kind":"struct"},"16:7215:3889":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"4:6040:1928":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"5:5000:4429":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"4:451:3240":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:52194:2644":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:7732:2051":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"5:3763:4417":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"16:5424:3845":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"18:755:4320":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:11748:49161":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"4:4439:3368":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:6975:41416":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:9601:4158":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:21772:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:9283:44306":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:13279:50374":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"4:524:4438":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"4:8575:3360":{"crate_id":4,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"17:9328:4273":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:7227:3890":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:13148:50338":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:4690:970":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:1825:1907":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:8475:4146":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"5:2049:3487":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"4:7735:44226":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:9382:44305":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"5:2959:3443":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:46548:51732":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"6:1722:37596":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:50138:2724":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:12008:49179":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"18:113:50849":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:48175:2141":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:2678:107":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:49324:2300":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:7321:3799":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"4:11152:3209":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"16:5995:3866":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:13580:50464":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:6101:3789":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"12:1681:142":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:9722:44346":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:50807:2862":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"4:11729:54483":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:10296:44514":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:11873:49170":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:1760:2888":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"5:1077:3486":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:11652:51223":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"4:6884:213":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:2648:4086":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:6448:41040":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"4:1626:3124":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"4:661:3275":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:50539:2404":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"4:545:3260":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:6953:36643":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:2291:4097":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:539:36690":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"4:8623:3112":{"crate_id":4,"path":["std","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:495:36685":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"4:3084:3078":{"crate_id":4,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"12:2184:51248":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:39293:2315":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"14:165:42486":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"6:4804:39999":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"4:8121:117":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:46779:10904":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"4:12356:54703":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"5:2254:3491":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"16:3254:42566":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:10090:2738":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"6:7166:41577":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"12:2178:59963":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:7615:3805":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"5:6020:4417":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:56979:241":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"18:614:60927":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:7249:40129":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:12948:49957":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:5488:3849":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:2762:1960":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"12:274:4529":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:52386:2609":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"16:3590:42585":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:50611:2408":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:10310:44541":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"4:1864:31301":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"4:5225:33439":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"4:9321:2989":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:6567:2481":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"16:7245:3891":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:501:36686":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"9:0:1801":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:2449:2348":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"6:4598:39977":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"11:0:1803":{"crate_id":11,"path":["adler"],"kind":"module"},"5:6832:2075":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"4:1608:2075":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:10403:4137":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"16:4808:43227":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:6998:41418":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:5715:3857":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"16:2456:4096":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:20021:54468":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:2494:131":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:9484:2720":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:48589:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:600:36699":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:50930:207":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"12:119:3696":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:21:662":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"1:20706:28525":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"4:2586:4440":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"4:11543:56919":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:10625:4144":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"4:5062:3036":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"4:3420:2995":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:11536:44458":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"4:2026:181":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:7152:155":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:29503:2595":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:6524:41044":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"4:1938:3273":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"4:11519:2988":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:3161:229":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:9303:4167":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"4:9524:54645":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"5:5523:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"4:12379:1319":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"6:6424:41038":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"4:11778:4463":{"crate_id":4,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"16:2816:4081":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"14:221:42493":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:46860:2950":{"crate_id":1,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"4:3312:3057":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"4:12384:626":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"1:51787:2627":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:8941:44235":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"5:1195:3186":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:47550:4471":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:12514:49730":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:49814:2729":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:8796:4143":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:21805:2667":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:50290:2762":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:48251:2075":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"5:3560:4417":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:20290:2435":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:1701:37594":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:6697:4103":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"12:1866:3125":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:7422:2291":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:4697:52205":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"4:1889:4539":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"1:2784:1958":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:50994:157":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:9738:4225":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"4:5892:3221":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"12:659:2075":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"4:4208:3205":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"5:4944:3094":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:50739:2778":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:2860:1976":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:153:3779":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:4191:39935":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"4:574:3265":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"4:719:4536":{"crate_id":4,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"6:4797:39998":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"12:2053:3186":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"5:3541:3122":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"5:36:3390":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:52508:51730":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:52766:2642":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:57018:241":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:8055:4133":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:9458:4132":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:4559:39972":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"16:2424:4069":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:46396:195":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"5:3472:3064":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:6479:41041":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"16:5438:3846":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:2570:4126":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"4:9351:3219":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:2809:1969":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"4:9613:215":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:50751:2779":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"4:3459:2351":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"17:13082:50328":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:3249:4208":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:2788:1961":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:47523:1717":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"5:3804:2290":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:48399:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:4063:1908":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:46939:2538":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:10854:4219":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:8666:44232":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:12211:49254":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"12:393:59966":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:10374:4234":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"4:9307:2988":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"1:1919:2431":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"4:12393:1443":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"17:12884:49951":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"4:11163:54946":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"13:220:59971":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"18:727:4318":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"8:0:1800":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"4:2650:3063":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:50002:2747":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:6474:3878":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"4:9477:3264":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"4:10404:3331":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"3:0:1796":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"16:5402:3844":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"12:353:3693":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:50743:2777":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"4:628:2978":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:10997:44683":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:6823:1889":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"9:622:3567":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"1:4676:11330":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:52796:2645":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"16:2380:4068":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:6434:2083":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"4:3375:2313":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"5:852:3467":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"5:2737:59057":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"16:4777:43220":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:4239:39940":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:47205:2491":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:13527:50455":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"12:1555:3703":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:52172:2641":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:11679:188":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"18:736:4319":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:7887:3808":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:50034:2720":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:6269:36606":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:2740:4079":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"4:12216:4464":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:12816:49843":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"18:96:50848":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:52410:2610":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:4:980":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:46840:2956":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:47516:11618":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:1600:37585":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:50418:2395":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:54120:20018":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:11485:48980":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:12926:49955":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:7581:3817":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:5727:40624":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"18:719:4317":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:13039:50322":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"16:5194:42561":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"4:4322:3014":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:5606:3854":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:10796:4256":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:10075:44426":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:0:431":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:54036:20012":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:10108:4199":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:20044:54470":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"4:8885:3158":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"4:12389:719":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"1:47093:2483":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:10200:4472":{"crate_id":1,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"16:5472:3848":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:1931:4153":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:54071:20015":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:49027:67":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"16:3448:42568":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:10121:4200":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:4879:43250":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"9:827:3521":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:10497:44546":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:2321:178":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:4321:1898":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:54150:20020":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:2582:126":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"5:1386:3176":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:6572:41048":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"12:1832:2289":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:6545:3809":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:2235:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:9401:44303":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"15:0:1806":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:51809:2615":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:52142:2637":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"9:676:3613":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"17:13141:50337":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"4:4655:3336":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:12265:49258":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:13134:50336":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"14:7:42485":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"4:4431:3366":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:8871:44234":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:38120:179":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"12:1029:3188":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:1541:37579":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:12934:49956":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:9118:60894":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:1695:37593":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"18:491:60924":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:48801:2358":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:2232:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"9:188:3591":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"4:4452:3369":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:13184:50363":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:48108:2289":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"4:2903:126":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"1:8606:190":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:50333:2767":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:0:1808":{"crate_id":17,"path":["object"],"kind":"module"},"4:598:3213":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:54173:20021":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"4:4012:3316":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"4:973:3181":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"4:1887:4538":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"4:1967:3274":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"1:48551:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"5:1436:194":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:19989:54333":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:9591:2725":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:12134:49188":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"4:6602:162":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:12638:49787":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"4:12395:1441":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"17:11217:44907":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:2984:4084":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"4:5885:3220":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"9:956:3522":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:6506:3879":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:11606:49090":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:54025:20011":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:7226:40126":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:1887:37733":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"12:725:3176":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:3001:4083":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:2821:1967":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:5365:3790":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"16:5642:3855":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:5450:3847":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:58314:51722":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"1:11970:2659":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:7075:119":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:29565:67":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:21871:166":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"6:4379:39957":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:9553:4169":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"18:690:4315":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:575:36695":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"4:10945:3066":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"6:4683:39988":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:20292:2436":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"5:1226:3187":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:53002:2622":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:9691:4222":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"5:6826:2075":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:10245:44540":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"4:6076:1935":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:20858:2438":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:5782:40628":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:11259:45068":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:47300:2497":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:50016:2716":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"15:175:3710":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:0:483":{"crate_id":1,"path":["core"],"kind":"module"},"1:21673:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:46958:2840":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:6262:3802":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:1751:52132":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:9526:4155":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"4:954:3122":{"crate_id":4,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"4:1637:3126":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:12768:49839":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:13126:50335":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"16:6682:3811":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:10752:4137":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"4:7803:4454":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:53752:2623":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:49824:2730":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:11014:44795":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:10466:44543":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:6520:2510":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:47063:2500":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"4:8225:3065":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:2497:233":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:20701:2441":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:2995:1978":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:4231:39939":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:2485:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"5:3362:2290":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:7208:40123":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"4:11228:2994":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"12:300:3695":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:39329:3494":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:9329:2716":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:48116:2290":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"4:2409:3293":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"1:8604:2359":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:49871:2500":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:4768:39996":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:11594:49034":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:4195:203":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"17:8494:42561":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:38137:2449":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"16:7144:3888":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:12349:49330":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"4:2248:127":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"1:2851:1974":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:13176:50362":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:4723:770":{"crate_id":1,"path":["core","iter"],"kind":"module"},"17:9031:60902":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"4:990:3183":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:21267:51710":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:2677:221":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"16:5154:4057":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"18:599:60923":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:8368:4136":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:3707:42630":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:46852:2767":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:10532:126":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:8591:110":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:56966:241":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"4:8328:3079":{"crate_id":4,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"14:187:42494":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:11617:49091":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"16:6188:3871":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:52096:2649":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"4:10577:3145":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"4:4244:3015":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:20451:2437":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:581:36696":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:9644:4151":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:54082:20016":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:9362:4169":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:1643:2593":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:5849:2507":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:49916:2736":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:5554:40577":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"4:7537:57222":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"4:8503:3102":{"crate_id":4,"path":["std","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:4611:39979":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"4:12388:718":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"17:420:3759":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:11528:44460":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:4565:39973":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:46555:1897":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"1:52642:2650":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:13572:50462":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:4716:39991":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:5625:40616":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:13158:50360":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"5:3910:2289":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"4:1123:3189":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"5:6891:3193":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"4:686:30335":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:1532:37578":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:48235:2289":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:8594:110":{"crate_id":1,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"1:22003:2811":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:10825:2757":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:11106:44865":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"12:1628:4415":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:8596:44230":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"5:3429:4417":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:1404:3178":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:10257:44517":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"12:2080:3188":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"4:12398:1088":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"4:3477:3006":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"16:4510:43169":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:2804:1964":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:9831:4282":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:48184:189":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"16:2696:4077":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"5:7012:3412":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"4:3152:3306":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:4575:39974":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:6495:3707":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:50396:2391":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:10182:44429":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:13413:50419":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:13214:50371":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:20236:2665":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"17:13047:50325":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:6219:3872":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:47214:2508":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"16:5113:43436":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:9751:4223":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:8272:4264":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"4:900:2290":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"4:11168:57216":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"0:28:1585":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"1:29328:2878":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"4:12397:1498":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"5:6767:3469":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"12:98:3692":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:2921:1906":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"5:2029:59059":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:8047:126":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"5:2947:2289":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:4354:39954":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:9522:2721":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:11915:138":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"5:2746:57809":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:9433:44301":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:4102:39928":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"9:111:3583":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"17:11893:49171":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:131:36371":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"16:6721:3883":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"4:4892:3018":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"4:9452:1929":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:1595:37584":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:2932:1876":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"4:11900:3317":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:52461:51744":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:13594:50498":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:52242:2629":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:29579:2834":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"7:32:41700":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:10590:2970":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:48048:177":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:9133:218":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:10233:44539":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"12:697:3180":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"5:4900:4417":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:13478:50429":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"4:8552:3359":{"crate_id":4,"path":["std","net","parser","AddrKind"],"kind":"enum"},"6:1707:3330":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:4330:1899":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"5:5631:2313":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"5:3484:3475":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"5:1981:3488":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"5:4747:1924":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:7535:3794":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"4:7943:3130":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"5:6954:3461":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:3912:2313":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"17:10283:44515":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:5210:42560":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:47185:2490":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:11997:49178":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:6124:3839":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:48513:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"4:3267:3066":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"4:10508:31301":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"4:9618:3138":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"4:12381:1427":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"16:7287:3895":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"4:10838:2986":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"4:11342:3144":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:1672:1052":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"6:6375:37515":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"18:707:2392":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"18:574:60915":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:11262:110":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"16:6178:3870":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"4:9906:127":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:9605:2726":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"4:48:1499":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"4:8446:151":{"crate_id":4,"path":["std","net","ip_addr","IpAddr"],"kind":"enum"},"4:11381:2990":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:7038:148":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:6855:3885":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"12:738:3177":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"16:3179:42565":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:10394:4236":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:9183:44240":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:9930:44441":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:21739:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:47264:2495":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:6139:3869":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:4367:39956":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:54212:20022":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"12:669:3179":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"9:382:3519":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"4:8433:2716":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"5:6938:2841":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"4:11464:4460":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:21252:2550":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:2596:4127":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"5:6750:3468":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:567:36694":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:4090:1909":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"4:5878:202":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"4:7846:2435":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"6:554:36692":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:47247:2494":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:50166:2755":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:10207:44529":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"4:12345:30336":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:10749:2750":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"12:853:3184":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:6115:3787":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"5:1348:2289":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"4:8697:3367":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"18:548:139":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"4:12374:407":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"5:7084:3391":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:21240:2549":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:6545:41046":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"5:1369:2075":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:20339:2437":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"4:4214:3204":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:29537:2316":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:5595:40614":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:6997:2525":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:4737:39993":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:10350:4135":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:46970:2841":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:50735:2776":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"5:6417:239":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:7948:3804":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:10774:4135":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:54135:20019":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:7266:3893":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"4:4583:3335":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:5226:60175":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"6:4745:39994":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"9:592:3566":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"17:12361:49333":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"4:6313:4442":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:52012:51723":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"4:8532:54704":{"crate_id":4,"path":["std","net","ip_addr","fmt","Span"],"kind":"struct"},"12:1120:3691":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:487:36684":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:12955:49969":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"4:7976:31303":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"4:11756:57194":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"5:7001:3411":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:46877:2766":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:47115:2505":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:1505:37574":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:2332:4090":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:46986:2842":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:21184:2554":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:48133:2048":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"17:11661:49098":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"5:4071:2313":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:10574:2968":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:4130:1714":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"17:13071:50327":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:8324:2703":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:11300:45079":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:62:36305":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"4:4252:3016":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:1562:37581":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"16:6571:3880":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:11576:48990":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:12617:49733":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:2718:4078":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:9293:4276":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:11939:49175":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"4:1811:594":{"crate_id":4,"path":["std","env"],"kind":"module"},"18:660:4312":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:46341:1979":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:4206:39782":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:4534:2947":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"4:4742:3206":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:3188:2388":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"16:6654:3797":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:592:36698":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"5:2736:2137":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:49992:2746":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:4280:39945":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"4:9512:54695":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"16:6149:3840":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"5:6168:4417":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"19:0:996":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:21937:168":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:10221:44538":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"4:9429:3226":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:9577:2724":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:48437:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"16:2833:4053":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"16:6164:3791":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"4:7960:31296":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"5:1240:3189":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:46541:3835":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"4:8703:3329":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"5:1059:3485":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:4398:39958":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"4:2867:3203":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:11787:49164":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"5:5906:4431":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"6:6409:41036":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:2757:1955":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:2568:114":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"17:9165:60898":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:524:4047":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:48099:2074":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"16:3623:42594":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:9671:4192":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"4:9567:54486":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"4:11173:3027":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"4:12391:1445":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"4:7784:4452":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"4:5821:2991":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"17:12046:49182":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:29743:2836":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"4:8368:3077":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"1:49090:126":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:49340:2299":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:10159:44431":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:4761:39995":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:3240:1989":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"4:8129:3300":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:10921:44673":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"12:2190:59965":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:11125:44866":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:47194:2506":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"4:1620:3123":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"12:1852:3123":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"4:11921:3324":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:50973:2788":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:5510:40608":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:11618:134":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:9411:2718":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:5739:3858":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:46899:2765":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:13366:50412":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:54097:20017":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:7475:3796":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"16:6646:4105":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:2843:1972":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:47084:2501":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:8161:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"9:896:3526":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:21365:2883":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"4:11995:54705":{"crate_id":4,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"16:3557:42576":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"4:11837:3114":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:608:36700":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"0:31:1592":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"6:5749:59742":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:51871:2636":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"4:7190:4451":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:2311:3774":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:5536:3852":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"15:214:3715":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"4:3269:3067":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"4:9413:3225":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:4565:43176":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"18:538:4327":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:52539:51636":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"4:2901:206":{"crate_id":4,"path":["std","io","error","Result"],"kind":"typedef"},"17:9764:44350":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"4:996:3184":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:9563:2723":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"12:646:2290":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"4:9343:2289":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:5574:3853":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"5:6879:3128":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:6881:3886":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"5:1211:3188":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:12896:49953":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"4:7922:30330":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:47560:11621":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:1636:573":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"16:4348:43103":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"12:0:1804":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"4:8064:3230":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"4:11447:4458":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"16:2885:4088":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:5672:40618":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:5541:40611":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"4:7980:3494":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"1:20173:2432":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"4:9466:54691":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:9193:60900":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:2855:1975":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:4621:39980":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:10608:4142":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:3386:2343":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"9:800:41857":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"5:6775:57762":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:5523:40609":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:4204:1891":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"5:0:281":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:9071:60895":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"4:8794:33440":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:47315:2498":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"4:2253:2902":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"4:2610:3054":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"4:5707:2985":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"6:4300:39948":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"4:8440:2760":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"4:3345:3076":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"1:53876:2608":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:20023:54472":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:6981:41417":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:21904:167":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"5:3014:3126":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:11054:44856":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"4:9597:163":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:10604:2931":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:1636:37587":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"18:652:60915":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:21358:52134":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:47238:2493":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:8701:44233":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"12:762:3122":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"6:4629:39981":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:2778:1959":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:7429:2447":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"4:11675:54605":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:7047:1880":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:11515:48982":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:53922:2626":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:11639:49092":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:12874:49889":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:4294:39947":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:4373:1901":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"6:6302:41033":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"18:564:4328":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"5:6907:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:9897:44456":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:50624:2849":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"6:4139:39931":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:2285:184":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"5:1690:3122":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"18:590:51707":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:11951:49176":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:7220:40125":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"4:8637:3318":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"4:5824:2993":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"4:4310:3020":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:12609:49732":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"16:4912:43259":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:10809:2754":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:20964:2435":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"4:944:3121":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:10321:4291":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"11:36:59960":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"6:6500:41042":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"4:12372:365":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"17:11343:45084":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:48260:179":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:3088:1981":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"4:11338:31303":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:8162:4205":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:2680:224":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:49796:2727":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:20249:2435":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"16:5817:3862":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:20298:2442":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"5:6805:3447":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:2936:1877":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"4:5011:3033":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:6323:3795":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:12695:49789":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"6:4592:39976":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:21970:165":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"4:11762:57214":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:7243:40128":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"4:8954:2289":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"1:46460:199":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"5:1943:3260":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:49060:67":{"crate_id":1,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"1:49112:71":{"crate_id":1,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"4:4423:3365":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:52878:2630":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"12:751:3121":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:11199:44906":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:6415:41037":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:2676:222":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:5861:40656":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:6509:41043":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:1643:37588":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"9:709:3157":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"4:12373:909":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"17:12118:49187":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:47134:2485":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"4:6542:202":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"4:8692:3364":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"4:10984:3247":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:50576:2405":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:4335:39952":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:47043:11331":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"6:4126:39930":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:46883:2951":{"crate_id":1,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"17:12980:50317":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:1678:37591":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"12:1859:3124":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:8295:44228":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"5:3106:3122":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"17:12485:49729":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"6:4673:39987":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:11721:49159":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:6048:3781":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:7037:2048":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:4605:39978":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:5941:190":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"12:2198:59961":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:13031:50321":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"4:4967:3208":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:10708:4258":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:5443:40548":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:2448:2435":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:3374:2339":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"18:481:4323":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"4:8761:3134":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"4:9295:182":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"4:2397:3287":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"4:12387:717":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"1:49897:2734":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:11559:48987":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:11684:49099":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:7255:40130":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:11734:49160":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:51841:2648":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:11186:44905":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:8744:51647":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:52956:2618":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:49974:2468":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"14:0:1805":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"4:2029:180":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:4286:39946":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:11813:49166":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:10822:44243":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"5:7067:3122":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"4:9471:2321":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"16:7366:3814":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:4361:39955":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"4:11977:35152":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"6:6329:33434":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:12087:49185":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:49051:129":{"crate_id":1,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"6:4706:39990":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:11036:2390":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"4:8960:3162":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"4:11351:2987":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"5:686:109":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:5498:40606":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"4:8469:3100":{"crate_id":4,"path":["std","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:11704:14634":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:11149:44902":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:39333:2599":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"6:4461:39963":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"4:8812:3147":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"17:8110:44220":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"4:10663:2997":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"4:12377:1014":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"1:7733:2050":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"5:5370:228":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"4:6134:4442":{"crate_id":4,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"6:135:36372":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"4:8091:3028":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"4:8717:3339":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:49164:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"17:8339:44229":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:8598:2356":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"17:12307:49266":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"4:8588:3110":{"crate_id":4,"path":["std","net","socket_addr","SocketAddr"],"kind":"enum"},"5:2993:3444":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"9:19:3615":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"5:2738:57773":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:46788:2533":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:10786:2753":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:51994:2620":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"4:3592:3103":{"crate_id":4,"path":["std","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:11847:2321":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:9280:2289":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:11500:48981":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:10546:44241":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:6322:41035":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:20004:54333":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:21313:51283":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:11774:49163":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"4:8081:3280":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"4:11607:3138":{"crate_id":4,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"4:10527:4540":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"4:3192:3069":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"5:286:1881":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:4185:39934":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"4:6707:1936":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:47176:2489":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"5:4026:240":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"12:2205:3128":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:48475:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:52318:2621":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:13168:50361":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:52562:51645":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:4712:43203":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"4:11681:2999":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:46773:2766":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:7071:3887":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:9681:44348":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:2500:4085":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:11547:44459":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:4635:39982":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:7637:3788":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:3960:2282":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:1518:37576":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:4653:43192":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"4:6836:1937":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"6:5504:40607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:50601:2407":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:4680:43195":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"16:7447:3800":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:49575:2974":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:13404:50416":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:49845:2732":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:50308:2764":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"4:1105:3187":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"5:271:4417":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:50759:2774":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"16:2273:4055":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:8911:60892":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:51972:2616":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:12964:50289":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:47279:2496":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:11288:45078":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:6311:41034":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:13192:50364":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:9446:44307":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"4:2383:3283":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:4496:39965":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:11041:2389":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"4:1091:3186":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:1500:37573":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"5:4041:4421":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:487:44225":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:50184:2756":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:3620:2075":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:2730:1875":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:51741:2647":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"16:4318:43097":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:2767:1957":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:5384:2488":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"4:10881:4457":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"4:9656:3140":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"4:774:140":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:11828:49167":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:10139:4169":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:50433:2398":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:49332:51747":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:52049:51726":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"4:11570:3139":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:50755:2780":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:12103:49186":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:53674:2639":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"4:979:3182":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"9:920:3523":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:6538:41045":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:10455:4294":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:48323:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"16:7489:3771":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"16:7430:194":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:49834:2731":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"4:12392:1442":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"1:50084:2752":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"4:8685:3110":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:8881:60899":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:4427:39960":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"4:4902:57206":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:11050:2392":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:7425:2292":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:12237:49256":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:4665:39986":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:2358:4072":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"5:4104:4421":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"4:6675:1717":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"1:50767:2860":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"4:3230:3071":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:13354:50377":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"5:6735:3098":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"12:810:3178":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:47153:2487":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"4:4015:3317":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:8991:60901":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:54016:20010":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:0:791":{"crate_id":6,"path":["libc"],"kind":"module"},"12:822:3182":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:47106:2502":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:53960:2646":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:47571:11623":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:1580:37583":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:8441:4260":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"12:387:59969":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:11858:2790":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:52720:2638":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:9712:44349":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"16:6276:3818":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:11356:45097":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"5:1311:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:6354:3876":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"5:949:4417":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:10062:44428":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:46294:1988":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"4:12340:57232":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:21379:2825":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:4515:39967":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:12164:49190":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"4:11208:128":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:48787:2357":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"6:4212:39937":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:7404:3816":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:7335:3812":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:586:36697":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:10845:4259":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"4:887:2289":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"4:4300:3019":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:21640:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"4:1615:3122":{"crate_id":4,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"1:50763:2775":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:12251:49257":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"4:9365:3222":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:3178:1986":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"4:8944:3160":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"4:5007:3030":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"18:521:4322":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:46913:2953":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"17:12860:49887":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:2847:1973":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:6037:4071":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:11761:49162":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:9123:2435":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:8610:2360":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:3845:42744":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:13327:50375":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:5379:3843":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:5713:40622":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:21275:51364":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:8561:4218":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"4:9384:3223":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:51717:51740":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:49960:2845":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"12:777:3680":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"17:12291:49265":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"13:0:1799":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:13231:50373":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"4:7953:3190":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"4:5572:118":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"18:507:60915":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"4:3468:57189":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:56992:241":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:20870:54336":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:4329:39951":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"4:12385:627":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"16:2784:4082":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"4:931:3177":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"4:4503:3326":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"5:1395:3177":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"4:4970:3206":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:8951:60904":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"16:7920:3902":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:8156:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:4152:39932":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:12972:50290":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"16:6794:4107":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"12:1518:3701":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"5:1414:3179":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"4:9918:4456":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:2800:1962":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"16:7413:3832":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"4:9913:3278":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:52340:2624":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:8828:143":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"17:9108:44238":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:386:44224":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:9805:4279":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"16:5592:4045":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"5:6744:2075":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:10973:44682":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:2290:123":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"6:4417:39959":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"5:630:57761":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:13024:50320":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:9501:4167":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:5835:40655":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"4:9289:2986":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"1:50644:2850":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:7256:3892":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:5771:3860":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"5:5559:3419":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"16:4597:43184":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:2916:4196":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"4:11186:54686":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:11315:45082":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:967:44304":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"16:6294:3819":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"16:6713:3813":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"5:6759:3121":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"12:1138:3189":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:6337:3875":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:4404:43111":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"4:910:2075":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:50747:2781":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:53066:2607":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:49884:2733":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:8600:2357":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:53814:2643":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:46255:1990":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"4:8420:2497":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"4:7894:3247":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"4:10942:3070":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:4350:1900":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:1771:4159":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"4:2513:3060":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:56953:241":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:7825:3900":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:12033:49181":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:10860:2717":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:4096:39927":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:48794:2356":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:11235:44958":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:20418:2435":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"16:6759:3810":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:50270:2760":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"4:9397:3224":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:5720:40623":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:1525:37577":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"5:6461:4431":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"15:193:3711":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"4:5658:2982":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"6:4540:39970":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:46356:196":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:2685:1903":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"4:5644:2981":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"1:3984:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:20042:54473":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:12630:49785":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:12176:49204":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:11247:44959":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:4536:43171":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:51893:2640":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:2255:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"6:5772:40627":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"16:7307:3897":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"4:11238:56915":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"18:515:4325":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"4:6214:3220":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:50464:2402":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:49045:70":{"crate_id":1,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"17:8774:4134":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"4:2576:3061":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"13:108:60015":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:8034:3772":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"5:6093:2075":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:12748:49795":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:50299:2763":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:8602:2358":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:6352:37541":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:25212:2530":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:5472:40604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:507:36687":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:46953:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:4506:39966":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:20442:2435":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:11974:49177":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:4257:39942":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:50120:2723":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:4376:43107":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:7545:3820":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"4:3951:3108":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"16:2921:3775":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:13492:50447":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"4:3155:3307":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"4:5009:3035":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:11909:49172":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:5841:39842":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:12278:49259":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:46816:2536":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"5:2988:3123":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:4266:1896":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"4:8410:2483":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"6:6277:37514":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:10476:44544":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:50920:201":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:46482:1980":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:54056:20014":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:51023:2662":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"18:624:60920":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:4659:39985":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:4247:39941":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:19976:2449":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:12836:49884":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:13007:50319":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"4:3484:3004":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"1:7001:2527":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:9885:44455":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:9820:4280":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:2942:1722":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"4:12390:715":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"4:5761:2987":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"16:6230:3873":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"4:4260:3017":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"5:2980:3125":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:46600:2307":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"4:10939:3068":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"6:1686:37592":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:5660:40617":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:4527:39968":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"4:1476:142":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:50938:191":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"17:9700:4221":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"4:12386:720":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"1:48243:2290":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"16:2622:4087":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:10583:4139":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"6:4437:39961":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:8631:44231":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:6293:36565":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:54045:20013":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:49379:51742":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:49906:2735":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:10434:44542":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"6:7214:40124":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:12781:49840":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:46372:194":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"4:8711:3318":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"4:12021:3719":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:7868:3806":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:7034:132":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:7022:4063":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"4:9532:3886":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:9371:44238":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:4007:2387":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:9372:2717":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"4:1114:3188":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:47124:2484":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:48627:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:2501:232":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"5:4986:4426":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"5:6924:3460":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:0:1807":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:21200:52136":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:13557:50457":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:21110:2808":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"18:681:4314":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:13091:50329":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"4:7858:54715":{"crate_id":4,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"1:11631:14633":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:6843:4110":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:10490:44545":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:13059:50326":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"4:10750:4541":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"6:4698:39989":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:9304:2290":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"12:1840:3121":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"12:1534:3702":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"0:0:1585":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"9:505:3514":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:1738:37597":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:5692:40620":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:46514:1983":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:4581:39975":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"4:339:161":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:47330:2499":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"9:586:3564":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"1:21292:51287":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:2796:1963":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"4:7873:3263":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"5:1445:3483":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"4:6850:1938":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"16:5793:3861":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:49571:2975":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"9:649:3568":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"4:11744:54498":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"5:6319:3396":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:9909:44425":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"4:3190:3068":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:11034:44796":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:9317:4272":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:10332:4299":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"4:3402:3005":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"1:49361:3157":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"17:1903:44335":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:10682:4263":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:10949:44681":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"4:5346:54585":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:4288:43091":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:52288:2617":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:9488:4156":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:5959:4051":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:46920:2954":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:13436:50420":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:3972:2283":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"4:9637:3139":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"17:247:60893":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:21216:51376":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:10642:4265":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"5:2742:57808":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"4:8361:3075":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"16:3017:42564":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:4475:39964":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"5:5211:3395":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"5:5434:3121":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:29543:2596":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"4:960:3178":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:8608:2349":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:14:1776":{"crate_id":1,"path":["core","write"],"kind":"macro"},"4:11531:2989":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"5:3733:3121":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:9658:44347":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"6:4551:39971":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"4:1828:31290":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"1:50819:2863":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"4:8735:3207":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:56583:2795":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:47162:51702":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"5:1953:3446":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"4:8902:3159":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"17:10520:44547":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:5684:40619":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:6554:41047":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:21057:2805":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:9449:2719":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"16:4432:43115":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:21391:2824":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:4135:43010":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:20261:2440":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:46416:198":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:47033:4465":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"5:3349:2289":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"18:0:1809":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:4267:39943":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:9627:4165":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"5:5820:34885":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:2252:4056":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"18:766:4321":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:52031:2605":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:5741:40626":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:4276:1897":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"6:4317:39950":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:12198:49253":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:50786:120":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"17:11174:44904":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:9577:4160":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:8814:139":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"5:4626:2313":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"12:1836:2075":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:10385:4235":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"4:8971:3163":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"0:29:1591":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"5:6789:2075":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:6811:54040":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"5:3338:159":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"4:0:1341":{"crate_id":4,"path":["std"],"kind":"module"},"4:412:4463":{"crate_id":4,"path":["std","thread","local","fast","Key"],"kind":"struct"},"14:215:42487":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"12:2069:3187":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"18:636:60928":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:6668:3798":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:1962:4220":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:48285:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:20449:2603":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"5:4531:200":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"4:6391:2790":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"4:5504:186":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"17:8752:2747":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"4:678:30332":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"4:5167:3235":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"4:11198:3280":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"16:6308:3874":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"12:834:3183":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:4224:39938":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:10360:4292":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:46830:2955":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"5:6984:57774":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"5:1043:59145":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:10528:4255":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:56940:241":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"7:0:1488":{"crate_id":7,"path":["unwind"],"kind":"module"},"4:4764:3231":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:4653:39984":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:50590:2406":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"5:1594:4417":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"4:6407:4449":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"4:7298:57538":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:12797:49841":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"4:8643:3319":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"4:8389:3051":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"1:20423:28507":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"4:4904:57208":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:1737:2889":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"4:6014:1927":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:51763:2635":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:3172:1984":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"7:79:41707":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:11137:44867":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:50512:2403":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:47144:2486":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"5:2918:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:2772:1956":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"16:2762:4080":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"18:531:4326":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"4:9546:54680":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"6:4810:40000":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:5758:3859":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:50324:2766":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:9263:44289":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:7113:4067":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:8814:127":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"6:1668:37590":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:10445:4259":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:6248:3792":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"18:609:60930":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:13340:50376":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:11800:49165":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:12674:49788":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"4:1604:2289":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:4307:39949":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:21163:51370":{"crate_id":1,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"16:2859:4054":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:5605:40615":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:5876:40657":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:6430:41039":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:12550:49731":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:2908:115":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:545:36691":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:2526:4074":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:9350:4275":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:11368:45098":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:13221:50372":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:8822:60905":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"17:11070:44857":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"4:2250:3279":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"5:869:2289":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"4:457:3241":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:13114:50332":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:223:206":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:6450:3708":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:9223:44287":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"4:5176:3105":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:48665:1925":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:5699:40621":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"4:7148:54918":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:8212:4257":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:7266:40131":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:20210:2601":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"4:9489:54584":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"6:4200:39936":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:51911:51708":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"16:7850:3807":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:8393:4191":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"16:7521:3793":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"4:918:3176":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"4:6230:202":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:8868:2297":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:3166:133":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:2831:1970":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:5587:40613":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:7958:3836":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:12012:2450":{"crate_id":1,"path":["core","const_closure","ConstFnMutClosure"],"kind":"struct"},"17:242:60906":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"4:5085:3029":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"4:4836:3210":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"16:7992:3835":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"4:5315:54585":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:5856:3863":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"5:6797:194":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"4:4314:3021":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"16:3680:42627":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:13393:50415":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:10875:4202":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:1552:2313":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"16:5175:42563":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:13459:50423":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"12:861:3185":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:47228:2492":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"4:12375:1461":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"4:6679:1930":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"4:7937:30333":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:9061:4169":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:46521:2337":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"12:985:3186":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"16:6768:3884":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:562:44226":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:9155:44239":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:5927:3864":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:47289:2503":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:8241:4261":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:2327:185":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"5:4948:3092":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:2674:4076":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:12225:49255":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:53032:2625":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"4:4401:3363":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:10670:4262":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"4:9608:214":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:13203:50365":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"4:4906:57210":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"18:671:4313":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:2826:1968":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"4:10733:2985":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"18:699:4316":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:50238:2759":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"10:0:1802":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:12322:49267":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:11889:201":{"crate_id":1,"path":["core","task","ready","Ready"],"kind":"struct"},"4:7868:3245":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"1:50315:2765":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:9844:4283":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:12739:49794":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:2674:1904":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"18:644:60915":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:53998:2611":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"4:8648:3320":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"17:9631:4152":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:48361:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:10270:44516":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"4:7055:3217":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:4644:39983":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"4:1002:3185":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"14:160:42485":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:46906:2952":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:2154:574":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"16:7803:3899":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:48166:2049":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:11841:49168":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:5461:2504":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:48124:2075":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:53216:2631":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:7289:41606":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"4:9359:2075":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:4115:39929":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:12148:49189":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:7837:2389":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:49349:143":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"4:8137:3062":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:4726:39992":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:4489:3338":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"5:5543:1924":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:11708:49158":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"18:582:2449":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"4:969:3180":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:1511:37575":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:49926:2737":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:5568:40578":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:57005:241":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"4:11659:4461":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"16:7189:3782":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"4:11218:117":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"16:6012:3867":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:13518:50454":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:12756:49837":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"12:60:59970":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"4:8739:33434":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:10894:4201":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:49805:2728":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"}},"external_crates":{"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}