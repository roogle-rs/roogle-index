{"root":"0:0:1581","crate_version":"1.4.0","includes_private":false,"index":{"1:11341:58106":{"id":"1:11341:58106","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"1:2971:1967","`str`":"4:12363:1748","str::slice_mut_unchecked":"1:11342:58107"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:11322:2060":{"id":"1:11322:2060","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11447:58127":{"id":"1:11447:58127","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4452:58127"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"1:50313:2755","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2511:1420":{"id":"1:2511:1420","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48172:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"1:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11385:54952":{"id":"1:11385:54952","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"str::rsplitn":"1:11388:54954","self::pattern":"1:11022:2320","prim@char":"4:12357:1743"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"1:50100:2711","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:2319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11362:2101":{"id":"1:11362:2101","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"prim@char":"4:12357:1743","self::pattern":"1:11022:2320","`None`":"1:48030:174"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48028:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:2319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11416:58120":{"id":"1:11416:58120","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2497-0:12:1714":{"id":"b:1:2497-0:12:1714","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:12:1714","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2500:2053"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11382:58110":{"id":"1:11382:58110","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:11022:2320","str::split":"1:11370:54947","str::split_terminator":"1:11379:58109","prim@char":"4:12357:1743"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"1:50064:2740","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:2319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11027:2319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11042:2323","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11420:58122":{"id":"1:11420:58122","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"1:11022:2320","prim@char":"4:12357:1743"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:2319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11332:54920":{"id":"1:11332:54920","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12374:1757"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5091":{"id":"5:5091","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5002:1345","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5092:58759","5:5093:2642","5:5096:58760","5:5099:58761","5:5107:58762","5:5108:58763","5:5109:3147","5:5110:54804","5:5111:54803"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2646:214-0:12:1714":{"id":"a:1:2646:214-0:12:1714","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2646:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2646:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:12:1714","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2507-0:12:1714":{"id":"b:1:2507-0:12:1714","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2477:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:12:1714","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2510:127","1:2511:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:2503:668":{"id":"1:2503:668","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11397:1770":{"id":"1:11397:1770","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"prim@char":"4:12357:1743","str::matches":"1:11397:1770","`DoubleEndedIterator`":"1:7062:120","self::pattern":"1:11022:2320"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"1:50200:2746","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:2319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5109:3147":{"id":"5:5109:3147","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11346:2351":{"id":"1:11346:2351","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12357:1743"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"1:49972:2734","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2227:50948":{"id":"1:2227:50948","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7719:2041-0:12:1714":{"id":"a:1:7719:2041-0:12:1714","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7719:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:12:1714","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:23":{"id":"0:23","crate_id":0,"name":null,"span":{"filename":"src/inline_lazy.rs","begin":[49,0],"end":[49,40]},"visibility":{"restricted":{"parent":"0:4:1571","path":"::lazy"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2660:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2660:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:12:1714","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11342:58107":{"id":"1:11342:58107","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"str::slice_unchecked":"1:11341:58106","`str`":"4:12363:1748","crate::ops::IndexMut":"1:2975:1968"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5107:58762":{"id":"5:5107:58762","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5110:54804":{"id":"5:5110:54804","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:11442:54802"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3307:1433":{"id":"1:3307:1433","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"1:46501:2499","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11370:54947":{"id":"1:11370:54947","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:11022:2320","str::split_whitespace":"1:11348:51699","`DoubleEndedIterator`":"1:7062:120","str::rsplit":"1:11376:54950","prim@char":"4:12357:1743"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"1:49996:2704","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:2319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11440:2965":{"id":"1:11440:2965","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11417:58121":{"id":"1:11417:58121","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"1:11022:2320","prim@char":"4:12357:1743"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:2319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11027:2319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:11047:2324","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11406:58115":{"id":"1:11406:58115","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"`DoubleEndedIterator`":"1:7062:120","prim@char":"4:12357:1743","self::pattern":"1:11022:2320","str::match_indices":"1:11403:58114"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"1:50164:2744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:2319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11027:2319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11042:2323","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:19:1715":{"id":"0:19:1715","crate_id":0,"name":"INIT","span":{"filename":"src/inline_lazy.rs","begin":[23,4],"end":[23,60]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"generic","inner":"Self"},"default":"_"}},"a:1:2710:1870-0:12:1714":{"id":"a:1:2710:1870-0:12:1714","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2710:1870","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2710:1870","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:12:1714","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:11373:51662":{"id":"1:11373:51662","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12357:1743","self::pattern":"1:11022:2320"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"1:10846:2705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:2319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2515:127":{"id":"1:2515:127","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"1:39273:2263","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:11":{"id":"0:11","crate_id":0,"name":null,"span":{"filename":"src/inline_lazy.rs","begin":[16,0],"end":[16,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"import","inner":{"source":"self::std::sync::ONCE_INIT","name":"ONCE_INIT","id":"4:6679:1713","glob":false}},"1:11432:58124":{"id":"1:11432:58124","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"1:11022:2320","prim@char":"4:12357:1743"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:2319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11320":{"id":"1:11320","crate_id":1,"name":null,"span":null,"visibility":{"restricted":{"parent":"1:10585:1345","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["1:11321:783","1:11322:2060","1:11323:58102","1:11324:58103","1:11326:58104","1:11329:54672","1:11330:58105","1:11331:306","1:11332:54920","1:11333:1586","1:11335:53572","1:11337:53573","1:11339:53574","1:11341:58106","1:11342:58107","1:11343:54939","1:11344:54940","1:11345:2773","1:11346:2351","1:11347:3368","1:11348:51699","1:11349:51714","1:11350:3730","1:11351:58108","1:11352:51701","1:11353:53848","1:11356:54956","1:11359:54957","1:11362:2101","1:11366:2059","1:11370:54947","1:11373:51662","1:11376:54950","1:11379:58109","1:11382:58110","1:11385:54952","1:11388:54954","1:11391:58111","1:11394:58112","1:11397:1770","1:11400:58113","1:11403:58114","1:11406:58115","1:11409:58116","1:11411:58117","1:11413:58118","1:11415:58119","1:11416:58120","1:11417:58121","1:11420:58122","1:11423:54729","1:11426:54958","1:11429:58123","1:11432:58124","1:11435:58125","1:11438:2586","1:11440:2965","1:11441:54805","1:11442:54802","1:11443:54801","1:11444:58126","1:11446:3219","1:11447:58127"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:28:1581":{"id":"0:28:1581","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[167,0],"end":[179,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"kind":"macro","inner":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"},"1:11426:54958":{"id":"1:11426:54958","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"1:11022:2320","prim@char":"4:12357:1743"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48028:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:2319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11027:2319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11042:2323","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11343:54939":{"id":"1:11343:54939","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:11344:54940"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11415:58119":{"id":"1:11415:58119","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5099:58761":{"id":"5:5099:58761","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11438:2586":{"id":"1:11438:2586","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"1:10983:2293","FromStr::Err":"1:10984:126"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48172:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"1:10983:2293","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:10983:2293","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2224:1729":{"id":"1:2224:1729","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11333:1586":{"id":"1:11333:1586","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:48030:174"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48028:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9119:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9119:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5108:58763":{"id":"5:5108:58763","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:6978:218","`Box<str>`":"5:276:1876"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:1876","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6723:3216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11347:3368":{"id":"1:11347:3368","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"1:49982:2735","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11423:54729":{"id":"1:11423:54729","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"1:11022:2320","prim@char":"4:12357:1743"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48028:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:2319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11326:58104":{"id":"1:11326:58104","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:11324:58103"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11321:783":{"id":"1:11321:783","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12357:1743"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2500:2053":{"id":"1:2500:2053","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2474:132"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11339:53574":{"id":"1:11339:53574","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9119:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9119:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:2510:127":{"id":"1:2510:127","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"1:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"1:11349:51714":{"id":"1:11349:51714","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:11348:51699"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"1:50279:2751","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:12:1714":{"id":"0:12:1714","crate_id":0,"name":"Lazy","span":{"filename":"src/inline_lazy.rs","begin":[19,0],"end":[19,48]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null,null]},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2660:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:17","a:1:2646:214-0:12:1714","a:1:7718:2042-0:12:1714","a:1:7719:2041-0:12:1714","a:1:2710:1870-0:12:1714","b:1:2225-0:12:1714","b:1:2501-0:12:1714","b:1:3305-0:12:1714","b:1:2512-0:12:1714","b:1:2222-0:12:1714","b:1:2507-0:12:1714","b:1:2497-0:12:1714","0:23"]}},"1:11352:51701":{"id":"1:11352:51701","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"1:50288:2752","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11337:53573":{"id":"1:11337:53573","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9119:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9119:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:11376:54950":{"id":"1:11376:54950","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"prim@char":"4:12357:1743","`DoubleEndedIterator`":"1:7062:120","str::split":"1:11370:54947","self::pattern":"1:11022:2320"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"1:50014:2708","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:2319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11027:2319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11042:2323","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"src/inline_lazy.rs","begin":[21,0],"end":[47,1]},"visibility":{"restricted":{"parent":"0:4:1571","path":"::lazy"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2660:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:12:1714","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:19:1715","0:20:1586"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:7718:2042-0:12:1714":{"id":"a:1:7718:2042-0:12:1714","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:7718:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7718:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:12:1714","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:11366:2059":{"id":"1:11366:2059","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:48030:174","self::pattern":"1:11022:2320","prim@char":"4:12357:1743"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48028:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:2319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11027:2319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11042:2323","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:20:1586":{"id":"0:20:1586","crate_id":0,"name":"get","span":{"filename":"src/inline_lazy.rs","begin":[26,4],"end":[46,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline(always)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2922:1717","args":{"parenthesized":{"inputs":[],"output":{"kind":"generic","inner":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11351:58108":{"id":"1:11351:58108","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"1:50260:2749","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11429:58123":{"id":"1:11429:58123","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12357:1743","self::pattern":"1:11022:2320"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:2319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11027:2319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11042:2323","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:31:1588":{"id":"0:31:1588","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[213,0],"end":[215,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["lazy",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"LazyStatic","id":"0:29:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11379:58109":{"id":"1:11379:58109","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::rsplit_terminator":"1:11382:58110","self::pattern":"1:11022:2320","prim@char":"4:12357:1743","str::split":"1:11370:54947","`DoubleEndedIterator`":"1:7062:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"1:50046:2739","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:2319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3305-0:12:1714":{"id":"b:1:3305-0:12:1714","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:1869","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3303:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:12:1714","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:3307:1433"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5093:2642":{"id":"5:5093:2642","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:2319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11335:53572":{"id":"1:11335:53572","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:48030:174"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48028:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9119:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9119:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5111:54803":{"id":"5:5111:54803","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:11443:54801"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11388:54954":{"id":"1:11388:54954","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"str::splitn":"1:11385:54952","self::pattern":"1:11022:2320","prim@char":"4:12357:1743"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"1:50118:2712","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:2319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11027:2319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11042:2323","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11394:58112":{"id":"1:11394:58112","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48028:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:2319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11027:2319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11042:2323","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11391:58111":{"id":"1:11391:58111","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48028:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:2319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11446:3219":{"id":"1:11446:3219","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4455:3219"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"1:50304:2754","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11400:58113":{"id":"1:11400:58113","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"str::matches":"1:11397:1770","self::pattern":"1:11022:2320","`DoubleEndedIterator`":"1:7062:120","prim@char":"4:12357:1743"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"1:50218:2747","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:2319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11027:2319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11042:2323","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11356:54956":{"id":"1:11356:54956","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"1:11022:2320","prim@char":"4:12357:1743"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:2319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11413:58118":{"id":"1:11413:58118","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11330:58105":{"id":"1:11330:58105","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:11444:58126":{"id":"1:11444:58126","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4454:58126"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"1:50295:2753","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11441:54805":{"id":"1:11441:54805","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2516:1419":{"id":"1:2516:1419","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48172:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"1:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11329:54672":{"id":"1:11329:54672","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:10590:2919"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11323:58102":{"id":"1:11323:58102","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11353:53848":{"id":"1:11353:53848","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"1:11022:2320","prim@char":"4:12357:1743"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:2319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11348:51699":{"id":"1:11348:51699","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:11349:51714"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"1:50270:2750","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11442:54802":{"id":"1:11442:54802","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11409:58116":{"id":"1:11409:58116","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2501-0:12:1714":{"id":"b:1:2501-0:12:1714","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2474:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:12:1714","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2503:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11331:306":{"id":"1:11331:306","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"4:12374:1757","str::as_mut_ptr":"1:11332:54920"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11435:58125":{"id":"1:11435:58125","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"1:11022:2320","prim@char":"4:12357:1743"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:2319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11027:2319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11042:2323","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11359:54957":{"id":"1:11359:54957","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"1:11022:2320","prim@char":"4:12357:1743"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:2319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11027:2319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11042:2323","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2222-0:12:1714":{"id":"b:1:2222-0:12:1714","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:1869","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2216:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:12:1714","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2224:1729"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5092:58759":{"id":"5:5092:58759","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:1876","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6723:3216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:1876","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6723:3216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11344:54940":{"id":"1:11344:54940","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:11343:54939"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11324:58103":{"id":"1:11324:58103","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11411:58117":{"id":"1:11411:58117","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1581":{"id":"0:0:1581","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[215,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\n# #[macro_use]\n# extern crate lazy_static;\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.4.0\")]","#![no_std]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:29:1587","0:31:1588","0:28:1581"],"is_stripped":false}},"b:1:2512-0:12:1714":{"id":"b:1:2512-0:12:1714","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2471:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2481:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:12:1714","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2515:127","1:2516:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11350:3730":{"id":"1:11350:3730","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"1:50250:2748","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:29:1587":{"id":"0:29:1587","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[185,0],"end":[188,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5096:58760":{"id":"5:5096:58760","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:2319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11345:2773":{"id":"1:11345:2773","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12357:1743"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"1:49966:2733","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11403:58114":{"id":"1:11403:58114","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"`DoubleEndedIterator`":"1:7062:120","self::pattern":"1:11022:2320","prim@char":"4:12357:1743","str::rmatch_indices":"1:11406:58115"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"1:50146:2743","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11027:2319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2225-0:12:1714":{"id":"b:1:2225-0:12:1714","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2653:1869","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2219:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:12:1714","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2227:50948"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11443:54801":{"id":"1:11443:54801","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"11:36:59878":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"6:4247:39882":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:2758:1949":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"5:3472:3459":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"12:353:3684":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:49031:130":{"crate_id":1,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"16:7413:3824":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"5:4936:3210":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:5841:39783":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:10795:2742":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:51697:51491":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"4:11904:3316":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:1552:2276":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"12:1859:3091":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:12874:49830":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:12211:49195":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:11690:14577":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:10245:44481":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"9:188:3583":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"1:2752:1946":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"4:6071:1929":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:9691:4214":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"4:4968:3097":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"4:4399:3355":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:49304:2299":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:2811:1960":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:6087:3807":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"12:1085:3681":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:5715:3849":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:4029:4411":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"15:0:1801":{"crate_id":15,"path":["addr2line"],"kind":"module"},"4:8942:2279":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"1:2776:1953":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:13176:50303":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"4:4298:3172":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"4:454:3229":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:3179:42506":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"5:6895:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"4:4740:3097":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"4:2394:3275":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"12:2178:59886":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:5379:3835":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"4:941:3035":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:8142:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"16:6441:3869":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"5:1067:3478":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:9470:2708":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"4:1629:3092":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:1919:2435":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"4:8365:3075":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"4:9555:54900":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"4:10934:3140":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"4:966:3039":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:10455:4286":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"5:3792:2280":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"4:5060:3105":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"4:962:3038":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:48645:1919":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:13024:50261":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"4:999:3044":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:49070:127":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:53902:2532":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:11300:45020":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"16:5438:3838":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:4673:39928":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:8537:131":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"12:387:59880":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:4300:39889":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:1636:571":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:9119:216":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:47551:11566":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"8:0:1795":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"5:6972:58959":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"1:3220:1979":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:56972:239":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:2859:4046":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:4354:39895":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:11638:54105":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"4:6636:54746":{"crate_id":4,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"17:12022:49121":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:10350:4169":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"4:970:3040":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"16:7404:3808":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:8475:4128":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"5:2730:58878":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:2710:1870":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:52366:2515":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"4:5083:3100":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:8339:44170":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:21955:164":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:12638:49728":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:4346:39894":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"4:10751:3068":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"18:531:4318":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:50260:2749":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:4096:39868":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:8561:4210":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:4810:39941":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:7255:40071":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:10822:44184":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:51952:2522":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:4706:767":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:4659:11273":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:20951:2444":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"4:8948:2981":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"4:11762:4453":{"crate_id":4,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"1:4113:1709":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"6:513:36629":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:7289:41547":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:29617:2823":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"4:12377:1760":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"4:12380:1763":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"18:755:4312":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"5:6474:4427":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:6750:3149":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"4:11327:31246":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"16:3254:42507":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"15:193:3703":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"4:12376:1759":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"1:2562:127":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"4:5165:3192":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:20855:53034":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:4257:39883":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:56563:2783":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:52622:2556":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:6597:3873":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"5:6978:218":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:49128:2401":{"crate_id":1,"path":["core","fmt","FlagV1"],"kind":"enum"},"16:7907:3893":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:4680:43136":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:47512:11563":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:20434:2509":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:2827:1963":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:12251:49198":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"6:1580:37524":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"4:5502:185":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"1:50727:2769":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:2723:2254":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"12:0:1799":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"4:0:1337":{"crate_id":4,"path":["std"],"kind":"module"},"5:6763:57940":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:4475:39905":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:247:60819":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:53940:2552":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"16:5519:3843":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:20029:53164":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:53978:2517":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:49058:109":{"crate_id":1,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"17:13527:50396":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:53046:2513":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:5727:40565":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:39322:2252":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:6354:3868":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"4:8079:3186":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"12:762:3036":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"1:52390:2516":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"4:11546:3196":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:11315:45023":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"4:9590:212":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:10062:44369":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"9:800:41798":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"5:6156:4409":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:11087:44805":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:9601:4185":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:6124:3831":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:21625:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"16:7637:3780":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:1505:37515":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"18:636:60833":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:46376:194":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:13354:50318":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:9791:44292":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:49144:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:11843:2778":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:2697:2251":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"16:2674:4068":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"4:1608:3035":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:20691:28468":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"17:11217:44848":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:5959:4043":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:7256:3884":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:6988:2468":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"5:6942:3364":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:46886:2940":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:7034:1875":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:2219:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:9658:44288":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"4:12367:1750":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"17:8295:44169":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:56998:239":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:12730:49734":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"4:542:3248":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:2840:1966":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"14:0:1800":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:7430:193":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"9:592:3558":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"17:8137:44168":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:11606:49031":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:2742:1950":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:52982:2528":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"5:4519:199":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:8774:4168":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:10088:44368":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:11604:135":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:56985:239":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"4:9477:54462":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:50910:4535":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:49851:2455":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"4:9895:3266":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"16:5154:4049":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"18:538:4319":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:6450:3700":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:9435:2707":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"16:4912:43200":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:6424:40979":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:3168:2376":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"5:4988:4419":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"6:5876:40598":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:1751:51400":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:13413:50360":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:10752:4171":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:7139:155":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:21364:2813":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"4:5313:54713":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:21042:2793":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:12955:49910":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"5:6738:3469":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"4:7925:30276":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:4597:43125":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"16:2885:4080":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:2984:4076":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:9764:44291":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:48215:2279":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"6:4581:39916":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"5:1201:3047":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"4:7882:3235":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"1:46810:2943":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"4:2900:127":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"4:5390:186":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"17:13459:50364":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:11022:2320":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"6:6415:40978":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:4187:1886":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:10108:4149":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:20686:2445":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:13374:50354":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:46759:10847":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"15:214:3707":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:9501:4193":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:4333:1895":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:19989:53031":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:9350:4267":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:50735:2768":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:242:60825":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"16:3393:42508":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:10296:44455":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"0:0:1581":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"4:10384:3323":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:8592:189":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"17:11828:49108":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"18:681:4306":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:13340:50317":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:21314:51469":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"17:10360:4284":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"16:3845:42685":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"18:96:50789":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"12:320:3685":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:29545:67":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:7249:40070":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"4:7210:3304":{"crate_id":4,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"5:5199:3431":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:6308:3866":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:10546:44182":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"4:8540:3351":{"crate_id":4,"path":["std","net","parser","AddrKind"],"kind":"enum"},"17:9947:44398":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"6:1500:37514":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"4:4258:3175":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:6276:3810":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:9293:4268":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"4:8398:2456":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"12:2205:2986":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"4:8208:3011":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"16:4432:43056":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"4:4206:3096":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:11800:49106":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:50014:2708":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:46521:3827":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"17:11436:48920":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:50723:2765":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:11547:44400":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:11909:49113":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:13214:50312":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:6262:3794":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:47174:2466":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"18:582:2377":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:13536:50397":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:48379:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"5:1435:3475":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:545:36632":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:4626:43130":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:562:44167":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:9118:60813":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"12:393:59881":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:48028:176":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"4:951:3036":{"crate_id":4,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"1:3366:2504":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"16:7545:3812":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:4559:39913":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:4356:1896":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:47280:2480":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"16:3017:42505":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:13071:50268":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:49320:2298":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:11721:49100":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"4:11207:118":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"16:2456:4088":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"4:4242:3173":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"18:0:1804":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:6545:40987":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:52076:2555":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:4797:39939":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"16:2816:4073":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"4:8599:3017":{"crate_id":4,"path":["std","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:13279:50315":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:13221:50313":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:9422:44243":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"4:1808:592":{"crate_id":4,"path":["std","env"],"kind":"module"},"1:2953:1977":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:8800:139":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"16:6506:3871":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:7071:3879":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:3892:2276":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"17:11500:48922":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:4540:39911":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:4804:39940":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:2971:1967":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"4:8203:3009":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:4115:39870":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:12836:49825":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:46780:2288":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:50200:2746":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"4:11728:54679":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:7948:3796":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:10642:4248":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:8584:2402":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"4:716:4526":{"crate_id":4,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:52488:51475":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:12972:50231":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:10385:4227":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:13203:50306":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:5574:3845":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"4:10729:4531":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"14:202:3456":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"12:1832:2279":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:51851:2542":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:4288:43032":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"4:11495:3069":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:54153:19964":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:10233:44480":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:10394:4228":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"4:6002:1920":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:8796:4174":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"6:4527:39909":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"5:6755:3470":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"5:768:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:5498:40547":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"4:8611:3018":{"crate_id":4,"path":["std","net","socket_addr","SocketAddrV6"],"kind":"struct"},"4:976:3041":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:2596:4119":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:50739:2762":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:13039:50263":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"4:8691:3321":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:49996:2704":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"4:9500:54724":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:20275:2440":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"4:10712:3066":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:11536:44399":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:2975:1968":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"4:4010:3308":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"9:505:3506":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"7:32:41641":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:1600:37526":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"5:2947:3385":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:12781:49781":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:4307:39890":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:7279:41546":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:46396:197":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"4:7772:4442":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"4:8457:3002":{"crate_id":4,"path":["std","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:47530:4461":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"12:1845:3036":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"4:1605:2065":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:46235:1980":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"4:5223:33382":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"17:8911:60824":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:11893:49112":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:21237:2589":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"4:1825:31233":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"12:2053:3045":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:2658:108":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"16:8047:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:39273:2263":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:9109:2440":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:10497:44487":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"6:4726:39933":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:20234:2440":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:13158:50301":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"5:3898:2279":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:11734:49101":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:4182:1885":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"4:9353:3202":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:46900:2942":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:9526:4184":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:8590:2405":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:12756:49778":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"4:10827:3067":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"4:7525:57059":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"4:8749:3102":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:12087:49126":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:1903:44276":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"4:2510:3135":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:47194:2473":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"4:5822:3074":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"4:448:3228":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:6293:36506":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:2252:4048":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"5:6449:4421":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"4:12381:1764":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"17:8631:44172":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:56946:239":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"9:19:3607":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"16:7868:3798":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"4:9512:54759":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:2305:177":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:2646:214":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"16:5402:3836":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:6759:3802":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"5:7000:3454":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"9:676:3605":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"1:7062:120":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"5:1230:3048":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"4:12323:57060":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"5:6081:2065":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"14:7:42426":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:47208:2474":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:8212:4240":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:10506:44459":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:11748:49102":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:4575:39915":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:12739:49735":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:7825:3892":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:4059:2276":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"0:28:1581":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"6:4280:39886":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:50715:2764":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:46494:1973":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"4:1601:2279":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:52441:51478":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"4:8850:2976":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"1:3141:227":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:4224:39879":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"4:12373:1756":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"18:590:51665":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:12896:49894":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"18:660:4304":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:11951:49117":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"4:3418:3076":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:2274:124":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"4:9897:4446":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:21856:165":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:10590:2919":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:12198:49194":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"5:6955:3365":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"4:8727:33377":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:21185:51290":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:5856:3855":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:12674:49729":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:9165:60812":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"18:574:60832":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:21169:2593":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"16:6149:3832":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:6713:3805":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:7720:2040":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"16:6843:4102":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:6323:3787":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"9:111:3575":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"17:12609:49673":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:52152:2547":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:131:36312":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"6:1636:37528":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:4152:39873":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:2696:4069":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"4:675:30275":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"4:10928:3142":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"16:4510:43110":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:51721:2553":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"6:4489:3330":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"4:4834:3168":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"5:6288:3431":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"18:766:4313":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:4335:39893":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"18:727:4310":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:8368:4170":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"4:9454:54743":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:13393:50356":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:8418:4154":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:7521:3785":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"4:8625:3310":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"5:1216:3046":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:9681:44289":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"5:2976:3090":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:51992:51490":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"12:300:3686":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:47086:2457":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"16:2478:4065":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:50279:2751":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:13478:50370":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:46919:2292":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:48774:2402":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:2653:1869":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"17:10270:44457":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"12:1872:3093":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"12:1836:2065":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"5:5808:34826":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:4135:42951":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"4:7835:3225":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"6:495:36626":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:12265:49199":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"5:6317:3433":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:21298:51368":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:21343:53097":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"4:5676:3064":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"12:119:3687":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:46535:1892":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"6:5713:40563":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:4267:39884":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:2823:1962":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:9458:4134":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"4:12378:1761":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"4:6778:1926":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:52700:2544":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"4:1088:3045":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:49804:2718":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:7447:3792":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:9303:4193":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:9061:4195":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"4:12382:1765":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"17:13192:50305":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:1518:37517":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"12:834:3042":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:5503:3842":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:49972:2734":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"4:1473:142":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"6:6277:37455":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"16:7287:3887":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:4816:39942":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:2432:2440":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:7416:2260":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:7226:40067":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:20283:2446":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:11515:48923":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"6:4102:39869":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:7803:3891":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:4043:1903":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"4:8316:3153":{"crate_id":4,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"4:12375:1758":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"1:51003:2566":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"17:9250:44229":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:54115:19962":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:49555:2962":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"4:2380:3271":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:10576:2958":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"4:8377:3126":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"5:939:4409":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:11149:44843":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:2332:4082":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"4:8800:2966":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"1:54130:19963":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"18:80:50788":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:50991:2568":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:54192:19965":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"4:9619:3196":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"16:2784:4074":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:9315:2704":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"4:658:3263":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:12225:49196":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:8586:2403":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"12:1029:3047":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:4361:39896":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"7:79:41648":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"4:11358:3071":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"4:8959:2982":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"4:3228:3145":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"4:4013:3309":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:13572:50403":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:6998:41359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:6495:3699":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"18:690:4307":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:6697:4095":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"16:5488:3841":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"4:9323:3071":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"4:11162:3185":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:7025:148":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:47310:2470":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:554:36633":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"4:12369:1752":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"1:51743:2541":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:12816:49784":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:12164:49131":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:4712:43144":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"4:8576:3016":{"crate_id":4,"path":["std","net","socket_addr","SocketAddr"],"kind":"enum"},"1:21095:2796":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:7220:40066":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:592:36639":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"5:1376:3033":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"4:1861:31244":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"6:4496:39906":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"4:2026:179":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:5534:40551":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:4565:43117":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:11235:44899":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:50731:2767":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:8393:4133":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"5:4974:4416":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"1:3131:1972":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:50591:2338":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:5226:60182":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"4:339:160":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:21691:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:29517:2278":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:47095:2458":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"4:11883:3309":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:4565:39914":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"12:1555:3695":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:9263:44230":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"4:9385:3204":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:12073:49125":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:21:660":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"4:11507:3070":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:539:36631":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:9820:4272":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:9751:4215":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"4:2396:3276":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"1:50953:2776":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:8510:42501":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"4:8723:3098":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:10772:2741":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"18:521:4314":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:12134:49129":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"5:3548:4409":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:29523:2647":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"16:5771:3852":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"0:29:1587":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"5:1301:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:20027:53169":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:2548:4067":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"4:3153:3295":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:48607:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:4665:39927":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"5:6785:193":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:50918:190":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"16:7335:3804":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:6375:37456":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"4:8491:3004":{"crate_id":4,"path":["std","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:4200:39877":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:2888:116":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:5642:3847":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:21277:51513":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:5758:3851":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:6682:3803":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:4367:39897":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"4:595:3171":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"4:8520:57067":{"crate_id":4,"path":["std","net","ip_addr","fmt","Span"],"kind":"struct"},"16:7307:3889":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:10845:4242":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"4:8109:118":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:51974:2526":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:49877:2722":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:56933:239":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"4:8705:3331":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:9577:4187":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:4178:202":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:48569:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:5568:40519":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:6912:3363":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:46336:195":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"4:4501:3318":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:10921:44614":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:51922:2534":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"4:3475:3084":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"5:3350:2280":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:4126:39871":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"4:5880:3200":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:4208:43000":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:50581:2337":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"12:1534:3694":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"4:11187:3268":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"16:4808:43168":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:50295:2753":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:8588:2404":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:48155:2131":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:48113:2038":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"4:8873:2977":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:49040:67":{"crate_id":1,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"17:9071:60823":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"4:2378:2875":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"16:6248:3784":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"16:3707:42571":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:13580:50405":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"4:1634:3093":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"16:7189:3774":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:12337:4242":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:581:36637":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"18:481:4315":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"7:0:1484":{"crate_id":7,"path":["unwind"],"kind":"module"},"12:1003:3046":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:2654:1899":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"17:11873:49111":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:10997:44624":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:13100:50271":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:46321:1969":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:11034:44737":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"4:11659:3080":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:13518:50395":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"4:1935:3261":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"13:0:1794":{"crate_id":13,"path":["std_detect"],"kind":"module"},"4:9331:2279":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:11093:2327":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:9644:4180":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:12980:50258":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"4:4904:56960":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"4:6228:201":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:9475:4124":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:6654:3789":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"12:853:3043":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"4:6673:1712":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"17:11288:45019":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:20195:2437":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"5:36:3400":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"14:31:42426":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:1931:4182":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"4:1886:4529":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"1:4313:1894":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"3:0:1791":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"6:4659:39926":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"4:12372:1755":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"4:6600:161":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:9738:4217":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:5367:2464":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:5611:50997":{"crate_id":1,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"17:12307:49207":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:5941:189":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"5:3751:4409":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:11617:14576":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"5:1943:3388":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:4605:39919":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:12934:49897":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"4:4965:3099":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"5:215:3446":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"9:896:3518":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"4:4450:3361":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:11853:49110":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"5:2465:3482":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"4:6679:1713":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"9:709:2976":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"4:5344:54713":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:6352:37482":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"5:2039:3479":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:2216:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"4:9417:3206":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:2239:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"4:4900:56956":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"17:420:3751":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:6632:3874":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:2718:4070":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:12361:49274":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:5504:40548":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:46832:2755":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:48788:2405":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"4:8052:3187":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"17:11125:44807":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"5:1415:3039":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"4:12356:1742":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"4:11635:4451":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"6:1654:37530":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"5:6405:237":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"4:3265:3140":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"4:915:3033":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:9274:44231":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:2831:1964":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:5832:2467":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:3152:1974":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"5:5422:3035":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"4:12361:1746":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"4:928:3034":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:487:44166":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:9382:44246":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"4:11843:3308":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:20221:2572":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:8849:2295":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:6430:40980":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"4:11960:35093":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"1:46580:2270":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"5:3529:3036":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"5:2724:2127":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:29483:2646":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"4:1823:31232":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"4:7964:31246":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"4:9295:3069":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"4:8434:151":{"crate_id":4,"path":["std","net","ip_addr","IpAddr"],"kind":"enum"},"1:2764:1948":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"4:11197:129":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"6:4212:39878":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:12748:49736":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"4:9585:162":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:135:36313":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"16:7037:2038":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:46879:2753":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:6538:40986":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:29723:2824":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"16:153:3771":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:46274:1978":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"16:6571:3872":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"5:5962:3035":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:48088:2279":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"4:11331:2996":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:52858:2536":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:13091:50270":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:53996:19953":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:9539:4183":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:1760:2876":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:48265:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"4:3190:3143":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"5:4614:2276":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:6417:2073":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:3590:42526":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:10625:4175":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:46352:193":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"4:1617:3090":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:2433:2264":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"4:6212:3200":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"6:4690:967":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:8594:2406":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:48104:2065":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"17:9401:44244":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"5:6777:2065":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"5:4014:238":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:11027:2319":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:20403:2440":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"14:165:42427":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:48240:178":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"4:9465:3252":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:46893:2941":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"4:8890:2978":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"1:47259:2478":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"4:4890:3176":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:4506:39907":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"4:5642:3062":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"4:884:2279":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:3460:3139":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:46501:2499":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:50118:2712":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"5:771:3467":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:2468:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:3600:2065":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"12:1518:3693":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:46528:51693":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:53794:2549":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:6037:4063":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"5:1049:3477":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:6524:40985":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:3680:42568":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"4:8213:3012":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"4:11152:56781":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"6:567:36635":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"4:11141:3107":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"12:2080:3047":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:51789:2521":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:1643:37529":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:12008:49120":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:47165:2471":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:5606:3846":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"4:7931:3049":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"4:6009:1921":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:9897:44397":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:1525:37518":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:48223:2280":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"16:2833:4045":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"4:771:140":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"5:6793:3389":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"4:11978:57078":{"crate_id":4,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:10075:44367":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"5:1584:4409":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:8310:2691":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:21757:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:20324:2442":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:6269:36547":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:4398:39899":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:49312:51303":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:8814:143":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"17:12322:49208":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:2665:1898":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:2801:1957":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:1678:37532":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:9371:44179":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:7215:3881":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:10973:44623":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:586:36638":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:4317:39891":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:575:36636":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:9805:4271":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:11271:45012":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:1737:2877":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:46753:2754":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:47503:1712":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"14:40:44624":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:4:977":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:10186:4462":{"crate_id":1,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"4:11175:54779":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"6:4611:39920":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:46462:1970":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"4:11651:54684":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:10207:44470":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"4:7948:31239":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"16:5210:42501":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"12:738:3034":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"17:8162:4156":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:7409:2258":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:20843:2443":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:25197:2571":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:47114:2460":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"5:1185:3045":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:13082:50269":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"16:7095:4058":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:46418:196":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:10310:44482":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:21724:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:4777:43161":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:3623:42535":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:46966:2830":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"12:861:3044":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"18:719:4309":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"5:1033:59091":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:10735:2738":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:49025:70":{"crate_id":1,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"5:2726:58877":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"5:6814:2065":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:9290:2280":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:52174:2550":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:8055:4167":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:10139:4195":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"4:8062:3185":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:9857:4158":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"4:8092:129":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"9:920:3515":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:13168:50302":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:7823:2319":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"4:8699:3310":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"4:10557:2997":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"4:8932:2979":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"17:11186:44846":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:2922:1717":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"16:4253:43021":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"4:6437:54705":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:20949:2440":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:21658:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:10476:44485":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"4:8685:3359":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:4379:39898":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"4:12362:1747":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"6:4644:39924":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:8981:44177":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:2477:231":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:48341:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:49864:2721":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"4:10643:3078":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"4:11564:54602":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"6:1574:37523":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"4:3457:2397":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"6:6448:40981":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:3146:134":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"5:1359:2065":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:9778:4216":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:2796:1956":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"5:4932:3212":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:6302:40974":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:46796:2290":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:7085:1874":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"4:3310:3132":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:53732:2529":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"5:667:225":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:29313:2866":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"16:7615:3797":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:1532:37519":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:3158:1976":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:6646:4097":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"11:44:3670":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"1:6798:53013":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"6:62:36246":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:8752:2735":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:7850:3799":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:14:1771":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:1672:1048":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"4:11527:2848":{"crate_id":4,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:13047:50266":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:13594:50439":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"4:7968:3486":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"1:51891:51504":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:6322:40976":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"4:6540:201":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"4:6389:2778":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"4:410:4453":{"crate_id":4,"path":["std","thread","local","fast","Key"],"kind":"struct"},"5:2734:58879":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:49785:2716":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"16:3557:42517":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"16:4879:43191":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"4:2864:3014":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"4:8636:3312":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"4:11340:54783":{"crate_id":4,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:12237:49197":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:2471:146":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"6:4139:39872":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"12:659:2065":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"4:11157:57086":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"12:815:3040":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"12:1628:4407":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"4:1623:3091":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"16:7144:3880":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"4:6132:4432":{"crate_id":4,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"17:8526:4230":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:11874:200":{"crate_id":1,"path":["core","task","ready","Ready"],"kind":"struct"},"17:9553:4195":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:3303:68":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"5:0:279":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:4239:39881":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:519:36630":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:47156:2463":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:5699:40562":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:2919:1873":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:5113:43377":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:10608:4155":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:5974:3857":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"5:3417:4409":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:53544:2525":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:8666:44173":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:7227:3882":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:9549:2711":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:49825:2720":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:11106:44806":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:47269:2479":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"4:7856:3233":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"4:12355:1741":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"4:12374:1757":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"1:50427:2331":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:5681:3848":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"12:822:3041":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"18:548:139":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:5194:42502":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"4:5819:3072":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"16:5536:3844":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:49982:2735":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:53012:2531":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:2912:1871":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:50519:2334":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:2311:3766":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:8494:42502":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"4:3267:3141":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:52542:51496":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:49814:2719":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"12:1138:3048":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:13126:50276":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:52222:2535":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:12695:49730":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:10583:4173":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:4536:43112":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:2660:222":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"6:4191:39876":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"5:6926:2829":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:1722:37537":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:8730:51716":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"17:12278:49200":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:5554:40518":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:46440:198":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:8272:4247":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:10403:4171":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:54077:19960":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:13184:50304":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"4:12358:1744":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"1:50288:2752":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:13404:50357":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:47244:2477":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:2474:132":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:47043:2455":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"4:6705:1930":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:9283:44247":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:7366:3806":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:6794:4099":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"12:2190:59885":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"4:8408:2480":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"16:4376:43048":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:48172:205":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"4:2023:180":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"4:907:2065":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:6597:2261":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"5:2981:3386":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:21201:51321":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:4417:39900":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:8701:44174":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:13134:50277":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:13031:50262":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"4:11820:3021":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:7166:41518":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:21790:2655":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:223:205":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:46950:2829":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"4:9701:4528":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:11708:49099":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"6:5443:40489":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:6503:2454":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"16:3448:42509":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:3952:2574":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"4:8117:3288":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:10321:4283":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"0:31:1588":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"4:3081:3152":{"crate_id":4,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"1:50146:2743":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"4:7834:2440":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"17:8881:60822":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"11:0:1798":{"crate_id":11,"path":["adler"],"kind":"module"},"4:12363:1748":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"4:9507:54703":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:1825:1902":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:5684:40560":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"5:3721:3035":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:50313:2755":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:10708:4241":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:4778:39938":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"4:1102:3046":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:10949:44622":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:2311:184":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:47104:2459":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"4:10870:4447":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:12797:49782":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:7022:4055":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"5:5547:3371":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"16:6545:3801":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"4:4250:3174":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"4:12011:3711":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"5:5619:2276":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:50799:2851":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:9508:2709":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"5:1404:3038":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:12176:49145":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"18:609:60849":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:52519:51516":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:3183:1900":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"4:10507:4530":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:11528:44401":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"12:1065:3680":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:49359:51309":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"4:3466:57154":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:3354:2498":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"17:12884:49892":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:7718:2042":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"4:571:3253":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"4:8428:2748":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"5:1933:3248":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"4:12199:4454":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:4551:39912":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"5:2968:3092":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:8596:2407":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"5:2244:3483":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:10796:4239":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:22387:2623":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"13:220:59889":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"12:60:59879":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"4:9283:181":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"16:7992:3827":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:11617:49032":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:2916:1872":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"4:4312:3178":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:6329:33377":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:2762:4072":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:4761:39936":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:4437:39902":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:48231:2065":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"12:777:3678":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"5:2725:58883":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"4:4653:3328":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:50961:2777":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:4404:43052":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"4:6311:4432":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:11248:111":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:10121:4150":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"4:7791:4444":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"18:614:60845":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:4259:1892":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:49329:143":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:54100:19961":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:5424:3837":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:8441:4243":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"4:7734:54760":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:21252:51477":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"4:9520:3878":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:5175:42504":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:4329:39892":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"4:2245:128":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"1:52011:2511":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:12926:49896":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"18:491:60842":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:4592:39917":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"5:6820:2065":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:1962:4212":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:1714:37536":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:54051:19958":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:10257:44458":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"4:957:3037":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:54036:19957":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"4:10931:3144":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"4:8349:3149":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"4:8125:3137":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:56959:239":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:5365:3782":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"16:6337:3867":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"5:2906:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:5582:40553":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:52344:2512":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"16:2740:4071":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:9193:60816":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:49092:71":{"crate_id":1,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"5:1394:3037":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:6392:37459":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:47496:11561":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"18:564:4320":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:6101:3781":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"5:6732:2065":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:50900:200":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:47521:3150":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:7321:3791":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:53196:2537":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"16:4318:43038":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:5672:40559":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:39313:2561":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"16:2500:4077":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:21889:166":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:9671:4136":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:46820:2944":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"18:736:4311":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:0:1803":{"crate_id":17,"path":["object"],"kind":"module"},"1:52936:2524":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:12630:49726":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:10283:44456":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:2358:4064":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"18:707:2322":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"4:12357:1743":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"6:5782:40569":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:4249:1891":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:50492:2333":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:1595:37525":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:11161:44844":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:13366:50353":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"10:0:1797":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"12:669:3038":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:12485:49670":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:9627:4191":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:6294:3811":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:49906:2725":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"4:9459:106":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"16:5592:4037":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:11997:49119":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:11761:49103":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"4:9277:3067":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"4:4212:3095":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:50270:2750":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"5:6867:2986":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:9577:2713":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"4:7723:44167":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"4:1964:3262":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"12:274:4519":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"4:6837:211":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"12:632:2279":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"19:0:992":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"5:1348:2280":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"4:521:4428":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:2142:572":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:1707:3322":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:10466:44484":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:47185:2472":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:47540:11564":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"4:9347:2065":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:46768:2287":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"5:6008:4409":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:48781:2404":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:50376:2321":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"5:3337:2279":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:6139:3861":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:5772:40568":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:2806:1958":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:5472:40545":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:9563:2712":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:4286:39887":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:11042:2323":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:1541:37520":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"4:2250:2890":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"17:8241:4244":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:1562:37522":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:2737:1945":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"6:6509:40984":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:10221:44479":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:4716:39932":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:8147:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:29559:2822":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:49341:2976":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:20006:53168":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:11955:2563":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"4:9309:3070":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"4:8069:3268":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"4:5704:3066":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"1:10846:2705":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"4:9595:213":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:11787:49105":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:50974:156":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"4:11440:4450":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:50398:2325":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"12:1681:142":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:49794:2717":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:10520:44488":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"9:0:1796":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"4:9534:54601":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:20246:2621":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"16:7920:3894":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:487:36625":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"4:5174:3221":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:2784:1954":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:19974:53031":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"5:6307:3432":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:11036:2322":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:9183:44181":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:3987:2434":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"4:7846:57099":{"crate_id":4,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"16:7276:3886":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:11939:49116":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:10721:44183":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"14:187:42435":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:2772:1955":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"14:221:42434":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:54062:19959":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"5:620:57935":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:13007:50260":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:2570:4118":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"4:8680:3356":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"4:12004:3711":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:9358:2705":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:4635:39923":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"4:12360:1745":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"6:6975:41357":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:11174:44845":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:4427:39901":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:21225:2588":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:11833:106":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"17:11813:49107":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:11259:45009":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:10109:2727":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"4:5690:3065":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"17:13327:50316":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:48079:2064":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"6:4461:39904":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:48455:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"4:2406:3281":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"1:49940:2833":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"18:624:60848":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:8110:44161":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:10528:4238":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:4304:1893":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"5:859:2279":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:9930:44382":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:11047:2324":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"9:649:3560":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"17:12850:49827":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:13436:50361":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:3249:4159":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"4:5759:3068":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"17:9339:4266":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"4:4264:3176":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:21260:51359":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:4629:39922":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:8527:2397":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"16:6721:3875":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:6409:40977":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:9317:4264":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"5:1426:193":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"4:11227:56503":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"5:5531:1918":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:4449:39903":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"12:1044:3679":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:9155:44180":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:7350:4106":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:0:481":{"crate_id":1,"path":["core"],"kind":"module"},"17:11368:45039":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"16:7581:3809":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:5587:40554":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:46863:2939":{"crate_id":1,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"17:13141:50278":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:52268:2523":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:11559:48928":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:8871:44175":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:51677:51466":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:10076:2726":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:12964:50230":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"4:4429:3358":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"9:586:3556":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"6:4294:39888":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:10560:2956":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:2622:4079":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:50604:2837":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:21148:51519":{"crate_id":1,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"4:7224:3305":{"crate_id":4,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"16:7374:3890":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:10445:4242":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:13148:50279":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"4:10488:31244":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"15:175:3702":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"16:7297:3888":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:39309:3486":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"17:9844:4275":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:12060:49124":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:11330:45024":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:50556:2335":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"12:1852:3090":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:50100:2711":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:8822:60815":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"5:842:3468":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"4:12379:1762":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"1:9397:2706":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"4:7143:4441":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"4:4421:3357":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:10774:4169":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"14:215:42428":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"16:6881:3878":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"18:113:50790":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:12148:49130":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"4:8673:3016":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"4:5873:201":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"9:382:3511":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:4598:39918":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:7245:3883":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:4621:39921":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"5:6723:3216":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"4:4902:56958":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"4:8421:2704":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"5:5358:226":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:8991:60814":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:9722:44287":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:2817:1961":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"4:5005:3101":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:47064:2453":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"5:7055:3036":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"12:2184:51725":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:9031:60817":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:12103:49127":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:53856:2514":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:7958:3828":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"4:11434:4449":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:10182:44370":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:1550:37521":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:1971:3480":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"4:12339:56510":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:2747:1947":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:11054:44797":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:50743:2763":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"4:9600:3195":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"16:6230:3865":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:4653:39925":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:9362:4195":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:49551:2963":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"5:7072:3427":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:6115:3779":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"5:276:1876":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"16:2424:4061":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:13059:50267":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:46840:2938":{"crate_id":1,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:21922:167":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:2273:4047":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"5:6747:3035":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"5:6879:3055":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"4:2247:3267":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"16:6219:3864":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:5595:40555":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"4:2573:3136":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"4:2647:3138":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:2789:1959":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:52320:2530":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"4:11746:57094":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:12514:49671":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"4:4437:3360":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:8580:111":{"crate_id":1,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"6:4698:39930":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:9873:44395":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:5749:59825":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:1887:37674":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:13557:50398":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"12:697:3039":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:11774:49104":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:51821:2554":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:58273:51483":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"4:11583:3195":{"crate_id":4,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"16:8034:3764":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"16:7934:3795":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:21350:2871":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"16:4653:43133":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:13506:50394":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:2548:115":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:20008:53166":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:50766:121":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:50624:2838":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"6:7208:40064":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:47142:51689":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:10420:4285":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:11247:44900":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"4:5007:3103":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"9:977:3519":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:1695:37534":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:10434:44483":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:21376:2812":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:12291:49206":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:4737:39934":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"4:9401:3205":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:1033:1711":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"4:10973:3235":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"5:1385:3034":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:8854:2296":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:6550:2618":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:2916:4146":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"4:8474:3003":{"crate_id":4,"path":["std","net","ip_addr","Ipv6Addr"],"kind":"struct"},"4:12368:1751":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"1:7412:2257":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:4231:39880":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:6012:3859":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:6030:3860":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:54005:19954":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"18:644:60832":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:20277:2441":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"4:5009:3104":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:47073:2456":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:1643:2644":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:47227:2476":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"9:827:3513":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:13492:50388":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"4:4581:3327":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:8941:44176":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:2380:4060":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"4:11423:4448":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:9631:4181":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"4:11217:3075":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"4:5887:3201":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:7475:3788":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:50570:2336":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:52122:2543":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"4:2607:3129":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"4:2583:4430":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:49351:51307":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"4:6781:1927":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"4:12364:1749":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"4:5656:3063":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"12:985:3045":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"12:725:3033":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"4:7101:56723":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:50711:2761":{"crate_id":1,"path":["core","str","LinesAnyMap"],"kind":"struct"},"4:987:3042":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:49966:2733":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"16:2402:4083":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"16:3001:4075":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"4:993:3043":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"4:6872:54746":{"crate_id":4,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"1:51767:2533":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:9831:4274":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"5:4092:4411":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:50046:2739":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"4:9638:3197":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:3068:1971":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:49725:2710":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:50250:2748":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"4:6405:4439":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"6:6554:40988":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:10670:4245":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:8582:119":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"17:11974:49118":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"4:1612:3036":{"crate_id":4,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"1:49954:2384":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:1701:37535":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:5733:40566":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:10894:4151":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:46857:2754":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:12046:49123":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:5605:40556":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:600:36640":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:21988:2799":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"6:1608:37527":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"5:6989:3453":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"16:2921:3767":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:4517:2935":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"4:11740:57083":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"9:33:3608":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"9:622:3559":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"1:50304:2754":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:5444:2465":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:507:36628":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:2835:1965":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:7237:40068":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:53654:2545":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:7266:40072":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:646:36670":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:12617:49674":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:6164:3783":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:10682:4246":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"4:625:3217":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"4:897:2280":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:6311:40975":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:4185:39875":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:501:36627":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:6807:4100":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:9591:2714":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"16:7887:3800":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:5817:3854":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:4706:39931":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:9909:44366":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:6981:41358":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:47023:11274":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"18:507:60832":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:9488:4127":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:13231:50314":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:38100:178":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"16:4348:43044":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"4:12328:30279":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:52776:2551":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:1738:37538":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:9223:44228":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:9021:44178":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:11900:138":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"13:108:59933":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"4:3343:3150":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"1:3964:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:48164:188":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"16:7535:3786":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:9446:44248":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"4:3150:3294":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"16:4740:43148":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"4:3156:3296":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"14:160:42426":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:8305:2690":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:53402:2557":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"4:12371:1754":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"2:0:429":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"6:5720:40564":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"5:1680:3036":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"17:8596:44171":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:4683:39929":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"16:7113:4059":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"4:3590:3005":{"crate_id":4,"path":["std","net","display_buffer","DisplayBuffer"],"kind":"struct"},"4:678:30277":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:13114:50273":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:12118:49128":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"4:9339:3199":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:12909:49895":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"4:1120:3048":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"4:3373:2276":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"4:7008:3220":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"12:1840:3035":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"4:8415:2735":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"17:10854:4211":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"4:6492:3200":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"16:6768:3876":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:10983:2293":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"4:3949:3019":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"6:5861:40597":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:2465:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:47013:4455":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:6984:2469":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:46933:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"18:671:4305":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:9266:2279":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:10159:44372":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:0:1802":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:9328:4265":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"18:652:60832":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:4073:1904":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"4:2253:3125":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"4:4113:3316":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"4:3226:3144":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"6:5541:40552":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:5793:3853":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:50413:2328":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:2648:4078":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:50164:2744":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:11576:48931":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"18:515:4317":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:4515:39908":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:967:44245":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"5:4888:4409":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:12033:49122":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"12:1866:3092":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:11485:48921":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"4:5570:119":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"1:49886:2723":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:51873:2546":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:20427:2440":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:11356:45038":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:4768:39937":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:8577:111":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:48493:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"4:11713:54739":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:21823:168":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:50719:2766":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"4:7910:30273":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"12:751:3035":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:49896:2724":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"4:9440:1923":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:50787:2850":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:12550:49672":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:5523:40550":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"16:2291:4089":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:49776:2715":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:7214:40065":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:50218:2747":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:47133:2462":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:12768:49780":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"4:11519:56507":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:5995:3858":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:54025:19956":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"4:48:1495":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"6:608:36641":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"5:3002:3093":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"4:683:30278":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:38117:2377":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"4:4308:3177":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:50444:2332":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"16:6178:3862":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:52746:2548":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:5739:3850":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:52029:51499":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:6500:40983":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:7021:133":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:1668:37531":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:56920:239":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"4:8782:33383":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:54016:19955":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"16:6668:3790":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:48767:2403":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:10490:44486":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"4:1884:4528":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"9:956:3514":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:2269:183":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:0:788":{"crate_id":6,"path":["libc"],"kind":"module"},"17:11684:49040":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"4:9372:3203":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:46938:2828":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:560:36634":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:4745:39935":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:4274:39885":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:49007:67":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:11997:2378":{"crate_id":1,"path":["core","const_closure","ConstFnMutClosure"],"kind":"struct"},"1:11742:53398":{"crate_id":1,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"17:9712:44290":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:8951:60820":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:10332:4291":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:11343:45025":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:6810:1884":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"12:98:3683":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:47218:2475":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:2657:219":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:9885:44396":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:386:44165":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:10374:4226":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:11841:49109":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:5692:40561":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:4680:54165":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"18:699:4308":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:7243:40069":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:47124:2461":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:12948:49898":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:1771:4186":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:2901:1901":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:7461:3793":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"12:2198:59887":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:9108:44179":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"18:599:60836":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:2780:1952":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:2481:230":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"17:11014:44736":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:11594:48975":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"12:2069:3046":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:10875:4152":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:5480:40546":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"5:2942:3091":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:10811:2745":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:50064:2740":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:5510:40549":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:5625:40557":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"5:3326:158":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:5511:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:5741:40567":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:4179:39874":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:11137:44808":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:13382:50355":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"16:6048:3773":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:11665:187":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"4:8057:3266":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"4:8356:3151":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"1:3940:2573":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:11661:49039":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"4:8563:3352":{"crate_id":4,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"16:5927:3856":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"4:4762:3188":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"4:6677:1924":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:7266:3885":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:5835:40596":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:48096:2280":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"5:4735:1918":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:6188:3863":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:11639:49033":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"4:1111:3047":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"5:2935:2279":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"16:6474:3870":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:11070:44798":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:4534:39910":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"4:8631:3311":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:9433:44242":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"4:11698:54714":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"5:2019:58966":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"12:646:2280":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"16:7489:3763":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"4:12370:1753":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"16:5472:3840":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:48146:2039":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:1686:37533":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:6572:40989":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"12:810:3037":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"16:6820:59996":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"4:7286:57633":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:7719:2041":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"4:3188:3142":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:11199:44847":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:524:4039":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:5660:40558":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"4:7861:3251":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"16:6855:3877":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"9:863:3516":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:20436:2442":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:3125:44371":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"4:8133:3139":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:1021:4269":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"4:6035:1922":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:2656:220":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:19961:2377":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:6479:40982":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:50747:2848":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"16:4840:43176":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"5:676:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:48303:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:52298:2527":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:6953:36584":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"12:1120:3682":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:47295:2481":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"4:7941:3050":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"4:9888:128":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"6:1511:37516":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:4206:39723":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:58294:51482":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"5:1338:2279":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:48417:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:20408:28450":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:48531:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:5450:3839":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:2526:4066":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:12860:49828":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"12:444:140":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:2768:1951":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:9700:4213":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"5:3094:3036":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"4:3482:3082":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"1:20158:2620":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"17:12349:49271":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"4:4320:3180":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"4:2898:205":{"crate_id":4,"path":["std","io","error","Result"],"kind":"typedef"},"5:5894:4421":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"4:3400:3083":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"}},"external_crates":{"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":23}