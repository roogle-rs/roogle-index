{"root":"0:0:1664","crate_version":"1.4.0","includes_private":false,"index":{"1:12245:28846":{"id":"1:12245:28846","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12265:28852":{"id":"1:12265:28852","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12030:421","self::pattern":"1:11852:3230"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:3244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11857:3244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11872:3246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12270:24950":{"id":"1:12270:24950","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12236:28842":{"id":"1:12236:28842","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:11852:3230","`DoubleEndedIterator`":"1:7310:121","prim@char":"4:12030:421","str::match_indices":"1:12233:28841"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43800:3267","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:3244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11857:3244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11872:3246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12177:20981":{"id":"1:12177:20981","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43618:3256","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12196:2139":{"id":"1:12196:2139","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41673:179","prim@char":"4:12030:421","self::pattern":"1:11852:3230"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:3244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11857:3244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11872:3246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12215:26305":{"id":"1:12215:26305","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12030:421","self::pattern":"1:11852:3230","str::rsplitn":"1:12218:26307"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43736:3187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:3244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12246:28847":{"id":"1:12246:28847","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12259:28850":{"id":"1:12259:28850","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12030:421","self::pattern":"1:11852:3230"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:3244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11857:3244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11872:3246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12167:24323":{"id":"1:12167:24323","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12262:28851":{"id":"1:12262:28851","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12030:421","self::pattern":"1:11852:3230"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:3244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12278:28855":{"id":"1:12278:28855","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4540:28855"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43949:3012","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5528:24952":{"id":"5:5528:24952","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12273:24955"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29:1670":{"id":"0:29:1670","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[185,0],"end":[188,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"1:12159:25562":{"id":"1:12159:25562","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11412:3250"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12182:20781":{"id":"1:12182:20781","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43924:3268","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12253:25267":{"id":"1:12253:25267","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12030:421","self::pattern":"1:11852:3230"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:3244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12271:27403":{"id":"1:12271:27403","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39702:20634","Self::is_ascii":"1:12270:24950"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39702:20634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5525:29515":{"id":"5:5525:29515","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1664":{"id":"0:0:1664","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[215,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\n# #[macro_use]\n# extern crate lazy_static;\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.4.0\")]","#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:29:1670","0:31:1671","0:28:1664"],"is_stripped":false}}},"1:12156:28831":{"id":"1:12156:28831","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12154:28830"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12256:26311":{"id":"1:12256:26311","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12030:421","self::pattern":"1:11852:3230"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:3244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11857:3244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11872:3246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12224:28839":{"id":"1:12224:28839","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:3244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11857:3244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11872:3246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12243:28845":{"id":"1:12243:28845","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12154:28830":{"id":"1:12154:28830","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31:1671":{"id":"0:31:1671","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[213,0],"end":[215,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["lazy",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"LazyStatic","id":"0:29:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12152:2140":{"id":"1:12152:2140","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12179:20751":{"id":"1:12179:20751","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12178:20794"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43915:3269","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12250:28849":{"id":"1:12250:28849","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12030:421","self::pattern":"1:11852:3230"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:3244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12218:26307":{"id":"1:12218:26307","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12030:421","str::splitn":"1:12215:26305","self::pattern":"1:11852:3230"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43754:3183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:3244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11857:3244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11872:3246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12174:26294":{"id":"1:12174:26294","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12173:26293"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12247:28848":{"id":"1:12247:28848","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12030:421","self::pattern":"1:11852:3230"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:3244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11857:3244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:11877:3245","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12275:28854":{"id":"1:12275:28854","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4542:28854"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43931:3013","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12200:25001":{"id":"1:12200:25001","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:11852:3230","`DoubleEndedIterator`":"1:7310:121","prim@char":"4:12030:421","str::split_whitespace":"1:12178:20794","str::rsplit":"1:12206:26303"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43632:3185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:3244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5509":{"id":"5:5509","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5510:29512","5:5511:2918","5:5514:29513","5:5517:29514","5:5525:29515","5:5526:29516","5:5527:3069","5:5528:24952","5:5529:24953"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12183:24112":{"id":"1:12183:24112","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12030:421","self::pattern":"1:11852:3230"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:3244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12169:24324":{"id":"1:12169:24324","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12273:24955":{"id":"1:12273:24955","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12206:26303":{"id":"1:12206:26303","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:11852:3230","`DoubleEndedIterator`":"1:7310:121","prim@char":"4:12030:421","str::split":"1:12200:25001"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43650:3189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:3244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11857:3244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11872:3246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12172:28834":{"id":"1:12172:28834","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12036:1420","crate::ops::IndexMut":"1:2988:2053","str::slice_unchecked":"1:12171:28833"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12212:28837":{"id":"1:12212:28837","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:11852:3230","str::split":"1:12200:25001","prim@char":"4:12030:421","str::split_terminator":"1:12209:28836"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43700:3262","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:3244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11857:3244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11872:3246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12241:28844":{"id":"1:12241:28844","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12274:24956":{"id":"1:12274:24956","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5510:29512":{"id":"5:5510:29512","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:1969","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:8736","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:1969","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:8736","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12277:2991":{"id":"1:12277:2991","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4543:2991"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43940:2992","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5526:29516":{"id":"5:5526:29516","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:1969","`String`":"5:7449:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:1969","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:8736","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12272:24954":{"id":"1:12272:24954","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12163:1669":{"id":"1:12163:1669","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41673:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:3069":{"id":"5:5527:3069","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12161:316":{"id":"1:12161:316","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12162:315","`u8`":"4:12047:1523"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12230:28840":{"id":"1:12230:28840","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:11852:3230","`DoubleEndedIterator`":"1:7310:121","prim@char":"4:12030:421","str::matches":"1:12227:1867"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43854:3265","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:3244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11857:3244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11872:3246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12227:1867":{"id":"1:12227:1867","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:11852:3230","`DoubleEndedIterator`":"1:7310:121","prim@char":"4:12030:421","str::rmatches":"1:12230:28840"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43836:3264","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:3244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12180:25002":{"id":"1:12180:25002","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43886:3259","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12160:28832":{"id":"1:12160:28832","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:28:1664":{"id":"0:28:1664","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[167,0],"end":[179,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"inner":{"macro":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"}},"1:12178:20794":{"id":"1:12178:20794","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12179:20751"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43906:3260","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12151:823":{"id":"1:12151:823","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12030:421"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12153:28829":{"id":"1:12153:28829","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12221:28838":{"id":"1:12221:28838","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:3244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12150":{"id":"1:12150","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12151:823","1:12152:2140","1:12153:28829","1:12154:28830","1:12156:28831","1:12159:25562","1:12160:28832","1:12161:316","1:12162:315","1:12163:1669","1:12165:24322","1:12167:24323","1:12169:24324","1:12171:28833","1:12172:28834","1:12173:26293","1:12174:26294","1:12175:20779","1:12176:21408","1:12177:20981","1:12178:20794","1:12179:20751","1:12180:25002","1:12181:28835","1:12182:20781","1:12183:24112","1:12186:26309","1:12189:26310","1:12192:2181","1:12196:2139","1:12200:25001","1:12203:20776","1:12206:26303","1:12209:28836","1:12212:28837","1:12215:26305","1:12218:26307","1:12221:28838","1:12224:28839","1:12227:1867","1:12230:28840","1:12233:28841","1:12236:28842","1:12239:28843","1:12241:28844","1:12243:28845","1:12245:28846","1:12246:28847","1:12247:28848","1:12250:28849","1:12253:25267","1:12256:26311","1:12259:28850","1:12262:28851","1:12265:28852","1:12268:28853","1:12270:24950","1:12271:27403","1:12272:24954","1:12273:24955","1:12274:24956","1:12275:28854","1:12277:2991","1:12278:28855"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12175:20779":{"id":"1:12175:20779","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12030:421"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43602:3258","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12268:28853":{"id":"1:12268:28853","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:11813:127","`FromStr`":"1:11812:2767"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41815:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:11812:2767","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:11812:2767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12186:26309":{"id":"1:12186:26309","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:12030:421","self::pattern":"1:11852:3230"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:3244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12233:28841":{"id":"1:12233:28841","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:11852:3230","`DoubleEndedIterator`":"1:7310:121","prim@char":"4:12030:421","str::rmatch_indices":"1:12236:28842"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43782:3266","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:3244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12165:24322":{"id":"1:12165:24322","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41673:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12203:20776":{"id":"1:12203:20776","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12030:421","self::pattern":"1:11852:3230"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:11668:3198","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:3244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12239:28843":{"id":"1:12239:28843","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5511:2918":{"id":"5:5511:2918","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:3244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12176:21408":{"id":"1:12176:21408","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12030:421"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43608:3257","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12171:28833":{"id":"1:12171:28833","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12036:1420","str::slice_mut_unchecked":"1:12172:28834","crate::ops::Index":"1:2984:2052"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12173:26293":{"id":"1:12173:26293","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:12174:26294"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5529:24953":{"id":"5:5529:24953","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12274:24956"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12189:26310":{"id":"1:12189:26310","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12030:421","self::pattern":"1:11852:3230"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:3244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11857:3244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11872:3246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12162:315":{"id":"1:12162:315","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12047:1523"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12181:28835":{"id":"1:12181:28835","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43896:3261","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12209:28836":{"id":"1:12209:28836","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:11852:3230","str::split":"1:12200:25001","prim@char":"4:12030:421","`DoubleEndedIterator`":"1:7310:121","str::rsplit_terminator":"1:12212:28837"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43682:3263","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:3244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12192:2181":{"id":"1:12192:2181","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41673:179","prim@char":"4:12030:421","self::pattern":"1:11852:3230"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41671:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:3244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5514:29513":{"id":"5:5514:29513","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11857:3244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5517:29514":{"id":"5:5517:29514","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"5:7425:8781":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:6516:15857":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"4:9075:25281":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"16:7753:15900":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"4:3343:8834":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:6868:14082":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:1495:10365":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:8210:15915":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:8949:15990":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:4389:12927":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:6618:14069":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"5:3669:2430":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:21625:3179":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:4587:12949":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"4:2569:2494":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"4:356:8693":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:4339:1984":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"16:7038:30805":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:7564:13168":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:7609:14641":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:4818:12972":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:10051:16036":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"4:7593:2518":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"5:7231:28413":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"5:7282:2145":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:9188:15993":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:6332:15845":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:45766:8424":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:5882:13646":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:12792:19415":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:7240:31143":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:6250:15840":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:11155:16235":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"4:10943:8767":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"5:5954:2009":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:2787:2036":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"5:5366:9035":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:46433:23155":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"19:0:1043":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"4:1041:8726":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"18:755:20250":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:4815:805":{"crate_id":1,"path":["core","iter"],"kind":"module"},"5:6930:2484":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"9:486:14685":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:6456:15853":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:2747:2882":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"1:43931:3013":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"4:2917:210":{"crate_id":4,"path":["std","io","error","Result"],"kind":"typedef"},"5:1426:2684":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:11412:3250":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"4:11385:24923":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:11877:3245":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:9153:15992":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"4:1073:8728":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"5:7290:2145":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"6:541:9477":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:2704:228":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"4:2375:8791":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"4:4473:8907":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"4:8290:8905":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:4868:15551":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:22659:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:43632:3185":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"18:113:20230":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:43854:3265":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:6067:13660":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"18:727:20249":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:43618:3256":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"4:2209:8783":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"4:10339:2699":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:10931:16216":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:46991:8458":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:7463:14612":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:14227:20202":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:6915:30813":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:40233:3017":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"6:5829:13643":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:4620:15471":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:21015:8382":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:39515:21113":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"17:10621:16187":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"4:3460:2694":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:5805:13641":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:8494:3244":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"4:3508:25705":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"18:644:31850":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:1520:10369":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"4:12042:754":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"1:2988:2053":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:500:9473":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:2744:1963":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"6:5767:13637":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"4:8897:8988":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:3777:14940":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:9661:2545":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"16:6232:15839":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:44351:3235":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"17:11642:16020":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"4:9054:25223":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"11:1838:8731":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"9:357:14702":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:11668:3198":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"4:8979:25424":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"5:6485:2430":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"11:2201:8715":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:4483:12938":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:13719:20161":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:11979:18890":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:6838:3062":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:20696:21370":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"17:11074:16015":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"4:11337:25198":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:12618:19405":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"5:4032:2430":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"11:798:8722":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:4833:12974":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:5015:12994":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:261:31389":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:5737:13575":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:4374:12925":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:45796:8429":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:10957:16229":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:12982:19428":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:10544:16183":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"16:3042:14917":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:11467:16013":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"4:11141:8980":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:44367:3243":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:42142:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:31017:2956":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"6:6834:14079":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:8872:15987":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"5:782:2433":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"4:10834:25552":{"crate_id":4,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:0:828":{"crate_id":6,"path":["libc"],"kind":"module"},"1:44159:3289":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"4:11450:2529":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"4:12029:948":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"17:14259:20204":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:9821:16028":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:3377:2965":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"17:12148:18902":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:21178:8809":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:44038:3284":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"4:8872:2145":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"5:1118:2677":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:5475:2458":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"5:895:2683":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:10568:16142":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"4:12030:421":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"1:10978:2950":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"16:5414:31057":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:10883:16152":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:40283:21262":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:6744:3089":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"16:7622:15893":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:40968:3070":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:20971:8381":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:10186:3198":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:9899:16046":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"4:3259:8848":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"18:766:20243":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"5:5128:2009":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:9926:16040":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:22153:2774":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:3395:16151":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:7558:13167":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"4:4796:2500":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"4:8141:3065":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"16:6850:15867":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"4:11310:8985":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:9561:15999":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:45642:8387":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:13749:20163":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:6197:15837":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"5:7365:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"4:7682:2522":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"16:7025:30726":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:6317:15843":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:4148:1997":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"5:1492:8720":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"4:5752:2012":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"4:3300:8845":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"4:8278:3118":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:6077:13661":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:6136:12836":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"4:11352:25271":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:11520:16015":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:6931:15871":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:4928:15563":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:488:9471":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:11199:16227":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:44601:3326":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:48060:8361":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:11007:16201":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:8138:15911":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:12539:19399":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"5:4234:2683":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:62:9098":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"16:6815:15866":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:12333:19389":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"5:4348:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:5849:13603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:7289:15877":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:46487:23190":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:0:446":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"11:695:8721":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:10148:16073":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:4626:12952":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:10499:16134":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"6:4685:12956":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"4:9040:15876":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:8105:15909":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:9256:132":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"5:4074:2684":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"6:562:9480":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:12174:18904":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:5363:15810":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"18:531:20255":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:8814:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:11791:18879":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:1918:2708":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"4:5429:8974":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"1:42767:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"4:5622:2502":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:40987:3073":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"4:868:8717":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:2247:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:11852:3230":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"5:3568:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"4:3261:8849":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"4:11212:25276":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:13981:20185":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:43754:3183":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:13332:20143":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:9288:3148":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"4:2377:8792":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"4:2492:8837":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:9571:31474":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:7474:15883":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"4:4042:8874":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"18:719:20241":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:40728:3104":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:11220:16238":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:568:9481":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:12891:19422":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:22692:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"6:4368:12924":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:9966:16000":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:14054:20193":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:4854:12977":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"11:986:2671":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:40418:2701":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:4428:12931":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:7474:9042":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:11189:16017":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:40497:3097":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:6386:15849":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:6036:13659":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:46464:23154":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:39433:203":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:43419:3181":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"4:9100:167":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:7575:13169":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:9936:8809":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:3186:16146":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:43906:3260":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:13882:20175":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:13456:20148":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:2830:2045":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:7484:15884":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:4395:12770":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"9:393:14687":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:12089:18898":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:48007:8358":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:10377:16101":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:6214:15838":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:46721:8443":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"5:7449:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:4535:12944":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"18:690:20247":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:2689:14904":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"16:4323:15366":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:10417:16100":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"4:502:2449":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:40756:3106":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:10123:16046":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"4:8555:8965":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"17:12035:18894":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"14:187:14822":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:8771:15984":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:20741:21531":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:6775:14075":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:43410:3182":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:13914:20178":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:9032:15812":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:41807:193":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:40120:3019":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"4:11175:3299":{"crate_id":4,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:39494:2966":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"17:13639:20140":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"4:8848:8982":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"4:10575:2522":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:43438:3191":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:5720:15823":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:11591:16017":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"4:11367:25203":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:8389:2123":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"5:6788:2481":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:12497:192":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:41866:2684":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:43896:3261":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"4:11610:14847":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"4:7128:24941":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"4:8856:2683":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:12745:3329":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"17:10471:16132":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"16:2759:14907":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:44639:3332":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:10330:16098":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:40977:2543":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"6:5836:13644":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:21310:8378":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"18:564:20257":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:40436:3091":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:43915:3269":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"4:5126:191":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"4:9105:218":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"9:330:14742":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:45867:8389":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:11955:18888":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"4:12034:313":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"11:644:2684":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"4:6438:1809":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"4:8312:8906":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"4:11979:25190":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"11:1845:8732":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:6789:15865":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:40427:3083":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"4:10322:8975":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:10937:3197":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:4329:1983":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"15:0:1896":{"crate_id":15,"path":["addr2line"],"kind":"module"},"4:10947:25185":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:6655:2153":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:7721:3077":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:12691:19410":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:4917:12983":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"16:2314:14888":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:13937:20180":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"4:11473:8863":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"5:3594:2684":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:4393:1986":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"4:8296:8896":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:4616:12951":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"5:3183:28443":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:44363:3239":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:43650:3189":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"16:2497:14896":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:10786:16149":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:506:9474":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"4:6642:217":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:4814:15545":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"4:7847:8802":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"4:2387:8797":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"17:13604:20155":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:3517:2452":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:46213:8396":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"4:0:1412":{"crate_id":4,"path":["std"],"kind":"module"},"18:652:31850":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:12435:136":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:40995:3075":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:47739:8438":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"4:8539:8964":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"4:10986:8982":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:43428:2711":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:30419:2923":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:12579:19402":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:4026:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"16:7739:15899":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"4:10783:25169":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:11542:15964":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:43940:2992":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:1500:10366":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:13862:20173":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:12017:18893":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"11:1501:14807":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"4:929:8723":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"5:3217:28436":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:4895:12981":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"11:1012:8727":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:6705:14070":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:4401:12928":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"4:10770:8800":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"4:5615:206":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:12318:19388":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"5:6439:2452":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:41609:3117":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:40506:3107":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"5:2141:28425":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"11:817:2667":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:4992:12992":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"5:6955:2488":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:7539:15889":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:12966:19427":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:30385:2922":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"4:11379:24931":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"5:1482:8719":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:43540:2715":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:4842:12975":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:4341:12923":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"4:2359:2926":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"6:4810:12971":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"5:0:287":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:2808:2044":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"4:362:8694":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:46927:8403":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:2761:2035":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:5382:15811":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"11:1048:30653":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:42702:23270":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"4:3524:8828":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"1:20726:21535":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"4:5986:206":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:42927:3168":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"4:48:1578":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"1:45956:8456":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:8982:23843":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:1673:10383":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:11388:16009":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:1013:1807":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"1:10336:3190":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"4:7864:8804":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"4:3841:8864":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:22080:21328":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:10845:16145":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:4770:12966":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"4:11591:9011":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"5:3171:2683":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:4787:12968":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:10994:16202":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:10609:16186":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:12479:19396":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"6:4556:12947":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:43576:3255":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:11852:18882":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:43782:3266":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"5:4164:2458":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:14044:20192":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"10:36:30637":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"6:6008:13655":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:42974:21210":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"11:2194:30651":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:2803:2039":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:5818:13642":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"18:671:20245":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:46567:8425":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"5:4393:2458":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:504:15978":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"16:6372:15848":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:20724:21533":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:6554:15859":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:11276:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"18:609:31851":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"4:8304:8861":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"5:7463:9041":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:12412:19392":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"4:12051:1519":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"4:894:2452":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:40446:3092":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"11:0:1893":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"6:6044:30377":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:6484:15855":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:39228:2064":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"4:10795:8804":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:44558:211":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:40574:3102":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:14197:20199":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"4:4387:8897":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"5:7438:2467":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:10066:16064":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:4543:12945":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:44664:23282":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:40148:3018":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"18:515:20254":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:1733:10389":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:10511:16135":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:44609:3327":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:3155:234":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:30194:2734":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"6:6841:14080":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"4:11514:8862":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:5877:13645":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:7693:15897":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:12653:2506":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:21279:8809":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"18:96:20229":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:2523:238":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"4:7637:8695":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:44651:3330":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"4:10805:130":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"4:9134:8813":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"13:226:30654":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:39529:2987":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"4:4133:24922":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:149:2414":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:14216:20201":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:6396:15850":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"4:10741:8936":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"4:5444:8975":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"4:12048:1520":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"6:579:9483":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:9083:15966":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:2771:2031":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"11:968:8726":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:13566:20153":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:119:9152":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:40598:3087":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:14395:20213":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"16:3025:14916":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:12994:19429":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"16:6658:15861":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:7235:3079":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:12552:19400":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:3519:16169":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"11:2049:2671":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:1667:1099":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"4:3992:8871":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:11382:3176":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:11872:3246":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:11767:18878":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"16:6571:15860":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:2465:14895":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"5:7261:28195":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"18:660:20244":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"4:7998:25778":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:41480:155":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:13894:20176":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:5994:3108":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"4:837:2683":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"4:3386:3070":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"12:0:1894":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:43602:3258":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:7725:3078":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:40172:3021":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:46021:8366":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:6156:13689":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:5863:13604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:6558:2145":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"4:4962:8942":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"16:8166:15913":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"16:7313:31147":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"4:910:8719":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:41645:3119":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:43800:3267":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:4440:1988":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"4:8241:8858":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"16:6864:30953":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:7568:30938":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"4:3517:8807":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"4:10082:8759":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:14189:20198":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:9318:15995":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"6:4879:1013":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"4:8800:8979":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"1:42935:23271":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:43359:23042":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"4:10843:25561":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"4:8003:25404":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"16:5398:15812":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:12769:19414":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"4:1837:2285":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"1:21919:20641":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"16:5673:15820":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:7762:21574":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"4:4819:8882":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:43949:3012":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"5:3800:2471":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:42982:21211":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"16:6347:15846":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:10118:2684":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:3744:14931":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"4:7743:8766":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"17:9518:15998":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"4:8965:2014":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:12566:19401":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"11:667:8720":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:43886:3259":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"17:9887:16050":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"4:3183:24872":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:12470:23096":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:7592:15892":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"11:97:30647":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:2783:2033":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:40953:1808":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:1603:10378":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:21533:8383":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"5:5975:2689":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"4:9192:25576":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"4:10101:2698":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:44264:3249":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:4996:15583":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"11:1121:8728":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:10080:16089":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:21048:8377":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:6987:3065":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:14037:20191":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:12106:18899":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:4291:12919":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"4:12052:799":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"1:9296:194":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:10391:3183":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:47677:8404":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:5051:12997":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:22055:23278":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"5:1523:8738":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"16:7505:15886":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:1513:10368":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"4:860:2145":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"5:4194:2458":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:4049:2995":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"0:31:1671":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"6:1638:10380":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:13905:20177":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"11:2060:8727":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:1575:10375":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"4:11813:2533":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"5:261:2430":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"16:7833:15903":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"4:4163:8899":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:13854:20172":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"16:5882:15828":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:21637:21374":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"18:590:23290":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:10633:16143":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:13125:19438":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:11109:16233":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:12921:19424":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"16:7707:15898":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"16:3580:14922":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"6:4716:12959":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:9336:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"6:1595:10377":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:32173:2961":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"17:12118:18900":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:2756:2030":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:2766:2032":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:6239:31146":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:5843:15827":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:11924:18886":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"11:1027:14805":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"4:6429:2015":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:6142:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:13620:20156":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:43182:21112":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:43520:2714":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:5593:3084":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:2250:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:42727:68":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"16:7631:15894":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"4:12031:1539":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"17:9399:15996":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"16:6289:15841":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"5:7337:8715":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"5:4363:2461":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:9706:16002":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:7463:15882":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:7272:14451":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"4:643:8701":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:47847:8410":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"4:4623:8872":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:12878:19421":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"5:7211:2452":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:40474:23048":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"5:878:2438":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:14205:20200":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:4262:1977":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"4:8926:8989":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:21180:8369":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"4:8407:8960":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"4:8984:107":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:7586:13170":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"13:0:1889":{"crate_id":13,"path":["std_detect"],"kind":"module"},"4:3110:8852":{"crate_id":4,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"5:3238:8734":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:39702:20634":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"16:6667:14833":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:11943:18887":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"9:507:14689":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:13029:19431":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:10351:16128":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"16:3810:14949":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:6438:15852":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:7511:13160":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:9545:3166":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"4:4054:8877":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:40346:2537":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"4:2207:129":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"17:12161:18903":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:9505:145":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"6:4524:12943":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"4:8113:8805":{"crate_id":4,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"1:4267:1978":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:40252:3011":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:4489:12939":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"5:7396:21262":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"18:0:1899":{"crate_id":18,"path":["memchr"],"kind":"module"},"18:491:31842":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"4:7763:24151":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"17:8605:15960":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"15:288:14838":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:11923:3277":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:21200:8372":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"18:80:20228":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:11290:16005":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"4:7710:8704":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"4:12043:751":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"1:44016:3283":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"13:110:30701":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:7047:1976":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:3200:1992":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"0:29:1670":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"4:8389:8946":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"5:1273:8727":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:2105:16112":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:11178:16236":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:1747:23262":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"16:4965:15576":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:2859:2051":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:4650:12954":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:7855:15904":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:9734:16003":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"16:3441:14921":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:10225:3186":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"4:10760:25170":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"16:5028:15591":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:587:9484":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:7073:15875":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:22527:177":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:10280:16124":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"11:630:2683":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:434:14863":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:5067:15606":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"6:5793:13639":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:7523:13162":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:11872:18883":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:573:9482":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:44231:3293":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:8711:15982":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:7799:15902":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:1637:2901":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:7363:1967":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"4:850:2684":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"4:5393:8972":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"6:6565:9520":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:4938:12985":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"4:11304:25406":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:12671:19409":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"4:2591:8830":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:43485:3081":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:10486:16133":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:9274:3256":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:45622:8422":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:40517:3098":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:11045:16196":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"4:12054:1143":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"4:12047:1523":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"17:10529:16182":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"5:1138:28220":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:6744:14074":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"5:7199:8735":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"4:531:2491":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"1:2269:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"4:1979:184":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:10403:16129":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:3145:2057":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:10361:16123":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:9118:15991":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:2475:2733":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:2850:2049":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:42261:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"4:6425:1808":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"17:13707:20160":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:9946:222":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"4:9153:8996":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:14329:20208":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"4:3414:2458":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"4:12012:25202":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:13964:20183":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"18:707:3247":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:2511:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"6:532:9476":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"4:4495:8908":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:1911:10552":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"9:177:14791":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"4:6809:8997":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:46167:8390":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"4:7534:25793":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"5:4985:2458":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"5:1473:8718":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:11354:16007":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:13096:19436":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:46881:8397":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:4436:12932":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:6692:15862":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"5:35:2426":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"16:5590:15815":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"4:7731:8729":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"4:11050:2526":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:21749:8370":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"11:1068:2673":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:2541:14898":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"18:574:31850":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:13870:20174":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:9442:31163":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"11:1831:2471":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"14:215:14823":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:41789:2122":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"4:10529:8846":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"16:7679:15896":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:12435:19394":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:6573:10325":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:41798:2214":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"4:10825:2695":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"4:904:2471":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:13109:19437":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:9281:112":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:2697:226":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:5080:13001":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"4:4913:8933":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"16:7331:31141":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"4:923:8722":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"4:5080:25781":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"4:3984:8870":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:9655:16001":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:11416:16010":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"4:919:8721":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:1690:10385":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:44244:3248":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:2836:2046":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:9744:31652":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"0:0:1664":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"4:11287:2527":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"6:7540:13164":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:11696:16247":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"4:4184:8901":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"5:2049:2688":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"18:736:20242":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:5900:13648":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"4:9282:2285":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"5:5839:2452":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:44359:3240":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"14:202:9040":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:13083:19435":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:41566:23284":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"4:5561:8978":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"17:13069:19434":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:8388:2124":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:11568:16016":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"4:8236:8860":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:41747:2145":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:40132:21246":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"5:6798:2483":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"11:1858:8734":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"4:1888:8777":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"16:2825:14910":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:4396:15415":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"4:5049:25781":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:2322:125":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"6:5979:13652":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:7362:15878":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:41671:181":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"17:1184:16051":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:4606:12950":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"4:2919:128":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"5:7529:2471":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:12365:16190":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"16:2373:14891":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"4:12050:1522":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"4:881:8718":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:12448:151":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"6:4518:12942":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:22004:21317":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:43448:2713":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:3172:2061":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:5737:15824":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"5:6637:2430":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"4:1055:2671":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:39267:2063":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"4:8230:8861":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"5:822:2436":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"4:1814:8759":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"11:332:2420":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:41858:2683":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:11594:3275":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:6502:15856":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"4:8194:3090":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"17:12186:18905":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:0:500":{"crate_id":1,"path":["core"],"kind":"module"},"17:10863:16000":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:12346:16191":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:6711:14071":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:6713:14832":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:12004:18892":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:40162:3020":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:22593:2772":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:44427:3300":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"16:7494:15885":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:11034:16231":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"5:4846:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:13492:20149":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:44355:3238":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:494:9472":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:12659:19408":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:20877:8809":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"17:10266:16069":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:1527:10370":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:6724:15863":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:20743:21536":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:44067:3286":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:6175:15836":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"4:12045:753":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"1:45666:8423":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:13991:20186":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:9990:16044":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"16:5775:15825":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"11:793:8719":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:10249:16083":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"5:6079:2458":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:11241:16240":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"16:2352:14890":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"4:5824:2020":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:2156:593":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"16:2589:14900":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:3894:14985":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"16:4698:15525":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"16:6357:15847":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:2687:220":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"4:8549:2683":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"1:48075:8362":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:20915:8376":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"11:285:2664":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:47941:8352":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:11857:3244":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:10313:16126":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:10581:16164":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"4:4046:8875":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:11557:3273":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:48137:8364":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"4:1778:8749":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"1:3938:2458":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"14:7:14814":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"4:5779:2013":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:20879:8374":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:10013:16042":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:13923:20179":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:40405:3090":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:6688:10493":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"4:10535:8844":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"6:4740:12962":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:48098:8363":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:7599:14640":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:5994:15833":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"18:636:31855":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:2699:109":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"6:4678:8866":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:21747:8809":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"18:681:20246":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"5:1442:2145":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:40299:3058":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"4:5238:190":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"16:5959:15831":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:4568:12948":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"4:946:8724":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"4:7636:8809":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"6:6648:10510":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:5567:15814":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:4:1026":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"17:9716:31792":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:12078:112":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:43186:3203":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:12840:19418":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:40376:3081":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:6939:15872":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"5:1672:2430":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"7:79:14664":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"4:1570:8731":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"18:699:20248":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:40266:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:595:9485":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:14015:20189":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:14359:20211":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:2514:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"6:4908:12982":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:10175:16000":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:9016:15811":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:42943:3167":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:44084:3287":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:4949:12987":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:43511:3192":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:2914:1993":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:5301:15792":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:4014:21508":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"14:221:14824":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:1681:10384":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:2421:14893":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"16:5342:15809":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:42222:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:14350:20210":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:7418:159":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:2317:188":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:11992:18891":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:5535:3095":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"5:676:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:47599:8432":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"5:2243:28300":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:6671:10495":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"4:3998:8872":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:13949:20181":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"5:6306:8998":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:32300:2971":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:13591:20154":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"4:5629:2503":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:3651:2145":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:6128:15835":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:4729:12961":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:41586:21353":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:11210:16237":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:2842:2047":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"9:237:8961":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:1590:10376":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:9497:141":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"4:7874:8801":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"1:22101:21332":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"6:1702:8893":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"4:7904:119":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:2749:106":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:22428:178":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"6:6171:13690":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"4:4315:8903":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"11:2033:8726":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"4:5558:8977":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"6:4955:12988":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:9485:31492":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:1709:10387":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:12727:19412":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:10377:3187":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:13999:20187":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:3635:14923":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"5:7253:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"4:6541:2018":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:13732:20162":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:11905:18885":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:13787:20167":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"4:3674:8859":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"4:1924:661":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"5:3735:2688":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:14007:20188":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:11056:16232":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"15:327:14843":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"4:12044:752":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"17:12711:19411":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:2926:14914":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:21312:8372":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:4704:12958":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:4824:12973":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:2929:1965":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"16:2962:14915":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:11164:16226":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"4:638:8700":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:7310:121":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:8899:15988":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"4:11996:25401":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:10430:16130":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:10405:3188":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:4794:12969":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"4:7372:25405":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:12757:19413":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:256:31476":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"11:1826:2452":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:2694:1962":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"17:13830:20170":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:44406:122":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:47885:8444":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"4:1426:144":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:11118:16234":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:30455:21231":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"4:4701:8907":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:6028:13658":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"4:5970:2502":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"16:4032:15099":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:13140:19439":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:2815:2041":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"4:8330:8935":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:45974:8462":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:40271:3059":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:48022:8359":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:6015:13656":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"5:3178:8732":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:10253:16070":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:40939:3066":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:13303:20142":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:11617:3272":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"16:2293:14861":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:2901:117":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"4:12028:374":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"5:276:1969":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:4328:12922":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:2698:225":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"4:8834:8981":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:2520:133":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:22146:23247":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:21118:8809":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:12936:19425":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"6:4475:12937":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"4:10103:25784":{"crate_id":4,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"1:21062:2935":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"11:736:8718":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:46386:23189":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"4:6465:2021":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:123:9153":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:11454:16012":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"4:9027:25423":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"5:1776:2471":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:41947:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:8387:2125":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:13155:16017":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:40488:3096":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"4:1561:2452":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:8632:15980":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:13659:16045":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:46691:8437":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:9866:16031":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"5:5318:2430":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"5:1011:2430":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:10143:3185":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"17:8794:15985":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:40539:3099":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:13757:20164":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:6625:8937":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:4862:12978":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:5044:12996":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"4:9110:219":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:40184:3012":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"4:11231:8994":{"crate_id":4,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:42422:3149":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:45688:8428":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:10161:16072":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:4753:15532":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:3867:14982":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"15:306:14839":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:14301:20206":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"4:1776:8748":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"16:5807:15826":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"5:5923:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:11398:3178":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:46265:8408":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:21972:21247":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:9475:15997":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:42662:23272":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"6:4973:12990":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:7295:14453":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:41883:183":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"5:2131:2449":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:10110:16074":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"4:1839:2693":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"6:6589:9354":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"4:6069:2504":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"15:394:14850":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"16:4441:15436":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:2359:189":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:1075:16043":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:43700:3262":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:46067:8430":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"4:3298:8844":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"4:635:8699":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:3321:69":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"4:7523:15979":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:49943:8385":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"17:12905:19423":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:13043:19432":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:13574:20141":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:4413:1987":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"4:10532:8848":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:2925:1964":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:10323:16127":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"16:7061:30800":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:14315:20207":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:6796:14076":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"11:1822:2145":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:2820:2042":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"18:507:31850":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:9300:3153":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:12826:19417":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:6323:15844":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:3389:2964":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"4:12001:8706":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"16:2781:14908":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"4:4740:8886":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:6763:15864":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"4:3186:24867":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"4:6193:25410":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:7099:15876":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"5:1514:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:48045:8360":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:2932:1966":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"4:4635:25627":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:43836:3264":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"6:4800:12970":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:46335:8464":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"4:12035:1390":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"1:2752:2949":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"1:12522:3324":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"11:844:8725":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:12642:107":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"6:5008:12993":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:14403:20214":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:8997:15961":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:9665:31378":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"11:2180:30646":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:3166:2059":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"4:7736:8730":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:11669:16246":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:11888:18884":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:42436:3150":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:7278:14452":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:12526:19398":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:42429:3148":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:40742:3105":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:2133:16071":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:10339:16097":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:43682:3263":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:4380:12926":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"4:10161:25755":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:9913:16041":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"4:3442:8806":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"5:3212:8731":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:47489:8398":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:10799:16147":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"5:2959:2207":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"4:7920:8838":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"16:5553:15813":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:10458:16131":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"4:12036:1420":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"16:6977:15873":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:4872:12979":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:8542:15962":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:11812:2767":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:44566:195":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"17:10906:16150":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:5100:15615":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"5:2960:29788":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"4:4742:8887":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:47981:8356":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"11:403:30640":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:10419:3184":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:10038:16037":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"5:1302:8728":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"5:1411:2683":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:5639:15818":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:22167:2771":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"4:10815:119":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:9290:3149":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"14:160:14814":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:40526:3085":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:4754:12964":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:10444:16095":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:41520:3115":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:8924:15989":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:20927:20870":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"16:8043:15906":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:234:210":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"5:4426:2461":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:20711:21370":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:22028:2770":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:41908:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:13673:20157":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:4848:12976":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:10671:16188":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"4:6978:26174":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:45897:8395":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:44622:161":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:5890:13647":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:2594:116":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"6:4469:12936":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:10945:16228":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:11815:18880":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:6130:13688":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:2166:2935":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:4789:21608":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:11020:16200":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:11234:16239":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"16:7433:15880":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"16:6018:15834":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:9223:15994":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:10812:16148":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:5068:12999":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"4:3219:8846":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:10904:3196":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"4:1558:2145":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:32213:2963":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"18:582:2956":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:4695:12957":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:4384:1985":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:12133:18901":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"4:5498:8976":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"17:13368:20144":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:13548:20151":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:42300:2010":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:9939:16039":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:5651:15819":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:20929:2935":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:44383:3237":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"4:8864:8993":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:3160:135":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"4:11033:2524":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:42025:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:30425:2924":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:30441:68":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"16:4724:15527":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:4781:12967":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:4506:12941":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"4:10427:8979":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:3082:2056":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:0:1897":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:39455:2055":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"17:9528:31401":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"11:2186:30650":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:13513:20150":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:12851:19419":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:47950:8353":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"16:7763:15901":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:39345:198":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"17:9344:31184":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"5:3330:2471":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"4:7857:8800":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:13971:20184":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:2791:2040":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"5:3581:2683":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:4456:12934":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:12815:19416":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:10303:16125":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"4:12040:648":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"5:5769:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:40396:3082":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:12354:16189":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"16:8252:15916":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"0:28:1664":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"17:13055:19433":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:47801:8459":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"4:9020:25757":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:1630:592":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"4:2402:1903":{"crate_id":4,"path":["std","io"],"kind":"module"},"6:5920:13649":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"11:2168:30648":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:9977:16001":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:39522:1984":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"6:4723:12960":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"4:4738:8883":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:14150:20195":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"4:10470:2521":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"16:7012:30795":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:11600:16018":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"4:1917:8778":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"1:46957:8409":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:14282:20205":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:40207:3014":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:44371:3241":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:4304:12920":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:1631:10379":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"4:4633:25625":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"17:11498:16014":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"4:6161:2509":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:12605:19404":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:11371:16008":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:2874:14912":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"4:8204:3104":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"11:1538:14808":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:7648:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:22791:2773":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"6:5074:13000":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:47347:8426":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:10094:2683":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:13778:20166":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"14:40:18880":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:7505:13159":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"4:9032:25413":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:2474:8809":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"4:10956:8976":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:10199:16078":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:4609:3005":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"16:4564:15463":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:9850:16030":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"11:365:2422":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:39369:199":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:6303:15842":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:41657:3120":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:43498:3194":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"9:0:1891":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:44439:3301":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"4:5745:2011":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:9952:16038":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:2695:1991":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:22063:21335":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:4315:12921":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:4929:12984":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"5:2461:2678":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:22494:176":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:8659:15981":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"4:12049:1521":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"5:629:28437":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"4:11535:8864":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:21101:8373":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"17:11127:16014":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:9296:15963":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:13557:20152":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:22117:21342":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:40549:3100":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:2637:14902":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:26048:2769":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"14:0:1895":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"4:9115:8994":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"5:1257:8726":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:40226:3016":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:42745:128":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"6:6598:14067":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"4:6594:2022":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"4:8818:8980":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"4:1554:2683":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:30619:21313":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:2741:2968":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"11:1818:2683":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"4:6538:2017":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:5025:12995":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"4:12046:749":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"17:10223:16076":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:530:30803":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:13795:20168":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"4:3499:3024":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"1:7272:152":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:5626:15817":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:6022:13657":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:13683:20158":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:41731:2683":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:9292:3150":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"4:8217:3185":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"17:13803:20169":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:46119:8442":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:40111:2996":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"16:8021:15905":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"4:12041:650":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"16:4900:15559":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"3:0:1888":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"4:8334:8937":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:45937:8407":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:9806:16027":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:39411:201":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:1756:2705":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"4:4567:8925":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:42181:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:43736:3187":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"4:5306:120":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"5:2690:28370":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:4413:12929":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"11:749:2452":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:4496:12940":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:9294:3151":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:482:9470":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:2168:2936":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"17:11623:16019":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:2846:2048":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:7231:3080":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"4:11617:14847":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"5:2970:29784":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:13016:19430":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:10293:16090":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"4:9202:25567":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"5:1503:8721":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:9875:16056":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:12254:19386":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:4536:15459":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"5:7545:2475":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:41503:3114":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:13427:20145":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:46803:8391":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:12502:19397":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:22758:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:10263:3199":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:21284:8368":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:40962:3068":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:21988:23250":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:41622:3118":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:4550:12946":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"5:1102:28219":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:42103:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:7250:9430":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"4:4904:8932":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"4:1576:8732":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"4:4171:8900":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:42064:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"4:8224:3259":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"16:2857:14911":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:5987:13653":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"5:6769:2469":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:13697:20159":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:21186:8371":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"9:450:14686":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:2984:2052":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"10:0:1892":{"crate_id":10,"path":["adler"],"kind":"module"},"1:9744:2494":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"16:2567:14899":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"4:6145:2506":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:3185:23455":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:10298:3189":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:4963:12989":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:14417:20215":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:11633:3274":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"4:2555:2496":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"11:805:8723":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"4:6894:2513":{"crate_id":4,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"6:7517:13161":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:45712:8388":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"5:7349:8716":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"4:7574:2516":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:43608:3257":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:47141:8392":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"4:2216:8784":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"7:32:14657":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"5:7191:2145":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"11:1852:8733":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"16:3058:14918":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"4:7020:2514":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:43924:3268":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:40219:3015":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"14:31:14814":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:6820:14078":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:14:1868":{"crate_id":1,"path":["core","write"],"kind":"macro"},"16:2663:14903":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:44375:3242":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"5:7221:2442":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:13771:20165":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:22725:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:41739:2684":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:9286:120":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:21303:8809":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:1649:10381":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:6057:14860":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"4:1565:2471":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:39508:15915":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"17:9048:15965":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:11866:3247":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:12631:19406":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"5:2170:28334":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:9298:3152":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"4:619:8697":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:44132:3288":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:41986:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"4:8173:8808":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"1:41537:3116":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:45836:8441":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:5387:2458":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:11832:18881":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"6:474:9469":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"4:8997:25280":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:2966:2062":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"4:4235:8902":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:4258:207":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"18:624:31849":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"4:9482:8803":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"5:2966:29783":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:11329:16006":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"4:8008:8840":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:46097:8436":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"4:4155:8898":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:8086:15908":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"4:3739:8862":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:11098:16199":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"4:9170:25779":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"1:2517:149":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"4:11603:25787":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:47970:8355":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:4768:391":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:9727:2548":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:12065:18896":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"6:5967:13651":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:4785:15540":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:11272:16004":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:8265:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:2399:14892":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:7584:15891":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:6540:15858":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"11:119:2418":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"5:207:2428":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:21866:20662":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:2777:2034":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:46645:8431":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"4:7725:8705":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:1696:10386":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:9604:16000":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:42952:145":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:12424:19393":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"4:2882:2499":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"11:1517:2676":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:43590:3254":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"4:11155:8981":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:40946:23043":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"16:7553:15890":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:2854:2050":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"18:481:20252":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:42964:8961":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"6:1717:10388":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"18:521:20251":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"4:10251:8984":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"4:9475:129":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:22179:2775":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:7445:15881":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"4:11194:8813":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:23238:2768":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:40465:3094":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:39487:2058":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"4:414:165":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"4:481:2490":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:12864:19420":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:7407:15879":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"4:8497:8963":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"1:2606:128":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"4:7759:8767":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:7515:15887":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:46311:8463":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:41815:210":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:44053:3285":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:43530:3193":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:1545:10372":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:7412:8780":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"5:2223:28412":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"11:1611:2424":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"16:7525:15888":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"11:836:8724":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"4:8480:8962":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"5:2962:28373":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"16:5940:15830":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"4:915:8720":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"4:12037:1504":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"1:20683:2956":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:22626:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:41756:2121":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"6:7552:13166":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:6726:14073":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"18:599:31841":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:12592:19403":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:2353:182":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"5:7182:8736":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:2935:1813":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:9540:3165":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"4:10968:25207":{"crate_id":4,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"4:3221:8847":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:1544:2458":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"4:8566:8966":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:8977:21573":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"5:1464:8717":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:4420:12930":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:13179:19441":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:3220:14919":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:43459:3195":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"4:724:142":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:46289:8457":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:8809:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:554:9479":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:9246:3024":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"17:11967:18889":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:12077:18897":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:6607:14068":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:2825:2043":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:547:9478":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"4:1976:185":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:14177:20197":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:3295:14920":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"9:426:14688":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:10520:16136":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"16:5916:15829":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:21:689":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"1:44379:3236":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:1557:10373":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"5:4002:2452":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"4:8990:8681":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"9:52:14705":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:10981:16203":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:4463:12935":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:2803:14909":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:4117:1996":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"7:0:1567":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:5689:15821":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"4:9978:21350":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:4002:21537":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:7546:13165":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:45818:8435":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"5:5612:2469":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:2795:2038":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:10597:16185":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"16:6427:15851":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"4:8942:8992":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:7665:15895":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"4:3940:8867":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:12377:19390":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:526:9475":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:2715:14905":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:40313:3033":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"typedef"},"1:1733:2952":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:6850:14081":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"4:6248:2502":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"4:10765:25706":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:39329:200":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"4:2212:2489":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"1:21528:8375":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"16:4841:15548":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:4638:12953":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:6805:14077":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"16:5972:15832":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:40200:3013":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:40105:2992":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"18:614:31845":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:2709:1990":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"17:13435:20146":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"4:7887:130":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"1:44196:3290":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:44221:3292":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:46243:8402":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:1821:1995":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"4:1761:615":{"crate_id":4,"path":["std","env"],"kind":"module"},"4:555:2692":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:47961:8354":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:10555:16184":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:4764:12965":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:8152:15912":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:2164:16096":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:42718:71":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"6:4984:12991":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:6872:15868":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"5:7382:8782":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"4:8356:8885":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"4:1587:8734":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"4:8150:8851":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"5:6886:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"4:11167:25556":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:22560:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:44210:3291":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"5:3720:2685":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:5994:13654":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:12457:19395":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:10654:16163":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:40456:3093":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"16:55:14858":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"17:9614:31473":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"10:44:14796":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"4:4032:8873":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:1663:10382":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:4887:12980":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"4:6296:206":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"4:9487:2520":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:47923:8465":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"5:1288:2671":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:13847:20171":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:14026:20190":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"4:8285:8904":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:14341:20209":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"4:3934:8868":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:45919:8401":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:10097:16075":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"4:12033:1061":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"17:11753:16249":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:41722:2144":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"16:2519:14897":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:1506:10367":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:9759:2553":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:44548:205":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"16:4506:15453":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:8068:15907":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:8841:15986":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:12952:19426":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"5:3204:8733":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:11144:16225":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:5775:13638":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:47996:8357":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:6900:15870":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:1536:10371":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"4:7912:24864":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:42443:3151":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:13448:20147":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:12646:19407":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:582:15979":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"5:5362:9034":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:0:1898":{"crate_id":17,"path":["object"],"kind":"module"},"16:2443:14894":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"4:952:8725":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:4190:1805":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"17:14102:20194":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"5:2035:2685":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"11:760:2471":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"8:0:1890":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"6:4748:12963":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"16:8125:15910":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:40588:3103":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:6791:23044":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"4:5379:8971":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"1:22461:175":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"4:7661:8687":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"6:5955:13650":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:11726:16248":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"4:3970:8869":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:6986:15874":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"4:7928:2685":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:14236:20203":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"4:12053:1577":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"1:22040:21324":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:13167:19440":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"4:586:8696":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:2799:2037":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:21134:8367":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"6:6720:14072":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:1973:16077":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:14380:20212":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:32209:24151":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:40356:3057":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"17:12303:19387":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:7268:134":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"4:1582:8733":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:10969:16230":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:39389:202":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:30513:21280":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"6:653:9532":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"4:11044:2525":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"4:12055:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"17:13957:20182":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:11264:16241":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:6886:15869":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"11:2174:24404":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:9840:16029":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:9777:16026":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:7255:2121":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:11250:16204":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"18:538:20256":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"4:8878:8990":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"4:7852:8803":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"16:2737:14906":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:11428:16011":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:10832:16144":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:8740:15983":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:9409:31557":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"4:3736:8863":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:40192:2992":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:39314:2054":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:12053:18895":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:400:15977":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"4:3180:26027":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"4:6356:166":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:45734:8394":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"4:8457:8961":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"16:5612:15816":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:43167:3227":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:14163:20196":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:2900:14913":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"5:7245:2145":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"4:5413:8973":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"14:165:14815":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:5793:30949":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"11:399:30645":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:41874:2145":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:7718:2993":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:4664:12955":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:12690:140":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"4:4637:25629":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:40558:3101":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:2611:14901":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:2332:14889":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"4:2361:8787":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"16:5704:15822":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"4:8211:3256":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"16:8176:15914":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"4:7656:8685":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"11:311:30638":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"11:723:8717":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"4:6608:2023":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"11:657:2145":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"11:1103:14806":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:4592:15467":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:44387:3299":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"4:1064:8727":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"16:6470:15854":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:6160:30959":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:7281:1968":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:1569:10374":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"4:8806:186":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"4:8910:8991":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:4476:15447":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:5058:12998":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:4944:12986":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"4:8161:2695":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"1:3237:1994":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:42672:68":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:12394:19391":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:5799:13640":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:42690:110":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:30989:183":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"17:11084:16197":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"4:2631:8839":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"4:940:2667":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:7529:13163":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:2527:237":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"16:6531:2417":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"6:4446:12933":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:10390:16099":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"4:4698:8934":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}