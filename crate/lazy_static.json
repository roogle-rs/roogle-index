{"root":"0:0:1579","crate_version":"1.4.0","includes_private":false,"index":{"1:13798:54588":{"id":"1:13798:54588","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3151:74":{"id":"1:3151:74","crate_id":1,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3153:2053"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3352:1866","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:13756:57259":{"id":"1:13756:57259","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"str::matches":"4:15750:1744","self::pattern":"1:13302:2418","prim@char":"4:15744:1739","`DoubleEndedIterator`":"1:8687:120"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"1:49935:2759","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13312:2419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13312:2419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13327:2421","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13800:57272":{"id":"1:13800:57272","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"4:15744:1739"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"1:50012:2765","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3637:1977":{"id":"1:3637:1977","crate_id":1,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3639:238","1:3640:206","1:3641:53733"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:14510:2589":{"id":"1:14510:2589","crate_id":1,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:14511:51110","1:14512:51111","1:14513:51112","1:14514:51113","1:14515:51114","1:14516:51115","1:14517:2091"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3446:1952":{"id":"1:3446:1952","crate_id":1,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3448:267"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3505:1964":{"id":"1:3505:1964","crate_id":1,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3507:355"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13701:2785":{"id":"1:13701:2785","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:15744:1739"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"1:49683:2745","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10550:189":{"id":"1:10550:189","crate_id":1,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10551:661"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3356:217":{"id":"1:3356:217","crate_id":1,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6648:2961":{"id":"4:6648:2961","crate_id":4,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6649:56511"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10546:2332":{"id":"1:10546:2332","crate_id":1,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10547:661"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13682:57251":{"id":"1:13682:57251","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"4:15750:1744"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6577:2969":{"id":"4:6577:2969","crate_id":4,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6578:54128"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"4:10355:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13709:53271":{"id":"1:13709:53271","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:15744:1739","self::pattern":"1:13302:2418"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13312:2419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6746:2974":{"id":"4:6746:2974","crate_id":4,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6747:56547"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8687:120":{"id":"1:8687:120","crate_id":1,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8688:2055","1:8689:2056","1:8690:2057","1:8691:2058","1:8695:2059","1:8698:2060"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8844:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6165:2887":{"id":"5:6165:2887","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8455:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8455:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13312:2419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13791:57271":{"id":"1:13791:57271","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"1:13302:2418","prim@char":"4:15744:1739"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13312:2419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13312:2419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13327:2421","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2946:184":{"id":"1:2946:184","crate_id":1,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2948:998","1:2949:827","1:2950:793","1:2951:714","1:2952:697"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3352:1866","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2900:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13676":{"id":"1:13676","crate_id":1,"name":null,"span":null,"visibility":{"restricted":{"parent":"1:12755:1342","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["1:13677:794","1:13678:2061","1:13679:57249","1:13680:57250","1:13682:57251","1:13685:54421","1:13686:57252","1:13687:305","1:13688:54686","1:13689:1584","1:13691:50915","1:13693:50916","1:13695:50917","1:13697:3159","1:13698:57253","1:13699:54705","1:13700:54706","1:13701:2785","1:13702:2447","1:13703:3162","1:13704:14290","1:13705:14328","1:13706:3718","1:13707:57254","1:13708:14319","1:13709:53271","1:13712:54721","1:13715:54722","1:13718:2102","1:13722:2060","1:13726:54140","1:13729:13900","1:13732:54715","1:13735:57255","1:13738:57256","1:13741:54717","1:13744:54719","1:13747:57257","1:13750:57258","1:13753:1766","1:13756:57259","1:13759:57260","1:13762:57261","1:13765:57262","1:13767:57263","1:13769:57264","1:13771:57265","1:13772:57266","1:13773:57267","1:13776:57268","1:13779:33625","1:13782:54723","1:13785:57269","1:13788:57270","1:13791:57271","1:13794:2655","1:13796:2960","1:13797:54587","1:13798:54588","1:13799:54589","1:13800:57272","1:13802:3082","1:13803:57273"],"negative":false,"synthetic":false,"blanket_impl":null}},"4:4771:2983":{"id":"4:4771:2983","crate_id":4,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4772:2613","4:4773:56535"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13762:57261":{"id":"1:13762:57261","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"`DoubleEndedIterator`":"1:8687:120","self::pattern":"1:13302:2418","prim@char":"4:15744:1739","str::match_indices":"4:15750:1744"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"1:49881:2756","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13312:2419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13312:2419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13327:2421","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3655:1968":{"id":"1:3655:1968","crate_id":1,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3657:181","1:3658:754"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3352:1866","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:8602:2284":{"id":"1:8602:2284","crate_id":1,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8604:2118"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3853:1896":{"id":"1:3853:1896","crate_id":1,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3352:1866","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:14027:138":{"id":"1:14027:138","crate_id":1,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:14028:181","1:14029:1014"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13703:3162":{"id":"1:13703:3162","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"1:49699:2747","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10483:2325":{"id":"1:10483:2325","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10484:1535","1:10485:51289","1:10487:51290"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5432:3061":{"id":"4:5432:3061","crate_id":4,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5433:54429","4:5434:3468"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"4:10355:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13686:57252":{"id":"1:13686:57252","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"4:6472:3069":{"id":"4:6472:3069","crate_id":4,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6473:56586","4:6474:54274","4:6475:54275","4:6476:54277","4:6477:54276","4:6478:54278","4:6479:54279","4:6480:54281","4:6481:54282","4:6482:54285","4:6483:54286","4:6484:54287","4:6485:54288","4:6486:54289","4:6487:54290","4:6488:54283","4:6489:54284"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13718:2102":{"id":"1:13718:2102","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"prim@char":"4:15744:1739","self::pattern":"1:13302:2418","`None`":"1:47750:176"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13312:2419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5906:3366":{"id":"5:5906:3366","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5908:181","5:5909:433"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3352:1866","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:13797:54587":{"id":"1:13797:54587","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1579":{"id":"0:0:1579","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[215,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\n# #[macro_use]\n# extern crate lazy_static;\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.4.0\")]","#![no_std]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:39:1585","0:41:1586","0:38:1579"],"is_stripped":false}},"4:4486:2325":{"id":"4:4486:2325","crate_id":4,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4487:1767","4:4488:56987","4:4490:56988","4:4491:3641","4:4492:56989","4:4493:56990","4:4494:51290","4:4503:2091"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13241:2594":{"id":"1:13241:2594","crate_id":1,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13242:126","1:13243:53461"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3157:135":{"id":"1:3157:135","crate_id":1,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3159:682"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"src/inline_lazy.rs","begin":[16,0],"end":[16,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"import","inner":{"source":"self::std::sync::ONCE_INIT","name":"ONCE_INIT","id":"4:8702:1713","glob":false}},"1:4078:68":{"id":"1:4078:68","crate_id":1,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4079:1431"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"1:13750:57258":{"id":"1:13750:57258","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13312:2419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13312:2419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13327:2421","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13747:57257":{"id":"1:13747:57257","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13312:2419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5520:3068":{"id":"4:5520:3068","crate_id":4,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5521:54034","4:5522:54295"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3583:1897":{"id":"1:3583:1897","crate_id":1,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3584:546"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Deref","id":"1:3570:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:24042:2382":{"id":"1:24042:2382","crate_id":1,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:24043:2393"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:24038:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"1:3357:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3352:1866":{"id":"1:3352:1866","crate_id":1,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:23738:28382":{"id":"1:23738:28382","crate_id":1,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23739:51100","1:23740:51101","1:23741:51102"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialOrd","id":"1:23733:2394","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3807:225":{"id":"1:3807:225","crate_id":1,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3808:181","1:3809:1974","1:3810:687","1:3811:370"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FromResidual","id":"1:3812:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"1:3807:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10552:2334":{"id":"1:10552:2334","crate_id":1,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10553:661"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3442:1949":{"id":"1:3442:1949","crate_id":1,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3443:181","1:3444:914"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13735:57255":{"id":"1:13735:57255","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"prim@char":"4:15744:1739","str::split":"4:15750:1744","self::pattern":"1:13302:2418","`DoubleEndedIterator`":"1:8687:120","str::rsplit_terminator":"4:15750:1744"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"1:49763:2751","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13312:2419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3415:1946":{"id":"1:3415:1946","crate_id":1,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3417:181","1:3418:266"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3518:1967":{"id":"1:3518:1967","crate_id":1,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3520:1239"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8652:1870":{"id":"1:8652:1870","crate_id":1,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8654:2062","1:8656:2063","1:8657:2064"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13689:1584":{"id":"1:13689:1584","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:47750:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:11175:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11175:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3570:116":{"id":"1:3570:116","crate_id":1,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3571:222","1:3572:544"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13753:1766":{"id":"1:13753:1766","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"prim@char":"4:15744:1739","`DoubleEndedIterator`":"1:8687:120","self::pattern":"1:13302:2418","str::matches":"4:15750:1744"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"1:49917:2758","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13312:2419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13687:305":{"id":"1:13687:305","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"4:15761:1753","str::as_mut_ptr":"4:15750:1744"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2845:2265":{"id":"1:2845:2265","crate_id":1,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2847:50480"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3352:1866","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2842:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3430:1947":{"id":"1:3430:1947","crate_id":1,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3432:181","1:3433:559"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3603:132":{"id":"1:3603:132","crate_id":1,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3605:181","1:3606:379"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6344:3084":{"id":"4:6344:3084","crate_id":4,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6345:56630","4:6346:56631"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13729:13900":{"id":"1:13729:13900","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:15744:1739","self::pattern":"1:13302:2418"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"1:13094:2718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13312:2419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8712:1869":{"id":"1:8712:1869","crate_id":1,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8713:794","1:8714:2061"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8844:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:4504:3000":{"id":"4:4504:3000","crate_id":4,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4505:56894","4:4506:36350","4:4507:56896","4:4508:56895"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3467:1960":{"id":"1:3467:1960","crate_id":1,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3468:181","1:3469:953"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13773:57267":{"id":"1:13773:57267","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"1:13302:2418","prim@char":"4:15744:1739"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13312:2419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13312:2419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:13332:2422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10816:2397":{"id":"1:10816:2397","crate_id":1,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10817:146","1:10818:13691","1:10819:51071"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8844:157":{"id":"1:8844:157","crate_id":1,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8845:2065","1:8846:923","1:8847:2067","1:8850:2068","1:8851:496","1:8853:2069","1:8856:2070","1:8857:2071","1:8858:2072","1:8859:2073","1:8861:2074","1:8863:2075","1:8864:2076","1:8866:842","1:8869:2077","1:8876:2078","1:8878:2079","1:8881:2080","1:8882:2081","1:8883:2082","1:8885:2083","1:8887:2084","1:8890:1310","1:8891:2085","1:8892:2086","1:8896:2087","1:8899:2088","1:8900:2089","1:8901:2090","1:8903:2091","1:8904:1876","1:8906:2092","1:8909:2093","1:8911:2094","1:8921:2095","1:8936:2096","1:8938:2097","1:8942:2098","1:8951:2099","1:8954:2100","1:8956:2101","1:8959:277","1:8966:295","1:8973:2102","1:8980:2103","1:8989:2104","1:8999:1015","1:9006:2105","1:9013:2106","1:9014:2107","1:9015:2108","1:9027:2109","1:9034:2110","1:9046:2111","1:9053:2112","1:9054:2113","1:9059:2114","1:9062:2115","1:9065:2116","1:9066:2117","1:9068:2118","1:9070:2119","1:9072:416","1:9075:2120","1:9078:998","1:9081:2121","1:9084:605","1:9087:2122","1:9090:908","1:9092:827","1:9094:793","1:9096:714","1:9098:697","1:9100:2123","1:9101:2124","1:9109:2125"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:23733:2394":{"id":"1:23733:2394","crate_id":1,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23734:1272","1:23735:1271","1:23736:1269","1:23737:1268"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialEq","id":"1:23145:2598","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13706:3718":{"id":"1:13706:3718","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"1:49967:2760","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13759:57260":{"id":"1:13759:57260","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:13302:2418","str::rmatch_indices":"4:15750:1744","prim@char":"4:15744:1739","`DoubleEndedIterator`":"1:8687:120"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"1:49863:2755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13312:2419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3420:1951":{"id":"1:3420:1951","crate_id":1,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3422:181","1:3423:1357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13732:54715":{"id":"1:13732:54715","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"`DoubleEndedIterator`":"1:8687:120","prim@char":"4:15744:1739","str::split":"4:15750:1744","self::pattern":"1:13302:2418"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"1:49731:2721","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13312:2419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13312:2419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13327:2421","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:14042:150":{"id":"1:14042:150","crate_id":1,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:14043:181","1:14044:150","1:14045:768"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:23208:2383":{"id":"1:23208:2383","crate_id":1,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:23198:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3495:1962":{"id":"1:3495:1962","crate_id":1,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3497:181","1:3498:1238"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2867:104":{"id":"1:2867:104","crate_id":1,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2868:409","1:2869:411"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3501:1963":{"id":"1:3501:1963","crate_id":1,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3503:353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3450:1956":{"id":"1:3450:1956","crate_id":1,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3452:1358"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3597:130":{"id":"1:3597:130","crate_id":1,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3599:377"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3600:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:844:223":{"id":"5:844:223","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:845:2128","5:846:2129","5:847:2130"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10542:2330":{"id":"1:10542:2330","crate_id":1,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10543:661"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10540:119":{"id":"1:10540:119","crate_id":1,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10541:661"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8643:151":{"id":"1:8643:151","crate_id":1,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8644:2065","1:8645:2066","1:8646:769"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3659:1969":{"id":"1:3659:1969","crate_id":1,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3661:755"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3352:1866","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Index","id":"1:3655:1968","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3148:75":{"id":"1:3148:75","crate_id":1,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3150:306"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3352:1866","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:3462:1955":{"id":"1:3462:1955","crate_id":1,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3464:1105"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6224:2969":{"id":"4:6224:2969","crate_id":4,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6225:3336","4:6226:3337","4:6227:54308","4:6228:54309","4:6230:54313","4:6232:54310","4:6233:54311","4:6235:54312"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"4:10355:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:2900:183":{"id":"1:2900:183","crate_id":1,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2902:605","1:2903:908"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3352:1866","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:9124:2314":{"id":"1:9124:2314","crate_id":1,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8844:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3509:1965":{"id":"1:3509:1965","crate_id":1,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3511:358"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5504:3066":{"id":"4:5504:3066","crate_id":4,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5505:53942","4:5506:53944","4:5507:53943","4:5508:53945"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3388:1867":{"id":"1:3388:1867","crate_id":1,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3458:1953":{"id":"1:3458:1953","crate_id":1,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3460:560"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10771:142":{"id":"1:10771:142","crate_id":1,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10772:716","1:10774:50548"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3436:1950":{"id":"1:3436:1950","crate_id":1,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3438:181","1:3439:1104"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3231:115":{"id":"1:3231:115","crate_id":1,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3232:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6186:54585":{"id":"5:6186:54585","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"4:15750:1744"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8455:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4866:2498":{"id":"1:4866:2498","crate_id":1,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4867:2065","1:4868:50817","1:4869:2068"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6498:224":{"id":"5:6498:224","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6499:1399"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13715:54722":{"id":"1:13715:54722","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:15744:1739","self::pattern":"1:13302:2418"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13312:2419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13312:2419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13327:2421","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13680:57250":{"id":"1:13680:57250","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:7582:3183":{"id":"4:7582:3183","crate_id":4,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:7583:56891"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:38:1579":{"id":"0:38:1579","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[167,0],"end":[179,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"kind":"macro","inner":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"},"1:8167:2317":{"id":"1:8167:2317","crate_id":1,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8168:51328","1:8169:51329","1:8170:51326","1:8171:51324","1:8172:51330","1:8173:51327","1:8174:51325"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2867:104","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2946:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10554:2335":{"id":"1:10554:2335","crate_id":1,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10555:661"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8639:136":{"id":"1:8639:136","crate_id":1,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8641:685"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13321:2417":{"id":"1:13321:2417","crate_id":1,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:13323:2440","1:13324:923","1:13325:51031","1:13326:51032"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5574:3071":{"id":"4:5574:3071","crate_id":4,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5575:56234"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"4:10355:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:11175:214":{"id":"1:11175:214","crate_id":1,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:11177:181","1:11178:1584","1:11179:50915","1:11180:50916","1:11181:50917","1:11182:754","1:11183:755"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3352:1866","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:11166:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6187:54586":{"id":"5:6187:54586","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"4:15750:1744"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8455:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6646:2964":{"id":"4:6646:2964","crate_id":4,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6647:54618"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6246:2972":{"id":"4:6246:2972","crate_id":4,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6247:56557","4:6248:36500","4:6249:56558","4:6250:56559","4:6251:56560","4:6252:56561"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"4:10355:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3347:211":{"id":"1:3347:211","crate_id":1,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2905:124":{"id":"1:2905:124","crate_id":1,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2900:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13799:54589":{"id":"1:13799:54589","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6164:57908":{"id":"5:6164:57908","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:1871","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8200:3372","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:1871","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8200:3372","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13796:2960":{"id":"1:13796:2960","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3359:220":{"id":"1:3359:220","crate_id":1,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12742:2953":{"id":"1:12742:2953","crate_id":1,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:12743:2065","1:12744:51062"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2936:177":{"id":"1:2936:177","crate_id":1,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2937:416","1:2938:2106","1:2939:2107","1:2940:2127"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2905:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2946:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3890:1979":{"id":"1:3890:1979","crate_id":1,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13707:57254":{"id":"1:13707:57254","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"1:49977:2761","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4129:2504":{"id":"1:4129:2504","crate_id":1,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4130:51005"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13708:14319":{"id":"1:13708:14319","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"1:50005:2764","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13771:57265":{"id":"1:13771:57265","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:41:1586":{"id":"0:41:1586","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[213,0],"end":[215,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["lazy",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"LazyStatic","id":"0:39:1585","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"1:3355:218":{"id":"1:3355:218","crate_id":1,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13802:3082":{"id":"1:13802:3082","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"4:15744:1739"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"1:50021:2766","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13767:57263":{"id":"1:13767:57263","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13695:50917":{"id":"1:13695:50917","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:11175:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11175:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:3474:1957":{"id":"1:3474:1957","crate_id":1,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3476:181","1:3477:352"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3164:228":{"id":"1:3164:228","crate_id":1,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3166:127","1:3167:1418"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13769:57264":{"id":"1:13769:57264","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9503:2043":{"id":"1:9503:2043","crate_id":1,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:23072:2389":{"id":"1:23072:2389","crate_id":1,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23073:2393","1:23074:53141","1:23075:1229","1:23076:1230","1:23077:39389","1:23078:53191","1:23079:53192","1:23080:53193","1:23081:53194","1:23082:53195","1:23083:53142","1:23084:53143","1:23085:53144","1:23086:53145","1:23087:53146","1:23088:53147","1:23089:53148"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3357:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"1:23121:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3484:1959":{"id":"1:3484:1959","crate_id":1,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3486:181","1:3487:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13678:2061":{"id":"1:13678:2061","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3154:149":{"id":"1:3154:149","crate_id":1,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3156:2054"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:39:1585":{"id":"0:39:1585","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[185,0],"end":[188,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:4429:3015":{"id":"4:4429:3015","crate_id":4,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4430:2888","4:4431:56281","4:4433:56282","4:4434:56283","4:4435:3016","4:4436:56284","4:4437:56223","4:4439:56285","4:4440:2091","4:4441:3162","4:4442:2073","4:4444:2085"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13772:57266":{"id":"1:13772:57266","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3255:127":{"id":"1:3255:127","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3256:2845","1:3258:52816","1:3259:52817","1:3260:51005"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10533:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Display","id":"1:10540:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13700:54706":{"id":"1:13700:54706","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"4:15750:1744"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13803:57273":{"id":"1:13803:57273","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"4:15744:1739"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"1:50030:2767","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:4511:3021":{"id":"4:4511:3021","crate_id":4,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4512:54136","4:4513:54137","4:4514:54139","4:4516:3020","4:4517:54138","4:4519:54140","4:4520:3718"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Read","id":"4:4429:3015","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13691:50915":{"id":"1:13691:50915","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:47750:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:11175:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11175:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3425:1948":{"id":"1:3425:1948","crate_id":1,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3427:181","1:3428:893"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9131:2316":{"id":"1:9131:2316","crate_id":1,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Step","id":"1:8167:2317","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:6650:2965":{"id":"4:6650:2965","crate_id":4,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6651:54005"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:23357:28363":{"id":"1:23357:28363","crate_id":1,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23358:52809","1:23359:52810","1:23360:52811"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:23350:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6168:57909":{"id":"5:6168:57909","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8455:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8455:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13312:2419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23019:2597":{"id":"1:23019:2597","crate_id":1,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23020:2393","1:23021:53141","1:23022:53571","1:23023:53572","1:23024:53573","1:23025:39389","1:23026:53574","1:23027:53575","1:23028:53576","1:23029:53577","1:23030:53578","1:23031:53579","1:23032:53580","1:23033:53581","1:23034:53582","1:23035:53583","1:23036:53195","1:23037:53584","1:23038:51101","1:23039:51100","1:23040:51102","1:23041:53142","1:23042:53143","1:23043:53144","1:23044:53145"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3357:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"1:23121:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10533:109":{"id":"1:10533:109","crate_id":1,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10534:661"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4:1569":{"id":"0:4:1569","crate_id":0,"name":"lazy","span":{"filename":"src/inline_lazy.rs","begin":[8,0],"end":[57,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(not(feature = \"spin_no_std\"))]","#[path = \"inline_lazy.rs\"]","#[doc(hidden)]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:17","0:20:1714"],"is_stripped":true}},"1:13697:3159":{"id":"1:13697:3159","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"1:3655:1968","`str`":"4:15750:1744","str::slice_mut_unchecked":"4:15750:1744"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"4:5512:3067":{"id":"4:5512:3067","crate_id":4,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5513:54034","4:5514:54476","4:5515:54477"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:9130:3089":{"id":"4:9130:3089","crate_id":4,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:9131:56869","4:9132:56870","4:9133:56871","4:9134:56872","4:9135:56873","4:9136:28762","4:9137:56868"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"4:10355:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13779:33625":{"id":"1:13779:33625","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:15744:1739","self::pattern":"1:13302:2418"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13312:2419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5560:3070":{"id":"4:5560:3070","crate_id":4,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5561:54432","4:5562:54433","4:5563:54434","4:5564:54435"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3726:1971":{"id":"1:3726:1971","crate_id":1,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3728:53269","1:3729:53270","1:3730:53271"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3352:1866","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:23145:2598":{"id":"1:23145:2598","crate_id":1,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23146:2393","1:23147:1249","1:23148:1274"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3086:2388":{"id":"1:3086:2388","crate_id":1,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:3085:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6183:57911":{"id":"5:6183:57911","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8455:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8455:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3795:1972":{"id":"1:3795:1972","crate_id":1,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3352:1866","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3726:1971","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3513:1966":{"id":"1:3513:1966","crate_id":1,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3515:1236"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13699:54705":{"id":"1:13699:54705","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"4:15750:1744"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13679:57249":{"id":"1:13679:57249","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13722:2060":{"id":"1:13722:2060","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"1:13302:2418","`None`":"1:47750:176","prim@char":"4:15744:1739"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13312:2419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13312:2419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13327:2421","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3594:1868":{"id":"1:3594:1868","crate_id":1,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3595:579"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10781:146":{"id":"1:10781:146","crate_id":1,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10782:653","1:10783:1767","1:10784:53797","1:10785:53798","1:10786:53799","1:10787:53800","1:10788:53801","1:10789:53802","1:10790:53803","1:10791:53804","1:10792:53805","1:10793:53806","1:10794:53807","1:10795:53808","1:10796:53809","1:10797:1535"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5570:3065":{"id":"4:5570:3065","crate_id":4,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5571:56433"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13693:50916":{"id":"1:13693:50916","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:11175:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11175:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:14426:141":{"id":"1:14426:141","crate_id":1,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:14427:278","1:14428:519","1:14429:281","1:14430:1081"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3357:106":{"id":"1:3357:106","crate_id":1,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2867:104","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13738:57256":{"id":"1:13738:57256","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:13302:2418","str::split_terminator":"4:15750:1744","prim@char":"4:15744:1739","str::split":"4:15750:1744"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"1:49781:2752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13312:2419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13312:2419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13327:2421","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3818:1974":{"id":"1:3818:1974","crate_id":1,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3820:51002"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13785:57269":{"id":"1:13785:57269","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"1:13302:2418","prim@char":"4:15744:1739"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13312:2419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13312:2419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13327:2421","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6184:57912":{"id":"5:6184:57912","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:8455:216","`Box<str>`":"5:444:1871"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:1871","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8200:3372","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8455:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13712:54721":{"id":"1:13712:54721","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:15744:1739","self::pattern":"1:13302:2418"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13312:2419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13688:54686":{"id":"1:13688:54686","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:15761:1753"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13726:54140":{"id":"1:13726:54140","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:13302:2418","str::rsplit":"4:15750:1744","str::split_whitespace":"4:15750:1744","`DoubleEndedIterator`":"1:8687:120","prim@char":"4:15744:1739"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"1:49713:2717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13312:2419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3812:137":{"id":"1:3812:137","crate_id":1,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3814:688"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"1:3807:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:20:1714":{"id":"0:20:1714","crate_id":0,"name":"Lazy","span":{"filename":"src/inline_lazy.rs","begin":[19,0],"end":[19,48]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3359:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"1:10548:2333":{"id":"1:10548:2333","crate_id":1,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10549:661"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3454:1954":{"id":"1:3454:1954","crate_id":1,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3456:894"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3600:131":{"id":"1:3600:131","crate_id":1,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3602:378"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3603:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13312:2419":{"id":"1:13312:2419","crate_id":1,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13314:2417","1:13315:50486","1:13316:50491","1:13317:50487","1:13318:50489","1:13319:50488","1:13320:50490"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5438:3063":{"id":"4:5438:3063","crate_id":4,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5439:4154","4:5440:54421"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"4:10355:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13685:54421":{"id":"1:13685:54421","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12766:2916"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13794:2655":{"id":"1:13794:2655","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:13241:2594","`FromStr`":"1:13241:2594"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47875:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"1:13241:2594","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:13241:2594","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13677:794":{"id":"1:13677:794","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:15744:1739"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13702:2447":{"id":"1:13702:2447","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:15744:1739"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"1:49689:2746","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13788:57270":{"id":"1:13788:57270","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"1:13302:2418","prim@char":"4:15744:1739"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13312:2419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10544:2331":{"id":"1:10544:2331","crate_id":1,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10545:661"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2842:97":{"id":"1:2842:97","crate_id":1,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2844:1728"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3352:1866","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"4:1075:3080":{"id":"4:1075:3080","crate_id":4,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:1076:2128","4:1077:2960","4:1078:54585","4:1079:54586","4:1080:54587","4:1081:54588","4:1082:54589"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13741:54717":{"id":"1:13741:54717","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"1:13302:2418","prim@char":"4:15744:1739","str::rsplitn":"4:15750:1744"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"1:49817:2724","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13312:2419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23108:2599":{"id":"1:23108:2599","crate_id":1,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23109:53141","1:23110:1229","1:23111:1230","1:23112:53142","1:23113:53143","1:23114:53144","1:23115:53145","1:23116:53146","1:23117:53147","1:23118:53148"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3357:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"1:23121:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13782:54723":{"id":"1:13782:54723","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:15744:1739","self::pattern":"1:13302:2418"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13312:2419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13312:2419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13327:2421","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13327:2421":{"id":"1:13327:2421","crate_id":1,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:13329:2055","1:13330:53528","1:13331:53529"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Searcher","id":"1:13321:2417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6185:3043":{"id":"5:6185:3043","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8455:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8455:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6163":{"id":"5:6163","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5976:1342","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6164:57908","5:6165:2887","5:6168:57909","5:6171:57910","5:6183:57911","5:6184:57912","5:6185:3043","5:6186:54585","5:6187:54586"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5910:3368":{"id":"5:5910:3368","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5912:181","5:5913:14414"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13776:57268":{"id":"1:13776:57268","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"1:13302:2418","prim@char":"4:15744:1739"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13312:2419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3489:1961":{"id":"1:3489:1961","crate_id":1,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3491:181","1:3492:1235"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13698:57253":{"id":"1:13698:57253","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:15750:1744","str::slice_unchecked":"4:15750:1744","crate::ops::IndexMut":"1:3659:1969"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:13705:14328":{"id":"1:13705:14328","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"4:15750:1744"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"1:49996:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5582:3073":{"id":"4:5582:3073","crate_id":4,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5583:54034"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13704:14290":{"id":"1:13704:14290","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"4:15750:1744"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"1:49987:2762","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6574:2980":{"id":"4:6574:2980","crate_id":4,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6575:54507","4:6576:56245"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"4:10355:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:9127:2315":{"id":"1:9127:2315","crate_id":1,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8844:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13765:57262":{"id":"1:13765:57262","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13744:54719":{"id":"1:13744:54719","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"1:13302:2418","prim@char":"4:15744:1739","str::splitn":"4:15750:1744"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"1:49835:2725","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13312:2419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13312:2419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13327:2421","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5526:3069":{"id":"4:5526:3069","crate_id":4,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5527:56432","4:5528:56433","4:5529:54034","4:5530:56434","4:5531:3336","4:5532:3337","4:5533:56435","4:5534:1306","4:5535:56436","4:5536:56437","4:5537:56438","4:5538:56439","4:5539:56440","4:5540:56441","4:5541:56442","4:5542:56443"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3479:1958":{"id":"1:3479:1958","crate_id":1,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3481:181","1:3482:354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:23405:2514":{"id":"1:23405:2514","crate_id":1,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdElement","id":"1:24042:2382","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"1:23396:2392","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13332:2422":{"id":"1:13332:2422","crate_id":1,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13327:2421","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:8606:2283":{"id":"1:8606:2283","crate_id":1,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8608:2119"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6171:57910":{"id":"5:6171:57910","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8455:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8455:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3160:229":{"id":"1:3160:229","crate_id":1,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3162:127","1:3163:1419"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9504:2042":{"id":"1:9504:2042","crate_id":1,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"paths":{"17:10266:4093":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:10571:4150":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:24923:2670":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:3148:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"4:5766:3362":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:49713:2717":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"6:4135:39645":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"4:10242:4367":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:11168:43826":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:7090:3861":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:3637:1977":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"4:5984:3332":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"12:183:3676":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:49604:2735":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:2792:3758":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:3007:4030":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:12250:48690":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"5:3106:57112":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"16:4467:42715":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:1531:37510":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:4803:42811":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:6135:40708":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:24497:2820":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"4:10853:3047":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"17:13817:49912":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:13332:2422":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"4:10980:2989":{"crate_id":4,"path":["std","net","ip","IpAddr"],"kind":"enum"},"4:12160:4447":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:14329:2499":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"4:13853:4370":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"4:2179:3092":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"4:4234:3040":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"4:14927:3153":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"4:1075:3080":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:5974:36543":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:6949:4075":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:5247:40281":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:13327:2421":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:6856:41237":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:6012:3768":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:46656:2765":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:53459:2518":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"9:603:41586":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"4:4495:56256":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"9:963:3602":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:9676:60239":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:3221:4035":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:9124:2314":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:1740:37531":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:4440:39676":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"4:3443:3023":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:1712:37528":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:52091:52969":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:4811:2461":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:13735:49869":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:10253:4169":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"14:11:42104":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"4:14350:3272":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:11945:44039":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:13331:49474":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"14:189:42104":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"4:3100:3279":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"5:1719:3126":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"4:14067:2261":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"6:4020:39631":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:2946:184":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:48524:2332":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"12:1238:3671":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:7309:3774":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:11494:44446":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"4:14835:3122":{"crate_id":4,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"7:85:41363":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:10503:4123":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"11:46:59361":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"4:70:1494":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"6:6129:40707":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"4:2403:31209":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"6:6027:40704":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:3877:39618":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"5:4765:4327":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:32592:53454":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"6:533:36624":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:5210:40277":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:39090:2271":{"crate_id":1,"path":["core","error","Chain"],"kind":"struct"},"17:13345:49475":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:13840:49915":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:4008:44008":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"4:1017:3256":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"4:6246:2972":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:12742:2953":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"14:47:42104":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:9646:59918":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:53543:2556":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:23121:2392":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:8346:3045":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:22817:53786":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:3726:1971":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"12:1103:3134":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:22870:53923":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"4:1527:3132":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"5:5488:3007":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:13495:49845":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"12:2269:3135":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"12:933:3129":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"14:250:42112":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:9920:43819":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"18:661:4230":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"4:12019:3122":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"1:1467:1711":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"6:6665:41076":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"5:981:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:49294:2958":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:5998:3740":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"4:11774:181":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"4:5570:3065":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"5:7205:4336":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"4:5560:3070":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:13378:2425":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:13312:2419":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"19:117:60269":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"1:49917:2758":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"5:2005:3091":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"6:4538:39687":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"9:469:41481":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:51825:2539":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:46153:195":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:11968:48509":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"10:0:1795":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:3655:1968":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"6:4296:39658":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"4:15249:3699":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"4:1041:3087":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"4:2174:3091":{"crate_id":4,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"16:6099:3839":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:12557:48711":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"5:3825:2613":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"4:5512:3067":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"4:11202:3335":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"4:11133:3317":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"1:46966:2288":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"4:14705:4373":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"4:15764:1756":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"16:6141:3841":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:3164:228":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:25088:164":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:8602:2284":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:6184:40710":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"4:10450:30247":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:13721:49868":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"5:383:3460":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"4:1533:3133":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:4379:39668":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:49521:2730":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:56166:2376":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"14:56:44230":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:3743:42231":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"4:15715:30250":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:5488:40298":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"18:801:4217":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:11355:2613":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"6:3907:39621":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:6643:36580":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:7741:3871":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:11142:43825":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:2376:1898":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"4:15750:1744":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"1:51494:52962":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"4:7228:185":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"5:8215:3393":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:4332:39662":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:49063:2399":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"12:2412:59362":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"8:0:1793":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"5:8262:194":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:50236:2432":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:49623:2737":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:612:36633":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"4:15152:3321":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"4:10167:56208":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"5:1740:3128":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:5178:40274":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:11486:2719":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:46710:100":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:6243:40714":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:9625:2419":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:3077:4089":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"5:2376:3516":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"4:15743:1738":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"16:6159:3773":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:32940:2569":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:56562:237":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:3467:1960":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"16:7155:3867":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"4:3793:3222":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"4:11291:3190":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"4:11439:3205":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"18:766:60248":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:32744:53453":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"16:7141:3866":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:11671:44557":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:12222:48688":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:47943:178":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"4:1462:3125":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:3461:4039":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"4:7450:3174":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"14:194:42105":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"4:14569:3180":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:48178:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:586:36629":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:4454:39678":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:6870:51029":{"crate_id":1,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"1:56536:237":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:12431:48702":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:3366:4043":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:4098:39641":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:13602:49864":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:14042:150":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"4:10377:3238":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"1:3357:106":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"6:6896:39809":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:12746:43829":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:10788:44005":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:580:32377":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:10015:43874":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"5:1684:2066":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:47816:2039":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"5:4372:2614":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"6:601:36631":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:9033:43805":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:12700:48787":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:46305:2587":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"16:5257:42184":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:46066:1978":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"4:8961:56205":{"crate_id":4,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:0:431":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:4:980":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"4:4486:2325":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"1:50308:2436":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:5426:40293":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"5:7918:4336":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:5229:40279":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:10622:44004":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:4218:39652":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"16:7792:3806":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:12198:2740":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"6:5982:37450":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:11822:44752":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:50689:2593":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:10975:44092":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"12:2059:3093":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:6557:3852":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:56523:237":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"4:10862:3018":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"1:3086:2388":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"16:6595:3784":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"4:4511:3021":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"5:5861:4322":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:4148:39647":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:4198:42614":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"4:8760:1929":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"4:11364:3201":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:50287:2434":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"18:896:4225":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"4:2185:3093":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"4:11341:3200":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"16:7247:3803":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:14:1767":{"crate_id":1,"path":["core","write"],"kind":"macro"},"6:1662:37523":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:10988:44091":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:5186:40275":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:51993:2520":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:25121:2806":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"4:3841:127":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"4:5582:3073":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:9948:43820":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:32578:2612":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:5998:36502":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:2981:4040":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:46946:2281":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:0:489":{"crate_id":1,"path":["core"],"kind":"module"},"1:46587:2940":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:2905:4028":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"5:0:278":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:9004:43804":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:13961:49956":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:5004:1900":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"4:7714:3255":{"crate_id":4,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"1:52225:2560":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"4:1491:3126":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:4242:39654":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:10899:44106":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:8097:2577":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:12983:2750":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"4:10356:3230":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:49731:2721":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"4:7919:3256":{"crate_id":4,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"1:50144:2429":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:10937:44117":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"16:2959:4029":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:1721:37529":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"4:8268:3111":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:11404:2717":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"4:12038:3146":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"6:5366:40287":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"4:14790:54112":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:50021:2766":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"16:6643:4064":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:6943:39816":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:53005:2561":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"4:2695:180":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:49967:2760":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"15:269:3695":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:10548:2333":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"4:10582:3270":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"4:5745:3359":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:53654:19808":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:7768:3777":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:6120:40706":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:13774:49907":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:2512:4185":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"4:13689:4455":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:46820:2270":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"5:8209:2066":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:46530:2766":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:47750:176":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:10533:109":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"6:6214:40712":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:13352:49487":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"6:1551:37513":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:6980:3857":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"5:8297:2066":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:11579:44516":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:1526:37509":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:4012:39630":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:6277:3844":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"4:5643:3353":{"crate_id":4,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"12:353:4439":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:11640:44555":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"5:3104:2128":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:13859:49921":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"4:13410:3170":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"4:15760:1752":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"1:50598:201":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"4:11985:1918":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:6504:3851":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:46173:198":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:13794:49911":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"4:14381:3018":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:11689:44613":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"9:234:3562":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"6:88:36244":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"4:15745:1740":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"4:5161:3314":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"4:1504:3129":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"4:10912:2747":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"16:5959:3761":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:50616:190":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:11524:2720":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:53703:19811":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"14:231:3382":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"12:466:59370":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"4:3102:3280":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"6:4340:39663":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:24824:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"4:3497:3030":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"4:4197:3039":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:6097:37454":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:1727:37530":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:49613:2736":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"4:9254:56981":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"4:4160:3299":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:13094:49307":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:2484:43921":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:7702:3780":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"4:4273:3036":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:10688:52971":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"16:7238:3789":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:13755:49905":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:23019:2597":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"5:3838:2614":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"12:2032:2613":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"12:2392:59364":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:10455:4118":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:53581:2521":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"4:11246:2975":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:52303:2548":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:542:3746":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:2772:4052":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"4:15765:1757":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"4:1475:3090":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"12:777:2066":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:13059:2757":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:672:36665":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"6:4493:39682":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:7131:3865":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:9836:60228":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"4:13989:3040":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:57876:52968":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"1:10542:2330":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:13241:2594":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:46905:2277":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:4356:39665":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:4055:39635":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:10660:44038":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:25022:166":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"6:3993:39628":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:56549:237":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:3686:42198":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"5:8403:2832":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:5498:3821":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:4446:39677":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:6908:39811":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"4:8477:1917":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:24038:2392":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:9786:43817":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:10536:109":{"crate_id":1,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"4:4402:3007":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"1:47875:205":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"5:1072:2613":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:618:36634":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:3265:4037":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"5:3105:57218":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"4:10658:3031":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:13481:49843":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:10851:44009":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:11031:43822":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:50161:2430":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:3352:1866":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"17:10435:4119":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:4439:42711":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:2271:2491":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:12196:48686":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:49591:2734":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"4:11917:3114":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:5331:40286":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:50432:2776":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:50209:2431":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"5:8240:57133":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:3807:225":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:14118:187":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"5:3948:3031":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"4:10931:2985":{"crate_id":4,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"1:51370:2537":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"4:11962:3117":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"4:5285:3321":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"12:2280:3136":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:5460:3820":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:13595:49863":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:3474:1957":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:13899:49946":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"18:704:60252":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"16:3103:4042":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:46357:2605":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"5:3905:4322":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:21:673":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"1:11597:2722":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:50321:2840":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:24890:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"12:1121:3135":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:49094:52898":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"4:12499:4369":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:32404:2868":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"17:10048:43892":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"4:15754:1746":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"4:15761:1753":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"17:12417:48701":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"4:1500:3128":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:4142:39646":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:23108:2599":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"4:11786:3178":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"1:24281:5045":{"crate_id":1,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"17:12687:48781":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:10493:134":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"9:27:3586":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"16:4271:42663":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:48220:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:5204:40276":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"4:9520:3308":{"crate_id":4,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"4:11109:32744":{"crate_id":4,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"16:5217:4020":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"5:8477:3380":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:9873:43818":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:13138:49312":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:5439:40295":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:3155:4032":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:2905:124":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"17:10598:44036":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:5419:40292":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"4:1157:30249":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:5378:40288":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:13522:49850":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:52044:52895":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:2166:579":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"17:11701:44614":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:6610:2279":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:37894:2457":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"4:7416:3172":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"17:9131:43808":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:46715:2831":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:6310:3845":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:23208:2383":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:28300:2467":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:3356:217":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"16:6858:4071":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:13472:49842":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:6691:3854":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"5:7943:4342":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:3770:42234":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"16:5902:3834":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"5:1729:3127":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:11181:43827":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"4:4429:3015":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"1:49996:2763":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:14077:50816":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"5:4509:2613":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"5:4017:3091":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"5:7714:3424":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"13:233:59372":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:9930:60211":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:11890:48502":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:11653:44556":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"5:5609:1913":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:51777:2554":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:7295:3776":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"18:712:2457":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:4160:39648":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:5547:39534":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"4:3322:3027":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"5:6775:3454":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"4:8926:1925":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:12170:48684":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:46886:2275":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:24791:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"4:6648:2961":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:22804:2457":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"13:0:1792":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:47867:188":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:3594:1868":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:47782:2065":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"17:10814:4148":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:7684:3781":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:11256:43791":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:48052:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:49503:2728":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:3340:4018":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"4:11020:2991":{"crate_id":4,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"16:5887:4015":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:10530:44032":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:13155:49355":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"18:774:60252":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:11666:2726":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"4:10874:3019":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"1:22872:53927":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:37870:178":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"16:5273:42183":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"16:5923:3835":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:23932:2381":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:10476:4122":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"4:9505:3307":{"crate_id":4,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"5:2266:4324":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:5941:3836":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"4:2035:145":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"4:11930:3115":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:13763:49906":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"16:3297:4090":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:161:36311":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"9:686:3535":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"1:4968:1899":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"16:4628:42780":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:12512:48708":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:9183:4109":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"4:11182:3360":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:2248:2484":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:12469:48705":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:53665:19809":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:5649:3826":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:9504:2042":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:51476:2550":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"4:2958:2888":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"16:5745:3831":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:47849:2040":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"3:0:1789":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"5:3428:3094":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"5:2843:3478":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:13975:49990":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:10127:4121":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"4:11876:2613":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"5:1152:4322":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:12093:48621":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:634:36636":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"4:2441:31221":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"4:15757:1749":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"17:12070:48620":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:13043:2754":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:50115:2423":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:50452:2780":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:7110:3863":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:49578:2270":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:11985:48512":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:12646:48778":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:3314:4017":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:4005:39629":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"18:668:4231":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"5:8224:3090":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:13452:49840":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:12496:48707":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:3462:1955":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"4:10456:3099":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:3795:1972":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"4:7579:3181":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"5:6498:224":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"4:10577:3083":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"1:5676:11134":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"17:12758:48852":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:4270:3334":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"16:6089:3838":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:547:4010":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:11381:44220":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:6518:3785":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:22851:53928":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:24210:2803":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"16:7826:2586":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:10115:4201":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"12:1881:145":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:6656:4065":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"5:1547:3137":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:4381:42701":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:51969:2519":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"4:9558:4363":{"crate_id":4,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"11:54:3658":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"17:10198:43887":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:11282:43828":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"5:8432:3467":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:46039:1980":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"12:472:59367":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"4:10604:3079":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"12:1183:3669":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"5:2284:3387":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:10516:43935":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:46597:2941":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"4:7762:4346":{"crate_id":4,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"16:6173:3842":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"4:4771:2983":{"crate_id":4,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"17:10240:4166":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:46790:4376":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"4:11177:3357":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"15:248:3691":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:12183:48685":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:13271:49407":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:13167:49357":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:24857:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:5668:3827":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:1606:37519":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:4067:39637":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"4:2405:31210":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"4:10895:2271":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"1:48774:133":{"crate_id":1,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"16:6407:3847":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:23944:53789":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:53608:19804":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:5122:1882":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:10220:2704":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:50012:2765":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:51679:2559":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"16:7659:3870":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:3110:57215":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:10552:2334":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:12892:49248":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:4716:42796":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:47968:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:49935:2759":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"4:15751:1745":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"9:157:3554":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"12:162:3672":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"4:15710:56490":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:9796:59988":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"4:6574:2980":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:9361:43810":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"5:8254:2066":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"4:1190:4445":{"crate_id":4,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"12:1784:4320":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:13515:49849":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:6007:40702":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"4:13177:3328":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"5:6759:1913":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:50659:2789":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"5:7351:4322":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"18:739:60265":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:49763:2751":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:11530:44507":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:3375:2320":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"6:521:36622":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"4:14683:4371":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:24318:52984":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"4:15767:1759":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"17:12607:48775":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:11563:44515":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:53397:2553":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:3442:1949":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"4:13711:3177":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:11797:44738":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:4753:3007":{"crate_id":1,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"6:5390:40289":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:5348:3813":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:13404:49834":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"7:38:41356":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"4:11800:3179":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"4:3409:3028":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:6075:3770":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"4:7436:3173":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"6:1576:37516":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"4:15744:1739":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"4:10925:2760":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"4:11892:2066":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"4:2464:4447":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"4:10493:3482":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"17:11713:44723":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:5374:3815":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:47037:2295":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:53619:19805":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"4:6486:54289":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:53147:2529":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:49531:2731":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:13660:49866":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:23198:2392":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"4:14338:54125":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:11354:4103":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:13029:49303":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:11102:43823":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:12731:48789":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"6:626:36635":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:49047:2400":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:5478:40297":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:1748:37532":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:12527:48709":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"4:6472:3069":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:4129:2504":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"5:3441:3385":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"4:8702:1713":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"17:2543:4115":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:50005:2764":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"4:15756:1748":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"1:13302:2418":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"1:49102:52946":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:47799:2614":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"4:5867:3323":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:1733:3327":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:10291:4096":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:12282:48692":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:1558:37514":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:12165:2739":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"4:10966:2987":{"crate_id":4,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"16:6381:3783":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"4:11999:1919":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:49084:3200":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:51632:52894":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:527:36623":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:6190:3843":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:4835:102":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"6:3966:39625":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:3458:1953":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:5260:40258":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:3114:57217":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"9:0:1794":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"4:6904:33349":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"4:4195:3038":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:3933:39623":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"5:2619:3479":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:7906:2074":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"4:4063:3048":{"crate_id":4,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"1:46557:2632":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"5:4036:4322":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:4198:39650":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:6080:37451":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:8902:43802":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"4:12497:3270":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:12482:48706":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:8844:157":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"12:114:59371":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:2198:1051":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"12:2052:3092":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:53718:19812":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:4402:39671":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:6630:4063":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:5311:40285":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"19:0:995":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:49055:52952":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"4:15749:1743":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"1:46727:2832":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:7874:235":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:7449:3779":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:48813:127":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:3355:218":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:46609:2767":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"4:1521:3131":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:50651:2788":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:9746:43816":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"4:10594:3272":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"17:10068:4093":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:10058:4204":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:14339:2790":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"17:11234:4175":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:10211:43893":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"9:1020:3604":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:6016:40703":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:13421:49835":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:7264:194":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:6490:3850":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:4179:39649":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:4434:39675":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"4:11946:3116":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:5398:40290":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"4:2953:128":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"18:136:50310":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:3479:1958":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:9275:42183":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:4775:42807":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:13233:49402":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:4866:2498":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:3896:39620":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:2936:177":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:4078:68":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"12:1203:3670":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:13037:49305":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"4:5526:3069":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"5:8532:3091":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"4:2191:3094":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"4:14969:3160":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:5326:3812":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"18:754:60262":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"5:4694:236":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"12:2045:3091":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:24476:5078":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:48531:2333":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:10422:43932":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:46677:2939":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:49881:2756":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"5:6562:3090":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:3425:1948":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:6979:41264":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:4474:39680":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:3085:2392":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"12:1256:3137":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"4:5715:3356":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:4411:42707":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:13612:49865":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"5:1909:4322":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:46312:1888":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"4:15758:1750":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"4:4848:3225":{"crate_id":4,"path":["std","net","ip","display_buffer","IpDisplayBuffer"],"kind":"struct"},"17:9539:4174":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:4230:39653":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:7721:3782":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:4316:42684":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"12:940:3130":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"16:7079:3860":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:4088:39640":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:7129:2282":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:5268:1891":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"4:14766:3178":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"5:5388:200":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:0:799":{"crate_id":6,"path":["libc"],"kind":"module"},"1:46239:1970":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"6:4208:39651":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"4:10382:3254":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"4:5753:3361":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"4:3839:205":{"crate_id":4,"path":["std","io","error","Result"],"kind":"typedef"},"4:14957:3155":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:12237:48689":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:3883:39619":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:1680:37525":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:56575:237":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:2842:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"4:2170:3090":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:6549:3787":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"5:8200:3372":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"16:5362:3814":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:4975:42863":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:1694:37526":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:50444:2781":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:8606:2283":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:53257:2549":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:3177:4033":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"4:5737:3358":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"4:2955:3271":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"1:46896:2276":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"5:8455:216":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:9587:59773":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"5:5906:3366":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:51392:2525":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:10925:44116":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"0:41:1586":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"6:6937:39815":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:46845:2271":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"5:844:223":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:5855:3833":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:8652:1870":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:3743:4144":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:9431:43812":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"4:11423:3203":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"6:1764:37533":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"4:14798:3146":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"12:1162:3668":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"12:1666:3681":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:5784:3832":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:5301:40284":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"4:11003:2990":{"crate_id":4,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"4:1441:2066":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"4:900:3234":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:12262:48691":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:3160:229":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"17:13463:49841":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:13530:109":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:13215:49361":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:49987:2762":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"4:11814:3180":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"5:8270:3376":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:46271:1973":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"4:11170:2985":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:52461:2540":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:46298:2586":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"5:1710:3125":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"4:14816:54102":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:10304:4099":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"12:0:1797":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"4:15768:1760":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"1:10544:2331":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"6:4315:39660":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:8643:151":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"4:8590:162":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"4:11122:3315":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:46914:50735":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"4:5574:3071":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:9716:60039":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:9756:60225":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:299:60197":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:46129:194":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:14390:201":{"crate_id":1,"path":["core","task","ready","Ready"],"kind":"struct"},"4:13323:31221":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"16:3199:4034":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:13440:49839":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:9636:43814":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:46634:2766":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:3157:135":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:48510:2331":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"6:5582:40327":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:3501:1963":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:4495:42719":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"5:4581:3503":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"13:121:42059":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:5194:1888":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:3436:1950":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:47934:2066":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"17:13708:49867":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"15:0:1799":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:2813:4045":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:10147:43891":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:10550:189":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:49452:2723":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"5:7547:4322":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"4:6746:2974":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:6482:4060":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:7355:3771":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"11:0:1796":{"crate_id":11,"path":["adler"],"kind":"module"},"6:4392:39670":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"4:6724:2966":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"4:15214:35068":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"6:6205:40711":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:47253:3046":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"4:4447:3017":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:50485:2852":{"crate_id":1,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"17:13196:49359":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:1704:37527":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:49552:2733":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:11166:2392":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"4:10918:2717":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"17:13147:49313":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:9160:4176":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:6967:41263":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"4:14552:31223":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:11628:44554":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:6034:33347":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"4:15238:3699":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"5:3366:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:1626:37521":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:46195:197":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:3600:131":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:5516:4008":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"4:10634:118":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:13377:49832":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:53639:19807":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:9326:4101":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"18:820:4219":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"9:722:3538":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"1:24410:5077":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:13293:49471":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:5239:1889":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:32584:2858":{"crate_id":1,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"18:811:4218":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:3505:1964":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:48801:107":{"crate_id":1,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"17:10464:4117":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:46928:2278":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"7:0:1483":{"crate_id":7,"path":["unwind"],"kind":"module"},"5:6851:3007":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:7992:2269":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"12:979:3133":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:51424:2558":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:51280:52959":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"16:6679:4067":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"4:1132:3267":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:11457:44230":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:12157:48683":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"4:10733:3220":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"17:12921:49249":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:3659:1969":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"5:1663:2613":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:52379:2555":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"5:2328:3476":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"4:2196:3095":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:4061:39636":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:7369:3772":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"12:880:3091":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"6:5274:40259":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:9087:43807":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:24989:165":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"16:6331:3687":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:7379:3792":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"18:729:60255":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:9206:43809":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"5:1760:3471":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"5:1751:194":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:3478:4038":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"16:7100:3862":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"4:12528:56219":{"crate_id":4,"path":["std","sys","unix","fs","TimespecDebugAdapter"],"kind":"struct"},"9:1075:3605":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:13321:2417":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:50273:2433":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:12634:48777":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:12543:48710":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:52799:2541":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"16:6433:3848":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:4110:39642":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:3576:42189":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"4:1496:3127":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:7637:3869":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"4:9130:3089":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"9:927:41475":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:6035:3808":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:4386:39669":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"5:8356:3141":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"5:7048:3377":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:5048:1709":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"12:1147:3136":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:4256:39655":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"4:10466:3138":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:3812:137":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:4287:39657":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:7868:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:3603:132":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:4665:4325":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"5:6739:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:51555:2526":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:10483:2325":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"16:5530:3822":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"4:9553:4362":{"crate_id":4,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"4:11837:56222":{"crate_id":4,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"17:13953:49954":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"4:1654:3137":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"4:11086:54121":{"crate_id":4,"path":["std","net","parser","AddrKind"],"kind":"enum"},"1:10554:2335":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:5288:40282":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"4:7582:3183":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"16:5685:3828":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:4526:39685":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:1588:37517":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"16:3908:42348":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"4:14778:3179":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:50440:2777":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"4:4370:3046":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"1:23145:2598":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"17:10913:44115":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:14153:14418":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:4509:39683":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"4:10954:2986":{"crate_id":4,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"4:2554:3266":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"6:539:36625":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:46640:2936":{"crate_id":1,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"4:15766:1758":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"16:4743:42799":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:13094:2718":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:7025:3762":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:53733:19813":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"4:1645:3136":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:47047:2296":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:46836:2268":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:10318:4121":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:23733:2394":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:13306:49472":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"4:2466:4448":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"16:5303:3811":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:10223:4114":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:8712:1869":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"6:593:36630":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"4:11273:33350":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:565:36627":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"4:8695:1712":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"17:10949:44094":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:12302:48693":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:52539:2528":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"16:4871:42831":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:48136:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"5:8291:2066":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"0:38:1579":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"16:7121:3864":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:50497:2853":{"crate_id":1,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"6:4075:39638":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:50464:121":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:46696:2636":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:49512:2729":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"4:10217:4365":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"5:8344:3097":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"12:379:3675":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:39086:3482":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"17:8954:4111":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:3853:1896":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:11742:44732":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"4:11768:3176":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"4:5504:3066":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"4:696:3229":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:10187:43888":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"4:9426:4453":{"crate_id":4,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"5:1533:3135":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:8639:136":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"4:7294:119":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"18:678:142":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:10009:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:11514:44506":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:13323:49473":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:4840:42824":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"5:3402:3093":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:47016:2293":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"4:6646:2964":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:46975:2289":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"4:6224:2969":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:53680:19810":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:11615:44553":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"4:2961:3016":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"1:51901:2531":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"5:5948:4331":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"1:11447:2718":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:11068:4110":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"18:829:4220":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"5:1502:3134":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:3818:1974":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:4351:42695":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"4:10156:43801":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"9:41:3587":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"4:11433:2613":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"4:8525:1928":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"14:244:42106":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:49699:2747":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:12360:48698":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"12:2253:3134":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:9505:2041":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"4:14864:54301":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:510:43799":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"16:2839:4026":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"4:15093:3313":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"4:6482:54285":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"4:15494:4374":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:49633:2738":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:46278:2502":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:50030:2767":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:5541:40325":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:6954:39817":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"4:11826:54109":{"crate_id":4,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"1:3347:211":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"6:1669:37524":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:3597:130":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"4:11381:3202":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"1:50448:2779":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:46957:2287":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:47026:2294":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"16:3243:4036":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:13539:49852":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:10586:44035":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:13565:49855":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:6687:2280":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:48094:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"18:169:50312":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"4:10846:3045":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"4:12490:128":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"9:809:3200":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"4:11188:3326":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:8929:43803":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:50672:158":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"4:8850:1923":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:51923:2534":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"18:790:4216":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:9579:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"9:1056:3597":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"4:14374:118":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:47228:11421":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:10821:2398":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"12:856:3125":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"1:53628:19806":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:50093:2420":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"4:4275:3037":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:10039:43876":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:545:36626":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"5:777:58154":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"6:5240:40280":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"5:69:3420":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"4:7464:3175":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"17:10643:44019":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"4:14358:129":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:3495:1962":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:10445:43933":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:11559:2721":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:5723:780":{"crate_id":1,"path":["core","iter"],"kind":"module"},"12:952:3131":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:1621:37520":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:5567:40326":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:5443:3819":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"4:1449:3124":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:11212:4177":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:9706:43815":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:6907:3856":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:6604:3853":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"4:15762:1754":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"17:9958:60226":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"5:8449:57111":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"1:52649:2517":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:32644:53420":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"1:47918:2613":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"4:13992:3036":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"5:1296:3474":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:5433:40294":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:51871:2527":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:4532:39686":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:50701:2591":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:52585:2532":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:50456:2774":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:6250:40715":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"12:764:2614":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:10390:4120":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"4:10617:129":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"1:49683:2745":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:5697:2563":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"5:1276:3473":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:13073:49306":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:1236:43890":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:50608:4459":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"16:4660:42788":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:5499:2932":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:13908:49947":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:6533:4058":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:8167:2317":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"6:4277:39656":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"4:15748:1742":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"17:294:60199":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:11379:2614":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:12620:48776":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:2861:4027":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"12:971:3132":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:24956:168":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"5:984:3391":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:4038:39633":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:12015:48612":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:12318:48694":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"4:9421:4361":{"crate_id":4,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"17:12143:48682":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:13873:49939":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:10775:44006":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"4:6484:54287":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:10771:142":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"6:4516:39684":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"12:2066:3094":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"18:849:4221":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"5:4709:4327":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"18:837:2417":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:6268:40716":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"4:8712:2259":{"crate_id":4,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"1:3824:1976":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:10093:4199":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:10558:44034":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:49817:2724":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:24385:5058":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"4:1418:2613":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:46743:2833":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:22832:53786":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"16:3402:3759":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"6:1600:37518":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"4:14325:3078":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:47858:2131":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"4:10489:31223":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"12:2072:3095":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"17:11017:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:48835:71":{"crate_id":1,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"1:53756:19814":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:5455:59013":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:11754:44733":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"12:2404:59366":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:24139:2800":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:4048:39634":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:13247:49404":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"4:1485:3091":{"crate_id":4,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"17:12585:48726":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:24302:2662":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:46985:2290":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"18:857:4222":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:3420:1951":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"18:744:60258":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"4:4163:3300":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"4:14315:54296":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"9:776:3584":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"16:5176:43040":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"4:15747:1741":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"1:51525:2538":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:7281:3775":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:14027:138":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"6:6688:41078":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:13257:49405":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:4425:39674":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:47262:11424":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"4:2525:3265":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"17:13747:49904":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"4:10355:2392":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"4:1305:143":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:56588:237":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:8372:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"4:14942:3154":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:51324:2557":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:46617:2935":{"crate_id":1,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:24431:5068":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:23261:2393":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:4942:42854":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"6:3981:39627":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"4:12014:1927":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:3154:149":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"4:11884:3110":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"4:15223:54029":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"1:3583:1897":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:11652:2725":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"4:15769:1761":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"17:10364:4186":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"4:2167:2066":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"4:7719:4450":{"crate_id":4,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"6:4373:39667":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:50436:2778":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"16:2733:3742":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:11474:44445":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:11433:44229":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"4:14320:54298":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:10082:4198":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:6671:41077":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"5:1673:2614":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:12716:48788":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:4346:39664":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"4:2163:2613":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:11409:44228":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:4362:39666":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:4028:39632":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:5291:1892":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:32544:2827":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"4:15759:1751":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"4:894:3233":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:9826:4121":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:3920:39622":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:4410:39672":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:57897:52954":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"4:13536:3185":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:14510:2589":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"4:8175:3200":{"crate_id":4,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"17:13887:49945":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:3972:39626":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:6153:40709":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"4:2698:179":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"4:15742:1737":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"17:10166:43889":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:1912:37668":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:12298:4382":{"crate_id":1,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"5:7736:3425":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:10610:44037":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:53505:2536":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:3446:1952":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"18:720:52970":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:11013:43821":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"4:14300:2982":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"4:9414:4452":{"crate_id":4,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"4:10650:3029":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:46573:2634":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:321:205":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:46800:11135":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"17:13584:49857":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"4:783:4364":{"crate_id":4,"path":["std","thread","local","fast","Key"],"kind":"struct"},"1:9127:2315":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:11680:2727":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:51947:2516":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"4:4504:3000":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"1:14223:50813":{"crate_id":1,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"4:0:1333":{"crate_id":4,"path":["std"],"kind":"module"},"16:7169:3786":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:39050:2387":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:46217:199":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:4157:4151":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:39126:2321":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:47235:1712":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:5566:3823":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:51614:2515":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:12455:48704":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:5396:3816":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:6468:3849":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"4:11037:3224":{"crate_id":4,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"17:11725:44724":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:12660:48779":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"4:7402:3171":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"1:24358:2657":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"0:0:1579":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"5:3407:3384":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"4:2370:601":{"crate_id":4,"path":["std","env"],"kind":"module"},"1:3430:1947":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"4:5438:3063":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:11175:214":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"18:645:4229":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"4:1152:30248":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"18:866:4223":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"14:216:42113":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"4:7073:56204":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"4:820:4364":{"crate_id":4,"path":["std","thread","local","os","Key"],"kind":"struct"},"4:9648:4364":{"crate_id":4,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"16:7323:3791":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"16:5639:3825":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"4:7042:56204":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:9240:4100":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:4573:42773":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:2845:2265":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:14426:141":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:12048:48614":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:3450:1956":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:47006:2292":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"5:5910:3368":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"12:2040:3090":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"5:4281:3090":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:11002:44118":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"16:2937:4051":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:10489:43934":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"16:4689:42793":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:49835:2725":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"16:3051:4088":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:11810:44751":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:46113:196":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"18:621:60263":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:1311:4205":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"4:7980:4346":{"crate_id":4,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"1:48304:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"4:10738:3032":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:4459:2066":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:3436:3092":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"6:6925:39813":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:1567:37515":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:3570:116":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:2262:2490":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:2487:2501":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"18:885:4224":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:12442:48703":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:5238:42186":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"18:782:60252":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"4:12057:3147":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:13507:49848":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:1634:37522":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:6931:4074":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"4:8261:202":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:12348:48697":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"4:6650:2965":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:5149:40230":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:5117:1881":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"17:9064:43806":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"5:1518:3136":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:4081:39639":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"9:900:41509":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:48750:67":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"6:4116:39643":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"5:3814:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:571:36628":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:10394:4184":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:5605:3824":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:52145:52967":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:48517:2330":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:46858:2272":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:50428:2773":{"crate_id":1,"path":["core","str","LinesAnyMap"],"kind":"struct"},"9:996:3603":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:5293:40283":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:2754:4019":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:46994:2291":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:11922:48504":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"16:5289:3769":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:53335:2533":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:3151:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:9503:2043":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:8419:3466":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:5113:1880":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"5:7306:3090":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"4:8626:56205":{"crate_id":4,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:11638:2724":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"4:15763:1755":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"5:444:1871":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"4:3084:2485":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"17:10962:44093":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:52349:2552":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"18:152:50311":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:23357:28363":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"4:10367:54052":{"crate_id":4,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"1:3353:1895":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:25490:2621":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:13361:49804":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:12117:48680":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:24447:5079":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:5184:1887":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"4:14872:3187":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"5:1256:57185":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"6:513:36621":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:6229:40713":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"4:7519:3177":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"4:1149:30246":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:10407:4183":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:11603:44552":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:13529:49851":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"4:11844:54054":{"crate_id":4,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"1:49781:2752":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:6914:39812":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"5:8549:3421":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:11305:43829":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:12209:48687":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:10545:44033":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:13938:49949":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:24483:2873":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:48262:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"12:2419:3097":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:48346:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:3359:220":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"16:7415:3790":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:9396:43811":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"5:4308:4322":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:9517:2747":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"12:928:3126":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:49072:146":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:7063:3859":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:12674:48780":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"4:8167:3256":{"crate_id":4,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"1:49541:2732":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"16:5412:3817":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"4:1431:2614":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:3509:1965":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:51755:2551":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:11314:4105":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:47244:11423":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"18:611:4227":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:10028:43875":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:11784:44737":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"12:869:3090":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:47791:2613":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"18:694:4232":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:48871:2329":{"crate_id":1,"path":["core","fmt","FlagV1"],"kind":"enum"},"4:14699:4372":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:2883:4046":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"4:6344:3084":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"4:9381:4360":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:5869:189":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:7754:3872":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"4:10642:3292":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:11335:4104":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"4:15071:2992":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:52122:52892":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"4:12009:1926":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"4:11450:3206":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"5:5962:4334":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"4:8076:3256":{"crate_id":4,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"6:1544:37512":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"5:3395:2613":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"4:3112:3285":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"1:48887:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"5:6340:3424":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:13785:49908":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"4:11066:54105":{"crate_id":4,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"4:15726:54059":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:6130:3840":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:10546:2332":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:23350:2392":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:47273:11426":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"4:7814:3256":{"crate_id":4,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"6:157:36310":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:13369:49805":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:24042:2382":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"9:692:3537":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"9:749:3539":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"1:46670:2938":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"6:5216:40278":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:3489:1961":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:7782:3778":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:4416:39673":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:3513:1966":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:8687:120":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"5:1055:3392":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"4:10407:2261":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"16:6050:3837":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:22849:53925":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:3518:1967":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"5:3462:3095":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:46663:2937":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"4:12004:1920":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:23072:2389":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:53795:19815":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"4:15755:1747":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"17:0:1801":{"crate_id":17,"path":["object"],"kind":"module"},"17:10136:43818":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:5721:3830":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"4:11128:3316":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"15:230:3690":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"4:8426:1915":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:12957:49250":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"5:3554:3091":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"1:24758:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:51300:52961":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:3987:39474":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:3521:42188":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"12:399:3674":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:53599:19803":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"12:1703:3683":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:4903:42839":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"16:5948:4025":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"4:14556:3064":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:9131:2316":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"5:853:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:2867:104":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:51595:52896":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"5:3960:3491":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:6902:39810":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"4:10905:2295":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"17:12573:48712":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:5405:40291":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:49671:2596":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:48388:1914":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:51577:2530":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:10540:119":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"17:9988:43873":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:12770:48855":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:2041:3007":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:10816:2397":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:9561:4112":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:10340:4188":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:50130:2426":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"4:11224:33347":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:6286:3688":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:23202:2380":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:4823:2462":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:6114:40705":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"5:1626:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"5:2396:3475":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:3129:4041":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:13428:49838":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"4:4157:3298":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:12003:48556":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"4:11196:3315":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:46545:2631":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:10215:2703":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:2900:183":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:11085:4179":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:2748:580":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"16:6342:3846":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"4:13342:4454":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"16:5698:3829":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:11547:44514":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"12:787:3127":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:49657:2836":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"12:815:3128":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:11937:44041":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:13020:2753":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"4:8847:1922":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:6717:3855":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"4:11898:3113":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:607:36632":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:23407:2393":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"16:4599:42775":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:4144:2508":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"1:47057:2285":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:11907:48503":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"14:0:1798":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"6:6057:37477":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"4:10435:30244":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"16:7208:3868":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:46876:2274":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"0:39:1585":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"17:13549:49853":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"5:7473:2066":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"18:0:1802":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:46937:2286":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:6931:39814":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:51454:2546":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:3890:1979":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:51346:2545":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:10874:44007":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"12:895:3660":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"17:13180:49358":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:24393:5076":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"4:10587:3078":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:7471:3767":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:12130:48681":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:9259:42184":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:7184:4076":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:48010:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"4:5158:3313":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"4:1510:3130":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:13129:49311":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:11769:44736":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"5:8466:3379":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:50341:2841":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:3454:1954":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"4:4236:3041":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:46867:2273":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:3365:1894":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"12:2398:52809":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:3494:42187":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:12026:48613":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"4:3419:4344":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:49689:2746":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"5:1701:3124":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:49298:2957":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"4:8275:3112":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:11956:44040":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:56601:237":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:8389:3465":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"4:3086:3275":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:4127:39644":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:8403:52784":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:50460:2775":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:9291:43792":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"4:1622:3134":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:7200:3788":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"4:15131:3314":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:23738:28382":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"6:4485:39681":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:49977:2761":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:23405:2514":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:3231:115":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:49863:2755":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:3388:1867":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:23396:2392":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:12406:48700":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"4:11822:54304":{"crate_id":4,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"1:25055:167":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"4:10473:31216":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"16:5427:3818":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"18:637:60252":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"4:11220:2981":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"4:13673:3175":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:50298:2435":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"18:651:4226":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:9466:43813":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:10831:4121":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:10004:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"16:6026:3766":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:46536:10737":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:24334:5033":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:13917:49948":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:13016:49251":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"4:8197:3490":{"crate_id":4,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"1:3415:1946":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"17:607:43800":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:24509:2819":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:11130:43824":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"12:2036:2066":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:5248:1890":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"17:681:43801":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"4:5432:3061":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:3029:4031":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:3960:39624":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"4:6106:3333":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:13281:49469":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:2314:4187":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:10781:146":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"4:14975:3161":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"4:1636:3135":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:48783:67":{"crate_id":1,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"16:0:1800":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:12766:2916":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:10801:4147":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:3836:2566":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:4321:39661":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:8849:4173":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:4464:39679":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"12:843:3124":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:10104:4200":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"4:8433:1916":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"4:13784:3176":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:24370:2658":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"4:14391:54123":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:1537:37511":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:8419:1879":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"16:6060:3809":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:3255:127":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:2173:7578":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"4:7119:186":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"4:5520:3068":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:51725:2547":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:11591:44517":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"12:1682:3682":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:48768:70":{"crate_id":1,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"17:13557:49854":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"5:8232:3394":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"4:6577:2969":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:52615:2535":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:47807:2066":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"17:9883:59829":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:5447:40296":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"4:13986:3038":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"12:750:2613":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:4308:39659":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"12:559:143":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:12383:48699":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:3484:1959":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"12:432:3673":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:7051:3858":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:13573:49856":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"4:10728:3219":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:6873:2039":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:47926:2614":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"}},"external_crates":{"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":18}