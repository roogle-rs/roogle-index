{"root":"0:0:1542","crate_version":"1.4.0","includes_private":false,"index":{"4:1075:2910":{"id":"4:1075:2910","crate_id":4,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:1076:2078","4:1077:2909","4:1078:53499","4:1079:53498","4:1080:53500","4:1081:53497","4:1082:53496"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3679:1856":{"id":"1:3679:1856","crate_id":1,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3182:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:13927:136":{"id":"1:13927:136","crate_id":1,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:13928:261","1:13929:500","1:13930:264","1:13931:1057"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13543:145":{"id":"1:13543:145","crate_id":1,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13544:166","1:13545:145","1:13546:744"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10322:141":{"id":"1:10322:141","crate_id":1,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10323:631","1:10324:1727","1:10325:51589","1:10326:51590","1:10327:51591","1:10328:51592","1:10329:51593","1:10330:51594","1:10331:51595","1:10332:51596","1:10333:51597","1:10334:51598","1:10335:51599","1:10336:51600","1:10337:51601","1:10338:1497"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3086:212":{"id":"1:3086:212","crate_id":1,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3088:122","1:3089:1384"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:22822:2435":{"id":"1:22822:2435","crate_id":1,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"1:23471:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22813:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:5649:2932":{"id":"4:5649:2932","crate_id":4,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5650:56127","4:5651:53253","4:5652:53237","4:5653:56128","4:5654:3284","4:5655:3285","4:5656:56129","4:5657:1274","4:5658:56130","4:5659:56131","4:5660:56132","4:5661:56133","4:5662:56134","4:5663:56135","4:5664:56136","4:5665:56137"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5693:2937":{"id":"4:5693:2937","crate_id":4,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5694:53253"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10098:105":{"id":"1:10098:105","crate_id":1,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10099:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3187:102":{"id":"1:3187:102","crate_id":1,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"1:2799:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3280:1908":{"id":"1:3280:1908","crate_id":1,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3282:1326"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3189:204":{"id":"1:3189:204","crate_id":1,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13249:56415":{"id":"1:13249:56415","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47161:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12825:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6045:2994":{"id":"5:6045:2994","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8276:200"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8276:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:4539:2947":{"id":"4:4539:2947","crate_id":4,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4540:2835","4:4541:55965","4:4543:55966","4:4544:55967","4:4545:2967","4:4546:55968","4:4547:55481","4:4549:55969","4:4550:2042","4:4551:3115","4:4552:2024","4:4554:2036"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6023":{"id":"5:6023","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5843:1310","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6024:57066","5:6025:2834","5:6028:57067","5:6031:57068","5:6043:57069","5:6044:57070","5:6045:2994","5:6046:53499","5:6047:53498"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:10115:174":{"id":"1:10115:174","crate_id":1,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10116:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3083:130":{"id":"1:3083:130","crate_id":1,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3085:660"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3420:1829":{"id":"1:3420:1829","crate_id":1,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3421:558"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3288:1905":{"id":"1:3288:1905","crate_id":1,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3290:539"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8384:152":{"id":"1:8384:152","crate_id":1,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8385:2017","1:8386:899","1:8387:2019","1:8388:477","1:8390:2020","1:8393:2021","1:8394:2022","1:8395:2023","1:8396:2024","1:8398:2025","1:8400:2026","1:8401:2027","1:8403:818","1:8406:2028","1:8413:2029","1:8415:2030","1:8418:2031","1:8419:2032","1:8420:2033","1:8422:2034","1:8424:2035","1:8427:1278","1:8428:2036","1:8429:2037","1:8433:2038","1:8436:2039","1:8437:2040","1:8438:2041","1:8440:2042","1:8441:1837","1:8443:2043","1:8446:2044","1:8448:2045","1:8458:2046","1:8473:2047","1:8475:2048","1:8479:2049","1:8488:2050","1:8491:2051","1:8493:2052","1:8496:260","1:8503:277","1:8510:2053","1:8517:2054","1:8526:2055","1:8536:992","1:8543:2056","1:8550:2057","1:8551:2058","1:8552:2059","1:8564:2060","1:8571:2061","1:8583:2062","1:8590:2063","1:8591:2064","1:8596:2065","1:8599:2066","1:8602:2067","1:8603:2068","1:8605:2069","1:8607:397","1:8610:2070","1:8613:975","1:8616:2071","1:8619:584","1:8622:2072","1:8625:884","1:8627:803","1:8629:769","1:8631:692","1:8633:675","1:8635:2073","1:8636:2074","1:8644:2075"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8198:1831":{"id":"1:8198:1831","crate_id":1,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8200:2014","1:8202:2015","1:8203:2016"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9118:1995":{"id":"1:9118:1995","crate_id":1,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3245:1898":{"id":"1:3245:1898","crate_id":1,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3247:166","1:3248:249"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13217:53613":{"id":"1:13217:53613","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"1:12815:2310","prim@char":"4:15722:1699"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12825:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12825:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12840:2314","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13182:56408":{"id":"1:13182:56408","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6351:207":{"id":"5:6351:207","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6352:2081"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:0:1542":{"id":"0:0:1542","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[215,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\n# #[macro_use]\n# extern crate lazy_static;\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.4.0\")]","#![no_std]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:39:1548","0:41:1549","0:38:1542"]}},"1:13261:56418":{"id":"1:13261:56418","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"str::rmatch_indices":"4:15728:1704","self::pattern":"1:12815:2310","prim@char":"4:15722:1699","`DoubleEndedIterator`":"1:8233:115"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"1:49269:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12825:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3552:1923":{"id":"1:3552:1923","crate_id":1,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3554:50831","1:3555:50832","1:3556:50833"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3182:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:13264:56419":{"id":"1:13264:56419","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"str::match_indices":"4:15728:1704","`DoubleEndedIterator`":"1:8233:115","self::pattern":"1:12815:2310","prim@char":"4:15722:1699"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"1:49287:2695","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12825:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12825:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12840:2314","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13305:56431":{"id":"1:13305:56431","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"4:15722:1699"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"1:49436:2706","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13211:50833":{"id":"1:13211:50833","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"1:12815:2310","prim@char":"4:15722:1699"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12825:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3348:1919":{"id":"1:3348:1919","crate_id":1,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3350:1207"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:41:1549":{"id":"0:41:1549","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[213,0],"end":[215,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["lazy",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"LazyStatic","id":"0:39:1548","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"1:3409:1857":{"id":"1:3409:1857","crate_id":1,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3410:525"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"1:3396:111","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13181:56407":{"id":"1:13181:56407","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13201:53913":{"id":"1:13201:53913","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"4:15728:1704"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23471:2418":{"id":"1:23471:2418","crate_id":1,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:23472:2434"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:23467:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"1:3187:102","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3185:202":{"id":"1:3185:202","crate_id":1,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10117:2284":{"id":"1:10117:2284","crate_id":1,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10118:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6031:57068":{"id":"5:6031:57068","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8276:200"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8276:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3177:195":{"id":"1:3177:195","crate_id":1,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13528:133":{"id":"1:13528:133","crate_id":1,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13529:166","1:13530:991"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13237:56413":{"id":"1:13237:56413","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12815:2310","prim@char":"4:15722:1699","str::split":"4:15728:1704","`DoubleEndedIterator`":"1:8233:115","str::rsplit_terminator":"4:15728:1704"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"1:49169:2690","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12825:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13278:56426":{"id":"1:13278:56426","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"1:12815:2310","prim@char":"4:15722:1699"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12825:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13224:2012":{"id":"1:13224:2012","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"1:12815:2310","prim@char":"4:15722:1699","`None`":"1:47161:161"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47161:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12825:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12825:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12840:2314","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13287:56427":{"id":"1:13287:56427","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:15722:1699","self::pattern":"1:12815:2310"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12825:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12825:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12840:2314","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3080:144":{"id":"1:3080:144","crate_id":1,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3082:2006"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6047:53498":{"id":"5:6047:53498","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"4:15728:1704"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8276:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8185:131":{"id":"1:8185:131","crate_id":1,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8187:663"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13252:56416":{"id":"1:13252:56416","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47161:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12825:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12825:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12840:2314","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10107:2280":{"id":"1:10107:2280","crate_id":1,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10108:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10119:2273":{"id":"1:10119:2273","crate_id":1,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10120:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3186:201":{"id":"1:3186:201","crate_id":1,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2777:2536":{"id":"1:2777:2536","crate_id":1,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2779:50045"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3182:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"1:2774:93","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13220:2053":{"id":"1:13220:2053","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"prim@char":"4:15722:1699","`None`":"1:47161:161","self::pattern":"1:12815:2310"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47161:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12825:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13228:53921":{"id":"1:13228:53921","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"`DoubleEndedIterator`":"1:8233:115","str::split_whitespace":"4:15728:1704","self::pattern":"1:12815:2310","str::rsplit":"4:15728:1704","prim@char":"4:15722:1699"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"1:49119:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12825:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3463:1929":{"id":"1:3463:1929","crate_id":1,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3465:221","1:3466:191","1:3467:51534"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13271:56422":{"id":"1:13271:56422","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3155:110":{"id":"1:3155:110","crate_id":1,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3156:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13214:53611":{"id":"1:13214:53611","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:15722:1699","self::pattern":"1:12815:2310"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12825:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6367:2950":{"id":"4:6367:2950","crate_id":4,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6368:55809","4:6369:36392","4:6370:55810","4:6371:55811","4:6372:55812","4:6373:55813"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10429:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10357:2264":{"id":"1:10357:2264","crate_id":1,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10358:141","1:10359:13492","1:10360:50223"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3644:1926":{"id":"1:3644:1926","crate_id":1,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3646:52406"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13300:53497":{"id":"1:13300:53497","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3423:125":{"id":"1:3423:125","crate_id":1,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3425:359"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"1:3426:126","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:22628:2419":{"id":"1:22628:2419","crate_id":1,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22618:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:5561:3031":{"id":"4:5561:3031","crate_id":4,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5562:4083","4:5563:55403"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10429:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13184:56409":{"id":"1:13184:56409","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"4:15728:1704"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3716:1931":{"id":"1:3716:1931","crate_id":1,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6044:57070":{"id":"5:6044:57070","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:8276:200","`Box<str>`":"5:421:1832"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:1832","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8035:3318","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8276:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5627:2933":{"id":"4:5627:2933","crate_id":4,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5628:55239","4:5629:55241","4:5630:55240","4:5631:55242"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6767:2917":{"id":"4:6767:2917","crate_id":4,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6768:55312"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:4614:2970":{"id":"4:4614:2970","crate_id":4,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4615:53262","4:4616:36244","4:4617:53264","4:4618:53263"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3292:1907":{"id":"1:3292:1907","crate_id":1,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3294:1081"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2875:169":{"id":"1:2875:169","crate_id":1,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2877:975","1:2878:803","1:2879:769","1:2880:692","1:2881:675"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3182:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"1:2829:168","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13273:56423":{"id":"1:13273:56423","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6769:2919":{"id":"4:6769:2919","crate_id":4,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6770:55785"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12840:2314":{"id":"1:12840:2314","crate_id":1,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:12842:2007","1:12843:50686","1:12844:50687"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"1:12834:2313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:5683:2936":{"id":"4:5683:2936","crate_id":4,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5684:55428","4:5685:55429","4:5686:55430","4:5687:55431"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13302:56430":{"id":"1:13302:56430","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"4:15722:1699"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"1:49418:2704","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:39:1548":{"id":"0:39:1548","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[185,0],"end":[188,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3272:1901":{"id":"1:3272:1901","crate_id":1,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3273:166","1:3274:890"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:7685:3169":{"id":"4:7685:3169","crate_id":4,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:7686:56196"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8148:2507":{"id":"1:8148:2507","crate_id":1,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8150:2068"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3255:1900":{"id":"1:3255:1900","crate_id":1,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3257:166","1:3258:869"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13999:2514":{"id":"1:13999:2514","crate_id":1,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:14000:53043","1:14001:53044","1:14002:53045","1:14003:53046","1:14004:53047","1:14005:53048","1:14006:2042"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5697:2938":{"id":"4:5697:2938","crate_id":4,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5698:56105"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10429:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13205:3115":{"id":"1:13205:3115","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"1:49105:2686","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6043:57069":{"id":"5:6043:57069","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8276:200"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8276:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6593:2932":{"id":"4:6593:2932","crate_id":4,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6594:55909","4:6595:55376","4:6596:55377","4:6597:55379","4:6598:55378","4:6599:55380","4:6600:55381","4:6601:55383","4:6602:55384","4:6603:55387","4:6604:55388","4:6605:55389","4:6606:55390","4:6607:55391","4:6608:55392","4:6609:55385","4:6610:55386"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5775:3312":{"id":"5:5775:3312","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5777:166","5:5778:414"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3182:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:13187:55403":{"id":"1:13187:55403","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12286:2864"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5705:2940":{"id":"4:5705:2940","crate_id":4,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5706:53237"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6046:53499":{"id":"5:6046:53499","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"4:15728:1704"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8276:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13209:56412":{"id":"1:13209:56412","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"1:49383:2700","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8233:115":{"id":"1:8233:115","crate_id":1,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8234:2007","1:8235:2008","1:8236:2009","1:8237:2010","1:8241:2011","1:8244:2012"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8384:152","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13178":{"id":"1:13178","crate_id":1,"name":null,"span":null,"visibility":{"restricted":{"parent":"1:12275:1310","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["1:13179:770","1:13180:2013","1:13181:56407","1:13182:56408","1:13184:56409","1:13187:55403","1:13188:56410","1:13189:287","1:13190:53894","1:13191:1547","1:13193:50088","1:13195:50089","1:13197:50090","1:13199:3112","1:13200:56411","1:13201:53913","1:13202:53914","1:13203:2724","1:13204:2339","1:13205:3115","1:13206:14066","1:13207:14104","1:13208:3660","1:13209:56412","1:13210:14095","1:13211:50833","1:13214:53611","1:13217:53613","1:13220:2053","1:13224:2012","1:13228:53921","1:13231:13702","1:13234:53924","1:13237:56413","1:13240:56414","1:13243:53926","1:13246:53928","1:13249:56415","1:13252:56416","1:13255:1726","1:13258:56417","1:13261:56418","1:13264:56419","1:13267:56420","1:13269:56421","1:13271:56422","1:13273:56423","1:13274:56424","1:13275:56425","1:13278:56426","1:13281:33415","1:13284:53930","1:13287:56427","1:13290:56428","1:13293:56429","1:13296:2545","1:13298:2909","1:13299:53500","1:13300:53497","1:13301:53496","1:13302:56430","1:13304:2912","1:13305:56431"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:13281:33415":{"id":"1:13281:33415","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"1:12815:2310","prim@char":"4:15722:1699"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47161:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12825:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13197:50090":{"id":"1:13197:50090","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10716:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10716:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:3309:1910":{"id":"1:3309:1910","crate_id":1,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3311:166","1:3312:336"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13290:56428":{"id":"1:13290:56428","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:15722:1699","self::pattern":"1:12815:2310"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12825:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12754:2261":{"id":"1:12754:2261","crate_id":1,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:12755:121","1:12756:50561"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3638:132":{"id":"1:3638:132","crate_id":1,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3640:666"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"1:3633:208","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:4596:2275":{"id":"4:4596:2275","crate_id":4,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4597:1727","4:4598:53349","4:4600:53350","4:4601:3582","4:4602:53351","4:4603:53352","4:4604:50619","4:4613:2042"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3335:1916":{"id":"1:3335:1916","crate_id":1,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3337:337"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10109:2281":{"id":"1:10109:2281","crate_id":1,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10110:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3481:1920":{"id":"1:3481:1920","crate_id":1,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3483:166","1:3484:730"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3182:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"4:6465:3034":{"id":"4:6465:3034","crate_id":4,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6466:55958","4:6467:55959"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3276:1904":{"id":"1:3276:1904","crate_id":1,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3278:250"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12262:2902":{"id":"1:12262:2902","crate_id":1,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:12263:2017","1:12264:53039"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:22777:28133":{"id":"1:22777:28133","crate_id":1,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:22778:50492","1:22779:53155","1:22780:53156"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22770:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13240:56414":{"id":"1:13240:56414","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"prim@char":"4:15722:1699","str::split":"4:15728:1704","self::pattern":"1:12815:2310","str::split_terminator":"4:15728:1704"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"1:49187:2691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12825:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12825:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12840:2314","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12834:2313":{"id":"1:12834:2313","crate_id":1,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:12836:2332","1:12837:899","1:12838:52915","1:12839:52916"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2774:93":{"id":"1:2774:93","crate_id":1,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2776:1689"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3182:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"4:6771:2920":{"id":"4:6771:2920","crate_id":4,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6772:56251"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13203:2724":{"id":"1:13203:2724","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:15722:1699"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"1:49089:2684","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13293:56429":{"id":"1:13293:56429","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"1:12815:2310","prim@char":"4:15722:1699"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12825:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12825:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12840:2314","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3343:1918":{"id":"1:3343:1918","crate_id":1,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3345:1204"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13274:56424":{"id":"1:13274:56424","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3621:1924":{"id":"1:3621:1924","crate_id":1,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3182:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"1:3552:1923","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13296:2545":{"id":"1:13296:2545","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12754:2261","`FromStr`":"1:12754:2261"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47288:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"1:12754:2261","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"1:12754:2261","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4682:2428":{"id":"1:4682:2428","crate_id":1,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4683:2017","1:4684:50161","1:4685:2019"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6345:2913":{"id":"4:6345:2913","crate_id":4,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6346:3284","4:6347:3285","4:6348:55498","4:6349:56312","4:6351:56316","4:6353:56313","4:6354:56314","4:6356:56315"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10429:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10113:2283":{"id":"1:10113:2283","crate_id":1,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10114:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:9209:3044":{"id":"4:9209:3044","crate_id":4,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:9210:56233","4:9211:56234","4:9212:56235","4:9213:56236","4:9214:2736","4:9215:28521","4:9216:56232"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10429:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:5779:3314":{"id":"5:5779:3314","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5781:166","5:5782:14190"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13267:56420":{"id":"1:13267:56420","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8189:146":{"id":"1:8189:146","crate_id":1,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8190:2017","1:8191:2018","1:8192:745"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10111:2282":{"id":"1:10111:2282","crate_id":1,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10112:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3250:1903":{"id":"1:3250:1903","crate_id":1,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3252:166","1:3253:1325"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3182:1827":{"id":"1:3182:1827","crate_id":1,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2865:162":{"id":"1:2865:162","crate_id":1,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2866:397","1:2867:2057","1:2868:2058","1:2869:2077"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"1:2834:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"1:2875:169","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:8152:2509":{"id":"1:8152:2509","crate_id":1,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8154:2069"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6028:57067":{"id":"5:6028:57067","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8276:200"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8276:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12825:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13231:13702":{"id":"1:13231:13702","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:15722:1699","self::pattern":"1:12815:2310"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"1:12607:2656","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12825:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3266:1902":{"id":"1:3266:1902","crate_id":1,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3268:166","1:3269:1080"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3429:127":{"id":"1:3429:127","crate_id":1,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3431:166","1:3432:361"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13202:53914":{"id":"1:13202:53914","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"4:15728:1704"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13246:53928":{"id":"1:13246:53928","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"str::splitn":"4:15728:1704","self::pattern":"1:12815:2310","prim@char":"4:15722:1699"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"1:49241:2663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12825:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12825:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12840:2314","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3304:1909":{"id":"1:3304:1909","crate_id":1,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3306:166","1:3307:334"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13195:50089":{"id":"1:13195:50089","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10716:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10716:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:38:1542":{"id":"0:38:1542","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[167,0],"end":[179,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"kind":"macro","inner":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"},"1:3426:126":{"id":"1:3426:126","crate_id":1,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3428:360"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"1:3429:127","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:772:206":{"id":"5:772:206","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:773:2078","5:774:2079","5:775:2080"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2829:168":{"id":"1:2829:168","crate_id":1,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2831:584","1:2832:884"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3182:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:8659:2422":{"id":"1:8659:2422","crate_id":1,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8384:152","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3319:1913":{"id":"1:3319:1913","crate_id":1,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3321:166","1:3322:1203"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10105:114":{"id":"1:10105:114","crate_id":1,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10106:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13193:50088":{"id":"1:13193:50088","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:47161:161"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47161:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10716:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10716:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10312:137":{"id":"1:10312:137","crate_id":1,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10313:694","1:10315:53101"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8662:2423":{"id":"1:8662:2423","crate_id":1,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8384:152","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:2565:122":{"id":"4:2565:122","crate_id":4,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:2566:50260","4:2568:1763","4:2569:56199","4:2570:56200"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"1:10098:105","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"1:10105:114","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13199:3112":{"id":"1:13199:3112","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"str::slice_mut_unchecked":"4:15728:1704","crate::ops::Index":"1:3481:1920","`str`":"4:15728:1704"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:8258:1830":{"id":"1:8258:1830","crate_id":1,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8259:770","1:8260:2013"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8384:152","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3633:208":{"id":"1:3633:208","crate_id":1,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3634:166","1:3635:1926","1:3636:665","1:3637:352"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"1:3638:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"1:3633:208","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13204:2339":{"id":"1:13204:2339","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:15722:1699"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"1:49095:2685","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13234:53924":{"id":"1:13234:53924","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"`DoubleEndedIterator`":"1:8233:115","self::pattern":"1:12815:2310","prim@char":"4:15722:1699","str::split":"4:15728:1704"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"1:49137:2659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12825:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12825:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12840:2314","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3396:111":{"id":"1:3396:111","crate_id":1,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3397:205","1:3398:523"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6861:2916":{"id":"4:6861:2916","crate_id":4,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6862:55844"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:7713:2425":{"id":"1:7713:2425","crate_id":1,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7714:50497","1:7715:50498","1:7716:50495","1:7717:50493","1:7718:50499","1:7719:50496","1:7720:50494"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"1:2799:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"1:2875:169","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13298:2909":{"id":"1:13298:2909","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:4899:3013":{"id":"4:4899:3013","crate_id":4,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4900:2563","4:4901:56117"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10716:198":{"id":"1:10716:198","crate_id":1,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:10718:166","1:10719:1547","1:10720:50088","1:10721:50089","1:10722:50090","1:10723:730","1:10724:731"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3182:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10707:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13191:1547":{"id":"1:13191:1547","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:47161:161"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47161:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10716:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10716:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13269:56421":{"id":"1:13269:56421","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13189:287":{"id":"1:13189:287","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"4:15739:1713","str::as_mut_ptr":"4:15728:1704"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3077:73":{"id":"1:3077:73","crate_id":1,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3079:2005"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3182:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"5:6025:2834":{"id":"5:6025:2834","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8276:200"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8276:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12825:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12825:2311":{"id":"1:12825:2311","crate_id":1,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:12827:2313","1:12828:51483","1:12829:51484","1:12830:51485","1:12831:51487","1:12832:51486","1:12833:51488"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5635:2934":{"id":"4:5635:2934","crate_id":4,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5636:53237","4:5637:55755","4:5638:55756"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5643:2935":{"id":"4:5643:2935","crate_id":4,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5644:53237","4:5645:55375"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3012:2272":{"id":"1:3012:2272","crate_id":1,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:3011:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13255:1726":{"id":"1:13255:1726","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"prim@char":"4:15722:1699","`DoubleEndedIterator`":"1:8233:115","self::pattern":"1:12815:2310","str::matches":"4:15728:1704"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"1:49323:2697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12825:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3218:1828":{"id":"1:3218:1828","crate_id":1,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13210:14095":{"id":"1:13210:14095","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"1:49411:2703","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13207:14104":{"id":"1:13207:14104","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"4:15728:1704"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"1:49402:2702","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13284:53930":{"id":"1:13284:53930","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:15722:1699","self::pattern":"1:12815:2310"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47161:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12825:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12825:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12840:2314","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10048:2275":{"id":"1:10048:2275","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10049:1497","1:10050:50618","1:10052:50619"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13208:3660":{"id":"1:13208:3660","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"1:49373:2699","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3325:1914":{"id":"1:3325:1914","crate_id":1,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3327:166","1:3328:1206"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13275:56425":{"id":"1:13275:56425","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"1:12815:2310","prim@char":"4:15722:1699"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12825:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12825:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"1:12845:2309","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13258:56417":{"id":"1:13258:56417","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"`DoubleEndedIterator`":"1:8233:115","str::matches":"4:15728:1704","prim@char":"4:15722:1699","self::pattern":"1:12815:2310"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"1:49341:2698","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12825:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12825:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12840:2314","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3485:1921":{"id":"1:3485:1921","crate_id":1,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3487:731"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3182:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"1:3481:1920","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:8666:2424":{"id":"1:8666:2424","crate_id":1,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"1:7713:2425","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3284:1906":{"id":"1:3284:1906","crate_id":1,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3286:870"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3339:1917":{"id":"1:3339:1917","crate_id":1,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3341:340"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3297:1912":{"id":"1:3297:1912","crate_id":1,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3298:166","1:3299:930"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3314:1911":{"id":"1:3314:1911","crate_id":1,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3316:166","1:3317:339"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2834:119":{"id":"1:2834:119","crate_id":1,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"1:2829:168","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:12845:2309":{"id":"1:12845:2309","crate_id":1,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12840:2314","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:6695:2915":{"id":"4:6695:2915","crate_id":4,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6696:53239","4:6697:55447"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10429:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:6698:2913":{"id":"4:6698:2913","crate_id":4,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6699:55499"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10429:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3090:211":{"id":"1:3090:211","crate_id":1,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3092:122","1:3093:1383"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3260:1899":{"id":"1:3260:1899","crate_id":1,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3262:166","1:3263:538"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3904:68":{"id":"1:3904:68","crate_id":1,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3905:1397"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"1:13180:2013":{"id":"1:13180:2013","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13304:2912":{"id":"1:13304:2912","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"4:15722:1699"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"1:49427:2705","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13299:53500":{"id":"1:13299:53500","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13301:53496":{"id":"1:13301:53496","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13200:56411":{"id":"1:13200:56411","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"str::slice_unchecked":"4:15728:1704","crate::ops::IndexMut":"1:3485:1921","`str`":"4:15728:1704"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:2799:100":{"id":"1:2799:100","crate_id":1,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2800:391","1:2801:393"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13190:53894":{"id":"1:13190:53894","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:15739:1713"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6024:57066":{"id":"5:6024:57066","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:1832","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8035:3318","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:1832","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8035:3318","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13179:770":{"id":"1:13179:770","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:15722:1699"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13243:53926":{"id":"1:13243:53926","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"1:12815:2310","prim@char":"4:15722:1699","str::rsplitn":"4:15728:1704"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"1:49223:2662","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12825:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13188:56410":{"id":"1:13188:56410","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"4:5555:3029":{"id":"4:5555:3029","crate_id":4,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5556:55454","4:5557:3406"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10429:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:9119:1994":{"id":"1:9119:1994","crate_id":1,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:4621:2952":{"id":"4:4621:2952","crate_id":4,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4622:55104","4:4623:55105","4:4624:55107","4:4626:2972","4:4627:55106","4:4629:53921","4:4630:3660"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"4:4539:2947","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3331:1915":{"id":"1:3331:1915","crate_id":1,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3333:335"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3074:74":{"id":"1:3074:74","crate_id":1,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3076:288"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3182:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:13206:14066":{"id":"1:13206:14066","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"4:15728:1704"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"1:49393:2701","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"16:7279:4018":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"4:10474:2212":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"1:57111:50381":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"6:624:36527":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:4470:39560":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"4:10923:2998":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"1:23800:2548":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"5:1634:3058":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"9:776:3525":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"17:11277:43356":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"4:10456:3207":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"6:4272:39536":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:1744:37422":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:6219:3845":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"4:10430:3183":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:47592:85":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:4425:39555":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:46448:2382":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:9240:2311":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"4:11111:55311":{"crate_id":4,"path":["std","net","parser","AddrKind"],"kind":"enum"},"17:13582:49419":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"4:11203:3303":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:13446:49400":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:9368:43375":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"12:812:3060":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:4008:43573":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:23841:4991":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:13564:49417":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"5:1443:3068":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:4641:42340":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:49402:2702":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"16:4230:42179":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:23823:4990":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"4:12021:1872":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"12:976:3065":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:49643:2324":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:4431:39556":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:5273:3723":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:1717:37419":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:13098:48871":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"6:5347:40163":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"16:3714:41763":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:24567:2760":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:10912:43671":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"4:70:1458":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"5:3021:56401":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:12494:48270":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"4:15138:3269":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:49827:2712":{"crate_id":1,"path":["core","str","LinesAnyMap"],"kind":"struct"},"6:4300:39539":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:24295:2753":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"6:3918:39502":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:525:36515":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:6591:3855":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"6:6155:40576":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:32092:50464":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"16:7761:3874":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:12607:2656":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"5:5478:1868":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:55696:2412":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:52453:2482":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:48706:2906":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"4:14382:2969":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:52246:2462":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:4517:39565":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"4:4346:2992":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"5:8075:57346":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:8185:131":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:9971:59489":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:9186:4051":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:50973:2447":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:49499:2312":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:12142:48245":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"16:0:1760":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:3481:1920":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"4:15472:4315":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:8849:4107":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:46256:2368":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"4:8914:55476":{"crate_id":4,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:13609:49422":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:13619:172":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"4:11870:55474":{"crate_id":4,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"16:4922:42396":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:48492:3134":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"17:11640:44118":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:543:36518":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:7870:3803":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"4:15733:1707":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"4:3563:2974":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:51015:50443":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:11434:43793":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:45974:2588":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:12155:48246":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"4:11832:3165":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"4:9085:3178":{"crate_id":4,"path":["std","lazy","SyncOnceCell"],"kind":"struct"},"17:12598:48277":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"9:927:41340":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:12834:2313":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:12725:48352":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"19:117:59518":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"1:51982:2449":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:12262:2902":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:6014:3840":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"16:5421:3684":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"5:8050:3373":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"5:8067:3374":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:11220:2665":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"9:1075:3546":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"4:10517:30003":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:3018:3972":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:23931:2774":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"5:4643:4267":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:13724:52869":{"crate_id":1,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"6:5522:40201":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:47211:2564":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"16:6152:3796":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"4:11196:3015":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"9:27:3527":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"4:11032:3021":{"crate_id":4,"path":["std","net","ip","IpAddr"],"kind":"enum"},"6:161:36205":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:6200:40579":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:12754:2261":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:2202:2252":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"16:7295:3814":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:5472:3689":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"5:8097:179":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"18:766:59504":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:22622:2416":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"4:11029:3017":{"crate_id":4,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"1:47760:88":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"12:2323:58616":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:1547:37403":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:13842:49477":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:11628:44117":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"5:5779:3314":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:49859:2714":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:6357:3848":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:10028:43439":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:49062:2789":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:12118:48186":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:10119:2273":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:52912:2439":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"12:160:3613":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:4614:42338":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"16:7216:3868":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:23565:2744":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:10071:4146":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"4:6367:2950":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:4282:2018":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"4:3529:2979":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:11947:48069":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:12582:48276":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"4:12535:3218":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:13598:49421":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:46655:11258":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:46316:2372":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"4:11952:3095":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:4325:39542":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"16:4535:42284":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"4:6605:55389":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"4:9635:4304":{"crate_id":4,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"17:9592:123":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"17:10377:4122":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"4:1446:3054":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:13370:49040":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"18:667:4173":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:49839:2716":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:13780:49470":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:45666:1922":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"16:7042:4017":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:12685:48344":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:6136:3836":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"9:686:3476":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"1:47203:2563":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:10716:198":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"4:1482:3057":{"crate_id":4,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"4:11855:55364":{"crate_id":4,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"1:11099:2659":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:9659:59486":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:10988:43657":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:12537:48273":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:22353:2490":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"4:10230:43366":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"4:3955:122":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"17:12699:48345":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"5:6892:3324":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:3506:3980":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"4:15729:1705":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"16:5855:3709":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:10052:43441":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:7549:3805":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"5:2758:3443":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"4:14021:2991":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"6:4052:39516":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:11932:48068":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"4:5635:2934":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:537:36517":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"18:169:49877":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"12:853:3055":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"1:49616:2323":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"4:13346:30977":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"6:5528:39413":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:46066:2705":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"4:14307:2923":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:13924:49511":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:8152:2509":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:24431:2756":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"4:13701:3161":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:13154:48876":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:13884:49486":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"4:8632:157":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"4:7573:3161":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"18:801:4159":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:5013:1852":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:12632:48340":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:4459:39559":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"5:5815:4271":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"17:10962:43659":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:12982:48815":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:10312:137":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"15:269:3636":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:3638:132":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:12556:2693":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:50837:2479":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:13520:49410":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"4:3113:2835":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"7:85:41228":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"4:7859:4287":{"crate_id":4,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"1:49223:2662":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"4:894:3186":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"4:14322:53241":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"4:8879:1879":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:12247:48253":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"4:9630:4303":{"crate_id":4,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"17:11159:43390":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"4:2765:3039":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"1:46148:2785":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:6852:39688":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:10611:43601":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:3679:1856":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:9118:1995":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"4:4596:2275":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"1:4835:1840":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:53076:19574":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:52786:2454":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:48243:71":{"crate_id":1,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"5:375:3369":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:5649:2385":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"4:14845:55394":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"9:0:1754":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:10279:4035":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:7406:3800":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:4040:39514":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:8258:1830":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:48984:2672":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"12:1235:3612":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"4:1075:2910":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"4:10241:55501":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:49831:2715":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:48948:2670":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"16:6072:3815":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"4:11981:3097":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:6780:3858":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:2945:3993":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:563:36519":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:23944:2773":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:52849:2474":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:3280:1908":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:5672:3698":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"4:10561:3447":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"12:2009:2018":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:38483:2271":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"4:1507:3062":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:3241:3977":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:1700:37417":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:5330:41748":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:12431:48265":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"6:1736:37421":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:2188:2248":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:1617:37410":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"12:1159:3609":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"16:4762:42361":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"14:216:41678":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:8902:43367":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:13172:48878":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:13506:49408":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"16:6032:3725":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:46088:2704":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:1665:37414":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:5815:3708":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:4358:39546":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:47340:2564":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"17:11555:44072":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"12:747:2563":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:4347:39545":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:3488:3981":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:0:470":{"crate_id":1,"path":["core"],"kind":"module"},"1:46458:2383":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"5:3729:2563":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"4:11804:166":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"1:8662:2423":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"4:8365:3092":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"18:620:59516":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:45987:2589":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"4:4557:2968":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:53065:19573":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"12:866:3056":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:3195:1854":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"5:909:92":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:2512:4119":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:46095:2886":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"17:9065:43371":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:48929:2668":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:1908:37558":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"6:578:32178":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:7195:3866":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"12:1253:3069":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"4:11997:3098":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:3621:1924":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:11822:44303":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:3304:1909":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"4:12537:4310":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:8724:2608":{"crate_id":1,"path":["core","lazy","OnceCell"],"kind":"struct"},"1:4574:2959":{"crate_id":1,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"6:1723:37420":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"4:13739:3163":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:13532:49413":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"4:11251:33137":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:49383:2700":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"4:7816:4391":{"crate_id":4,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"1:23787:2547":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:11254:4109":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:6091:40572":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:11604:44081":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"4:15742:1716":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"5:1616:3054":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:46178:2787":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:11178:2662":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"4:7559:3160":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"4:11026:3016":{"crate_id":4,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"16:7420:3818":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"12:877:3057":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"6:5185:40152":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:9839:4063":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:11378:4045":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:4511:39564":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:3276:1904":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:10656:43584":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"4:1041:3037":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:53122:19578":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:53085:19575":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:13547:49415":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:10113:2283":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:4095:39521":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:12456:48267":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"4:8574:1871":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:11847:44317":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:681:43366":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"5:1458:3067":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:46028:2890":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"4:10976:2382":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"4:5683:2936":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:49843:2720":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:5561:3694":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"16:6101:3792":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:22824:2434":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:4013:39511":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:4575:219":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:10844:4063":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:2211:2253":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:13062:48870":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"4:14392:55782":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:2429:2429":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"4:12095:3050":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:3552:1923":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:51102:2480":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:3429:127":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:46072:2885":{"crate_id":1,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"1:13891:186":{"crate_id":1,"path":["core","task","ready","Ready"],"kind":"struct"},"5:3718:155":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:24465:2757":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"5:8089:2018":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"4:4173:2999":{"crate_id":4,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"4:13717:4396":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:2484:43486":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:12182:48248":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"12:2331:3076":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:11539:44071":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"4:15735:1709":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"4:14908:3106":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"12:2315:58619":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"4:11877:53489":{"crate_id":4,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"17:13733:49432":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:49019:2675":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:10435:43497":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:13554:49416":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"5:3025:56404":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:10128:4143":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:46664:2997":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:12845:2309":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"4:4267:3246":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"4:15117:3262":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:2314:4123":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"5:1578:2563":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:7453:3797":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:48176:70":{"crate_id":1,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"6:4066:39518":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"4:9209:3044":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:13402:49397":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:5241:40136":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:6236:2373":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"4:6769:2919":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:46368:2376":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:11458:43794":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:32028:2559":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:50708:50320":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:4651:98":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"16:3041:3973":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"5:1920:3057":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"4:6593:2932":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:6923:41128":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:2991:3982":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:12010:48077":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:7392:3802":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:51180:2472":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"4:14552:3166":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:13221:48924":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"12:181:3617":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:4083:39520":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"4:11300:33140":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:12795:48420":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"5:69:3346":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:46297:2370":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:9799:43382":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"6:5998:40570":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:2816:3987":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:49855:2713":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"4:11148:3263":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"5:1080:4264":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"5:1546:90":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:3331:1915":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"4:7682:3167":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"5:3319:3379":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:3118:3984":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:23879:4993":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:47280:173":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:3218:1828":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:49010:2674":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:300:190":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:49077:2263":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:11015:43683":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"4:15734:1708":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"17:9933:43384":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:12221:48251":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"7:38:41221":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"5:7549:3351":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:13192:48922":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:12467:48268":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:12521:48272":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:47288:190":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"12:463:58614":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"4:10441:55363":{"crate_id":4,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"1:13654:14194":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"16:4304:42228":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"4:11468:3139":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"16:5960:3714":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"18:729:59509":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:13978:49519":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:3292:1907":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:6430:51515":{"crate_id":1,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"1:3396:111":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:6366:3629":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:11137:2660":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:5197:40154":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"18:644:4171":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:10558:43598":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"4:12055:3048":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"16:4671:42345":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"5:1625:3055":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:10331:4063":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:7738:3873":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"16:3549:41753":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:2318:1858":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:10048:2275":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"4:11002:3015":{"crate_id":4,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"5:912:3371":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"5:7753:4276":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:5282:40160":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:10975:43658":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:12552:48274":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:48221:122":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"6:4005:39510":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"12:1100:3066":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"4:2397:30966":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"1:13543:145":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"4:14345:53236":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:12815:2310":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"4:7151:55478":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:632:36528":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:47262:1992":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"18:866:4165":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:6691:3857":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:24533:2759":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:49551:2321":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"4:15720:1697":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"16:4386:42260":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:12891:2317":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"4:10704:113":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:6126:3841":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:4439:39557":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"0:0:1542":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"4:15216:3640":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:7971:122":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:48455:2268":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:13574:49418":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"4:11409:3136":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"4:2852:165":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:10944:2655":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"6:1622:37411":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:157:36204":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"4:1472:3056":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"4:6861:2916":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"4:11392:3135":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"4:11910:2563":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"4:6345:2913":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:7856:3876":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:51558:50458":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:13986:49521":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"4:5838:3302":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:5384:3682":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:46128:2593":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:4494:39562":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"12:2018:3057":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:22400:51226":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:10111:2282":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:10407:4118":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:5269:40158":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:50055:2727":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"4:10944:2971":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"4:3251:3227":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"18:610:4169":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:9210:43374":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:46003:2591":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:47939:2283":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"9:469:41346":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:3314:1911":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:3348:1919":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:610:36525":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"4:6107:3280":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:13348:49038":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"4:6465:3034":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:53056:19572":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"16:3604:41754":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:5231:42605":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"16:5927:3712":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:46278:2389":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:1540:37402":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:2113:7486":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"17:12073:48179":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:9780:2641":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:13830:2430":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"18:704:59503":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"4:1501:3061":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:9769:59478":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:51742:2469":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:9088:43372":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:7965:1865":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:10117:2284":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"5:7311:2018":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"4:10712:3239":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:12307:48257":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:3409:1857":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:8954:4053":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"4:2395:30965":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"4:5627:2933":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:53096:19576":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"5:2181:4266":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"4:10966:2368":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"1:53037:2442":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"16:3320:4032":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"16:7894:3833":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"4:9498:4302":{"crate_id":4,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"4:12528:123":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"4:8530:1870":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:10814:4098":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:3970:2504":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"16:6569:4002":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"12:2309:50492":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"4:10672:2946":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"5:3348:3117":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:48279:2279":{"crate_id":1,"path":["core","fmt","FlagV1"],"kind":"enum"},"16:6424:3850":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"4:15693:30006":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"4:10728:2982":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"18:660:4172":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:4395:39551":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:3260:1899":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:46161:2786":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"4:6767:2917":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:4227:39533":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:4183:39529":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:6881:39692":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:47161:161":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"17:8929:43368":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:6124:40575":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:11665:44120":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"16:6731:4006":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"4:1190:4386":{"crate_id":4,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:10896:2563":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:7146:3862":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:10266:4120":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:49269:2694":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"4:11222:3263":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"8:0:1753":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"4:1018:3209":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"1:2799:100":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"4:8737:1671":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"1:31993:2781":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"4:6607:55391":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:7541:2394":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"14:0:1758":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"4:14375:113":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"4:10655:3033":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"5:6351:207":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"4:15704:55304":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:51299:2448":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:4293:39538":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:4734:42358":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"0:41:1549":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"6:5953:37338":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:9162:4110":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:6870:39691":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"5:1427:3066":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"12:774:2018":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:3287:3979":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"5:8188:97":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"12:2025:3117":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"4:10540:30972":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"1:23636:2747":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"4:5281:3261":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:55815:220":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:4331:39543":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"12:1667:3623":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:1522:37399":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:46143:96":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:22381:50826":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:7892:2996":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"16:3172:3974":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"5:7709:218":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"18:782:59503":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"18:837:2313":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"18:857:4164":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:11231:4111":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:49885:2798":{"crate_id":1,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"4:1518:3063":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"4:14763:3165":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:3343:1918":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:5406:2494":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:13205:48923":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:4317:39541":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:10926:43680":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:9689:59492":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:13377:49052":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:47219:2018":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"4:9460:4301":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:10001:43438":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"4:10533:3071":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:11970:43604":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:23707:4959":{"crate_id":1,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"16:3392:3985":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:4449:39558":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:5433:3685":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"13:0:1752":{"crate_id":13,"path":["std_detect"],"kind":"module"},"4:9582:3255":{"crate_id":4,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"1:50781:2458":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:7928:2244":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"12:2005:2563":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:11406:43785":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"4:15737:1711":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"6:6239:40582":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"5:6628:3399":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"4:4614:2970":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"1:38546:2234":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:55802:220":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"4:1149:30002":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:11689:2678":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"6:4023:39512":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"4:6698:2913":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:13258:48967":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"5:8158:3076":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:5717:3701":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:49137:2659":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:4364:39547":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:2968:3971":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"4:15723:1700":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"1:22681:2434":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:6893:39694":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:13927:136":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:55828:220":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"4:11056:3022":{"crate_id":4,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"16:3338:3716":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"4:15227:3640":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:50942:2459":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:10105:114":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"17:12408:48264":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:10081:4035":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"4:6603:55387":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:3957:39505":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"12:840:3054":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"6:6176:40577":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"5:3019:2078":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:47466:77":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:9600:59477":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:14:1727":{"crate_id":1,"path":["core","write"],"kind":"macro"},"17:9245:4042":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:6208:3844":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"5:6612:1868":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"4:10451:3191":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"1:7713:2425":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:50804:2446":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:4523:39566":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:9005:43369":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:6899:39695":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"4:14683:4313":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:510:43364":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:51353:2455":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:23729:2552":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:49287:2695":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:13746:49433":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"4:4385:2988":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"4:9597:3256":{"crate_id":4,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:4410:39553":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"5:2534:3444":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:3080:144":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"4:1642:3068":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:11147:43389":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:46307:2371":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"9:1056:3538":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:6028:37365":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"4:11228:3283":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:13282:48970":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"5:4185:3056":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:10801:43570":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"4:2565:122":{"crate_id":4,"path":["std","error","Error"],"kind":"trait"},"1:48911:2666":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:3429:3721":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"4:8372:3093":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:47424:87":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:23762:4947":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"4:0:1301":{"crate_id":4,"path":["std"],"kind":"module"},"1:3650:1928":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:3868:39498":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:6554:3853":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:5314:41749":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:0:775":{"crate_id":6,"path":["libc"],"kind":"module"},"17:13394:49370":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:2690:559":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"4:15746:1720":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"6:4145:39527":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:2794:3720":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"4:11154:3264":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:46109:2888":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:9809:59490":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"4:10523:3070":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"6:511:36513":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:4704:42353":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:5987:40569":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:5167:40151":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:10041:43440":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"4:5649:2932":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:12095:48185":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"4:14667:4312":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"16:6166:3842":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:32040:50373":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"12:2039:3119":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"16:5975:3838":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:3951:39504":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:49863:116":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"6:5359:40164":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"0:39:1548":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"1:4639:2238":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:4906:1847":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:6087:3794":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:47676:86":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:4306:39540":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:49393:2701":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"16:4890:42389":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:3522:41752":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"5:8105:2018":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:23471:2418":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:3083:130":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"4:13885:4311":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"18:811:4160":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:3297:1912":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"4:1497:3060":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:11001:43656":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:9551:4108":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"12:1180:3610":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"4:5561:3031":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:45643:184":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"4:11318:3124":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"1:3339:1917":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:55776:220":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"9:603:41451":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:1455:1670":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"1:46357:2390":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:11026:2657":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:3186:201":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"4:7403:114":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"17:12568:48275":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:10101:105":{"crate_id":1,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"6:4193:39530":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"4:14024:2987":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:52060:2456":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:11714:44178":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:6858:39689":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"18:650:4168":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"4:2155:2563":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:4371:39548":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:5996:3839":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:9896:59474":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:4157:4102":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:48471:2267":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:11794:44301":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:10403:4062":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"4:15688:56277":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:4341:39544":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:13578:52914":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:9849:59487":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:46325:50444":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:49847:2718":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"5:3374:3120":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:10950:43682":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"4:13812:3162":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:6887:39693":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"4:7337:170":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"17:13865:49480":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"4:3539:4284":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"4:14750:3164":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:1658:37413":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:11616:44082":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:12645:48341":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:9627:82":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:13318:49036":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:12946:48814":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:10827:4099":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"4:2162:3056":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:7477:3819":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"18:790:4158":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:584:36521":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"13:120:41624":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"12:1651:3622":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:3892:39500":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:8233:115":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:9649:43379":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:48997:2673":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:12659:48342":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"4:14958:3114":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"15:248:3632":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"4:4539:2947":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"16:7884:3804":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"4:12041:1874":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"9:963:3543":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:51526:50340":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:3155:110":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"4:5705:2940":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:9476:43378":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"4:11159:3265":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"17:12287:48256":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"12:968:3064":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"5:7382:4264":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"5:8276:200":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:2865:162":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"4:14332:2945":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:10353:4124":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"4:1530:3065":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"4:14099:2212":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"5:8111:2018":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:3644:1926":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"4:11208:3306":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:10516:4065":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"9:157:3495":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"1:49241:2663":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:50011:4400":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"17:10236:4056":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"4:12046:1880":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"4:7911:3209":{"crate_id":4,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"4:1633:3067":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"4:14535:30979":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:11779:44298":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:53252:19584":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:3862:39497":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:3205:2233":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"16:7467:3798":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:11199:43392":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"16:4350:42249":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"4:4899:3013":{"crate_id":4,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"4:10686:124":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"4:6839:2921":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"18:720:50442":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"5:3466:3057":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"18:136:49875":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:48191:67":{"crate_id":1,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"1:3012:2272":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"6:4478:39561":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:3319:1913":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:13912:49510":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:13898:49504":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"4:5693:2937":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:11064:2658":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:51478:50452":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:10140:4063":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"4:15079:3261":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:4120:39524":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:49537:2318":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:607:43365":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:12671:48343":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:13240:48926":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:2773:3994":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:51035:2436":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:4127:39525":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:4506:42280":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:52959:2457":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:12343:48259":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"18:849:4163":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:12262:48254":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:3426:126":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:53111:19577":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:1554:37404":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"4:2183:3119":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:22770:2426":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:23467:2426":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:45706:2498":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:23815:4972":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:7786:3807":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:4627:2237":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"18:712:2490":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:8762:1673":{"crate_id":1,"path":["core","lazy","Lazy"],"kind":"struct"},"1:52596:2450":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:4112:39523":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:23746:50352":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:13040:13931":{"crate_id":1,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"17:9528:2686":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"4:8806:1877":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:605:36524":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:13772:49469":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"5:5357:2959":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:11304:43393":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:531:36516":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:5130:40108":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:11082:4052":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:13685:49431":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:52707:2470":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:1584:37407":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"14:231:3322":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:5420:40171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"4:8358:187":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:10304:4038":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:6085:40571":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:12040:48177":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"4:12050:1881":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:9622:75":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:1708:37418":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"4:7685:3169":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"9:749:3480":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"1:3284:1906":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"4:15739:1713":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"4:8803:1876":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:6252:3846":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"4:10798:3153":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:3090:211":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"17:12480:48269":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:3288:1905":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:6910:39696":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:47348:2018":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:52029:2453":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"4:11918:3091":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"4:7013:33139":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"1:2774:93":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"5:1666:179":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:6068:37342":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:13306:49034":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:5969:36394":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:11358:4046":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"4:820:4305":{"crate_id":4,"path":["std","thread","local","os","Key"],"kind":"struct"},"17:14000:49555":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"4:9725:4305":{"crate_id":4,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"4:10916:2996":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"1:37326:2490":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"4:10932:2969":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"17:10224:43458":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:49705:2327":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:5029:42428":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:49851:2719":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:45551:179":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"14:194:41670":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:7119:3726":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:45786:2599":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:46018:2889":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"12:469:58610":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:49568:2322":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:50096:2519":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:9759:43381":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:45487:1930":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"6:3881:39499":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"4:10996:2699":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"17:13788:49471":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"4:6695:2915":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"5:781:104":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:2777:2536":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:3187:102":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"6:1630:37412":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"3:0:1749":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:46041:2706":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"5:8221:2786":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:52998:2477":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:32192:50430":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"1:5385:10969":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:49341:2698":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"4:6771:2920":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:4033:39513":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:24499:2758":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:11118:43388":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:10529:43500":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:13163:48877":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"18:774:59503":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"4:14939:3108":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"5:7571:3352":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:5595:3696":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"4:4621:2952":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"1:5432:756":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:46684:11261":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"16:6238:3799":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:2829:168":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:12373:48262":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"5:1655:3060":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:10584:4101":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:51054:50330":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"4:11369:3134":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"17:12741:48353":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:13760:49434":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:53160:19580":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:4839:1841":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:48463:50350":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"4:4383:2987":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:11206:2664":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:7158:3863":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:55854:220":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:24261:2752":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"4:10502:30000":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:12442:48266":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"4:4512:2959":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"17:13540:49414":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:3978:39507":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"4:8294:3428":{"crate_id":4,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"6:5255:40137":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:2004:2959":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:13810:49473":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:4990:1851":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:5945:36435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:11726:44179":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:10211:43452":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"5:8206:3403":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"4:1415:2563":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:983:3372":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"5:7150:3056":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:21:651":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"17:9943:59482":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"6:3972:39353":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"4:8264:3209":{"crate_id":4,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"6:569:36520":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"9:722:3479":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"16:7073:3861":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"4:4344:2991":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:47194:2017":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"16:5580:3695":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:1596:37408":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"14:11:41669":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:3997:39509":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"5:3353:3380":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"5:6415:3056":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:6176:3843":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"5:6704:2959":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"5:3020:56403":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:13331:49037":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:0:412":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"4:15743:1717":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"15:230:3631":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:11993:48074":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"14:244:41671":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:46386:2377":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:5563:40203":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:48938:2669":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:13180:48920":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"5:3940:4264":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:37302:163":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"16:6949:4013":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:8666:2424":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:45965:10604":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:9574:4054":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:13963:49514":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:47925:2280":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"5:4413:2563":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:51378:2437":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"16:5736:3702":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"11:0:1756":{"crate_id":11,"path":["adler"],"kind":"module"},"4:12198:4388":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:51149:2468":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:10117:4142":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:2138:1028":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"15:0:1759":{"crate_id":15,"path":["addr2line"],"kind":"module"},"18:896:4167":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"4:14853:3173":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:3716:1931":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"19:0:972":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:10149:43383":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:13799:49472":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"4:7228:171":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"6:1690:37416":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"4:900:3187":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:5346:3795":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:32034:2804":{"crate_id":1,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"17:1311:4147":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:4501:39563":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:13590:49420":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:12051:48178":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:23909:4992":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:24363:2606":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:3011:2426":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"4:7811:3208":{"crate_id":4,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"1:55789:220":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:23916:2819":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"16:5632:3697":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:11192:2663":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:3485:1921":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"4:1488:3058":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:6807:3859":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"4:11798:3162":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"4:2171:3117":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:51789:2473":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:2108:558":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"4:15741:1715":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"6:3966:39506":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"4:4480:2997":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"6:6100:40573":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:22813:2426":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:10502:43499":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:10253:4121":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:4164:39528":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:24937:2578":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:48958:2671":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:11328:43394":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:48295:72":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:3272:1901":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:1236:43455":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:13477:49405":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:1729:3275":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:7571:3793":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"4:10720:2980":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"4:696:3182":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:10458:43498":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:4262:39535":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"5:7195:4264":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:10095:4140":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"4:11091:55359":{"crate_id":4,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"12:1688:3624":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:48480:141":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:1572:37406":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:12572:2696":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:48860:2661":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:24329:2754":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"6:5228:40157":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:46468:2384":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:51401:2440":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:2875:169":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:51203:2475":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:11915:48067":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:6221:40581":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:6999:3860":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"14:189:41669":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:6605:3811":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:7024:4016":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:5407:40169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"4:14689:4314":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"4:11847:3166":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"4:3440:2978":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:6812:41102":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"4:10808:2983":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"4:11247:2914":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"4:13437:3123":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:3423:125":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"4:11932:3094":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:3189:204":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:48920:2667":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"4:5868:3305":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:2543:4057":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"0:38:1542":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"1:47271:2082":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:50108:2517":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"5:1472:3069":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:45699:1925":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:5400:40168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:5295:41751":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"16:5488:3690":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:5548:40202":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:6051:37339":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:3218:3976":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:10448:4061":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:22419:51223":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:49095:2685":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:23372:2417":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:13453:49403":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:45741:1848":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"4:2027:140":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:13045:13932":{"crate_id":1,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"1:12840:2314":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:22398:51228":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:6021:3967":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"5:2291:3457":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"5:7049:4276":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"4:11059:3023":{"crate_id":4,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"12:930:3061":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:10229:50814":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"16:2733:3719":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:7643:2365":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:3662:2408":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:9440:43377":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:13933:49512":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:5753:3705":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:6864:39690":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:45535:181":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"5:3852:2982":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"5:8287:3319":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:9264:41749":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:24227:2751":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"5:4485:3417":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"4:4270:3247":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"5:3307:2563":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:5292:40161":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"4:1459:3055":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:10420:4117":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"5:3278:91":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:10061:43457":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:11499:44010":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"4:14327:55400":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"4:783:4305":{"crate_id":4,"path":["std","thread","local","fast","Key"],"kind":"struct"},"18:0:1762":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:50687:50477":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"16:6518:3852":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:7823:3808":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"4:1524:3064":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:11962:43606":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"4:15057:3024":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:49694:2326":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:45459:1932":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:3939:41913":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"5:5829:4274":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"4:14924:3107":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:10673:43603":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"4:5990:3271":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:50868:2467":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:4387:39550":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:45620:182":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"4:1619:3066":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:9133:43373":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:5941:174":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:5522:3692":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:10200:43453":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:49436:2706":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"5:4212:4264":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"4:1152:30004":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"4:10429:2426":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"1:3255:1900":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"5:8270:57362":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"1:49187:2691":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:4770:1668":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:45727:2244":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"17:11653:44119":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:11738:44288":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:6309:2388":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"5:1184:57401":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:13620:49428":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:4852:42376":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:53137:19579":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:49715:2328":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"4:1132:3040":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:22366:50826":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:46417:2380":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:13819:49476":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"4:7511:3157":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"5:1675:3436":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"4:8077:4287":{"crate_id":4,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"17:12783:48417":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:48510:50348":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:47508:84":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:9119:1994":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"16:2866:3969":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:1533:37401":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:46236:10970":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"18:739:59517":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:3266:1902":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:49835:2717":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"4:8744:1672":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"1:47332:2563":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"12:937:3062":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"4:5406:3269":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"4:2582:55487":{"crate_id":4,"path":["std","error","from","StringError"],"kind":"struct"},"4:8523:1869":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:3365:3717":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"5:5775:3312":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"5:3314:3118":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:1676:37415":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:13942:49513":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"4:10660:3218":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"4:15745:1719":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"5:0:261":{"crate_id":5,"path":["alloc"],"kind":"module"},"4:11817:3164":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"4:11926:2018":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"16:7514:3817":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:46287:2369":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"4:2159:2018":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:4970:1850":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:50996:2451":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"12:556:138":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:13497:49407":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:4101:39522":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"5:4276:2564":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"6:616:36526":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"12:949:3063":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"5:1824:4264":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:22421:51225":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"18:677:137":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:11750:44289":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"9:234:3503":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"4:5697:2938":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:5978:40568":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"4:5284:3262":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"5:1599:2018":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:9034:43370":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:294:59491":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:3904:68":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"6:1602:37409":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"4:5555:3029":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:3074:74":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:12533:2692":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:13429:49399":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:46339:2374":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"16:7360:179":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:47718:81":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:3309:1910":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"18:152:49876":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"12:892:3601":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"1:46102:2887":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"4:15725:1701":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"12:2013:3056":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"4:3953:190":{"crate_id":4,"path":["std","io","error","Result"],"kind":"typedef"},"17:10106:4141":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"5:4590:4267":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"12:429:3614":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"5:8252:3405":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"4:3249:3226":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"1:46673:11259":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:5414:40170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:27748:2512":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"16:6491:3851":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:10317:4041":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:50891:2471":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"4:5643:2935":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"9:1020:3545":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"16:5456:3686":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:7843:3875":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:47550:78":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"14:56:43795":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"4:10557:30979":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:10635:43569":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:50733:2478":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"16:7226:3869":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"18:694:4174":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:10543:43597":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"5:8371:3347":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:51903:2461":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"5:3742:2564":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:299:59476":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:591:36522":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"16:5766:3706":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"4:14952:3113":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:46269:2386":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"4:4605:55459":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"4:15736:1710":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"5:3340:3119":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:13488:49406":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:4281:39537":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"5:1224:3439":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"18:754:59502":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:4419:39554":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"4:15727:1703":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"1:46348:2375":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:49169:2690":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:4916:1848":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"16:4995:42419":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:3264:3978":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:6391:3849":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"4:10989:2655":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"1:49119:2655":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"16:7378:3801":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:12712:48346":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:48182:128":{"crate_id":1,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"1:47382:80":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:10160:43456":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:51820:2476":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:7455:2025":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"4:15201:55399":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"17:13637:49430":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:2889:3988":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"4:2458:4389":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"4:3261:3232":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"5:3029:56402":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"4:1157:30005":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:9729:59493":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:3905:39501":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"12:761:2564":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"4:4305:2989":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:3077:73":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"6:6005:33137":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:50078:153":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:88:36138":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:9719:43380":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"4:4307:2990":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:10362:2266":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"5:2199:3382":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:5707:3699":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"1:55841:220":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:47634:79":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:13999:2514":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"16:5790:3707":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:6214:40580":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"6:1760:37423":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"4:1428:2564":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:46646:1671":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:22777:28133":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"6:5386:40167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:4401:39552":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:4477:42276":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"4:14776:3049":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:4844:1842":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:50064:2728":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"4:13200:3276":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"4:14795:55053":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:10179:43454":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:11045:43387":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:10468:4060":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:4073:39519":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:6935:41129":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"4:5860:3304":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:3183:1855":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"16:7185:3865":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:12195:48249":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:6718:4005":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:12028:48121":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:2834:119":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:13528:133":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"16:6768:4009":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:51582:50351":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:9120:1993":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:47228:1991":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"6:5469:40174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"5:2243:3441":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:5159:40150":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:5459:40173":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:46437:2387":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"4:3116:2967":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"1:7949:52864":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"4:14539:3032":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"16:4790:42364":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:10477:4059":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:6185:40578":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:49411:2703":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"5:8171:3077":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"4:3108:123":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"5:7778:4282":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:7342:3830":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"4:5876:3307":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:4203:39531":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:46226:4317":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:24193:2750":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:49728:13933":{"crate_id":1,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"1:22618:2426":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:7264:3812":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:6644:3856":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"16:3800:41799":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:4:957":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:49898:2799":{"crate_id":1,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"1:51663:2481":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"12:2045:3120":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"1:13840:2729":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"12:2303:58615":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:4448:42272":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:7333:3816":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:11835:44316":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:6464:3809":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:5371:40165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"5:772:206":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"12:784:3059":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"18:636:59503":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:22628:2419":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:1527:37400":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"4:5766:3299":{"crate_id":4,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"1:45959:2705":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"4:15728:1704":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"1:50001:186":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:8198:1831":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:12234:48252":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"5:8035:3318":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:12771:43394":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:7236:3870":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:3772:41796":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"9:41:3528":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"18:744:59499":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"5:1000:2563":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:46396:2378":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:7250:3871":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:47918:2281":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"18:829:4162":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"4:2362:580":{"crate_id":4,"path":["std","env"],"kind":"module"},"17:9332:4043":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:13465:49404":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"12:1144:3068":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"4:13365:4395":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"12:1200:3611":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"4:9503:4394":{"crate_id":4,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"4:2433:30977":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"16:2754:3718":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"5:6592:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"4:10983:2686":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"1:57090:50465":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"4:11452:3137":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"17:9296:43357":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"4:11859:55300":{"crate_id":4,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"16:6620:4000":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:13356:49039":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:10707:2426":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"9:900:41374":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:11100:4113":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:1563:37405":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"4:3110:3219":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"17:11519:44011":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:49105:2686":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:45576:180":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"4:10291:4306":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:3091:4031":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:48209:103":{"crate_id":1,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"1:46639:11256":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:6644:40943":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:5191:40153":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:53175:19581":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"4:15732:1706":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"16:2843:3968":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"5:2311:3440":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"4:1438:2018":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:2912:3970":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"5:3864:3429":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"13:232:58620":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"16:3145:3983":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"4:9144:3179":{"crate_id":4,"path":["std","lazy","SyncLazy"],"kind":"struct"},"5:5730:4264":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"4:15192:34859":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"1:49522:2315":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"16:4417:42266":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:22822:2435":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"4:14358:124":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:12825:2311":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:9961:43385":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"4:10566:2368":{"crate_id":4,"path":["std","error","Chain"],"kind":"struct"},"5:3921:3057":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"5:8059:3056":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:11026:43386":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:6636:40942":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:5213:2881":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:51330:2452":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:4961:1849":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:11981:43605":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:3420:1829":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:6577:3854":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:49038:2677":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:9404:43376":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:12756:48354":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"16:7174:3864":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"12:396:3615":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"12:1855:140":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:6110:3835":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:49680:2325":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:5379:40166":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"4:2177:3118":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:11030:122":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:46049:2884":{"crate_id":1,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"12:112:58613":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"4:10316:4308":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:10357:2264":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:3335:1916":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"5:3809:4264":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:11809:44302":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:6682:3810":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"4:7182:55478":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"4:1493:3059":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:12917:48813":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"4:2855:164":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:52095:2438":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:3945:39503":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"18:820:4161":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"5:8299:3320":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:23863:4982":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:12327:48258":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:5505:3691":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:6678:2391":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"12:0:1757":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"16:5407:3683":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:6614:36472":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:13386:49369":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:11678:44121":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"4:11462:2563":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"1:49427:2705":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"4:9333:55834":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"4:12075:3049":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"4:14815:3048":{"crate_id":4,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:49089:2684":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"4:3617:2981":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"14:250:41677":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:13119:48872":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:12286:2864":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"4:11214:3274":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"4:11062:3176":{"crate_id":4,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"17:3743:4095":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:10987:2656":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:10098:105":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"4:8754:2210":{"crate_id":4,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"4:9491:4393":{"crate_id":4,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"6:599:36523":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:10058:129":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"5:1588:2564":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"4:13564:3171":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"12:1118:3067":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"4:1302:138":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"4:2166:3057":{"crate_id":4,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"12:354:4380":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:46405:2379":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"4:8173:3209":{"crate_id":4,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"17:10864:43574":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:48702:2907":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:10599:43600":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:9280:41748":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"4:6227:3281":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:7205:3867":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:670:36557":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"5:8238:3404":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:3064:4030":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:4823:42372":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:11482:43795":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"12:377:3616":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:6413:3628":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:10115:174":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"16:6269:3847":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"6:4215:39532":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:12208:48250":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"4:4273:3248":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:3245:1898":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:3182:1827":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"17:10489:4064":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:8384:152":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:0:1761":{"crate_id":17,"path":["object"],"kind":"module"},"6:5221:40156":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:46377:2392":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"9:996:3544":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"4:1651:3069":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"4:15721:1698":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"12:925:3058":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:53213:19583":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"12:2032:3118":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:8148:2507":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:13627:49429":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:46427:2381":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:12275:48255":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:50910:50440":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:5210:40155":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"4:2723:3038":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"16:5360:3681":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"4:3235:3222":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"4:15722:1699":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"9:809:3134":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"4:15726:1702":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"4:7525:3158":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"17:10938:43681":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:47932:2282":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:12507:48271":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"18:885:4166":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"4:15738:1712":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"17:10788:43571":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"4:7545:3159":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"17:11767:44297":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:3086:212":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:10920:2564":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:3633:208":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:50756:2466":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:11186:43391":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"4:12036:1873":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:11822:4323":{"crate_id":1,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"17:10623:43602":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:8659:2422":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:5436:58016":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:6964:1991":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:9886:43383":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:10107:2280":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:47357:163":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:13054:48868":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"4:11965:3096":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:3990:39508":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"4:15747:1721":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"1:49323:2697":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"6:4255:3282":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"5:5259:185":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:3177:195":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:8189:146":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:48502:50377":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:3463:1929":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"6:4133:39526":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"4:5889:3308":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"4:11479:3140":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:51426:2441":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:49028:2676":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:51252:2460":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:11722:2679":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"9:692:3478":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"4:10803:3154":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"6:5274:40159":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"4:2456:4388":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"1:48158:67":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"17:13296:48972":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:50019:175":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:4682:2428":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"5:8044:2018":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"4:14018:2989":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"10:0:1755":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"12:1762:4262":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"4:15740:1714":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"1:3185:202":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:11337:4047":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"16:4955:42404":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:4241:39534":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:45597:183":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"5:1644:3059":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:11572:44079":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"11:46:58609":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"4:7628:3163":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"17:10571:43599":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:4060:39517":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:11588:44080":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:10109:2281":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:45734:2245":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"17:10887:43572":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:12496:2689":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:10322:141":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"6:4377:39549":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:31853:2814":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"16:6744:4007":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:9785:2642":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"5:421:1832":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:12610:48291":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:4046:39515":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"11:54:3599":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"16:7303:3872":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"4:15744:1718":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"4:2188:3120":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"7:0:1448":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:49373:2699":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"4:3233:2247":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"16:7804:3806":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"4:8016:3209":{"crate_id":4,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"16:547:3703":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:13041:48816":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:5312:40162":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"4:11273:2918":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"4:11134:32547":{"crate_id":4,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"16:6636:3813":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:3195:3975":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"5:8354:3057":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"17:11696:44122":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"5:6197:3351":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"4:10665:2945":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"4:8272:3134":{"crate_id":4,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"1:3250:1903":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:49418:2704":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"4:3908:3156":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:5428:40172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:24397:2755":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:3325:1914":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"5:1204:3438":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"4:8668:55476":{"crate_id":4,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"6:6106:40574":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"14:47:41669":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:12168:48247":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:542:3729":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:13272:48969":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:12385:48263":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:53190:19582":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:519:36514":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"}},"external_crates":{"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":15}