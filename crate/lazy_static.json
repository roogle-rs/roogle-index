{"root":"0:0:1598","crate_version":"1.4.0","includes_private":false,"index":{"1:11484:20767":{"id":"1:11484:20767","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9350:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9350:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1598":{"id":"0:0:1598","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[215,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\n# #[macro_use]\n# extern crate lazy_static;\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.4.0\")]","#![no_std]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:29:1604","0:31:1605","0:28:1598"],"is_stripped":false}},"1:11558:30912":{"id":"1:11558:30912","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11582:30920":{"id":"1:11582:30920","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"1:11169:3112","prim@char":"4:12335:409"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11174:3127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11174:3127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11189:3129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11467":{"id":"1:11467","crate_id":1,"name":null,"span":null,"visibility":{"restricted":{"parent":"1:10732:1363","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["1:11468:796","1:11469:2084","1:11470:30897","1:11471:30898","1:11473:30899","1:11476:27662","1:11477:30900","1:11478:310","1:11479:28726","1:11480:1603","1:11482:20766","1:11484:20767","1:11486:20768","1:11488:30901","1:11489:30902","1:11490:28745","1:11491:28746","1:11492:20377","1:11493:21568","1:11494:25863","1:11495:20323","1:11496:20374","1:11497:28038","1:11498:30903","1:11499:20380","1:11500:21182","1:11503:28380","1:11506:28382","1:11509:2125","1:11513:2083","1:11517:28037","1:11520:20332","1:11523:28755","1:11526:30904","1:11529:30905","1:11532:28757","1:11535:28759","1:11538:30906","1:11541:30907","1:11544:1788","1:11547:30908","1:11550:30909","1:11553:30910","1:11556:30911","1:11558:30912","1:11560:30913","1:11562:30914","1:11563:30915","1:11564:30916","1:11567:30917","1:11570:26981","1:11573:28761","1:11576:30918","1:11579:30919","1:11582:30920","1:11585:30921","1:11587:26350","1:11588:26353","1:11589:26354","1:11590:26355","1:11591:30922","1:11593:2861","1:11594:30923"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11513:2083":{"id":"1:11513:2083","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"1:11169:3112","prim@char":"4:12335:409","`None`":"1:48127:176"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11174:3127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11174:3127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11189:3129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11594:30923":{"id":"1:11594:30923","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4493:30923"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"1:50426:2880","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11492:20377":{"id":"1:11492:20377","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12335:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"1:50079:3140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11477:30900":{"id":"1:11477:30900","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5276":{"id":"5:5276","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5187:1363","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5277:31573","5:5278:2785","5:5281:31574","5:5284:31575","5:5292:31576","5:5293:31577","5:5294:2944","5:5295:26351","5:5296:26352"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11585:30921":{"id":"1:11585:30921","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"1:11130:2635","FromStr::Err":"1:11131:126"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48269:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"1:11130:2635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:11130:2635","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:31:1605":{"id":"0:31:1605","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[213,0],"end":[215,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["lazy",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"LazyStatic","id":"0:29:1604","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:28:1598":{"id":"0:28:1598","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[167,0],"end":[179,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"kind":"macro","inner":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"},"0:29:1604":{"id":"0:29:1604","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[185,0],"end":[188,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:11488:30901":{"id":"1:11488:30901","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"1:2970:1991","`str`":"4:12341:1363","str::slice_mut_unchecked":"1:11489:30902"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5278:2785":{"id":"5:5278:2785","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7148:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7148:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11174:3127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11517:28037":{"id":"1:11517:28037","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"`DoubleEndedIterator`":"1:7120:120","self::pattern":"1:11169:3112","prim@char":"4:12335:409","str::rsplit":"1:11523:28755","str::split_whitespace":"1:11495:20323"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"1:50109:3065","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11174:3127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5277:31573":{"id":"5:5277:31573","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:1894","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6899:8581","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:1894","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6899:8581","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11526:30904":{"id":"1:11526:30904","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"`DoubleEndedIterator`":"1:7120:120","prim@char":"4:12335:409","str::split":"1:11517:28037","str::rsplit_terminator":"1:11529:30905","self::pattern":"1:11169:3112"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"1:50159:3145","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11174:3127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11499:20380":{"id":"1:11499:20380","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"1:50401:3150","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5293:31577":{"id":"5:5293:31577","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:288:1894","`String`":"5:7148:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:1894","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6899:8581","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7148:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11544:1788":{"id":"1:11544:1788","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"`DoubleEndedIterator`":"1:7120:120","prim@char":"4:12335:409","self::pattern":"1:11169:3112","str::matches":"1:11544:1788"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"1:50313:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11174:3127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11579:30919":{"id":"1:11579:30919","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"1:11169:3112","prim@char":"4:12335:409"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11174:3127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11482:20766":{"id":"1:11482:20766","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:48127:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9350:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9350:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11547:30908":{"id":"1:11547:30908","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:11169:3112","prim@char":"4:12335:409","`DoubleEndedIterator`":"1:7120:120","str::matches":"1:11544:1788"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"1:50331:3147","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11174:3127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11174:3127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11189:3129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11562:30914":{"id":"1:11562:30914","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11567:30917":{"id":"1:11567:30917","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12335:409","self::pattern":"1:11169:3112"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11174:3127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11563:30915":{"id":"1:11563:30915","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11473:30899":{"id":"1:11473:30899","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"1:11471:30898"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11469:2084":{"id":"1:11469:2084","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11506:28382":{"id":"1:11506:28382","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"1:11169:3112","prim@char":"4:12335:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11174:3127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11174:3127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11189:3129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11520:20332":{"id":"1:11520:20332","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12335:409","self::pattern":"1:11169:3112"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"1:10993:3078","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11174:3127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11589:26354":{"id":"1:11589:26354","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11470:30897":{"id":"1:11470:30897","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11468:796":{"id":"1:11468:796","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12335:409"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11476:27662":{"id":"1:11476:27662","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:10737:3133"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11500:21182":{"id":"1:11500:21182","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"1:11169:3112","prim@char":"4:12335:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11174:3127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11560:30913":{"id":"1:11560:30913","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11529:30905":{"id":"1:11529:30905","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"prim@char":"4:12335:409","str::split_terminator":"1:11526:30904","str::split":"1:11517:28037","self::pattern":"1:11169:3112"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"1:50177:3144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11174:3127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11174:3127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11189:3129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5281:31574":{"id":"5:5281:31574","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7148:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7148:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11174:3127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11491:28746":{"id":"1:11491:28746","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"1:11490:28745"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11588:26353":{"id":"1:11588:26353","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11564:30916":{"id":"1:11564:30916","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12335:409","self::pattern":"1:11169:3112"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11174:3127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11174:3127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:11194:3128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11590:26355":{"id":"1:11590:26355","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11478:310":{"id":"1:11478:310","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"4:12352:1459","str::as_mut_ptr":"1:11479:28726"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11593:2861":{"id":"1:11593:2861","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4496:2861"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"1:50417:2860","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11570:26981":{"id":"1:11570:26981","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"1:11169:3112","prim@char":"4:12335:409"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11174:3127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11591:30922":{"id":"1:11591:30922","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4495:30922"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"1:50408:2883","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11471:30898":{"id":"1:11471:30898","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11495:20323":{"id":"1:11495:20323","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:11496:20374"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"1:50383:3142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5295:26351":{"id":"5:5295:26351","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:11589:26354"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7148:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11498:30903":{"id":"1:11498:30903","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"1:50373:3143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11532:28757":{"id":"1:11532:28757","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"1:11169:3112","str::rsplitn":"1:11535:28759","prim@char":"4:12335:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"1:50213:3067","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11174:3127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11541:30907":{"id":"1:11541:30907","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11174:3127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11174:3127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11189:3129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11493:21568":{"id":"1:11493:21568","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12335:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"1:50085:3139","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11497:28038":{"id":"1:11497:28038","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"1:50363:3141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11490:28745":{"id":"1:11490:28745","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"1:11491:28746"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11486:20768":{"id":"1:11486:20768","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9350:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9350:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:11509:2125":{"id":"1:11509:2125","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:48127:176","self::pattern":"1:11169:3112","prim@char":"4:12335:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11174:3127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11550:30909":{"id":"1:11550:30909","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"`DoubleEndedIterator`":"1:7120:120","self::pattern":"1:11169:3112","str::rmatch_indices":"1:11553:30910","prim@char":"4:12335:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"1:50259:3148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11174:3127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11489:30902":{"id":"1:11489:30902","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"1:2974:1992","`str`":"4:12341:1363","str::slice_unchecked":"1:11488:30901"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5284:31575":{"id":"5:5284:31575","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7148:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7148:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11496:20374":{"id":"1:11496:20374","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:11495:20323"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"1:50392:3151","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11573:28761":{"id":"1:11573:28761","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12335:409","self::pattern":"1:11169:3112"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11174:3127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11174:3127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11189:3129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11523:28755":{"id":"1:11523:28755","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"`DoubleEndedIterator`":"1:7120:120","self::pattern":"1:11169:3112","str::split":"1:11517:28037","prim@char":"4:12335:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"1:50127:3069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11174:3127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11174:3127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11189:3129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11494:25863":{"id":"1:11494:25863","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"1:50095:3138","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11503:28380":{"id":"1:11503:28380","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"1:11169:3112","prim@char":"4:12335:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11174:3127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5296:26352":{"id":"5:5296:26352","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:11590:26355"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7148:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11556:30911":{"id":"1:11556:30911","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11535:28759":{"id":"1:11535:28759","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"str::splitn":"1:11532:28757","self::pattern":"1:11169:3112","prim@char":"4:12335:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"1:50231:3063","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11174:3127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11174:3127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11189:3129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11538:30906":{"id":"1:11538:30906","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11174:3127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11587:26350":{"id":"1:11587:26350","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11553:30910":{"id":"1:11553:30910","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"prim@char":"4:12335:409","str::match_indices":"1:11550:30909","self::pattern":"1:11169:3112","`DoubleEndedIterator`":"1:7120:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"1:50277:3149","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11174:3127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11174:3127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11189:3129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11479:28726":{"id":"1:11479:28726","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12352:1459"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11480:1603":{"id":"1:11480:1603","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:48127:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9350:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9350:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5292:31576":{"id":"5:5292:31576","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7148:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7148:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11576:30918":{"id":"1:11576:30918","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12335:409","self::pattern":"1:11169:3112"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11174:3127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11174:3127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11189:3129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5294:2944":{"id":"5:5294:2944","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7148:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7148:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"4:8680:8707":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:50079:3140":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"17:9857:15830":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:10385:15898":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"4:12338:1027":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"6:7249:12786":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"4:6342:2386":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:4673:12644":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"4:6418:2391":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"4:3427:2557":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"4:12341:1363":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"1:7474:2953":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:4726:12649":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:545:9346":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:2702:2836":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:6860:1902":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"4:918:8553":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:20063:26150":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:46440:197":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:11137:16096":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"4:6521:2384":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"4:5189:8782":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"16:4606:15233":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"4:3197:8682":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:12896:19138":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:9662:3079":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"5:1357:2544":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:7298:15574":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"4:1105:2534":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"4:9366:8842":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:46962:2860":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"18:624:33705":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"4:8798:8734":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:21747:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"4:7884:8531":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"16:2993:14611":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:2970:1991":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"4:2401:8634":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"4:8523:8700":{"crate_id":4,"path":["std","net","ip_addr","Ipv6Addr"],"kind":"struct"},"16:2367:14587":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"4:4019:8710":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:4267:12600":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"4:6885:1952":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:6375:10171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"15:0:1819":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:20097:21411":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:11149:16131":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:10737:3133":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:10919:3157":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:5184:14554":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:53874:8287":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"4:10897:8680":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"5:3144:8570":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"4:6054:1942":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"4:11939:8858":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"17:8137:15670":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"18:636:33686":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:8921:3047":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"4:1123:8564":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"4:3162:27965":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:9722:15797":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:13039:19507":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"5:784:2321":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:1915:2569":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:4367:12613":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:2665:225":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:49660:3083":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:4247:12598":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"9:592:14328":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"1:2658:1887":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:2150:578":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"16:7637:15592":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:21403:20728":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:49401:3050":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"5:6953:2089":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:50511:3159":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"4:5014:8731":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"18:614:33680":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"4:10356:27057":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"5:1434:8557":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:10796:15654":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"4:11158:8624":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"6:4778:12654":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:6479:13698":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"4:4899:8720":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:600:9354":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:11034:16025":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:6359:15548":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"6:1668:10246":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:12695:18974":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:1771:15752":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:21341:21533":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"4:8426:8645":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"9:827:14405":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"0:29:1604":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"1:53000:8301":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:9339:15729":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:2285:124":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"12:2178:32527":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:50557:3166":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:46901:2888":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:8881:33654":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"12:1120:14506":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"4:11418:2407":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"12:1628:2313":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:11606:18611":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:13382:19599":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:2811:1982":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:5656:24273":{"crate_id":1,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"17:11734:18681":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:9897:15853":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:6293:9219":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"4:990:2530":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:7208:12780":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:9627:15758":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:53562:8298":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"9:956:14310":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"4:353:8529":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"4:965:8556":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"5:3048:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:49122:70":{"crate_id":1,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"1:7042:2955":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:8658:3027":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:47592:2941":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:12337:15707":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:13024:19505":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:3026:14613":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:11800:18686":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:13158:19545":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:1903:15786":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"18:609:33684":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:12955:19154":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:47199:2958":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"18:660:19708":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:20323:8732":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:12084:3215":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"5:2595:30676":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"4:11989:14540":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:52316:8300":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:4581:12632":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:47370:2962":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:50159:3145":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"5:4210:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:47606:1731":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"5:2046:2332":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:131:9020":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:8211:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:6430:13696":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:5433:15506":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:46617:2835":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:48252:2155":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:3367:2833":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"1:20525:8257":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"14:160:14514":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:11240:3161":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:13134:19521":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"4:7883:8732":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"14:221:14523":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:21912:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"6:4139:12588":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:2683:14600":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"4:9008:8815":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"6:4551:12628":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:49907:2571":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"4:2909:127":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"4:8174:8674":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:51909:20706":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:10546:15695":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:11259:16297":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:2659:1917":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:20284:8262":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:14:1789":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:9542:3065":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"4:0:1355":{"crate_id":4,"path":["std"],"kind":"module"},"1:20116:21408":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"4:11198:28329":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:52506:20692":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:386:15667":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"4:9274:8831":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:6953:9298":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"5:1454:8574":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:9526:15748":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:22044:166":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:10608:15697":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:2280:185":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"16:6298:15544":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"6:4745:12651":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"5:7225:2308":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"6:7266:12788":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:6463:15550":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:56951:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:1733:2821":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:8660:3028":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"4:9260:8830":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"16:3632:14643":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:2465:14591":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"4:2589:2376":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"13:0:1812":{"crate_id":13,"path":["std_detect"],"kind":"module"},"4:1611:2339":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:2894:14609":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:10303:3076":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"7:32:14279":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"14:215:14517":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:52384:8288":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:11247:16188":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"12:119:2302":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"4:3199:8683":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"4:11822:8710":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"5:7102:20517":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:8802:26307":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"18:707:3130":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"4:9590:8649":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"6:4335:12609":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:4115:12586":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:51074:3212":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:46456:195":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"5:2871:30605":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"15:193:14532":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:9577:15753":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"4:48:1513":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"1:46991:2884":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:47208:2966":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:53920:8305":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:46864:2865":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:1707:8742":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:4605:12635":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:10088:15814":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"4:6818:1947":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:9043:2429":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:50832:3120":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"12:2184:21412":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:6017:15527":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:3972:21176":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"4:12301:27258":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:2282:14583":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:2705:14601":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:52240:8308":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"16:7166:15567":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:1714:10251":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:6448:13697":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:5741:13283":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:6352:10197":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:20335:8252":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"17:12349:18851":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"4:6434:2394":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"4:6954:27005":{"crate_id":4,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:9909:15809":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:49456:21597":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"4:7772:15669":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"4:5898:2384":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:2794:1983":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"4:5691:8825":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"2:223:207":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:6316:15545":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:50879:121":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"16:6690:15558":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"8:0:1813":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:8375:24502":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"16:6330:15546":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"5:1404:8554":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"4:5905:2385":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:9712:15800":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"4:11718:26341":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:5839:15524":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:11594:18555":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"5:2056:30556":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"5:3934:2545":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:3010:14612":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"4:11982:14540":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"4:8776:8786":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:47409:2981":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"16:7435:15583":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:495:9340":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:4274:12601":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"12:98:32528":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"5:1234:2534":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:6790:15563":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"18:766:19717":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"12:853:8560":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:12278:18780":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"4:2257:8626":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"17:11547:15856":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:11974:18698":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:5949:15525":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"4:7333:26336":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:12134:18709":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:3402:14616":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"12:1872:8570":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"5:3479:2544":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:47289:2973":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"5:1423:8556":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:2918:1891":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:7825:15594":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:49225:3025":{"crate_id":1,"path":["core","fmt","FlagV1"],"kind":"enum"},"17:13221:19557":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:10642:15699":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:13168:19546":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:50019:2575":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:7956:15601":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:47055:20517":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:1636:10243":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"4:4259:8718":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"12:2198:32523":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:7787:2064":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:2763:1973":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:1668:1065":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"9:622:14329":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"5:6939:30553":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"5:5731:2549":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:2801:1980":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"4:3235:8684":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"16:7329:15577":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:5541:13268":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:1931:15746":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:53812:8322":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:57016:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"4:12334:920":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"6:1574:10238":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"4:960:8555":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:21366:20671":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:4683:12645":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:50704:3172":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:10207:15882":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"9:188:14359":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"16:3188:14614":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:8055:15652":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:10774:15705":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:3716:14679":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:8668:3031":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"18:538:19723":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"5:5133:8886":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:49167:127":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"6:539:9345":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"5:6996:2089":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"9:33:14380":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"17:11235:16187":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:9820:15849":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:1500:10229":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:6865:32598":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:2842:14607":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"4:1091:8562":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:5582:13269":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:50417:2860":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"5:6914:8571":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:1701:10250":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:7211:15568":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:9818:3064":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"12:2053:8562":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:7143:1892":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:8871:15686":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:12087:18706":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:13148:19523":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"16:4849:15284":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"16:5525:15512":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"4:6097:1949":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:4354:12611":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:9021:15689":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:9691:15772":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"16:6200:15538":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:21465:2643":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:54080:8243":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:47118:2421":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"4:7980:8565":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"5:6660:2370":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:7567:15590":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:5596:15515":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:51116:3214":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"5:6591:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:12860:19072":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:46937:2880":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"4:8365:8642":{"crate_id":4,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"4:10615:8836":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"6:4690:982":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:13192:19549":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:2300:14584":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:9751:15773":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:48552:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:5489:2959":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"4:681:8540":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:13100:19515":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:2747:1974":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:8609:131":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"6:1505:10230":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:6593:15554":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"4:1114:8563":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:10336:3077":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"4:6243:2384":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:8752:3138":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:0:486":{"crate_id":1,"path":["core"],"kind":"module"},"1:4145:1728":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"4:3599:26317":{"crate_id":4,"path":["std","net","display_buffer","DisplayBuffer"],"kind":"struct"},"4:8540:8701":{"crate_id":4,"path":["std","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:13518:19639":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:58291:21563":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"14:202:8896":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"5:6493:2364":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:9700:15771":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"5:5085:2318":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:11853:18690":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:29587:2789":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:47298:2960":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:50067:3136":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:11837:3209":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:13557:19642":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"4:3382:2344":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"4:11706:26914":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"12:353:2306":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"14:165:14515":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"5:3118:8567":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:13007:19504":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:4102:12585":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:21258:20700":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:49137:67":{"crate_id":1,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"4:3352:2945":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"1:2900:1919":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:5494:15510":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"4:12359:1101":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"1:50717:3131":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:9317:15731":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:7372:32762":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"5:1219:8563":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:10420:15891":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:46885:20719":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:11183:3130":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"4:3165:27969":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:10528:15694":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:51970:8295":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:5443:13205":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:1541:10235":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"4:9242:8828":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"11:0:1816":{"crate_id":11,"path":["adler"],"kind":"module"},"0:31:1605":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"1:5412:2970":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:6619:15555":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"18:481:19719":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"4:7959:8536":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"4:7997:8592":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"1:50331:3147":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"4:5180:8781":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"4:12345:630":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"16:2341:14586":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"5:3123:30568":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:4506:12623":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:2477:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"17:11761:18683":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:2771:14604":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:54014:8237":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:4212:12594":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:10752:15704":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:21:667":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"1:52010:20699":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"4:5706:8826":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"6:4653:12641":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:4152:12589":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:7237:12784":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"5:679:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"5:7118:8617":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:1600:10241":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:6472:14529":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:49838:25733":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:9790:3063":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:242:33652":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"4:9477:27042":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"4:12354:1457":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"12:1003:2534":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:7044:32993":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:4810:12657":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:7892:3127":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"5:36:2315":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:21945:167":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:10490:15903":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"16:6034:15528":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:5703:15518":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:47330:2976":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"4:5328:26987":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"4:8257:27028":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"5:6969:30499":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:47269:2972":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:6829:32936":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"4:8922:8810":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:50259:3148":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:7929:15599":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:20780:8281":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"4:3466:2894":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"6:5876:13314":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:4817:15276":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:6469:2097":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"4:8625:8703":{"crate_id":4,"path":["std","net","socket_addr","SocketAddr"],"kind":"enum"},"4:4329:8725":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:8162:15671":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:10445:15707":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:11515:18503":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:49438:8809":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"4:12333:367":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"1:54148:8247":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"12:697:8557":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:4461:12620":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:6123:15532":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:12850:19071":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:12008:18700":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:22011:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:20372:8256":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"4:11146:27082":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"4:3237:8685":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:51869:8315":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"4:12346:631":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"16:4786:15269":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:153:2299":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"5:688:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"5:1248:8564":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:47311:2974":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"4:1632:8569":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:12514:18915":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"12:822:8559":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:21237:20723":{"crate_id":1,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"1:11751:135":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"17:9422:15727":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"4:910:2089":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:13047:19510":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"6:5625:13273":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"4:9465:27015":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:12046:18703":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:50540:3165":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:6654:15556":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:2261:14556":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:12739:18979":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:10159:15818":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:10182:15816":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:7470:2952":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:9553:15690":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:0:1820":{"crate_id":16,"path":["gimli"],"kind":"module"},"18:590:21599":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:5595:13271":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:20366:8254":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:48476:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:2974:1992":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:46522:198":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:3184:1918":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:52029:8284":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"4:4430:8747":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"4:6742:1950":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"5:7088:8619":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:5793:15522":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"4:10894:8684":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:10476:15902":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"16:5219:14550":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:2251:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:20118:21406":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"5:5715:1938":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:46425:1993":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:11189:3129":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"4:8849:8799":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"17:10455:15892":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:6322:13692":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"4:1938:8614":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"4:12360:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"1:47246:21072":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:20247:8261":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"4:719:2553":{"crate_id":4,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"12:1840:2339":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"5:3077:2544":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:4361:12612":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:39417:2832":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:9776:3067":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:6424:13695":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:6517:14528":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"5:4255:2344":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:2483:132":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"4:8981:8812":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"6:501:9341":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:4441:15164":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"4:1887:2555":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"6:4475:12621":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:7970:15602":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:12550:18916":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:5761:15520":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:38221:2825":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:48320:2545":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"16:5510:15511":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:11828:18688":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:12029:139":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"4:5238:8791":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"1:4339:1911":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:50177:3144":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:10108:15810":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"16:7890:15597":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:8701:15684":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:5727:13281":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:4217:15108":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:10394:15899":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:50852:3125":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:4635:12639":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:12251:18778":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:2433:14590":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:52718:8317":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"12:751:2339":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:6545:13703":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"5:6079:2356":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"1:11395:111":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:8368:15677":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:7396:15581":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:49155:109":{"crate_id":1,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"1:50127:3069":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:1654:10245":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"4:8734:8754":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:47024:2887":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:8441:15680":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:1021:15737":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:11054:16085":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:11271:16300":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"5:872:2544":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"4:545:2332":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:47168:2957":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:8822:33656":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:3169:26200":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"16:6528:15552":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:10121:15811":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:11939:18696":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:1821:1921":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"4:3276:8681":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"4:7090:8849":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:6975:14073":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:8510:14550":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"4:4307:8721":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"5:3893:2318":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:4706:12647":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:49417:3049":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"5:1367:2545":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"16:7309:15575":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"12:762:2308":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"17:9658:15798":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:49128:130":{"crate_id":1,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"1:46984:2883":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:12322:18788":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:11639:18613":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"12:738:8554":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"17:10708:15702":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:4515:12624":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"12:815:8558":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:38204:180":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"16:7319:15576":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"4:8447:2965":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"17:9501:15735":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:2930:14610":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"9:19:14379":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"17:11500:18502":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"5:2865:30629":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:21813:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:10283:15867":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"4:7910:8519":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"18:564:19724":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:8295:15675":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"14:40:15912":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:49426:144":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:7909:15598":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:4797:12655":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:11485:18501":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:13214:19556":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:4206:12438":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"4:11168:129":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:11997:18699":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"4:2907:207":{"crate_id":4,"path":["std","io","error","Result"],"kind":"typedef"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:4749:780":{"crate_id":1,"path":["core","iter"],"kind":"module"},"14:31:14514":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:48878:3028":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:0:801":{"crate_id":6,"path":["libc"],"kind":"module"},"18:0:1822":{"crate_id":18,"path":["memchr"],"kind":"module"},"5:7071:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"4:9561:215":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:2757:1970":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"17:8526:15655":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:54043:8240":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"5:273:2318":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"4:5405:188":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"4:12335:409":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"1:21184:20686":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:12103:18707":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:49938:3075":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:6376:15549":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"5:3690:2318":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"4:1626:8568":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:2911:1889":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:51992:8299":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"5:632:30555":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:9947:15854":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:11161:16132":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"4:6702:1731":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"4:6706:1944":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:47128:2929":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"16:5460:15508":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:7467:2862":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"4:4662:8746":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:52459:20508":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"4:4590:8752":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:4644:12640":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"9:920:14309":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"5:4808:2344":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"4:10702:2560":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:52560:20507":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:2921:1736":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:9764:15801":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:51739:8326":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:52876:8309":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"16:2749:14603":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:21432:21586":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:3140:231":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"12:669:8556":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"5:7043:8551":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:21846:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:9223:15715":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"4:5095:8730":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:53672:8318":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"0:28:1598":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"17:13572:19647":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"4:9304:8838":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:3221:1920":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:4702:2928":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"6:6311:13691":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"4:6871:1951":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"6:1608:10242":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"4:2411:8639":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"6:5782:13285":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"4:11883:8711":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"4:6665:27005":{"crate_id":4,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"4:3958:8706":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:2486:235":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"4:11511:3183":{"crate_id":4,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:11288:16307":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:9539:15747":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"4:2026:182":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:3927:2344":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"4:8141:129":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"4:4977:8758":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:2836:1988":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:3151:1998":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:50313:3146":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:10723:3059":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"16:7117:33017":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:29663:20685":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:52047:20689":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"5:6147:2339":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:4284:1909":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:51715:20714":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"4:5891:203":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"4:5671:8824":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"6:7289:14263":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:1738:10253":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:11617:18612":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:46626:15604":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"4:359:8530":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:50231:3063":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:2571:127":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"17:12730:18978":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"4:4221:8715":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:8911:33662":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:4126:12587":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:1511:10231":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"4:11188:2558":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"4:8589:27060":{"crate_id":4,"path":["std","net","parser","AddrKind"],"kind":"enum"},"4:8128:8625":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"1:46500:199":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:13279:19559":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:2915:1890":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"4:6815:1946":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"4:4459:8750":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"15:214:14536":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"4:7821:2398":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:11764:3208":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:4413:15160":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"4:12342:1441":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"1:50632:3168":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"4:11128:30082":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"4:8991:2544":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"5:7170:8894":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:49990:3072":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:12003:202":{"crate_id":1,"path":["core","task","ready","Ready"],"kind":"struct"},"1:47260:2971":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:12307:18787":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:7557:15589":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:12934:19141":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:13031:19506":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:51839:8327":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:20078:26150":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"16:8056:15605":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:12768:19024":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"6:5534:13267":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"4:3484:8644":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"12:1866:8569":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"4:5585:119":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"5:7159:8893":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"4:11323:27000":{"crate_id":4,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:52640:8328":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"5:5695:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:12926:19140":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"5:6266:2089":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:50053:3137":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"16:4357:15152":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:11661:18619":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"18:113:19697":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:7135:33011":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"18:507:33685":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:4768:12653":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"4:4251:8717":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:2661:223":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:54054:8241":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:12176:18725":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"4:9424:106":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:3484:2339":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"16:6567:15553":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"16:6496:15551":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"4:1828:8586":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"4:8729:8753":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"4:11957:27826":{"crate_id":4,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"14:0:1818":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:11436:18500":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"12:1534:2537":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"12:985:8562":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"12:1029:8563":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:6415:13694":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:5720:13280":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"9:709:8809":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"4:9550:164":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:135:9021":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:9458:15764":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:9601:15751":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:4749:15256":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:10321:15862":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:54133:8246":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"4:11123:27529":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:50683:3170":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:13478:19614":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:7214:12781":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"4:8106:8621":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"1:48864:3027":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"12:861:8561":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:4213:204":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"17:10949:15910":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"16:3689:14676":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"4:7905:8511":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"4:8470:3065":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"16:6719:32677":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"10:0:1815":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:4662:15241":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"4:5359:26987":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:6877:15564":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"4:4911:28201":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"4:8414:2558":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"5:5540:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"4:11620:2409":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:29827:20632":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:49448:21582":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:4417:12616":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:50277:3149":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"18:690:19711":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:4574:15225":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:51785:8306":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"4:7990:8566":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"6:7243:12785":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:56990:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:3236:2308":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"5:1603:2318":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:3157:2000":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:47321:2975":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"12:646:2545":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:20310:8263":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"16:6210:15539":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"4:2250:8622":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"4:3274:8680":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"4:11799:2413":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"4:4267:8719":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:7357:15579":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:12237:18777":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"19:0:1009":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:7120:120":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:12211:18775":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:12361:18854":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:50669:3169":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:9778:15774":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:4665:12643":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:4496:12622":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:6800:2940":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"5:2864:2151":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"4:8262:8676":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:8339:15676":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"4:11302:26988":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:48666:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:13374:19598":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"4:3159:27473":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:420:14558":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:7469:15584":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"5:6635:2356":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:13506:19638":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"5:6931:2327":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:22476:2636":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:3130:1996":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"16:6070:15530":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"4:2385:8629":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"4:5072:2382":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"4:8748:8708":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:21439:2642":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:48125:178":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"9:800:14441":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"16:6146:15534":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:5605:13272":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"12:274:2527":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:8774:15653":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"4:1811:598":{"crate_id":4,"path":["std","env"],"kind":"module"},"1:21780:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:9475:15750":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:10310:15896":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"4:8831:8792":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:46339:2003":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"4:8660:8705":{"crate_id":4,"path":["std","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:10822:15706":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:2752:1971":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:5815:15523":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"4:9499:26641":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:13176:19547":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"4:774:141":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:11748:18682":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:4427:12617":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"16:7659:15593":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:6052:15529":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:4621:12637":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"5:3863:2339":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:48210:2061":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"4:1637:8570":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:10374:15865":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:10894:15710":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:50363:3141":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:2742:1969":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:50383:3142":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"16:7343:15578":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:51023:208":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"4:8477:3141":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"4:11676:26792":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:12884:19136":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:2887:116":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:5374:15503":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"4:7574:27264":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"6:5554:13234":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:48628:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"4:9566:216":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:11169:3112":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"6:5504:13264":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:6605:23362":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:5749:32414":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:1887:10389":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:11330:16312":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:4200:12593":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:6998:14075":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"4:8483:152":{"crate_id":4,"path":["std","net","ip_addr","IpAddr"],"kind":"enum"},"4:4749:8758":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"4:8158:118":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"6:1562:10237":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:20364:8732":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"7:0:1502":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:9118:33675":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:47615:2943":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"16:5447:15507":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"5:5993:8850":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"4:8457:2979":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"1:11972:2391":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"6:5510:13265":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"5:3492:2545":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:4179:12590":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:2322:186":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"4:11691:26790":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:48261:190":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"17:10506:15870":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:13114:19517":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:2952:2001":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"16:3263:14615":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"4:9858:128":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"16:8014:15604":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:4527:12625":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:8656:3026":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:54023:8238":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"5:7055:8552":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"12:1138:8564":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:21349:20659":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:581:9351":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"5:5381:2352":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:8886:144":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"17:12164:18711":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:10075:15813":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:9493:2544":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:8926:3048":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"5:5804:2344":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:5841:12498":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:6816:32960":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:2228:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"17:11841:18689":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:2828:1986":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:48193:2545":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"9:0:1814":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:51104:3217":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:48885:3029":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"16:5411:15505":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:49241:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:50109:3065":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"4:944:2339":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:13327:19560":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"4:12358:1512":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"1:21131:20674":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"4:6919:214":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:4723:22760":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:13059:19511":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"4:2383:2793":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"1:54171:8248":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:2557:14595":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:2822:1985":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:9930:15829":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"16:7872:15596":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:49927:2573":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"5:2085:31663":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"4:7974:8539":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:5163:15502":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:12291:18786":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:2631:14598":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"4:12347:730":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"6:5684:13276":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:6676:15557":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"4:9350:8841":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"4:598:2552":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:5772:13284":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"16:4519:15218":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:6651:2937":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:52192:8323":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:21314:2638":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"18:727:19714":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:12609:18917":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:5692:13277":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:4185:12591":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"4:661:8535":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"4:2248:128":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"1:4217:1903":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:51066:3211":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"5:6503:2366":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:4558:2874":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:4294:1910":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"17:10854:15708":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"4:11479:8830":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:8494:14552":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:8599:2894":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"4:8405:8687":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"6:4575:12631":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:4489:8714":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"5:4025:2344":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:57003:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"4:11643:8837":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:10721:15703":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"16:7497:15586":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"4:10529:27006":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"16:7267:15571":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:10993:3078":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:2411:14589":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"4:8017:22968":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"1:2845:1990":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"4:8252:27007":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:12638:18972":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:48871:3026":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"4:3475:26316":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:9517:2545":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"4:5657:8823":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"1:48742:1939":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:4559:12629":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:4398:12615":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"4:11311:8829":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"4:4317:8722":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"12:393:32530":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:4297:15140":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:4761:12652":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:9401:15732":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"12:320:2304":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:49999:2574":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"16:5780:15521":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"4:11407:2406":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:8216:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:4592:12633":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:11576:18511":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"4:6569:203":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:5122:15485":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:46945:2881":{"crate_id":1,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:8666:3030":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:0:433":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"6:5699:13278":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:11186:16134":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:47005:2886":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:10958:3156":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"18:574:33685":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"4:8674:8708":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"4:8939:8811":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"16:2793:14605":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"4:11724:26343":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"5:3559:2318":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:11893:18692":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:11873:18691":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:50095:3138":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:47071:2932":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:6241:15540":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"5:1950:2546":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"4:4974:8784":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:21453:2639":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:13393:19600":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:10682:15701":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"4:6021:1940":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"12:2080:8563":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:51695:20708":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:46633:23349":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:47648:2950":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:575:9350":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:20413:8257":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:1029:1730":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"1:4222:1904":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"4:9382:8843":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:10257:15869":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"4:11567:8846":{"crate_id":4,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:2781:1977":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:10921:15909":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:46685:2850":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:9126:2432":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"4:11503:28333":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"4:1615:2308":{"crate_id":4,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"6:519:9344":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:5672:13275":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:534:32946":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:4103:1923":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:2806:1981":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"5:2153:31668":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:7288:15573":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"4:2871:2381":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:10466:15901":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:11684:18620":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:11785:23129":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:2490:234":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"6:4191:12592":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"4:5774:8829":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"6:7279:14262":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:29627:2791":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:13413:19604":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:5660:13274":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:13184:19548":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:9183:15693":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"4:2579:2378":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:47640:2948":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:2825:14606":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"16:4721:15252":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"4:8722:8703":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"4:9472:27031":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"4:12339:308":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:11536:15855":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:1532:10234":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"18:652:33685":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:2769:1972":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:6524:13701":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"4:8740:8745":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"4:12177:2417":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:513:9343":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"18:719:19713":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"5:1082:30131":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:6981:14074":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"4:3091:8688":{"crate_id":4,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"1:56964:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:4225:2346":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:46640:1910":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"17:9631:15745":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"4:996:8560":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:48328:2089":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"9:111:14323":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"1:25286:2637":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:12797:19026":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:10270:15868":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:4317:12607":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:51761:8314":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:1686:10248":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:11217:16136":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"5:1046:30138":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:11813:18687":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:11194:3128":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:5523:13266":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"9:977:14312":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"4:12357:774":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"1:20944:26154":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:5664:15517":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"4:12355:1458":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"17:0:1821":{"crate_id":17,"path":["object"],"kind":"module"},"4:8398:2940":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"11:44:14495":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"4:8111:8623":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"4:10790:8828":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"9:586:14341":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"4:8648:8704":{"crate_id":4,"path":["std","net","socket_addr","SocketAddrV4"],"kind":"struct"},"4:2029:181":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:2480:147":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:47630:2427":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"5:6341:2318":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:9293:15736":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:3996:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"6:4346:12610":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:10520:15905":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:50900:3185":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:11356:16326":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:7278:15572":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:9143:2376":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:13126:19520":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"5:1395:8553":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:51807:8294":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:53750:8302":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:6554:13704":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"4:8506:8699":{"crate_id":4,"path":["std","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:53958:8325":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"4:8118:8624":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"1:7083:149":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:6109:15531":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:4437:12618":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"4:11424:2408":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"5:781:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"5:2875:30604":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:48362:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:10332:15897":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"16:5388:15504":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:53996:8290":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:562:15669":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:46998:2885":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"4:11740:2411":{"crate_id":4,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"4:8612:8702":{"crate_id":4,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"12:2205:8551":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:46599:1997":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:7197:156":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"4:9318:8839":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"16:5472:15509":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:8241:15673":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"12:725:8553":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:9624:3066":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:8666:15683":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:50526:3162":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:3249:15835":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:10707:3057":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:9165:33671":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"12:1852:8567":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:46480:196":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:6269:9260":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:11774:18684":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:12909:19139":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:49104:67":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:48269:207":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"16:3457:14617":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:11014:16024":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"4:9571:8846":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"4:4215:8716":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:2773:1975":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:646:9384":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"6:5587:13270":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:9446:15739":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"18:96:19696":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"4:11133:8623":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"4:6466:27044":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"12:1518:14507":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:12964:19474":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:12948:19142":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"4:887:2544":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:3602:2546":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:4231:12596":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:11787:18685":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"5:7242:2359":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:9831:15850":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"4:1608:2089":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:9071:33658":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:47621:2945":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:47237:2969":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"16:7388:15580":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:5628:15516":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"12:777:2312":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"1:2789:1978":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:4327:15146":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"4:5016:8735":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:12033:18702":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:3599:14634":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:2557:115":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:9804:3068":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:4144:15059":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:11559:18508":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:9844:15808":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:4:993":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"12:2069:2534":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"4:4321:8723":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"4:10891:8682":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"14:7:14514":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"4:2653:8675":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"4:5517:187":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"18:599:33694":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:47360:2978":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"16:4635:15238":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:8272:15674":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:51013:202":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:46566:1994":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:46925:2891":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:52794:8324":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:51087:158":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"4:1826:8585":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"1:3067:1995":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:2579:14596":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:6500:13699":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"4:524:2372":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:7046:2954":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"4:12350:729":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"4:10833:2403":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:50737:3132":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:47190:2562":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:47228:2968":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"3:0:1809":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"12:1836:2089":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:21038:8732":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:21290:20633":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:29721:20684":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"6:1678:10247":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:2437:8732":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:4307:12606":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:50694:3171":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"4:1620:8567":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:52408:8289":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"5:7148:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"16:5203:14552":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"5:5129:8885":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:11909:18693":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:7220:12782":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"5:3614:2548":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"16:4921:15308":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:46378:2002":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:50605:3167":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:13527:19640":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"5:1413:8555":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"16:2487:14592":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:49898:3061":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"4:9520:27252":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:5733:13282":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"4:8899:8809":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"16:2657:14599":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:8981:15688":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"18:681:19710":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:50401:3150":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"16:6171:15536":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:49917:3071":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"4:5018:8736":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:8475:15651":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"4:10936:2404":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"4:11548:26620":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"6:4449:12619":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:1643:10244":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"18:699:19712":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:47177:2965":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:46873:2889":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"4:12317:27661":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:8110:15650":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:12073:18705":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:13082:19513":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:54069:8242":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:4816:12658":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:5498:13263":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:5472:13261":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:9791:15802":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"4:7183:27606":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:9350:219":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:54210:8249":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"12:300:32521":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"5:6908:2089":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:50824:3117":{"crate_id":1,"path":["core","str","LinesAnyMap"],"kind":"struct"},"5:6899:8581":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:9031:33664":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"4:4909:28199":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"13:108:32580":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:6409:13693":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:13091:19514":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:6252:15541":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:4698:12646":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:12225:18776":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:8212:15672":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:9382:15734":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:50836:3121":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:12630:18970":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:22077:2641":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:13366:19597":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:12816:19028":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:8941:15687":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:29621:2790":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"4:2399:8633":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"1:47043:2933":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:6392:10174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:52362:8285":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:1595:10240":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:20523:8259":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:48185:2544":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"17:12485:18914":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"5:288:1894":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:13340:19561":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:3854:14793":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:11812:189":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"16:6161:15535":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:5835:13312":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:4737:12650":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:50489:3158":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"5:3468:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:2366:2539":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"16:2605:14597":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"16:5558:15514":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:2438:2595":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"4:2253:2371":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"16:6270:15542":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"9:896:14308":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"4:6629:163":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:4262:15129":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:10973:15911":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"4:574:2373":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"6:560:9348":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:4280:12602":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:9697:3069":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:2840:1989":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"4:9430:8520":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"6:1580:10239":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"9:505:14490":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:53064:8286":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"12:659:2089":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:586:9352":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:9158:2437":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"6:4534:12626":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"4:10460:8597":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"6:4540:12627":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:7255:12787":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"4:8464:3138":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"4:973:8558":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:20516:8732":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"4:3409:8643":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"12:2190:32526":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:52170:8320":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"4:8569:27263":{"crate_id":4,"path":["std","net","ip_addr","fmt","Span"],"kind":"struct"},"1:1639:2767":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"17:11087:16093":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:2535:14594":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:5877:2983":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:53420:8329":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"4:4438:8748":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:12617:18918":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"12:810:8555":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:10139:15690":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"14:187:14524":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:8418:15679":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"4:9442:26619":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"12:1085:2535":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:10233:15894":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:48312:2544":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:47346:2977":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:6186:15537":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"5:1378:2089":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"12:1845:2308":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"16:6345:15547":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:2777:1979":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:12874:19074":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:50213:3067":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"4:954:2308":{"crate_id":4,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"1:56938:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:554:9347":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:46858:2860":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:8872:140":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"17:12060:18704":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"4:686:8541":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"4:8182:2546":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:13492:19632":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:2316:179":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"18:671:19709":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:2727:14602":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:4611:12636":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:10360:15863":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"4:484:2411":{"crate_id":4,"path":["std","thread","local","fast","Key"],"kind":"struct"},"1:47381:2979":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:2916:15812":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:7511:15587":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:11174:16133":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:10434:15900":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"4:9870:2402":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"6:4294:12604":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:13354:19562":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:4394:1914":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:48438:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:3304:68":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:50373:3143":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:4019:2864":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:9681:15799":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:7249:15570":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:9193:33667":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:4300:12605":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:13436:19605":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"12:60:32533":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"4:9405:1943":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"12:834:2530":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:8393:15678":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"4:4273:8720":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:54095:8244":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:9671:15765":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:11070:16086":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:49641:3107":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:20095:21409":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:1695:10249":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"4:8685:8697":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"17:10583:15696":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:12836:19069":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:8796:15685":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"5:855:2324":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:9885:15852":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:9061:15690":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"4:8166:27094":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:29402:2596":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"17:9362:15690":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:21326:20658":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"4:1476:143":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"5:4055:2344":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:1548:2344":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"4:12352:1459":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"4:7225:2396":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:13141:19522":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"4:1002:8561":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:11300:16308":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"5:3089:30563":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:49964:2956":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:11368:16327":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"16:7942:15600":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"4:411:162":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:56581:8330":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"4:4771:8759":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"4:6715:1732":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"17:10625:15698":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:4257:12599":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:1756:2566":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:51891:8319":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"16:3566:14625":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"5:6474:2352":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:9350:15728":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:9488:15749":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"5:3671:2308":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"18:644:33685":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"4:979:8559":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"4:9419:27069":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"16:6137:15533":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"13:220:32535":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:20775:8258":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"16:6842:32669":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"18:531:19722":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:10350:15705":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:6509:13700":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"4:7895:27834":{"crate_id":4,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"16:6735:15560":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:12756:19022":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:21274:21527":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:6668:32969":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:54118:8245":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:9805:15848":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:11106:16094":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"4:4843:8774":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:21387:20643":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:2785:1976":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:13594:19683":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:13459:19608":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:11343:16313":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"16:7426:15582":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:12265:18779":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:48400:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"4:10479:2559":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"16:6059:33020":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:5996:15526":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"4:12336:1475":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"4:8772:8783":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"5:2867:30603":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"5:6990:2089":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:7237:15569":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:8991:33655":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"16:4888:15299":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"4:9609:8847":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:7093:15566":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:13536:19641":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:6743:15561":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:29649:67":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:51031:192":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:49189:71":{"crate_id":1,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"6:4598:12634":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"6:1722:10252":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"4:931:8554":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:6329:8786":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:6572:13705":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"4:628:8533":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:10942:3154":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"16:7059:2061":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:4368:1913":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:53030:8304":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:567:9349":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"5:6193:2318":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:39377:2829":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:7786:2065":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:9155:15692":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"5:7131:8618":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"4:9485:15565":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"12:1044:14505":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:47038:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"0:0:1598":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"4:1967:8615":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"5:1320:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:3635:2089":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:50426:2880":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:487:15668":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:12148:18710":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:11174:3127":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"4:5834:8833":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"1:47395:2980":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"4:9337:8840":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:13203:19550":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:5541:15513":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"4:1604:2544":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"4:12353:1456":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"1:9735:3070":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:8951:33653":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:1632:577":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"16:6903:15565":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:4348:1912":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"16:6284:15543":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"4:3319:8670":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:4379:12614":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:12748:18980":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:7092:1893":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"4:6259:203":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"16:7980:15603":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"4:4510:8751":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:2868:14608":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:10221:15893":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:2715:1888":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:21714:175":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:9328:15730":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"4:8013:8599":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"4:5837:8834":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"17:12022:18701":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"4:2516:8673":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"4:900:2545":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:52764:8321":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"5:1062:2538":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:4804:12656":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"4:9248:183":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"17:10497:15904":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"6:62:8954":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"4:1864:8597":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"4:8101:8620":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"17:13404:19601":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:2663:108":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"4:2613:8666":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"7:79:14286":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:47599:21556":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"4:9288:8832":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"17:1962:15770":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"12:1859:8568":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:49656:21337":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"18:515:19721":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"11:36:32520":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"16:4689:15244":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:592:9353":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"4:9865:8621":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:11708:18679":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:11721:18680":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:2662:222":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:10670:15700":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:20497:8253":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"18:521:19718":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:5713:13279":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:52094:8251":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"5:4929:1938":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:7847:15595":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:49889:3062":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:9738:15775":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"5:952:2318":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:50844:3123":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:2832:1987":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"4:9672:2555":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:48337:180":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:50856:3126":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"4:4122:8711":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:11528:15857":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:247:33659":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:12198:18774":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"4:4408:26335":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"4:9296:2544":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:5235:32945":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:9263:15717":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:5480:13262":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:49409:21561":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"5:3110:8569":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:11199:16135":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:49977:3074":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:48514:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"4:8754:8755":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"6:4286:12603":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:5614:32864":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"12:1555:14508":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"5:6961:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"4:11862:8709":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:47148:2956":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"5:2133:31691":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:9433:15726":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:6277:10170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:10245:15895":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:8662:3029":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:10875:15709":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:8631:15682":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:50408:2883":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"12:1832:2544":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"4:11341:8832":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"16:4385:15156":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:11125:16095":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:52954:8297":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:47218:2967":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"12:1065:32529":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:9371:15691":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:12674:18973":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:6558:2964":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:5568:13235":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:5878:14555":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"4:7931:2404":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"5:3084:8568":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:21978:168":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:2231:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:13580:19649":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"9:649:14330":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"9:382:14414":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"9:863:14307":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"5:4288:2346":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:4565:12630":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:4659:12642":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"4:8997:8814":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"1:8654:119":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"17:13071:19512":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:7788:2063":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:39426:2837":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:13231:19558":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"5:1699:2308":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"4:6163:2386":{"crate_id":4,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"18:736:19715":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:9644:15744":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:46968:2882":{"crate_id":1,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"1:9340:8732":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:4629:12638":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:9873:15851":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:7226:12783":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"4:11491:8831":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:10845:15707":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:8664:191":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"4:4913:28203":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:3355:2834":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"16:6781:15562":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:53214:8310":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:20050:2825":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:4224:12595":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"4:3491:8664":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"5:219:2317":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:10882:3155":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:11961:106":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:7079:133":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:50392:3151":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:2474:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"16:2509:14593":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"4:7783:26982":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:967:15733":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:8561:15656":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:1747:21564":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"4:4022:8709":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:50840:3122":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"4:11637:27011":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:52286:8296":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:1518:10232":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:48201:2089":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:58312:21585":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"17:12781:19025":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:10403:15704":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:48176:2088":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"16:7603:15591":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"16:5981:32967":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:48243:2062":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"4:969:8557":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:46544:200":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:1550:10236":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"18:491:33695":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"4:11178:118":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:9585:3078":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"4:11530:8649":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"6:487:9339":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"4:10685:8827":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:52338:8303":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:10062:15815":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:50009:3073":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:3125:15817":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:2670:1916":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:8649:111":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"6:6302:13690":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:1525:10233":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:6704:15559":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:12972:19475":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:11315:16311":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"4:11298:8599":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:12118:18708":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"4:11104:8785":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"5:4713:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:11130:2635":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"4:12348:727":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"5:4094:2544":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:4096:12584":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:21040:8255":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"4:12306:8542":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"12:0:1817":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"1:39413:22968":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"12:387:32534":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:50828:3119":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:46915:2890":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"18:80:19695":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"4:12356:1455":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"18:582:2825":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:52537:20506":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:2816:1984":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:507:9342":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"4:4446:8749":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:3984:20883":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:5861:13313":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:2728:2751":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"4:1889:2556":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"4:5720:8827":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"4:12351:725":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"1:21879:2640":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:3145:134":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:20492:8732":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:48704:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:7483:15585":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:56977:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"4:678:8538":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"5:6923:2339":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:4076:1922":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"4:6028:1941":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"6:6538:13702":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"12:632:2544":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:2389:14588":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"9:676:14316":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"17:9283:15738":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"4:12340:1333":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"6:608:9355":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"5:1203:8562":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:4329:12608":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:51940:8307":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"4:12349:728":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"17:9274:15718":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:9108:15691":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"18:755:19716":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:11951:18697":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:10997:15912":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"15:175:14531":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:10296:15866":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"16:4545:15220":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:2651:217":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:48590:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:47278:2982":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:52140:8316":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:12980:19502":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:50848:3124":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"4:7840:2400":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:50912:3186":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"5:1964:2548":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:8380:22241":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"4:9312:2089":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:50085:3139":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:54034:8239":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:8596:15681":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:9303:15735":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:2320:14585":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"5:1445:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:20932:3060":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"16:5737:15519":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:50860:3183":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"16:7543:15588":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:7166:14234":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:9250:15716":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"5:5606:2339":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:4716:12648":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:4239:12597":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"}},"external_crates":{"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}