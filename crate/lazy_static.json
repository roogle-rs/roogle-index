{"root":"0:0:2389","crate_version":"1.5.0","includes_private":false,"index":{"1:13827:26352":{"id":"1:13827:26352","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12599:492","self::pattern":"1:13426:3804"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:3818","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13736:30593":{"id":"1:13736:30593","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13842:26574":{"id":"1:13842:26574","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13733:1027":{"id":"1:13733:1027","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12599:492"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13796:26831":{"id":"1:13796:26831","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12599:492","str::splitn":"1:13794:26829","self::pattern":"1:13426:3804"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44714:3760","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:3818","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13432:3818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13449:3820","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13804:2604":{"id":"1:13804:2604","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:13426:3804","`DoubleEndedIterator`":"1:8387:134","prim@char":"4:12599:492","str::rmatches":"1:13806:30601"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44796:3837","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:3818","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13811:30603":{"id":"1:13811:30603","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:13426:3804","`DoubleEndedIterator`":"1:8387:134","prim@char":"4:12599:492","str::match_indices":"1:13809:30602"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44760:3840","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:3818","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13432:3818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13449:3820","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13749:25678":{"id":"1:13749:25678","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11552:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11552:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13818:30606":{"id":"1:13818:30606","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13760:22416":{"id":"1:13760:22416","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12599:492"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:44562:3831","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13744:26799":{"id":"1:13744:26799","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12618:1901"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29:2395":{"id":"0:29:2395","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[179,0],"end":[182,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"1:13747:25677":{"id":"1:13747:25677","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42594:203"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11552:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11552:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13735:30592":{"id":"1:13735:30592","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13784:22399":{"id":"1:13784:22399","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12599:492","self::pattern":"1:13426:3804"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:13215:3775","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:3818","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13791:30600":{"id":"1:13791:30600","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:13426:3804","str::split":"1:13782:26824","prim@char":"4:12599:492","str::split_terminator":"1:13789:30599"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:44660:3835","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:3818","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13432:3818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13449:3820","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13761:22427":{"id":"1:13761:22427","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12599:492"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:44568:3830","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13843:26744":{"id":"1:13843:26744","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:40488:3516","Self::is_ascii":"1:13842:26574"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:40488:3516","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13775:2876":{"id":"1:13775:2876","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42594:203","prim@char":"4:12599:492","self::pattern":"1:13426:3804"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:3818","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13822:30609":{"id":"1:13822:30609","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12599:492","self::pattern":"1:13426:3804"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:3818","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13432:3818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:13454:3819","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13849:26749":{"id":"1:13849:26749","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1151:37077"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5703:31328":{"id":"5:5703:31328","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2745","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:297:2745","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13794:26829":{"id":"1:13794:26829","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12599:492","self::pattern":"1:13426:3804","str::rsplitn":"1:13796:26831"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44696:3764","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:3818","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13762:25561":{"id":"1:13762:25561","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:44578:3229","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13754:30597":{"id":"1:13754:30597","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12605:1770","crate::ops::IndexMut":"1:3621:2812","str::slice_unchecked":"1:13753:30596"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5717:31332":{"id":"5:5717:31332","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:297:2745","`String`":"5:7759:257"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2745","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5719:26573":{"id":"5:5719:26573","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13845:26571"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13772:26836":{"id":"1:13772:26836","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12599:492","self::pattern":"1:13426:3804"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:3818","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13432:3818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13449:3820","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13756:26819":{"id":"1:13756:26819","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"1:13755:26818","str::split_at_mut_checked":"1:13758:26823"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13764:22415":{"id":"1:13764:22415","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13763:22414"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44875:3842","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13806:30601":{"id":"1:13806:30601","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:13426:3804","`DoubleEndedIterator`":"1:8387:134","prim@char":"4:12599:492","str::matches":"1:13804:2604"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44814:3838","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:3818","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13432:3818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13449:3820","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5702":{"id":"5:5702","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5703:31328","5:5704:2732","5:5706:31329","5:5708:31330","5:5716:31331","5:5717:31332","5:5718:3536","5:5719:26573","5:5720:26572"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13741:26741":{"id":"1:13741:26741","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12948:3824"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13854:27995":{"id":"1:13854:27995","crate_id":1,"name":"substr_range","span":null,"visibility":"public","docs":"Returns the range that a substring points to.\n\nReturns `None` if `substr` does not point within `self`.\n\nUnlike [`str::find`], **this does not search through the string**.\nInstead, it uses pointer arithmetic to find where in the string\n`substr` is derived from.\n\nThis is useful for extending [`str::split`] and similar methods.\n\nNote that this method may return false positives (typically either\n`Some(0..0)` or `Some(self.len()..self.len())`) if `substr` is a\nzero-length `str` that points at the beginning or end of another,\nindependent, `str`.\n\n# Examples\n```\n#![feature(substr_range)]\n\nlet data = \"a, b, b, a\";\nlet mut iter = data.split(\", \").map(|s| data.substr_range(s).unwrap());\n\nassert_eq!(iter.next(), Some(0..1));\nassert_eq!(iter.next(), Some(3..4));\nassert_eq!(iter.next(), Some(6..7));\nassert_eq!(iter.next(), Some(9..10));\n```","links":{"`str::split`":"1:13782:26824","`str::find`":"1:13775:2876"},"attrs":["#[must_use]","#[unstable(feature = \"substr_range\", issue = \"126769\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["substr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Range","id":"1:40167:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5706:31329":{"id":"5:5706:31329","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7759:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:3818","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13852:3549":{"id":"1:13852:3549","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:5060:3549"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44900:3550","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13734:2835":{"id":"1:13734:2835","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13801:26834":{"id":"1:13801:26834","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:3818","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13432:3818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13449:3820","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13763:22414":{"id":"1:13763:22414","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13764:22415"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44866:3833","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13743:352":{"id":"1:13743:352","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13744:26799","`u8`":"4:12618:1901"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13832:30611":{"id":"1:13832:30611","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12599:492","self::pattern":"1:13426:3804"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:3818","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13432:3818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13449:3820","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13799:26833":{"id":"1:13799:26833","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:3818","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13840:30614":{"id":"1:13840:30614","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:13386:149","`FromStr`":"1:13385:3304"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42860:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:13385:3304","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:13385:3304","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2389":{"id":"0:0:2389","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[208,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\nuse lazy_static::lazy_static;\n\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\nuse lazy_static::lazy_static;\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.5.0\")]","#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:29:2395","0:31:2396","0:28:2389"],"is_stripped":false}}},"1:13738:30594":{"id":"1:13738:30594","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"1:13736:30593"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13848:26748":{"id":"1:13848:26748","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1151:37077"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31:2396":{"id":"0:31:2396","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[206,0],"end":[208,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\nuse lazy_static::lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["lazy",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"LazyStatic","id":"0:29:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13758:26823":{"id":"1:13758:26823","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13757:26822"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13835:30612":{"id":"1:13835:30612","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12599:492","self::pattern":"1:13426:3804"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:3818","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13753:30596":{"id":"1:13753:30596","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12605:1770","str::slice_mut_unchecked":"1:13754:30597","crate::ops::Index":"1:40135:2811"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13853:30616":{"id":"1:13853:30616","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:5057:30616"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44909:3570","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13751:25679":{"id":"1:13751:25679","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11552:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11552:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13821:30608":{"id":"1:13821:30608","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13846:26570":{"id":"1:13846:26570","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5708:31330":{"id":"5:5708:31330","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7759:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13766:30598":{"id":"1:13766:30598","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44856:3834","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13825:30610":{"id":"1:13825:30610","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12599:492","self::pattern":"1:13426:3804"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:3818","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13732":{"id":"1:13732","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13733:1027","1:13734:2835","1:13735:30592","1:13736:30593","1:13738:30594","1:13741:26741","1:13742:30595","1:13743:352","1:13744:26799","1:13745:2394","1:13747:25677","1:13749:25678","1:13751:25679","1:13753:30596","1:13754:30597","1:13755:26818","1:13756:26819","1:13757:26822","1:13758:26823","1:13760:22416","1:13761:22427","1:13762:25561","1:13763:22414","1:13764:22415","1:13765:29291","1:13766:30598","1:13767:22418","1:13768:25121","1:13770:26835","1:13772:26836","1:13775:2876","1:13778:2834","1:13782:26824","1:13784:22399","1:13786:26827","1:13789:30599","1:13791:30600","1:13794:26829","1:13796:26831","1:13799:26833","1:13801:26834","1:13804:2604","1:13806:30601","1:13809:30602","1:13811:30603","1:13814:30604","1:13816:30605","1:13818:30606","1:13820:30607","1:13821:30608","1:13822:30609","1:13825:30610","1:13827:26352","1:13829:26837","1:13832:30611","1:13835:30612","1:13837:30613","1:13840:30614","1:13842:26574","1:13843:26744","1:13844:26575","1:13845:26571","1:13846:26570","1:13847:26747","1:13848:26748","1:13849:26749","1:13850:30615","1:13852:3549","1:13853:30616","1:13854:27995"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5720:26572":{"id":"5:5720:26572","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13846:26570"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13755:26818":{"id":"1:13755:26818","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_checked":"1:13757:26822","str::split_at_mut":"1:13756:26819"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28:2389":{"id":"0:28:2389","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[161,0],"end":[173,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"inner":{"macro":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"}},"1:13844:26575":{"id":"1:13844:26575","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13820:30607":{"id":"1:13820:30607","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13770:26835":{"id":"1:13770:26835","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"4:12599:492","self::pattern":"1:13426:3804"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:3818","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5718:3536":{"id":"5:5718:3536","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7759:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13837:30613":{"id":"1:13837:30613","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12599:492","self::pattern":"1:13426:3804"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:3818","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13432:3818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13449:3820","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13847:26747":{"id":"1:13847:26747","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1151:37077"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13816:30605":{"id":"1:13816:30605","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13850:30615":{"id":"1:13850:30615","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"1:5059:30615"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44891:3571","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13809:30602":{"id":"1:13809:30602","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:13426:3804","`DoubleEndedIterator`":"1:8387:134","prim@char":"4:12599:492","str::rmatch_indices":"1:13811:30603"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44742:3839","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:3818","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13782:26824":{"id":"1:13782:26824","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:13426:3804","`DoubleEndedIterator`":"1:8387:134","prim@char":"4:12599:492","str::split_whitespace":"1:13763:22414","str::rsplit":"1:13786:26827"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:44592:3762","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:3818","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13767:22418":{"id":"1:13767:22418","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44884:3841","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13768:25121":{"id":"1:13768:25121","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12599:492","self::pattern":"1:13426:3804"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:3818","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13789:30599":{"id":"1:13789:30599","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:13426:3804","str::split":"1:13782:26824","prim@char":"4:12599:492","`DoubleEndedIterator`":"1:8387:134","str::rsplit_terminator":"1:13791:30600"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:44642:3836","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:3818","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13757:26822":{"id":"1:13757:26822","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13758:26823"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13745:2394":{"id":"1:13745:2394","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42594:203"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11552:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11552:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13786:26827":{"id":"1:13786:26827","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:13426:3804","`DoubleEndedIterator`":"1:8387:134","prim@char":"4:12599:492","str::split":"1:13782:26824"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:44610:3766","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:3818","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13432:3818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13449:3820","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13814:30604":{"id":"1:13814:30604","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13845:26571":{"id":"1:13845:26571","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13765:29291":{"id":"1:13765:29291","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44846:3832","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5704:2732":{"id":"5:5704:2732","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7759:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:3818","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5716:31331":{"id":"5:5716:31331","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7759:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13829:26837":{"id":"1:13829:26837","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12599:492","self::pattern":"1:13426:3804"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:3818","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13432:3818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13449:3820","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13778:2834":{"id":"1:13778:2834","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42594:203","prim@char":"4:12599:492","self::pattern":"1:13426:3804"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:3818","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13432:3818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13449:3820","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13742:30595":{"id":"1:13742:30595","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:13546:17234":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"4:8592:3229":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"1:41171:3229":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"5:7060:9664":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:7189:17069":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"16:6911:17057":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"4:4909:9512":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"4:12174:9615":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"16:906:32991":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"1:3350:3529":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:45367:3811":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:4897:2713":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:4644:2721":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"4:8668:9511":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:4758:233":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"17:13853:20197":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"4:4348:9505":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:16125:21516":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:15539:21473":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:16230:21525":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:41313:3646":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:5488:14117":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"4:11214:26543":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:5044:14070":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"4:8328:3174":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"5:7612:2840":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"5:1621:222":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"4:12603:351":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"6:1667:10998":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"11:2115:3154":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"5:881:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"4:6066:2766":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:6792:14850":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:42900:3172":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"4:8141:9360":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"6:8266:14301":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:3832:16122":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"4:12602:1352":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"1:8803:3581":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"11:676:2840":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:41581:3657":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:9479:3684":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:12107:17357":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:465:10079":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"4:9320:9596":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:155:16062":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"5:4196:3173":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:8011:17096":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"4:8070:9270":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"6:6360:14753":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:13837:20196":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:11629:17269":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:15880:21498":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:11565:17265":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"11:820:9314":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:2902:207":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"4:971:9311":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:45355:3815":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"15:327:16040":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:31563:208":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:40152:225":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"5:3320:9322":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"6:5282:14092":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"4:6645:198":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:44696:3764":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:4970:14061":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"4:10342:22085":{"crate_id":4,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"4:593:3192":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"17:13360:17225":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:16645:21696":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:14065:3649":{"crate_id":1,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"1:11194:23360":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"6:5450:14112":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"16:6850:17052":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:523:10086":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:7575:17083":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:47720:9002":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:5295:14094":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:6398:14816":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"4:12619:1883":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"4:9305:9593":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"5:3444:9309":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:48068:8943":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:8093:17100":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:6638:14834":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:9592:3818":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"5:6536:9601":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"5:3708:3173":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:13490:17231":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:16378:21536":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:8243:14298":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"9:168:15986":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"18:754:21738":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:10515:17199":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:44538:3829":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"16:5447:16817":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:41229:3615":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"6:7445:15260":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:3796:2817":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"4:11935:9588":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"5:7708:3611":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:0:527":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"4:8617:9462":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"16:894:32989":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"5:5406:9636":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"1:47067:9033":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:5664:14137":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:1563:10989":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:42688:3686":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:11732:17291":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"4:8656:3671":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:16320:21532":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"4:12620:1889":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"17:11552:17266":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"15:306:16036":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:532:10087":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"4:10608:116":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"16:7916:17088":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:16276:21528":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:15495:21471":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"18:598:34075":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"4:3609:9403":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"1:5406:1007":{"crate_id":1,"path":["core","iter"],"kind":"module"},"5:6158:3185":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:13718:17520":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:44866:3833":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"4:1651:9321":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:42498:22088":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"4:8575:3644":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"6:8231:14296":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:22953:9406":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"4:11028:9398":{"crate_id":4,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"11:763:9308":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:41814:3624":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:11318:33400":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"16:6656:17040":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"16:2702:16099":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:6505:14824":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:10728:17205":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:3551:128":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:2898:16108":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:44642:3836":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:41384:3640":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:42636:2840":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"6:1690:11001":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:15660:21479":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"16:6678:17041":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"1:31590:3510":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"17:13756:20192":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:46629:8992":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:11750:3173":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"5:3788:30154":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:7284:10132":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:43719:22382":{"crate_id":1,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"6:1684:11000":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"4:1645:9320":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:4063:3178":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"10:36:32804":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"5:6137:2762":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"5:7664:9304":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:10030:17184":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"18:481:21740":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:47471:22166":{"crate_id":1,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"1:10657:3728":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"5:4467:281":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"8:0:2629":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"4:8055:9406":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"1:44578:3229":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:15409:21466":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:12982:17472":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"16:6254:32907":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:5623:14132":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:22981:3478":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"16:6237:17027":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"5:7512:9327":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"16:3124:16116":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"16:6638:17039":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"1:10646:123":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"4:12597:436":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"5:3695:3172":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"4:9341:2767":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:8480:17112":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:3073:271":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:4762:2702":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"14:7:16011":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:33776:2790":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"4:8407:9443":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"3:0:2627":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:45339:3812":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:13094:17484":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"1:10872:169":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:40167:222":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:42370:3668":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:12121:17328":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:13156:17476":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"1:14395:164":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:15990:21510":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:7946:17090":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:13054:17271":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"1:42414:22365":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:8007:15639":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:11997:17319":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"4:9426:26391":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:15572:21475":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"4:2334:151":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"4:3411:9451":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:13932:20202":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"4:7473:26552":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"4:4950:9489":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"11:1878:9320":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"5:7094:9666":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"11:1042:16001":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"5:1580:9308":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"4:130:2542":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"4:12625:1460":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"1:8387:134":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"5:7233:30220":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:14831:20735":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:22754:9406":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"11:2340:16005":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"4:3684:9404":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"6:1632:10995":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:31190:2739":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:14962:20744":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:16164:21519":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"4:996:3148":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"5:998:3172":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:3315:261":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"16:2528:16091":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:10217:17189":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:15009:20747":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:6390:14815":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:34461:2797":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"4:9183:9574":{"crate_id":4,"path":["std","pipe","PipeWriter"],"kind":"struct"},"4:9255:2840":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"4:9556:9599":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:13553:17241":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"16:7302:17073":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:13982:20206":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:43431:3726":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:11578:17264":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"4:9393:26385":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"5:297:2745":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:5539:14123":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:14338:3239":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"6:1589:10992":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"4:9278:9592":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:22223:9406":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"4:12623:996":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"4:11123:9581":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"11:1118:16002":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:32794:3526":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"6:7984:15637":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"5:3078:30226":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"5:5507:30154":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:586:10095":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"12:0:2633":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:22118:25919":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"16:7728:3681":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:6406:17033":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:13177:3847":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:5127:3563":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:22243:8948":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:41839:3628":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:22641:3756":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:47338:8967":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:12203:17362":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"6:7308:9961":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"18:670:21733":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:13005:17473":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"4:12599:492":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"17:15724:21484":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:3775:2815":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"4:8293:131":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:10331:17193":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:22847:9079":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:11539:9406":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:11775:3762":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"9:49:15900":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:8304:14306":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:43758:150":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"17:14885:20739":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:32727:3515":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"4:381:9279":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"5:1395:3154":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:41432:3655":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:4984:14063":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:5311:14096":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:42520:3670":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:46659:8993":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"4:8622:9460":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"11:423:32818":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"4:3358:9449":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"4:8402:26264":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"1:47293:8961":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"4:2562:2562":{"crate_id":4,"path":["std","io"],"kind":"module"},"1:3063:175":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"13:229:32836":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"4:2336:9381":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"6:5217:14084":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"4:9812:3209":{"crate_id":4,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"1:47765:8974":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"5:3294:9321":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:14151:20218":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"16:3108:16115":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:14598:20721":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"4:12598:1208":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"16:8220:17107":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:6820:17049":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"16:7220:17070":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"5:0:325":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:45424:3878":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:497:10084":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"4:6257:3201":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"4:12615:927":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"5:212:3162":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"15:288:16035":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:5179:9496":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"4:8299:9306":{"crate_id":4,"path":["std","hash","random","RandomState"],"kind":"struct"},"16:3306:16118":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:44501:3237":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:4505:111":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"16:2964:16111":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"16:6387:17032":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"4:12097:9464":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"18:613:34078":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:12292:17372":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"5:4121:3178":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:6610:14831":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"4:7884:26530":{"crate_id":4,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"16:2448:16087":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:10802:3229":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:45598:3906":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"5:1549:2840":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"4:11102:9535":{"crate_id":4,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"1:45535:22438":{"crate_id":1,"path":["core","future","async_drop","Noop"],"kind":"struct"},"17:10245:17190":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:5477:14115":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"4:10760:26545":{"crate_id":4,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"1:40936:3576":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:14459:20712":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:40488:3516":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"16:2638:16096":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:11863:17301":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"4:9641:3196":{"crate_id":4,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"16:5415:16808":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:40315:3544":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:47166:22148":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"4:6791:2777":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:46790:8959":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:6571:17037":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"4:10840:9451":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"1:2119:696":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"11:1862:2840":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:4481:22515":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"4:10469:26414":{"crate_id":4,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"6:491:10083":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:15966:21507":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:3712:223":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"4:3456:9448":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"4:5696:9579":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"1:41191:3608":{"crate_id":1,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"17:15652:21478":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:47082:9034":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"4:8528:3621":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"4:10837:9449":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"1:13432:3818":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"5:3854:3177":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:44481:3771":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:4900:16661":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:47521:8962":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"16:2858:16106":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:42354:3667":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"4:8312:26261":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:10907:3743":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"14:31:16011":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"4:4178:9473":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:23668:21840":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"4:8840:9563":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"18:563:21745":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"4:9354:26379":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:47367:8973":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:13443:3821":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:2226:17306":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"4:9829:131":{"crate_id":4,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"1:44418:3234":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"9:380:15882":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:2658:16097":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:16716:21701":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"1:45026:3859":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:10166:17188":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"18:689:21735":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:9442:3683":{"crate_id":1,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"17:10822:17208":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"4:11969:26441":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"4:924:9307":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:666:17183":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:44814:3838":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"4:3454:9447":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:10273:17191":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:41456:3643":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:11616:17215":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:23396:21818":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"11:1579:16004":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:4239:16184":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:14042:20210":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:4692:16568":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:11605:17214":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:47852:8980":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:14626:20723":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:31216:21911":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"1:23591:21833":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"17:11074:33396":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"4:12193:16044":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:15474:21470":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"5:7857:9661":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:6719:14844":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"17:10295:17192":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:23558:21830":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"1:41798:3622":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:31184:2541":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"16:7072:17067":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:47128:22146":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"4:12566:28736":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"4:906:3173":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:43252:91":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"16:4265:16187":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:12081:17329":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"5:4286:3541":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"16:2682:16098":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"6:1494:10981":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:7256:17071":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:906:3307":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"1:3037:3250":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"16:7165:16030":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:15430:21468":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:12370:17373":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:4841:2711":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:13658:123":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:47149:22147":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:6472:14781":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"4:6273:232":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:6645:14835":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:10912:3744":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:11787:17318":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:7762:17084":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:7463:15261":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"4:5485:215":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"18:735:21730":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:12825:17429":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:4163:2840":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:15845:21495":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:11290:33399":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:12885:17457":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"16:3693:16121":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"5:4546:3541":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"1:44760:3840":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:12624:17382":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:15314:21464":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:11474:17253":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"16:7997:17095":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:43964:169":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"4:5712:9580":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"16:5083:16729":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:12190:17361":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"4:375:9278":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:45217:3866":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:15762:21488":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:43779:3231":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"17:14298:20704":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"4:2506:9390":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"1:10655:3727":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"5:7759:257":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"5:5811:9664":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:11123:33397":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:12248:17413":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:14482:20713":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:4875:14050":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"4:6941:2779":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"16:7421:17079":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:12698:17461":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:13569:17235":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:10563:17200":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"11:427:32819":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"5:7084:9665":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:15770:21489":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"5:7544:9333":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"16:0:2636":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:15753:21487":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"6:4842:14048":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"11:2374:3173":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:11719:17290":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:45371:3876":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"4:12034:3215":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:14437:20711":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"5:3076:30384":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:45335:3809":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"18:521:21739":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:5288:14093":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:44856:3834":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:11857:3763":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"5:3682:194":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:43326:2763":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:45540:163":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:32861:2741":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:3785:268":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:23108:9074":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:12224:17364":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:12554:3774":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"17:11420:17248":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"11:1001:3154":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:14404:20709":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:13944:20203":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:8023:3621":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:31205:3493":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"16:5196:16750":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"11:859:9316":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:41133:3606":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:5395:14107":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:13321:17223":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"4:6431:3239":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:16001:21511":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:5405:14108":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"4:9807:9401":{"crate_id":4,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"17:11221:17215":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:6082:17018":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"4:1640:9309":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:11025:33395":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:15982:21509":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:13265:17220":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:46936:9006":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:43947:22384":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:16302:21530":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:16633:21695":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"4:12613:939":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"1:3416:2808":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"4:700:9286":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:23458:22295":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"4:9247:9597":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:46953:9012":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:2679:3478":{"crate_id":1,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"1:32862:3531":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"0:31:2396":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"5:7772:9646":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"4:12217:26554":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"6:7524:15264":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:40227:226":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:44884:3841":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"5:1883:9309":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"4:3666:3580":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"16:7156:17068":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"4:8304:9305":{"crate_id":4,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"17:16473:20191":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"1:45343:3814":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:2405:17300":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"6:1569:10990":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:14932:20742":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:5341:14100":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"11:750:9307":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"4:6755:2769":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"18:96:21719":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"9:226:9563":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:14025:22548":{"crate_id":1,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"4:5369:216":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"1:43939:3746":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:46744:8999":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:5441:14111":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"6:8260:14300":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"4:3694:9426":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"7:31:15853":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"16:6981:17061":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"4:3923:9464":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:16611:21693":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"1:44610:3766":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:46828:8971":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"4:11110:9361":{"crate_id":4,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"17:15946:21505":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"16:6792:17047":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"17:14585:20720":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:15530:21472":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:5529:14122":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"5:885:9324":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"4:12118:9466":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:1918:3427":{"crate_id":1,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"11:1027:9318":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:10594:238":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"1:41805:2543":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:7966:17092":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:5304:17489":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"16:5647:16994":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:12961:17470":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:23018:9083":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"5:3075:2900":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:13536:17233":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"11:1063:32826":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"4:4218:9475":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"4:4836:26474":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"1:13215:3775":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"4:5202:9543":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"1:43065:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"5:6020:3178":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:10662:17203":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:11895:3776":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"4:6927:2778":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"4:3627:3199":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"5:2575:3165":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:42572:3673":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"4:5555:133":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"1:43176:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:5557:14125":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"18:643:34065":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:7835:17085":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"5:3287:3172":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"5:1364:9317":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:5334:14099":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"5:5126:3541":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:4890:14052":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:3404:2789":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"4:3360:9450":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"4:560:9281":{"crate_id":4,"path":["std","thread","thread_name_string","ThreadNameString"],"kind":"struct"},"17:12859:17466":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:13889:20199":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"16:7804:33141":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"19:0:1327":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:16029:21514":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"4:4356:9506":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:1539:10987":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:6744:14847":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"1:46676:8998":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:4792:14044":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:14806:20733":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:5687:17011":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"16:2568:16093":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:16202:21523":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:16211:21524":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"16:5142:16742":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:5271:14091":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:6452:14821":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:14219:20701":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:13348:17224":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:12940:17459":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:5585:14128":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:1514:10984":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"0:28:2389":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"4:6355:26536":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"4:916:2840":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:5025:14068":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:2818:16104":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:6901:17056":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"4:7379:26525":{"crate_id":4,"path":["std","sys","backtrace","print","DisplayBacktrace"],"kind":"struct"},"1:32787:2711":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"1:13101:3846":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:32805:258":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:3424:2810":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"16:8134:17102":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:8847:25445":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:5375:14104":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:16691:21699":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"6:7424:15257":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:14450:3910":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"4:6764:2544":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"16:6026:17015":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"16:7904:17087":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"18:491:34064":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:8278:14303":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"6:5550:14124":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:12896:17467":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:40055:2822":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"4:12626:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"17:14772:20731":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"4:1879:9344":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"1:44714:3760":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"4:8711:9539":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:7407:11108":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:2665:697":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:23032:3478":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"17:12786:17428":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:6800:3661":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"4:8156:9361":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:15707:21483":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:12775:17463":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"4:8792:9562":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"1:41847:3630":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:10653:3726":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"6:1675:10999":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:321:32991":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"5:7782:9647":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:3141:127":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"6:5503:14119":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"6:5568:14126":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:6749:14848":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"16:3585:16120":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"17:11677:17262":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:5611:14130":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:5312:23323":{"crate_id":1,"path":["core","ffi","va_list","sealed_trait","VaArgSafe"],"kind":"trait"},"17:10417:17196":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:12569:17374":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"4:11138:26423":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"4:9290:9595":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"5:7554:30251":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"4:434:197":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"18:0:2638":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:6711:17043":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:12549:17378":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"4:11929:26434":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"4:1938:3196":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"4:535:9260":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:5196:14082":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:10596:17201":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"5:3086:30383":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:479:10081":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:5186:14081":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:23465:3320":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:22351:8948":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"11:2354:3172":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"16:6121:17021":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:15063:20751":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:47977:8938":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:43955:3745":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"16:7977:17093":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:8708:17123":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"9:345:15897":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:10595:3580":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"16:8118:222":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"4:4906:9534":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:2484:16089":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"4:6996:245":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"11:2126:9318":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:7209:16029":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:42991:97":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"4:7224:9600":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"5:6263:3541":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:13470:17230":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:11901:17307":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"4:8135:9290":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:11502:17254":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"1:3389:2786":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"4:1992:9371":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"17:15857:21496":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:2418:3228":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"4:985:9314":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:40091:2821":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:16191:21522":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"5:2258:30253":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"11:1871:9309":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:234:238":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:42819:226":{"crate_id":1,"path":["core","range","RangeInclusive"],"kind":"struct"},"1:44568:3830":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"5:1119:30154":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"5:7524:3178":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:12948:3824":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"5:2340:30258":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"18:80:21718":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:582:17182":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:12932:3755":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:44492:3769":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:7987:17094":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:13168:17512":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:23347:3305":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"4:3083:238":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"1:43445:3729":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:15674:21480":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:14506:20714":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:11538:17271":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:4816:14046":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"5:3354:9323":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:12521:3773":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:23358:21806":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"4:12385:26556":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"4:1864:722":{"crate_id":4,"path":["std","env"],"kind":"module"},"1:41095:3574":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"17:14737:20729":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"4:3920:9465":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"5:3839:3174":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:578:10094":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:3802:2819":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"9:0:2630":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"4:8320:9441":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:4829:14047":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:11201:23362":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"6:1711:11003":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:10140:17187":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"4:8245:9401":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"1:44592:3762":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"4:2803:9442":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"4:10717:9584":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"5:5552:9639":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:12592:3494":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:44438:3236":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:42332:182":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:11877:17214":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:12647:17380":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"18:515:21742":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"11:983:9317":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:5007:14066":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:14268:20702":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"5:1571:9307":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"4:2028:813":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"17:16499:21691":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:7851:3618":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:23569:21831":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"4:6039:2765":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:45363:3810":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:12951:17469":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:44349:22543":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:47050:9027":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:13870:20198":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:32804:251":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"18:765:21731":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"5:4513:3541":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:13780:20193":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:22652:25930":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:44900:3550":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:15829:21493":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"6:6659:14837":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:5521:14121":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:8317:17111":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"4:11980:26505":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:5482:14116":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:5130:17483":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"1:10661:218":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"4:7442:26550":{"crate_id":4,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:14691:20727":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:13013:17488":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:13908:20200":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:5069:14073":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"4:2764:9431":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:1521:10985":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:11456:17251":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"1:22108:25919":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:41253:3637":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:8284:14304":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:16775:21706":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"4:8775:9547":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"4:4369:9507":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:2465:16088":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:7800:24887":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:14345:17422":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:42860:238":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:45182:3863":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:7962:10039":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"4:9512:2775":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"1:14358:3241":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"1:47598:8996":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:5019:14067":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:5617:14131":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"4:10467:3210":{"crate_id":4,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"1:47226:9001":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"5:4559:30167":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:44562:3831":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"4:12057:9465":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:2778:103":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"16:8633:17121":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"4:2488:3467":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"1:10665:3731":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:23580:21832":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"1:23635:21837":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"1:22231:8951":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:42628:3173":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"4:9538:9409":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"17:10695:17204":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:11357:17245":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:2908:214":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"4:6751:2543":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"6:0:1032":{"crate_id":6,"path":["libc"],"kind":"module"},"5:1244:31786":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"18:531:21743":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:10663:3730":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:6729:17044":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"4:705:9287":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:16705:21700":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"16:7956:17091":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"4:7951:26448":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:44470:3636":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:4914:14054":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:8720:150":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:13027:17479":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"16:7055:17066":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:10976:33394":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:6157:17023":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:23602:21834":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"6:7515:15263":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:34048:2792":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"4:506:26532":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:14130:25532":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:3060:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"4:5292:26350":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"4:8688:9503":{"crate_id":4,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"6:5630:14133":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"4:8075:9271":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"6:6802:14851":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:3152:150":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"17:15417:21467":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"4:11620:9378":{"crate_id":4,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"5:981:9326":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:16012:21512":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:4929:14056":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"9:490:15884":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:5319:14097":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:45640:192":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:13161:3845":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:6486:14782":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:44997:3857":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"4:10448:9353":{"crate_id":4,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"4:5323:26350":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"4:8121:9289":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"11:2206:15997":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"17:14083:20213":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"4:5027:9484":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"5:2360:30259":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:15932:21503":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:41397:3652":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:45039:3860":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:13957:20204":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"4:8585:3657":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"4:7858:26528":{"crate_id":4,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"17:12722:17435":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"16:2918:16109":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:8175:15800":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:11705:17289":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:1500:10982":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:30922:3251":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"17:13969:20205":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"4:11058:152":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"4:9413:17083":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:5301:14095":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"4:3858:9461":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:12162:17359":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:13081:17215":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"1:47951:8936":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:15:2605":{"crate_id":1,"path":["core","write"],"kind":"macro"},"4:5676:9578":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"6:8326:15837":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:5139:14078":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"4:9188:9584":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"11:1892:9322":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"5:1533:3173":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:23613:21835":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"1:43741:3493":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"6:7562:15267":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"4:8093:3212":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"6:1696:9497":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:3419:2809":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"16:7398:33066":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"11:718:9312":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"5:7695:9375":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:5349:14101":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"11:1542:16003":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:41102:3575":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"struct"},"1:22131:25924":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"4:4832:26470":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"4:8240:9400":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"1:44511:3770":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:22339:9406":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"5:722:30365":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:23657:21839":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"4:12550:26450":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:14749:20730":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"0:29:2395":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"4:648:9282":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:47255:9007":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"4:11941:26437":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:10629:17202":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:5381:14105":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:6142:17022":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:43139:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:43733:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"5:2806:30227":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:44976:3856":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"4:8397:26263":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:16809:20204":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"5:7604:2840":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:8316:15836":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:1489:10980":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"4:12618:1901":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"1:42840:224":{"crate_id":1,"path":["core","range","RangeFrom"],"kind":"struct"},"4:11327:9536":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"9:470:15880":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"18:573:34065":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:13384:17226":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:12930:17233":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:42679:3682":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"14:159:16011":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:15049:20750":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:11968:3767":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"4:1915:9353":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"13:110:32835":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"4:8598:3762":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"1:42954:90":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"11:2519:32807":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"18:623:34081":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"4:4318:28761":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"4:617:3195":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:8274:3634":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:8440:2743":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:2548:16092":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"4:6479:26392":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:4493:22517":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:16180:21521":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"4:8060:9280":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:14858:20737":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:11385:17246":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"4:12605:1770":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"17:15939:21504":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"4:11114:9576":{"crate_id":4,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"1:44192:22395":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"4:2529:9397":{"crate_id":4,"path":["std","fs","exists"],"kind":"function"},"1:41007:3550":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:10367:17194":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"11:481:166":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:544:32927":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"4:9497:246":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:14334:17421":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"4:12200:16044":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"4:681:9283":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:41275:3220":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:10293:22630":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:45012:3858":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:14559:20718":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:16341:21533":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"4:3315:29044":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"4:1129:9319":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:4150:16141":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"4:1881:9345":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"17:11447:17250":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:14326:17423":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:6500:14823":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"4:2094:209":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:23294:21794":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"11:2099:9317":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"4:12612:761":{"crate_id":4,"path":["std","f128"],"kind":"primitive"},"17:15035:20749":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:24126:248":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:22142:25925":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:16262:21527":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:44796:3837":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"4:6534:3201":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:16763:21705":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"1:41284:3638":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:40962:3585":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:11514:17281":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:14572:20719":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:4831:2710":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:5366:14103":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:15105:20754":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:6109:17020":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:6893:14880":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:3569:2719":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"4:9469:199":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"14:186:16019":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:15350:21465":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"5:4316:3541":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:7000:22340":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"4:1940:3197":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"16:6606:218":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:5345:454":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:43703:22379":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:15135:17233":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:6950:17059":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:12034:15997":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:15837:21494":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"6:6756:14849":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"6:6602:14830":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:6428:14819":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:15585:21476":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:16619:21694":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"1:48030:8941":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:13192:17480":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:3357:3492":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"16:6438:17035":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:2377:17340":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"11:2297:3154":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:40900:3550":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:6419:17034":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:7735:3583":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:4528:3552":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:44179:22393":{"crate_id":1,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"16:5280:16765":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:6841:17051":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:16574:20194":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"1:41354:3650":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"4:6869:2771":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:41407:3653":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"4:4946:9485":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"11:0:2632":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"16:5253:16761":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:46691:8958":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:40135:2811":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"17:16752:21704":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"11:123:3137":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:44891:3571":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"11:1898:9323":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"4:8546:3200":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"1:3830:115":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:4997:14065":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:6096:17019":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"4:12621:1895":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"5:5281:2762":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:7430:15258":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:7468:17081":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:8162:17104":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:23489:3321":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:14311:20705":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"10:44:15991":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:16356:21534":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:8328:2744":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:13221:17219":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:15120:20755":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:38897:2806":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:5462:14113":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:7344:9539":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:41123:107":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:5230:14086":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"5:2165:9332":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"4:10625:3211":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"1:6989:3641":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:16799:20202":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"17:12148:17324":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"6:7326:15255":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:1219:17268":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:8809:3633":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:11015:17211":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"4:9482:3541":{"crate_id":4,"path":["std","sync","poison","Guard"],"kind":"struct"},"1:47966:8937":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:26526:283":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:14113:20215":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:2504:16090":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:22614:9406":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"6:6670:14838":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"17:14996:20746":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:13204:17218":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:4902:14053":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:40999:3570":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:6679:14839":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"1:3957:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"16:8562:17116":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:2781:104":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:32894:278":{"crate_id":1,"path":["core","marker","UnsizedConstParamTy"],"kind":"trait"},"1:42532:3671":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:11951:17312":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:13514:17232":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:46761:9005":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:10096:17185":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"17:11231:17253":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"4:4240:9479":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:5111:16734":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:15956:21506":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"4:8863:9564":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"14:219:16021":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:6523:14826":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:11526:17275":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"18:581:3510":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:23547:21829":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"6:5224:14085":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:12672:17448":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"4:3504:9434":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:4957:14059":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"9:412:15883":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:2040:3541":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"1:7629:2848":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:4692:2539":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"6:5151:14079":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:45131:3862":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"4:8766:9548":{"crate_id":4,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"5:7576:222":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:1703:11002":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:12055:17356":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:46997:8966":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:42930:208":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"6:564:10092":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:5658:14136":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:5428:14110":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"16:8176:17105":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:46915:9000":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:12604:17214":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:16592:20195":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"4:6032:2764":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"4:4025:9466":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"4:5662:9577":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"1:4547:3553":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"1:8083:2701":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"17:14000:20207":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:11280:17216":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:41363:3660":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"11:1083:3156":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"4:7540:28762":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"4:2516:9395":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"1:12023:3760":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:13634:17517":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:11930:3766":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:44875:3842":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:43102:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:45543:176":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:41591:3658":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"4:10885:3212":{"crate_id":4,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"1:11818:3775":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"5:4151:30154":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:23103:9076":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"17:11591:17263":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:6835:17050":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"14:0:2634":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"4:4340:9504":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:5755:32888":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:42710:3694":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"16:6300:17029":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:36856:2802":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:1507:10983":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:14519:20715":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:22929:9081":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:46857:9026":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:22979:26158":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"17:12710:17462":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"16:7355:17075":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"7:0:1955":{"crate_id":7,"path":["unwind"],"kind":"module"},"4:5925:9589":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:47992:8939":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:15746:21486":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:12009:3764":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:45679:22463":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:44400:3759":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"4:8918:9566":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"17:15159:20757":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:45097:3861":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:15732:21485":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:3815:24960":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"5:7185:280":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:33352:2788":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:3592:155":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"16:7027:17064":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"5:2248:9260":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"4:9239:3172":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"4:5135:9533":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:11830:17271":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"4:4948:9488":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:15638:17270":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:12043:17326":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:2223:3497":{"crate_id":1,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"1:22619:8954":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"17:12027:17355":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"4:960:9309":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:11925:17305":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"4:8945:9568":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:13797:20194":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"4:5918:3201":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"4:9218:9585":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"4:0:1762":{"crate_id":4,"path":["std"],"kind":"module"},"17:15974:21508":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:13138:3848":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"4:4502:9509":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:3057:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"16:6736:32987":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"18:507:34065":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:11804:17304":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"5:7841:9309":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"4:11086:26510":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:22225:8947":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"4:11709:26547":{"crate_id":4,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"1:46886:8946":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:44742:3839":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:15898:21500":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:16019:21513":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"5:7747:9637":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"5:3258:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:47500:22167":{"crate_id":1,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"17:14707:20728":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"4:8537:9454":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"1:43289:98":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:6694:17042":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"4:3085:150":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"17:12408:17420":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:16138:21517":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"4:12622:1877":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"5:3921:9309":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:8800:162":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:38842:2805":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:3853:17399":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"4:9446:26482":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"16:8525:17114":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:8102:17101":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"11:686:9311":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"5:282:30154":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"16:2770:16102":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:32780:22512":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"4:1120:9318":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"16:8582:17117":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:47675:8968":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"4:11023:26487":{"crate_id":4,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"16:8500:17113":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:3193:3521":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"4:8611:9463":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"5:1599:9311":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"5:3299:30376":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:6110:3541":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:41375:3651":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:7880:17086":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:41791:22354":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"4:6582:232":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:12582:17375":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:13426:17228":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"1:45547:231":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"17:14030:20209":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"4:8267:9399":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"4:786:166":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"4:1633:2840":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:7258:30224":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:42648:3681":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"16:2618:16095":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"4:11340:9585":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:2436:17325":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:23380:21807":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:45667:3911":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:42767:3701":{"crate_id":1,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"1:32769:22509":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"6:5420:14109":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"5:39:9340":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:5265:14090":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:7492:33079":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:5058:16727":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:45619:22553":{"crate_id":1,"path":["core","task","wake","ExtData"],"kind":"enum"},"1:45413:3877":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"15:394:16047":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"11:808:9310":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:13397:17227":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:14639:20724":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:12748:17433":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:6441:14820":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:46811:8965":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:47099:22145":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:13180:17481":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"16:2794:16103":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"16:8609:17119":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:2838:16105":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"4:11351:26516":{"crate_id":4,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"4:4120:9470":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"10:0:2631":{"crate_id":10,"path":["adler"],"kind":"module"},"16:4808:16638":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"13:0:2628":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:46872:9032":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:16738:21703":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"4:9520:174":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"4:11359:3876":{"crate_id":4,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"6:1584:10991":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"11:1866:3178":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:13385:3304":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:11431:17249":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:13591:17236":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:3502:17376":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:11066:23358":{"crate_id":1,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"17:12134:17358":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:5512:14120":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"5:1630:9331":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"11:344:32815":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:45606:3907":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"5:6902:30154":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:1657:10997":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"4:1629:3172":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"4:1657:9322":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:8543:17115":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:7279:17072":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"16:6040:17016":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:1625:10994":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"4:9205:9536":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"1:14315:119":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"17:15601:21477":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:16152:21518":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"4:11412:174":{"crate_id":4,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"4:1002:9315":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:6459:14822":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"4:9178:9573":{"crate_id":4,"path":["std","pipe","PipeReader"],"kind":"struct"},"1:0:585":{"crate_id":1,"path":["core"],"kind":"module"},"4:7870:26529":{"crate_id":4,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"17:12868:17229":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:46644:8957":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"5:7568:2840":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:7935:17089":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:5640:14134":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"17:14916:20741":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:16249:21526":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"16:3046:16114":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"11:649:3172":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:23510:9406":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"1:45557:239":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"16:4954:16669":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"4:5850:9582":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"16:5170:16747":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"11:1136:9319":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:14671:20726":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:5088:14074":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:7580:15268":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:5241:14087":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:6887:17055":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:13144:17477":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"17:12919:17468":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:10433:3741":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"14:213:16020":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"18:706:3821":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"4:11018:26485":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"6:4964:14060":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:6617:14832":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:12318:17394":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:41159:3607":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"11:2414:3178":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:42386:3669":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:34980:2801":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:13920:20201":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"6:4937:14057":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:4990:14064":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:41293:3645":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:34807:2799":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"16:4402:16301":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:15089:20753":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"4:7846:26526":{"crate_id":4,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"6:545:10089":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:1643:10996":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"4:12610:766":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"4:9261:9594":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"16:4842:16649":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:14054:20211":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:3474:2800":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"4:1008:9316":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:40139:2813":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:5165:14080":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:23075:9075":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"6:6737:14846":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"14:40:20193":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:44909:3570":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:2156:1397":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"4:2091:210":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:45389:135":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"17:14546:20717":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:12279:17415":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"4:1503:168":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:44846:3832":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"17:15778:21490":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:6631:14833":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"4:979:9313":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:40297:2816":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:5604:14129":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:42554:3672":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:10927:17210":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"18:113:21720":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"18:659:21732":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:40975:3577":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:12536:17377":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"4:5853:9583":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"1:22349:8949":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"5:1224:3164":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:23416:21821":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:23431:21823":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"9:435:15881":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"18:589:22429":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"11:2275:9317":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"4:12624:1965":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"6:4976:14062":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:4182:16150":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"4:4576:9501":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:5740:17014":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:15805:21491":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:7990:15638":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"4:950:3178":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"4:4834:26472":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"6:485:10082":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:10842:17209":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:5377:16793":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"16:6460:17036":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:45351:3817":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"4:11536:3214":{"crate_id":4,"path":["std","sys","exit_guard","PThread"],"kind":"struct"},"1:3394:2791":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:5316:16778":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"4:6872:2772":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:11064:17212":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:43213:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:41262:3644":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"16:4871:16655":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:10288:25446":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"4:12616:933":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"16:3985:16124":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"11:1885:9321":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:41022:3572":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"6:6590:14829":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:42727:3699":{"crate_id":1,"path":["core","range","iter","IterRange"],"kind":"struct"},"6:7292:10936":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:12305:17416":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"1:3066:157":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:3036:9406":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"4:3675:28794":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:31152:2738":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:11756:17292":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"6:7317:15254":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:16661:21697":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"4:937:9308":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"4:5911:232":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:15548:21474":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:32891:3428":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"1:47018:8972":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"4:11220:26544":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:47794:9008":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:5387:14106":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:10441:17197":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"4:697:9285":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:14871:20738":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:11652:17267":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"11:102:32812":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:471:17181":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:45656:3913":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"0:0:2389":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"17:14283:20703":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:38787:2804":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:2722:16100":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"4:9800:151":{"crate_id":4,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"4:11394:26491":{"crate_id":4,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"1:22967:9082":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"17:11308:17217":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"5:776:264":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:41236:3636":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"5:2287:30254":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"4:4421:9508":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:2224:3467":{"crate_id":1,"path":["core","ptr","metadata","metadata"],"kind":"function"},"4:1111:3154":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:12346:17418":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:13069:17214":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"4:975:9312":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:16364:21535":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:43028:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:11970:17298":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"5:3328:9320":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"4:5782:9581":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"4:8934:9567":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"5:3082:30382":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:12051:3761":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:15694:21482":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:43976:9563":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"6:4805:14045":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"5:3333:30380":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"5:4356:3172":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:2230:3224":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:5412:1279":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"16:8623:17120":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:15620:21461":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"18:635:34082":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:6543:14827":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"11:851:9315":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:38732:2803":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:41211:3593":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:43424:3727":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"5:7723:9376":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:6695:14841":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"16:6335:17030":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:15438:21469":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:40985:3578":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:3589:154":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:505:16059":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"5:2140:3174":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:14946:20743":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:12233:17412":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:23324:21795":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:14157:217":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"16:8666:17122":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:23188:21788":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:34316:2795":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:1338:17276":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"4:11554:9379":{"crate_id":4,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"16:7041:17065":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"5:4482:30167":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:42592:206":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"4:9372:26384":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:3533:2820":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"4:12600:1923":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"4:4709:9513":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:16534:21692":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"4:9359:119":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:13732:20191":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:15869:21497":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:12065:17351":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:43438:3728":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:3586:153":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"9:318:15937":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:559:10091":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:8237:14297":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"4:7941:17183":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:44551:3828":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"16:7518:33084":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:12358:17419":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:8270:3635":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:32773:17122":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"17:12905:17458":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:8308:158":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:473:10080":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:11552:252":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:7013:17063":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"14:164:16012":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:7459:17080":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:41446:3656":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:15556:21462":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:12391:17393":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"16:6171:17024":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:46723:8994":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:6186:17025":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:6422:14818":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:15682:21481":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:8025:17097":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"4:11865:9563":{"crate_id":4,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"17:13817:20195":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"6:6727:14845":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"4:9231:9586":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"17:12334:17417":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:6702:14842":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"1:4950:2715":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"4:2728:9440":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:3139:16117":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:14139:20217":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:11113:17213":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:7551:17082":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"4:8555:9405":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"17:14071:20212":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:40906:3554":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"11:1703:168":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:5725:17013":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"4:12614:921":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"1:2221:3496":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:5357:14102":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"1:22891:9080":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"4:3413:9452":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:41820:3625":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:14392:20708":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:11172:33398":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:6300:3639":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"11:832:3148":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"4:11077:3200":{"crate_id":4,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"1:47276:9013":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"5:6105:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:2804:114":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:47035:8978":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"18:718:21729":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"5:1409:9319":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:2413:16057":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:7413:17078":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:8319:177":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"4:11986:26506":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:5107:14075":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"5:6555:9602":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"1:40189:224":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:11726:3172":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"4:8682:9463":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:10937:33393":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:22129:25922":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:42620:3172":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:4613:2720":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"4:9502:247":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:47405:9028":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:45196:3864":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:23478:3306":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"4:9507:2774":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"17:12850:17465":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:47911:8932":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"5:1208:31785":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"11:389:3146":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:3580:2742":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:34249:2793":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:6710:14843":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"6:553:10090":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:10548:17014":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"6:5575:14127":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:4881:14051":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"4:3050:3198":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:12017:17354":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:6651:14836":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:12007:17353":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"11:663:3173":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"4:12609:763":{"crate_id":4,"path":["std","f16"],"kind":"primitive"},"16:4927:16665":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:5494:14118":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"16:8206:17106":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:4405:3541":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:43994:22392":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"4:4184:9474":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:12259:17414":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"16:6586:17038":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"17:14374:20707":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:16077:21515":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:44660:3835":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:34634:2798":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:13040:17478":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"4:10999:9537":{"crate_id":4,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"4:2742:3794":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:47388:8979":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"5:1779:30154":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"4:11094:26513":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:12815:17230":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"16:6500:16056":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:10783:33380":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"1:12918:3753":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:2866:213":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:12797:17464":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:10486:17198":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"4:6111:2776":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:6187:3648":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"6:6416:14817":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"5:5950:265":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"14:201:9645":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:42785:3700":{"crate_id":1,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"6:5205:14083":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:13454:3819":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"18:608:34092":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"11:1652:32823":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:15076:20752":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:40267:2814":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:23309:22278":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:6806:17048":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"4:5728:116":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"1:5364:3614":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:2297:201":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:3790:159":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"16:3439:16119":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:40247:228":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:41416:3654":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:2681:3479":{"crate_id":1,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"4:12617:914":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"4:4687:9512":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:8295:17110":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:42719:3677":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"4:7996:26557":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:2871:147":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"5:1380:9318":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:15023:20748":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:15147:20756":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"5:7653:9303":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:7553:15266":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:4947:14058":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"11:2525:32809":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"4:9405:26387":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"5:7679:9374":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"5:1518:3172":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:6779:17046":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:23241:21791":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:7494:15262":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"7:78:15860":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:3320:2717":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"4:4822:9474":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:538:10088":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:13691:17519":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:41181:3609":{"crate_id":1,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"16:2948:16110":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:7390:11110":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:7369:17076":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:22172:8952":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:14182:3901":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"4:8279:152":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"4:9474:2768":{"crate_id":4,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"1:40947:22065":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"16:2588:16094":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"4:11048:9402":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"17:10860:151":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"16:6873:17054":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:23646:21838":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"18:680:21734":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:6769:32586":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:32803:249":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"11:2507:32805":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:6864:17053":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"4:4126:9469":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:47823:9029":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:6366:17031":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"4:1636:3178":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"11:776:3178":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:3308:277":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"17:12991:17436":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"4:9400:26386":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"11:2513:25934":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:34115:2796":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:6852:14878":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:7334:17074":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:10613:156":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"16:7505:33081":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:41303:146":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:13502:3850":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:47426:22165":{"crate_id":1,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"6:8272:14302":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:40207:227":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"16:6995:17062":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"4:11199:26541":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"4:5121:9532":{"crate_id":4,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"1:23061:9406":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:33564:2787":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"16:6203:17026":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:5325:14098":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:10777:17206":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"4:12604:1736":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"16:6062:17017":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:16486:20192":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"1:47920:8933":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:5652:14135":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:4118:16132":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"4:3318:29188":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"16:3887:16123":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:14651:20725":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"5:2154:3177":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"11:813:9313":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:16789:21707":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"16:8230:17108":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"18:726:21737":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:46968:8960":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"4:2343:9382":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"6:6687:14840":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"17:15822:21492":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:41829:3626":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:14415:20710":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"5:7735:9377":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"4:8878:9565":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"6:4896:13884":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:5255:14089":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:2433:16086":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:41110:3569":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:4:1292":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"16:7713:33132":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:3564:2718":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:6623:32968":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:11817:17303":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:12735:17434":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"16:7347:33062":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"4:4228:9476":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:4981:16673":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:11690:17261":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:1530:10986":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:8148:17103":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"4:11065:26412":{"crate_id":4,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"4:5112:9531":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"11:321:32813":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:14844:20736":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:8225:14295":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:12975:17471":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"11:1858:3172":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"11:2394:2840":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"6:8249:14299":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"4:9365:9266":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"16:8040:33164":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:41605:3659":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:10792:17207":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"4:12571:9291":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"4:6447:26540":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"4:4170:9472":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"4:2504:9389":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"6:5051:14071":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"4:8257:9402":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"6:5036:14069":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:2828:3504":{"crate_id":1,"path":["core","clone","InitializingSlice"],"kind":"struct"},"1:10102:85":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:1727:11004":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:8294:14305":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:3719:17381":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:6878:14879":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:11776:17293":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:6995:22342":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"16:2878:16107":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:42689:3685":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:10533:17013":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"5:6502:9686":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"5:7495:9329":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:15924:21502":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"16:8595:17118":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"4:8250:9398":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:1551:10988":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"4:11039:26406":{"crate_id":4,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"5:4982:229":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:10107:92":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:14611:20722":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:47873:9014":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:10659:3729":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:4869:14049":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"11:2540:9303":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"4:2339:3484":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"5:6813:2840":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:11464:17252":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"1:41061:3573":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"5:6688:3178":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:14018:20208":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:23372:22294":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:13289:17221":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"18:651:34065":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"5:7584:30260":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"4:12582:26509":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"11:2533:32810":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"16:2988:16112":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"18:698:21736":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:40304:3527":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"4:4787:9530":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:7539:15265":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"4:893:3172":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:11957:17299":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"5:1589:9310":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"5:785:122":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:5249:14088":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"4:8674:9500":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:46843:8977":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:42611:185":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"4:11155:9586":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1:22170:9406":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"6:570:10093":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:10114:17186":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"4:8707:9535":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"18:538:21744":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:43986:22391":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:22100:3510":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:44428:3768":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:22756:8950":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:12175:17360":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:11984:17352":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"4:10843:9447":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"4:8605:3832":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"11:357:3144":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:11337:23363":{"crate_id":1,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"5:6734:30154":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:44409:3758":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:45347:3813":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:43664:22367":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:43691:22372":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"4:9194:211":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"16:8264:17109":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"4:8928:3172":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"11:787:9309":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:13426:3804":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"1:3069:272":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"11:1558:3160":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"4:4232:9477":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:14974:20745":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:11162:17214":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"4:8663:9510":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:909:202":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"1:45248:3823":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:23624:21836":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"5:1481:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:39476:2807":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:44521:3238":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"11:2440:9309":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"16:5707:17012":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:47931:8934":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:44196:3780":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:5117:14076":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:47181:8995":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"4:12186:26445":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:45359:3816":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"6:5057:14072":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:8063:17099":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:44449:3772":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:12037:3765":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"4:11442:26494":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:14532:20716":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:15912:21501":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:3012:16113":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"4:12611:782":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"11:2323:9318":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:48045:8942":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:12686:17460":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"4:4156:9471":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:4767:2703":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"4:7788:28735":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"1:2126:2734":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:3867:132":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:48015:8940":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:14901:20740":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:1597:10993":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:4919:2714":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"4:5004:9490":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:14126:20216":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"4:3577:3541":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"4:3321:29189":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:47894:9035":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"16:5346:16785":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:48107:8944":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:15889:21499":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:12215:17363":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"16:5222:16753":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:5127:14077":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:14795:20732":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"5:925:9325":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"5:7534:9328":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:14357:20706":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:41015:3571":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:45565:219":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:7734:3582":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1:10651:133":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"6:7337:15256":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:6747:17045":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:34182:2794":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:41144:3611":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:6267:17028":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:13449:3820":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:14042:3903":{"crate_id":1,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"1:42916:2840":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"6:7439:15259":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:22144:25927":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"4:1662:9323":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"4:3547:3625":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"17:13661:17518":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"5:5556:9640":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:13118:17482":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"16:6967:17060":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"16:8055:17098":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:22:845":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"17:12839:17431":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"4:12606:1860":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"1:45230:3822":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:11400:17247":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:14098:20214":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"6:7367:11125":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:0:2637":{"crate_id":17,"path":["object"],"kind":"module"},"1:43674:3493":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"16:7786:33133":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:16172:21520":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:14820:20734":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:16290:21529":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"11:292:3140":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:11850:17302":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:46708:8964":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:41322:3647":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:316:32990":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"5:7504:2840":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:16678:21698":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"16:4764:16617":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:6939:17058":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:7539:33086":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"4:2656:9439":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:15285:21463":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:22154:25928":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:3621:2812":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"4:966:9310":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"15:0:2635":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:6513:14825":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:7383:17077":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:8495:190":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"4:2253:133":{"crate_id":4,"path":["std","ffi","os_str","Display"],"kind":"struct"},"18:548:165":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:45207:3865":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"4:8733:9487":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:41331:22330":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:10393:17195":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:12523:17379":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"4:11955:26439":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:10864:165":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"4:11377:9409":{"crate_id":4,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"17:16727:21702":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:12094:17327":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:2814:3503":{"crate_id":1,"path":["core","clone","CloneToUninit"],"kind":"trait"},"1:42795:222":{"crate_id":1,"path":["core","range","Range"],"kind":"struct"},"1:4888:2712":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:46776:9011":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:13609:17237":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:12761:17432":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:13450:17229":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:42908:3173":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"4:1097:9317":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:32893:118":{"crate_id":1,"path":["core","marker","ConstParamTy_"],"kind":"trait"},"5:1610:9312":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"4:2490:9385":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"16:2746:16101":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:4921:14055":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:6578:14828":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:16311:21531":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:13305:17222":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:6858:13959":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"4:2021:9372":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"1:41345:3649":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:45630:3905":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"16:901:32990":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"17:13208:150":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:517:10085":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:3310:121":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"6:5471:14114":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:47940:8935":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":32}