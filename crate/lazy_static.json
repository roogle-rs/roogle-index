{"root":"0:0:1609","crate_version":"1.4.0","includes_private":false,"index":{"1:11976:31172":{"id":"1:11976:31172","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:11864:410","self::pattern":"1:11581:3129"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11586:3144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11586:3144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:11606:3145","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11975:31171":{"id":"1:11975:31171","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11985:28098":{"id":"1:11985:28098","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:11864:410","self::pattern":"1:11581:3129"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40623:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11586:3144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11586:3144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11601:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11950:31162":{"id":"1:11950:31162","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40623:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11586:3144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11997:31177":{"id":"1:11997:31177","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:11543:126","`FromStr`":"1:11542:2641"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:40767:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"1:11542:2641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:11542:2641","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11935:28090":{"id":"1:11935:28090","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:11581:3129","`DoubleEndedIterator`":"1:7189:120","prim@char":"4:11864:410","str::split":"1:11929:28087"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"1:42638:3086","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11586:3144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11586:3144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11601:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5372:27810":{"id":"5:5372:27810","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12002:27813"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11929:28087":{"id":"1:11929:28087","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:11581:3129","`DoubleEndedIterator`":"1:7189:120","prim@char":"4:11864:410","str::split_whitespace":"1:11907:21367","str::rsplit":"1:11935:28090"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"1:42620:3082","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11586:3144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11885:31155":{"id":"1:11885:31155","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:11883:31154"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11904:21265":{"id":"1:11904:21265","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:11864:410"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"1:42590:3157","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11918:28097":{"id":"1:11918:28097","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:11864:410","self::pattern":"1:11581:3129"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11586:3144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11586:3144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11601:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11932:21364":{"id":"1:11932:21364","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:11864:410","self::pattern":"1:11581:3129"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"1:11405:3095","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11586:3144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11883:31154":{"id":"1:11883:31154","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11972:31169":{"id":"1:11972:31169","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5354:2791":{"id":"5:5354:2791","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7228:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11586:3144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11903:28080":{"id":"1:11903:28080","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:11902:28079"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11888:26782":{"id":"1:11888:26782","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11149:3150"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:28:1609":{"id":"0:28:1609","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[167,0],"end":[179,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"kind":"macro","inner":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"},"1:11944:28092":{"id":"1:11944:28092","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:11864:410","self::pattern":"1:11581:3129","str::rsplitn":"1:11947:28094"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"1:42724:3084","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11586:3144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11947:28094":{"id":"1:11947:28094","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:11864:410","str::splitn":"1:11944:28092","self::pattern":"1:11581:3129"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"1:42742:3080","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11586:3144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11586:3144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11601:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11979:31173":{"id":"1:11979:31173","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:11864:410","self::pattern":"1:11581:3129"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11586:3144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11880:799":{"id":"1:11880:799","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:11864:410"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11908:21347":{"id":"1:11908:21347","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:11907:21367"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"1:42903:3168","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11896:25217":{"id":"1:11896:25217","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9762:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9762:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:11901:31158":{"id":"1:11901:31158","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:11870:1374","crate::ops::IndexMut":"1:3020:1990","str::slice_unchecked":"1:11900:31157"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:11959:31164":{"id":"1:11959:31164","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:11581:3129","`DoubleEndedIterator`":"1:7189:120","prim@char":"4:11864:410","str::matches":"1:11956:1801"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"1:42842:3164","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11586:3144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11586:3144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11601:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5353:31829":{"id":"5:5353:31829","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:1906","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6979:8601","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:1906","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6979:8601","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11882:31153":{"id":"1:11882:31153","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5360:31831":{"id":"5:5360:31831","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7228:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12002:27813":{"id":"1:12002:27813","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11974:31170":{"id":"1:11974:31170","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11921:2119":{"id":"1:11921:2119","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:40625:176","prim@char":"4:11864:410","self::pattern":"1:11581:3129"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40623:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11586:3144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11956:1801":{"id":"1:11956:1801","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:11581:3129","`DoubleEndedIterator`":"1:7189:120","prim@char":"4:11864:410","str::matches":"1:11956:1801"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"1:42824:3163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11586:3144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12006:31179":{"id":"1:12006:31179","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4525:31179"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"1:42937:2886","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11911:21267":{"id":"1:11911:21267","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"1:42912:3167","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11994:31176":{"id":"1:11994:31176","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:11864:410","self::pattern":"1:11581:3129"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11586:3144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11586:3144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11601:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11999:27808":{"id":"1:11999:27808","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11988:31174":{"id":"1:11988:31174","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:11864:410","self::pattern":"1:11581:3129"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11586:3144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11586:3144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11601:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11982:26974":{"id":"1:11982:26974","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:11864:410","self::pattern":"1:11581:3129"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40623:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11586:3144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11925:2077":{"id":"1:11925:2077","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:40625:176","prim@char":"4:11864:410","self::pattern":"1:11581:3129"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40623:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11586:3144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11586:3144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11601:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11953:31163":{"id":"1:11953:31163","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40623:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11586:3144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11586:3144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11601:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11881:2078":{"id":"1:11881:2078","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11907:21367":{"id":"1:11907:21367","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:11908:21347"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"1:42894:3159","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12001:27812":{"id":"1:12001:27812","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5370:2950":{"id":"5:5370:2950","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7228:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12000:27811":{"id":"1:12000:27811","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11894:25216":{"id":"1:11894:25216","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:40625:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40623:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9762:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9762:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11968:31167":{"id":"1:11968:31167","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11890:310":{"id":"1:11890:310","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:11891:28060","`u8`":"4:11881:1470"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11889:31156":{"id":"1:11889:31156","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:11941:31161":{"id":"1:11941:31161","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:11581:3129","str::split":"1:11929:28087","prim@char":"4:11864:410","str::split_terminator":"1:11938:31160"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"1:42688:3161","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11586:3144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11586:3144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11601:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11909:30182":{"id":"1:11909:30182","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"1:42874:3158","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5369:31833":{"id":"5:5369:31833","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:286:1906","`String`":"5:7228:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:1906","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6979:8601","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11970:31168":{"id":"1:11970:31168","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11906:23072":{"id":"1:11906:23072","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"1:42606:3155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11910:31159":{"id":"1:11910:31159","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"1:42884:3160","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5357:31830":{"id":"5:5357:31830","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7228:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11586:3144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11879":{"id":"1:11879","crate_id":1,"name":null,"span":null,"visibility":{"restricted":{"parent":"1:11144:1374","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["1:11880:799","1:11881:2078","1:11882:31153","1:11883:31154","1:11885:31155","1:11888:26782","1:11889:31156","1:11890:310","1:11891:28060","1:11892:1614","1:11894:25216","1:11896:25217","1:11898:25218","1:11900:31157","1:11901:31158","1:11902:28079","1:11903:28080","1:11904:21265","1:11905:20439","1:11906:23072","1:11907:21367","1:11908:21347","1:11909:30182","1:11910:31159","1:11911:21267","1:11912:24042","1:11915:28096","1:11918:28097","1:11921:2119","1:11925:2077","1:11929:28087","1:11932:21364","1:11935:28090","1:11938:31160","1:11941:31161","1:11944:28092","1:11947:28094","1:11950:31162","1:11953:31163","1:11956:1801","1:11959:31164","1:11962:31165","1:11965:31166","1:11968:31167","1:11970:31168","1:11972:31169","1:11974:31170","1:11975:31171","1:11976:31172","1:11979:31173","1:11982:26974","1:11985:28098","1:11988:31174","1:11991:31175","1:11994:31176","1:11997:31177","1:11999:27808","1:12000:27811","1:12001:27812","1:12002:27813","1:12003:31178","1:12005:2867","1:12006:31179"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:12003:31178":{"id":"1:12003:31178","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4527:31178"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"1:42919:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5371:27809":{"id":"5:5371:27809","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12001:27812"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11892:1614":{"id":"1:11892:1614","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:40625:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40623:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9762:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9762:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11965:31166":{"id":"1:11965:31166","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:11581:3129","`DoubleEndedIterator`":"1:7189:120","prim@char":"4:11864:410","str::match_indices":"1:11962:31165"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"1:42788:3166","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11586:3144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11586:3144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11601:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11912:24042":{"id":"1:11912:24042","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:11864:410","self::pattern":"1:11581:3129"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11586:3144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11902:28079":{"id":"1:11902:28079","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:11903:28080"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1609":{"id":"0:0:1609","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[215,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\n# #[macro_use]\n# extern crate lazy_static;\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.4.0\")]","#![no_std]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:29:1615","0:31:1616","0:28:1609"],"is_stripped":false}},"1:12005:2867":{"id":"1:12005:2867","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4528:2867"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"1:42928:2866","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:31:1616":{"id":"0:31:1616","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[213,0],"end":[215,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["lazy",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"LazyStatic","id":"0:29:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11898:25218":{"id":"1:11898:25218","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9762:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9762:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:11915:28096":{"id":"1:11915:28096","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:11864:410","self::pattern":"1:11581:3129"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11586:3144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11891:28060":{"id":"1:11891:28060","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:11881:1470"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:29:1615":{"id":"0:29:1615","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[185,0],"end":[188,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:11900:31157":{"id":"1:11900:31157","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:11870:1374","str::slice_mut_unchecked":"1:11901:31158","crate::ops::Index":"1:3016:1989"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5352":{"id":"5:5352","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5263:1374","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5353:31829","5:5354:2791","5:5357:31830","5:5360:31831","5:5368:31832","5:5369:31833","5:5370:2950","5:5371:27809","5:5372:27810"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11938:31160":{"id":"1:11938:31160","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:11581:3129","str::split":"1:11929:28087","prim@char":"4:11864:410","`DoubleEndedIterator`":"1:7189:120","str::rsplit_terminator":"1:11941:31161"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"1:42670:3162","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11586:3144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11962:31165":{"id":"1:11962:31165","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:11581:3129","`DoubleEndedIterator`":"1:7189:120","prim@char":"4:11864:410","str::rmatch_indices":"1:11965:31166"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"1:42770:3165","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11586:3144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11991:31175":{"id":"1:11991:31175","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:11864:410","self::pattern":"1:11581:3129"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11586:3144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11905:20439":{"id":"1:11905:20439","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:11864:410"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"1:42596:3156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5368:31832":{"id":"5:5368:31832","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7228:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"5:6573:2372":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"4:929:8577":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"4:7708:20248":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"6:4429:12736":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"4:11233:26777":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"4:6472:1954":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:10455:16063":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:8822:34001":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:4755:21061":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:11288:16478":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:11087:16264":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:9897:16024":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"4:11864:410":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"17:8110:15821":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"6:4389:12730":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:6079:13482":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"4:3871:8724":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"13:0:1825":{"crate_id":13,"path":["std_detect"],"kind":"module"},"14:160:14685":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:10476:16073":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:43347:3137":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:12134:18880":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:3232:1929":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:2601:115":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"5:962:2321":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:5786:13400":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:594:9351":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"4:484:2380":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:10949:16081":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:21122:8278":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"16:2557:14766":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"4:2386:1839":{"crate_id":4,"path":["std","io"],"kind":"module"},"1:40900:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"4:2361:8654":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"1:38771:1991":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:46577:8261":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:2746:2842":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"4:1898:8634":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"6:4662:12757":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:12087:18877":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:9671:15936":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:11054:16256":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"5:3626:2321":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:9165:34013":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:10374:16036":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:10062:15986":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:12164:18882":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"4:10684:8644":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:6621:2970":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:31763:2838":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:2809:1971":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:7173:9296":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"4:847:2551":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:1367:2551":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"9:827:14576":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:39435:2935":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"17:10921:16080":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"5:5457:2360":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:2835:1976":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:2916:15983":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:10845:15878":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:41640:70":{"crate_id":1,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"17:12781:19196":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:2252:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"9:33:14551":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"17:12860:19243":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"16:5235:33306":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"16:6161:15706":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"12:751:2345":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"4:11875:632":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"1:39585:2988":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"18:727:19885":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:11639:18784":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:2998:1999":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"17:9631:15916":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"4:4318:8755":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:2878:1985":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"4:3670:8718":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:39605:2966":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:4743:12767":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"4:4629:8793":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:42347:23035":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"4:8868:8851":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:7298:15745":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"4:1065:2541":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:4775:12771":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:13374:19769":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:20719:8276":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"5:862:2329":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:13158:19716":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"5:4171:2551":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:42842:3164":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:9220:23465":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"4:6372:1744":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"4:8056:8662":{"crate_id":4,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"1:22094:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"5:5880:2350":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:4734:2934":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"4:1568:2083":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"6:553:9345":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:44931:8309":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"12:697:8577":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:40750:2149":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:44861:8323":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"18:481:19890":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"12:274:2534":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"4:8300:8743":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"12:669:8576":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"4:8185:8713":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"6:1687:10264":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:42606:3155":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:7872:15767":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:2759:1900":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"17:8393:15849":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:2784:2846":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"1:39192:21433":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"16:7637:15763":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:1710:10267":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"9:622:14500":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"4:11350:8719":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:2714:1927":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"17:13279:19730":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"4:6178:2392":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"0:0:1609":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"17:11594:18726":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:13047:19681":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:9433:15897":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:13506:19809":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"4:11835:8562":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:45477:8317":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"16:4262:15300":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:7481:12947":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"4:1083:8584":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:48934:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:3599:14805":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:2366:186":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:13404:19772":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"4:7681:8586":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"16:7267:15742":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"4:5755:1957":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:46537:8257":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:12884:19307":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"4:11867:1033":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"4:638:8558":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"18:719:19884":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:20872:8277":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:10321:16033":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"4:2210:8642":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"5:3293:2310":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"1:44617:8271":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:4703:12762":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:20444:20190":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"5:3134:2551":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"4:11885:1466":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"1:41685:127":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:9543:2439":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:2815:1970":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:13572:19818":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"4:7671:8585":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:30175:21262":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"5:3167:8589":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:5780:15692":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"4:7953:8696":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:40472:2996":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:11684:18791":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:1962:15941":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:39702:2986":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:9084:3047":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:42447:3092":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:11500:18673":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:9844:15979":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:2433:14761":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"4:1788:8606":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"16:2509:14764":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:9350:15899":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"4:6359:1743":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"17:10159:15989":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"4:2613:8695":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"16:6146:15705":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:43026:3176":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:2857:1980":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:10121:15982":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:11939:18867":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:8368:15848":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:6773:13874":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:10074:3096":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:10310:16067":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:10796:15825":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"4:5492:8842":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"17:12609:19088":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:20425:26273":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"12:762:2310":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"16:4385:15327":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"4:7650:8556":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"5:4363:2353":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:4413:15331":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:39345:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:8204:2060":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:39180:2895":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:1747:10270":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:10875:15880":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:4135:1934":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:40674:2082":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"6:4422:12735":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"12:1852:8587":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:6594:10187":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:44533:21333":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:4307:12721":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:12674:19144":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:46546:8258":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:11149:3150":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:20844:8273":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:13557:19813":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"6:4261:12718":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:1527:10249":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:6241:15711":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:9909:15980":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:4635:15409":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"4:6884:30146":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"4:4727:2390":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:62:8964":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"16:5664:15688":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:10997:16083":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:4346:12725":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"5:3141:8588":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:42398:3079":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"4:914:2310":{"crate_id":4,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"1:11601:3146":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"16:4545:15391":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:12748:19151":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"5:7211:8638":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:5813:13440":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"4:11327:2420":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:12514:19086":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:0:1833":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:41707:71":{"crate_id":1,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"1:46195:8338":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:46085:8318":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:9560:2384":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"4:3346:2350":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"17:10708:15873":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:12349:19022":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:6532:2091":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:6000:13454":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:4483:12742":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:9475:15921":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:39362:21408":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:12008:18871":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:13518:19810":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"4:8820:8848":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:7109:2961":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"16:2894:14780":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:6210:15710":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:20594:8281":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:9304:144":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"14:221:14694":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"4:9092:8669":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"4:3448:8664":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"1:40759:190":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"6:4720:12764":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:6790:15734":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"5:7003:2345":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"4:7541:2407":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:12550:19087":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:44515:8319":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"4:3915:8727":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"12:2184:21075":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:12265:18950":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:22226:2646":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:42486:3091":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:40860:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:9805:16019":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"4:11889:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"16:4217:15279":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"9:649:14501":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"1:43198:3187":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:12485:19085":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"4:10824:8619":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:2534:234":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"4:10828:27208":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"4:10051:29865":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:38846:199":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"4:10138:8845":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"16:2727:14773":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:2868:1983":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:10036:3083":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:44493:8315":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"16:6359:15719":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"6:4900:12785":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:5759:13437":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"5:7011:2333":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:42884:3160":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"16:5541:15684":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:39244:2886":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:22325:168":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"6:5990:13453":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"0:31:1616":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"5:7033:2083":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"18:652:34044":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:9885:16023":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:40741:2059":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"5:36:2317":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:242:34018":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"16:534:33086":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"4:11876:734":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"6:4549:12747":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:3217:23590":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:3532:2345":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"17:11174:16304":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:7452:12943":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:12148:18881":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:41956:8818":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"17:12337:15878":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:41759:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:2793:1972":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"11:44:14666":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"17:9947:16025":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:13436:19776":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:13354:19733":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:11652:3178":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:11119:3074":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:5761:15691":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"5:7070:2083":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:22292:167":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:10350:15876":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:10466:16072":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:11853:18861":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"4:8987:15736":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"4:4564:26804":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"4:9001:26977":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:11893:18863":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:20657:8283":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"4:1571:2345":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:3632:14814":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:2749:14774":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"5:1448:8576":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:8055:15823":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:45029:21393":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"4:1771:599":{"crate_id":4,"path":["std","env"],"kind":"module"},"4:8814:2083":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:11135:3076":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"4:11882:1467":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"17:9526:15919":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:41655:67":{"crate_id":1,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"17:13366:19768":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:11997:18870":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:487:15839":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"12:1138:8584":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"4:5556:2392":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"7:32:14450":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"16:7211:15739":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:43219:3189":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:10583:15867":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:3177:1994":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:40518:21191":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"5:1420:8573":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"4:10226:2568":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:1753:21268":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:1903:15957":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"4:11846:26958":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:44570:21354":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:42499:3089":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:2788:1967":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"4:9022:26916":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:6643:13865":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"5:1072:2545":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:10207:16053":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"16:5839:15695":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:7567:15761":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:20397:2830":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:9339:3064":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:3026:14784":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"4:8351:8808":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"1:12197:23291":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:11405:3095":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"5:6154:2364":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"12:387:32875":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:12739:19150":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"4:10419:8704":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"4:3391:2563":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"4:3985:8734":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:9074:3043":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"17:13580:19820":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:10182:15987":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:10075:15984":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"15:0:1832":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:42596:3156":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"4:10933:2413":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:13148:19694":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:13214:19727":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"5:7041:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"4:9052:164":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:14:1802":{"crate_id":1,"path":["core","write"],"kind":"macro"},"17:8162:15842":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:46694:8268":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:4416:12734":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:9857:16001":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:13024:19676":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"4:8161:3082":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"6:653:9399":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"16:7166:15738":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:11515:18674":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:9722:15968":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:40835:180":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"4:4115:8759":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:3204:1998":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"5:2924:30796":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"5:5681:2345":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:45060:21163":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"4:2208:128":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"17:3125:15988":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"4:9063:215":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"4:355:8549":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"5:834:2327":{"crate_id":5,"path":["alloc","collections","binary_heap","retain","RebuildOnDrop"],"kind":"struct"},"4:5549:203":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:3263:14786":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"16:6270:15713":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:9293:15907":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"5:6988:2083":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"5:3763:2321":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:119:9018":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"0:29:1615":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"17:11149:16302":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"4:6528:1959":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:9076:3044":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"17:10642:15870":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"4:10950:2415":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"4:8907:1951":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:546:9344":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:12237:18948":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:5843:13442":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:22424:2647":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"18:538:19894":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"4:8884:8852":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"4:10704:118":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:45553:8324":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:223:207":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:7469:12945":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:5890:13444":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"12:632:2551":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:39922:2949":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:4028:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"6:4571:12749":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:44414:8339":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:9575:2444":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:31723:2835":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"16:6316:15716":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"16:2993:14782":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:12322:18959":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:11300:16479":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:39506:2964":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"16:4357:15323":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:4828:12777":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"4:3865:8725":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"4:8401:8818":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"6:1899:10409":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:11828:18859":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"5:2205:30872":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:505:9340":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:9303:15906":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:10332:16068":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"4:8510:8824":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:420:14729":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:10385:16069":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:40810:2551":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"6:4334:12724":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:5800:13438":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:10721:15874":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"4:9387:2409":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"5:3201:8590":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"9:592:14499":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"6:4862:12780":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"5:7198:8637":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"4:6542:1960":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"4:11880:729":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"1:39628:2981":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:11542:2641":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"5:6554:2360":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"4:11871:1452":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"1:40818:2552":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"17:8494:14723":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:6728:13870":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:38685:2001":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"5:3687:2555":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"5:1997:2553":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:46603:8263":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"4:11706:2424":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"4:1786:8605":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"1:42620:3082":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"7:79:14457":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:2882:1986":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:9712:15971":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:22391:166":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:12176:18896":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:2103:31923":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"4:3161:8703":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:4787:12773":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:39515:2972":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:42770:3165":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:7237:15740":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:10088:15985":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"18:507:34044":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:43351:3138":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:7428:12939":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:2842:14778":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:43004:3175":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"9:800:14612":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:39298:2890":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:39535:2974":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:42824:3163":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"9:977:14483":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:6698:13868":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"4:5363:8835":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"17:9118:34000":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:43339:3134":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"1:40561:2998":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"18:521:19889":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:5000:12795":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:1771:15923":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"4:534:2381":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"4:4673:8745":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:6593:15725":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"16:5472:15680":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"5:7168:8639":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:4910:12786":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"12:2053:8582":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"6:6628:13863":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"4:904:2345":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:20760:8277":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"4:6091:2399":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:46592:8262":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:11951:18868":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:1677:10263":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"19:0:1015":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"4:6226:203":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"12:2205:8571":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:8441:15851":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:6649:13866":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"18:609:34058":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"6:5698:13431":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:6654:15727":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"4:8089:2946":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"16:6690:15729":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"4:7849:118":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:10434:16071":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:9700:15942":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:4597:12751":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"4:1986:182":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:39677:2968":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"6:6791:13875":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:11974:18869":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:8911:34021":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:11354:3171":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:9078:3045":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"9:111:14494":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"6:1509:10246":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:5934:2989":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"4:641:8560":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:30550:180":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"16:5703:15689":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:10670:15871":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"4:8148:2985":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"1:40609:3001":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:1021:15908":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:6376:15720":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"6:1609:10258":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:5722:13433":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:38826:196":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"18:766:19888":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"4:950:2537":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"5:4300:2353":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:12756:19193":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:39312:2892":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"16:2631:14769":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"16:6903:15736":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"5:4330:2350":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:29975:2797":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"16:5433:15677":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"4:1989:181":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:578:9349":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:38985:1921":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"16:4817:15447":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"12:1044:14676":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"4:1436:143":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"4:679:2560":{"crate_id":4,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"5:4285:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"4:3051:8708":{"crate_id":4,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"1:48538:8350":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"6:4781:12772":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:5460:15679":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"4:1074:8583":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"4:6611:29841":{"crate_id":4,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"5:6268:2321":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"16:4921:15479":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"4:1849:2562":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"9:920:14480":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"4:5172:187":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"4:3373:8663":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"4:7809:8644":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"16:6284:15714":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:7847:15766":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"4:8174:8717":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"12:1003:2541":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"4:8229:8762":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:2771:14775":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:10233:16065":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:12225:18947":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"5:1092:31934":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"5:7076:2083":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:4297:15311":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:12874:19245":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"4:5495:8843":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"4:11391:8718":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:487:9337":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:10147:3087":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:9446:15910":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:7212:1904":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:11343:16484":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:1541:10251":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:4812:986":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"5:3939:2345":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:11617:18783":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"5:779:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"5:2922:30798":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"4:4750:8739":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"12:2069:2541":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:8792:24615":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:10270:16039":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:0:434":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:39497:2570":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:10230:3081":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:567:9347":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:4237:12716":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"12:1065:32874":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"4:8424:8819":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"4:8234:8763":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:10682:15872":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:20465:20188":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:9644:15915":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:4301:12720":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:39252:2887":{"crate_id":1,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"16:8056:15776":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:11873:18862":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:42178:3100":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:4313:12722":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:3114:1993":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:31759:20248":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"4:5563:2393":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:9080:3046":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:5967:32485":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"4:8932:8540":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:43610:158":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:7487:12948":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:4888:15470":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:6517:14699":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:9461:2436":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:1921:2577":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:9362:15861":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"12:0:1830":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"16:2367:14758":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"4:7596:8531":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"1:1029:1742":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"6:4751:12768":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"4:9068:216":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"4:10654:30393":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"16:7497:15757":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:4177:1740":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:41389:3043":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:4988:12793":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"5:271:2321":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:5938:13449":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:9071:34007":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:38971:15775":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"17:13168:19717":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"4:1051:8582":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:4396:12731":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:43375:3200":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:3269:1931":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:5752:13436":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"4:7819:8645":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"17:8991:34005":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:43367:3142":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"16:7511:15758":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:11034:16196":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:4144:15230":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:30069:21264":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:20839:8741":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:7582:24613":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"16:5184:14725":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:10715:3093":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"16:5996:15697":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:4882:12783":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"4:4669:8740":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"18:0:1835":{"crate_id":18,"path":["memchr"],"kind":"module"},"4:7584:8741":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"16:6865:33298":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"5:5615:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"6:1559:10253":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"16:4519:15389":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"4:9073:8855":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"17:12638:19143":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:5878:13443":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"4:11888:1108":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"1:48947:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:39596:2979":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:4316:1920":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:12118:18879":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:42788:3166":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"4:11093:8855":{"crate_id":4,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:42407:3078":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"5:2932:30797":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:386:15838":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"18:690:19882":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"18:614:34043":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:4714:12763":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"16:6070:15701":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"12:1859:8588":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:20870:8279":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:11186:16305":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:4766:12770":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"4:11874:631":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"4:10867:8841":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:10445:15878":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:10188:3084":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"5:6069:8859":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:41974:21411":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:29997:67":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:3187:231":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:10221:16064":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"4:1586:8588":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:42528:2583":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:2518:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:44362:8347":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:7929:15770":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:42912:3167":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:46671:8267":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:39688:2985":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"4:3455:8684":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"4:8278:8795":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:2957:1901":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:2933:116":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:44763:8328":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:9108:15862":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"4:5240:119":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"1:2819:1973":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:5463:2976":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:21385:8741":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:46557:8259":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:11909:18864":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:8629:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"9:188:14530":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"16:7357:15750":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:2793:14776":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:11199:16306":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:7545:2959":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:42742:3080":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"16:5793:15693":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"4:920:8575":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"5:1056:31936":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:12768:19195":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:2261:14727":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:4371:1922":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:2579:14767":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:10245:16066":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"18:582:2830":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:7319:15747":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:7890:15768":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:39553:21370":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"16:7059:2058":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:6123:15703":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"4:8248:8717":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:12896:19309":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:38802:195":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"17:9031:34006":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:3854:14964":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:1695:10265":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:4757:12769":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:531:9342":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:572:9348":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:11576:18682":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:8203:2061":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:2967:1748":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:43147:3185":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:12198:18945":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:8561:15827":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"4:10944:2414":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"4:9382:8641":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"12:1866:8589":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:13393:19771":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:12103:18878":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"4:588:8553":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"4:8180:8716":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:525:9341":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:12033:18873":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"4:2867:207":{"crate_id":4,"path":["std","io","error","Result"],"kind":"typedef"},"12:1872:8590":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"1:2255:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:0:804":{"crate_id":6,"path":["libc"],"kind":"module"},"1:21734:21387":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:9328:15901":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:4590:2880":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:44663:8336":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:1723:10268":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"12:60:32876":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:13594:19854":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:39906:21369":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"12:1029:8583":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"4:11147:2416":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"4:7622:2411":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"4:3973:8731":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:5558:15685":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"11:0:1829":{"crate_id":11,"path":["adler"],"kind":"module"},"6:1550:10252":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:13176:19718":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:44907:8308":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"16:3402:14787":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:3566:14796":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"4:5712:1950":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:9371:15862":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"6:4501:12744":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"4:8441:8820":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"6:4611:8723":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"4:8750:183":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"1:21779:21390":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:6094:13483":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:13071:19683":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:2282:14754":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:6472:14700":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"4:11037:3200":{"crate_id":4,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"5:1628:2321":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"4:10659:8643":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:2862:1982":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"4:4568:26808":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:3667:2083":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:2707:108":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"4:3923:8728":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:43252:3149":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:12730:19149":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"12:1845:2310":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:2329:124":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"17:12251:18949":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:8510:14721":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:21713:21144":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:6764:13873":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"4:11870:1374":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"17:8137:15841":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"4:11884:1469":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"6:4890:12784":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:13134:19692":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:8309:3144":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:4574:15396":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"5:6979:8601":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:40538:21379":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:21605:21337":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"5:5161:2321":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"4:8944:26947":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"16:2535:14765":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:13340:19732":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:5628:15687":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:13382:19770":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:10420:16062":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:39484:2971":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:4254:1915":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:40826:2083":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"4:11879:733":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"1:41944:144":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"12:1085:2542":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:46481:8345":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:9401:15903":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"4:6322:29841":{"crate_id":4,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"17:9382:15905":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"5:6740:2378":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:11547:16027":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:20863:8741":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"5:677:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:41919:3067":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"12:834:2537":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"5:2132:30867":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:50248:21170":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"1:20711:8741":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"4:3238:8700":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:4929:12788":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:4016:23469":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:4733:12766":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:2825:14777":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"4:11830:27896":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:48895:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"13:226:32880":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:5902:13445":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:4795:12774":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:41020:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:4274:12719":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"4:11412:8720":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:2961:1902":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"4:925:8576":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"4:1847:2223":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"17:13091:19685":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:42174:21334":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:38992:2856":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"12:985:8582":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"4:11868:308":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"17:9764:15972":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"3:0:1822":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"4:956:8580":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"5:5205:8894":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:13059:19682":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"12:1832:2551":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:38944:1995":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:21750:21328":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"16:5525:15683":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"4:7484:29880":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:2360:179":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:3403:2840":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"17:9873:16022":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"4:11017:8840":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"4:5060:188":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"1:39667:2984":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:4249:1914":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"4:9119:27338":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","fast","DtorState"],"kind":"enum"},"4:11865:1486":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"1:44839:8320":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"16:2868:14779":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:3192:134":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:39937:2434":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:20682:8272":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:42518:3090":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:6521:13860":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"15:214:14707":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:4618:12752":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:6704:15730":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:6716:2943":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"16:6735:15731":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"5:2423:2546":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"4:2539:2386":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:2465:14762":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:2709:225":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"6:4727:12765":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:9193:34023":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"4:646:8561":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:9283:15909":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"4:6926:2403":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"5:7135:8572":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"18:644:34044":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:13114:19688":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:46566:8260":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:39637:2982":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:29749:2602":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"6:4656:12756":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:11774:18855":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"4:6475:1955":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:9344:3065":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"4:8852:8850":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:8624:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:8666:15854":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:2852:1979":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"4:2359:8653":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"17:8596:15852":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:41382:3044":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:6171:15707":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:45163:8348":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:11813:18858":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:41927:21324":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:46273:8322":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"4:11203:26988":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:43415:3202":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"16:7309:15746":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"4:9877:21376":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"4:9185:2223":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:9691:15943":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:43120:3184":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:43371:3143":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"12:861:8581":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:43554:192":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"4:734:141":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:2946:1930":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:10296:16037":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:20442:20183":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:12060:18875":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"4:8117:8665":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"16:2683:14771":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:2320:14756":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:6925:1913":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:43627:3237":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"9:709:8818":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:42159:3124":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:42508:2582":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"9:676:14487":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"1:46443:8325":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:6298:15715":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:12909:19310":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:11761:18854":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:41180:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:10752:15875":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"18:736:19886":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:39165:2866":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:43355:3139":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:41220:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:44432:21381":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"16:5374:15674":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:12278:18951":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:11368:16498":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"4:2869:127":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"1:0:487":{"crate_id":1,"path":["core"],"kind":"module"},"1:39928:2951":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:41673:109":{"crate_id":1,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"4:11869:1344":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"12:659:2083":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"4:5900:2392":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"18:113:19868":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:42724:3084":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:540:9343":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:9061:15861":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:11436:18671":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:123:9019":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"4:3240:8701":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:42590:3157":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:7146:133":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:6345:15718":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:4245:204":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:21786:2648":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:4687:12760":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:10109:3086":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:13459:19779":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:7475:12946":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:7446:12942":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"4:5014:29839":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:43597:3232":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:10216:3085":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:42894:3159":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:1554:2350":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:8752:3155":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:11595:3147":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"16:3716:14850":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:13478:19785":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:12955:19325":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:12948:19313":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"4:3283:8690":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:8951:34010":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:11070:16257":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:7543:15759":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"13:110:32927":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:44262:8346":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"14:40:16083":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"15:193:14703":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"5:6421:2321":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:2527:132":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"14:7:14685":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:8418:15850":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"6:1716:8751":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"4:8333:8801":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:1645:10260":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:6719:13869":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:5878:14726":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:9577:15924":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:4841:12778":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"16:5949:15696":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"18:531:19893":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:11315:16482":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"4:3316:2951":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"1:22061:175":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:10506:16041":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"4:8776:8840":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:2524:147":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"12:738:8574":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"9:586:14512":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"4:8483:8821":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"17:13100:19686":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:4781:783":{"crate_id":1,"path":["core","iter"],"kind":"module"},"9:505:14661":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:5447:15678":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:25633:2643":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:1931:15917":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:3016:1989":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:11586:3144":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"5:630:31906":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:50269:21321":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"17:9155:15863":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:5917:13447":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"4:2831:2389":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:21127:8301":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:9086:3048":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:9458:15935":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:43639:3234":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"16:7117:33361":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"4:4671:8744":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:11721:18851":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:4361:12727":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:7249:15741":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:12926:19311":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"4:3605:8715":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"5:3175:8587":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:9751:15944":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"18:699:19883":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"5:6222:2345":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"14:202:8905":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"4:1575:2310":{"crate_id":4,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"1:11581:3129":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"16:6059:33358":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:7343:15749":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:4439:12737":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:8774:15824":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"16:7825:15765":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:11708:18850":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"4:2371:8659":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"17:11330:16483":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:11606:18782":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:4426:1925":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"4:8762:8839":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"1:9026:131":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"6:4539:12746":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:9488:15920":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:2874:1984":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:7521:14434":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:39350:2939":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:3457:14788":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"4:3901:8726":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:12816:19199":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:45737:8330":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:40489:2997":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"16:6567:15724":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"4:10630:8794":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:12307:18958":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"4:0:1366":{"crate_id":4,"path":["std"],"kind":"module"},"1:39716:2987":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"4:48:1524":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"1:42564:3154":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:3020:1990":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:5219:14721":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"16:5163:15673":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:6757:13872":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:9778:15945":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:43427:3203":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:44308:8326":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:11217:16307":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"4:6363:1952":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"4:2476:8693":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:13039:19678":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"4:7802:8643":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"5:1258:8584":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:12836:19240":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:153:2301":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"5:5005:1946":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"14:187:14695":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:44552:8304":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"4:11511:14711":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:11800:18857":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"6:1571:10254":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:5823:13441":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"4:11251:27706":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"4:10357:2410":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"18:660:19879":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:7093:15737":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:7538:2868":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:5716:13432":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"5:4788:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:481:9336":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"5:286:1906":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:40980:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"12:300:32868":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"5:7239:8902":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:8941:15858":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"4:4064:30163":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:13192:19720":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:22193:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:11528:16028":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"4:4094:8757":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"4:11486:27342":{"crate_id":4,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"4:4102:8758":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"4:505:2338":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:21661:2644":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:43363:3141":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:42937:2886":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:22160:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:46656:8266":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"5:1244:2541":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:1827:1932":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"5:2093:2338":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:4369:12728":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:4921:12787":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"4:1597:8590":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"16:2389:14759":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"4:3929:8729":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"5:1438:8575":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"18:755:19887":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"4:10724:26960":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:2891:1988":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"4:11056:8669":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"6:4224:12715":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:9501:15906":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:1731:10269":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"4:6075:2396":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"6:4489:12743":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"4:1580:8587":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"14:165:14686":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"4:2345:8649":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"18:96:19867":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:20670:8741":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"4:10001:2567":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:43536:202":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"16:7483:15756":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:48908:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:10520:16076":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:9681:15970":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:40432:152":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"16:6109:15702":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"4:8493:2551":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"1:43546:208":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"17:8871:15857":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"18:515:19892":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"18:491:34040":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:11661:18790":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"4:5327:8833":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"5:1398:2083":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:12073:18876":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:21696:21341":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:6865:2946":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:44715:8343":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"12:1120:14677":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:8981:15859":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"4:8222:2999":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"5:4131:2350":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:11294:3172":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"4:7665:8559":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"4:5432:8838":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"17:10403:15875":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"5:1330:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"4:4554:8729":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"16:5737:15690":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"4:10462:2411":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:10139:15861":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"4:7943:29866":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:13536:19812":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:6186:15708":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"5:3146:31915":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:7268:156":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:3415:2839":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"17:10822:15877":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"4:3772:8720":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:4108:1933":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"4:870:2083":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:1762:2574":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:0:1834":{"crate_id":17,"path":["object"],"kind":"module"},"12:725:8573":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"4:10416:8702":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"4:6286:163":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:45241:8337":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:10202:3080":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:12211:18946":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:9082:191":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"5:3675:2553":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"16:7426:15753":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"5:5807:2556":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:7218:14246":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:5815:15694":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:4353:12726":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:39232:2897":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"4:939:8579":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"14:31:14685":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"18:707:3147":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"5:7250:8903":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:13126:19691":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:5660:13371":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"4:11862:367":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"16:5614:33093":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:44238:21338":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"5:7228:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:38786:197":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:7388:15751":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:2886:1987":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:13413:19775":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"4:7688:8612":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"4:8921:27879":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:39544:2975":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:7498:12949":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:561:9346":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:39269:2866":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:6743:13871":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:10528:15865":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:13221:19728":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"4:11881:1470":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"4:8096:8707":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"6:473:9335":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:41646:130":{"crate_id":1,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"1:2615:127":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:45399:8329":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:12441:139":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:12163:135":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:42874:3158":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:12373:106":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"6:4379:12729":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"4:7832:129":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"4:6747:8858":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:13031:19677":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:41935:3066":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:12964:19645":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:3188:14785":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:12496:3235":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:41060:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"5:3180:31922":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"4:11074:26962":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"6:4583:12750":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:2530:235":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"6:4637:12754":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:6668:33259":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:45523:8321":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"12:822:8579":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:39525:2973":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:10973:16082":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:39899:2947":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:9067:111":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:45083:21419":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"4:4893:8800":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"6:5951:13451":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"4:860:2552":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:46618:8264":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:44284:8334":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:9250:15887":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:2847:1978":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:7980:15774":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"5:6994:8591":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:11331:3174":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:43589:3231":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:1604:10257":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:2803:1968":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:39171:2871":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"4:5313:8832":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"16:2705:14772":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:7434:12940":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:11748:18853":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"16:6743:15732":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"4:8744:8837":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"16:8014:15775":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:11137:16267":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:11841:18860":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:7278:15743":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:9831:16021":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:13141:19693":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:42688:3161":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"5:2652:30458":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:9929:2552":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"12:353:2308":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:1514:10247":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"4:10849:26981":{"crate_id":4,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"16:6330:15717":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:2695:217":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:40940:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:6496:10186":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:4850:12779":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:3352:68":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:40574:2999":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:7541:2958":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"16:6137:15704":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:4326:1921":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"4:558:2559":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:39455:2962":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"18:574:34044":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:3198:1996":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:6052:15700":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:12850:19242":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:5805:13439":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:5728:13434":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:4877:12782":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"4:8926:106":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:11235:16358":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:4004:23466":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:4628:12753":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"5:7151:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"4:10422:8700":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"5:5209:8895":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:1704:10266":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:13527:19811":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:12291:18957":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:44392:8335":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:2772:2757":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"1:21291:26271":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:8796:15856":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"4:10672:26934":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:45587:8306":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"15:175:14702":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"5:6671:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:6034:15699":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"4:6576:214":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:10748:3094":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:44982:21151":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:9658:15969":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"12:119:2304":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:5741:13435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:9601:15922":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:4994:12794":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:43209:3188":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:12384:2396":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:40691:2552":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"4:10314:8837":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:44809:8316":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:5959:13452":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:11606:3145":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:4051:2870":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:10283:16038":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:9016:2900":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"5:782:2324":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:29935:2795":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:21531:20873":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:41403:3046":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"16:7909:15769":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:39947:2954":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:9997:3095":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:38912:1992":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:20631:8282":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"17:8272:15845":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:8241:15844":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:12224:189":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:2521:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:42473:2962":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"4:2549:2384":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:247:34002":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:1674:1071":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"4:4426:8768":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:8475:15822":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"4:3439:30387":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:41140:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:41622:67":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:3959:2350":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"16:7557:15760":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:6252:15712":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"4:4566:26806":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"4:361:8550":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"5:3535:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"12:393:32877":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"12:2178:32871":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:30011:21430":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"4:3977:8732":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:45943:8349":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:43055:3182":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:11271:16471":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:48960:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"4:8274:8792":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:5411:15676":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"4:5999:2394":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"5:3559:2552":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"9:956:14481":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:4380:1923":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"5:2011:2555":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"4:3123:30128":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"4:621:8555":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"12:777:2314":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"5:7049:30449":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:42919:2889":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:11536:16026":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"12:98:32870":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:7113:2960":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"4:7873:2553":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:11787:18856":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:6611:10190":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:6053:13481":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"5:4101:2350":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:48921:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"4:11029:26967":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:7463:12944":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"9:0:1827":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:43343:3136":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"4:4844:8791":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:40597:3000":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:9422:15898":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"4:3159:8702":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:44693:8340":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:13007:19675":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:4457:12739":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:8526:15826":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"18:80:19866":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:4849:15455":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"14:215:14688":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"12:1836:2083":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:38962:2841":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"6:5910:13446":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:4805:12775":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:1645:2772":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:39208:2894":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:6059:12630":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:10854:15879":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"16:4786:15440":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"4:9111:8856":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:7469:15755":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"9:863:14478":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:2300:14755":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:11485:18672":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"4:11886:777":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"4:7522:2405":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:7440:12941":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:4:998":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"17:9317:15902":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:44330:8314":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:2823:1977":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"4:7585:8551":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:10625:15869":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"4:4246:8761":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:4559:12748":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:1739:2825":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:2702:1899":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"5:1213:8582":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"4:8138:2971":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"1:20463:20191":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:8339:15847":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:22823:2642":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:39291:2889":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:12176:3228":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"4:3126:30136":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:7150:149":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"4:11245:30164":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:2324:185":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"4:11878:732":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"17:10546:15866":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"5:6342:2083":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:4945:12789":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:4820:12776":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:4697:12761":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:13327:19731":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:6496:15722":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:39955:2956":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:4248:12717":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"14:0:1831":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"6:4649:12755":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"4:1564:2551":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:39653:2983":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:6017:15698":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:38868:198":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:12046:18874":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:44463:8327":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:10894:15881":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:4981:12792":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:21812:2649":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"10:0:1828":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:21387:8275":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"4:1824:8617":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"16:4721:15423":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:21584:21331":{"crate_id":1,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"4:11877:731":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"17:9274:15889":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"4:4404:8767":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"12:646:2552":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:42578:3153":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:9263:15888":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:7603:15762":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"4:2213:2379":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"16:7942:15771":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:21637:21424":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:7372:32969":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:8881:33999":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:9290:140":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"6:4962:12791":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:7386:14405":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:12249:3229":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"4:1927:8635":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"1:42928:2866":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:4673:12758":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:39331:2893":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:42436:2581":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"12:1534:2544":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:1583:10255":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:13203:19721":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:6512:9219":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:2156:579":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:38978:23470":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"12:1555:14679":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:43359:3140":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:39567:2977":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"16:4441:15335":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:562:15840":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:39275:2888":{"crate_id":1,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"12:1840:2345":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:1617:10259":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"4:8240:8754":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:5710:20990":{"crate_id":1,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"1:9072:119":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"18:590:21363":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:39305:2891":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"5:2928:30800":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:9738:15946":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:2831:1974":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"16:7956:15772":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"4:6827:2418":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","fast","Key"],"kind":"struct"},"6:6667:13867":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:2706:222":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:46397:8307":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"4:891:8574":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"4:8979:27888":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:2827:1975":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:10394:16070":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"16:5388:15675":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:9339:15900":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:9752:8741":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"4:8806:8847":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:7970:15773":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:21:670":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"4:11164:27883":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:5540:2965":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"16:7435:15754":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:21673:21162":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"18:681:19881":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"4:933:8578":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"5:7019:31917":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:1638:578":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"4:8105:2564":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"4:3120:27540":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:12617:19089":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:6541:13862":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:8701:15855":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"18:624:34057":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"4:8499:8823":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"1:39576:2978":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:3010:14783":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:1589:10256":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:9905:2551":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:42903:3168":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"16:2487:14763":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:5510:15682":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:2840:1981":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:21279:3077":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:499:9339":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:6781:15733":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:12695:19145":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:2930:14781":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"4:11518:14711":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"4:5679:1948":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:13082:19684":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:2705:223":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"5:4011:2552":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"4:7034:30158":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:46733:8269":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:967:15904":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:41100:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"4:10714:2564":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:46335:8342":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:21621:21309":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"4:10209:8836":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:8797:25973":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"4:7601:8539":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"1:9762:219":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:6583:2374":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:2798:1969":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"5:217:2319":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:4402:12732":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:5945:13450":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:22127:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:7159:1905":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:48973:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:6463:15721":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:12980:19673":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:39392:2904":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"typedef"},"1:42416:2579":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:40623:178":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"5:1382:2552":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:21478:20866":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:10108:15981":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"4:11468:8867":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"5:1229:8583":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:6842:33258":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"4:6399:1958":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"5:2185:31984":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:38890:200":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:7288:15744":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:12797:19197":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"5:1732:2310":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"16:6528:15723":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:13492:19803":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"9:896:14479":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"12:1518:14678":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:1534:10250":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"4:7797:8641":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"4:11863:923":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"5:7182:21408":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:7189:120":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:5690:13430":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:6877:15735":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:6816:33307":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:39913:1743":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:43041:3179":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"4:10649:27209":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:12415:202":{"crate_id":1,"path":["core","task","ready","Ready"],"kind":"struct"},"17:9930:16000":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"16:4327:15317":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"5:1479:8594":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:41396:3045":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"12:815:8578":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:7511:14433":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:2275:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"5:5791:1946":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:6634:13864":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"5:4884:2350":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:7329:15748":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:39222:2896":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:5772:13399":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:686:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:12972:19646":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"4:11267:2418":{"crate_id":4,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"4:4086:8756":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:4451:12738":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:4952:12790":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:12361:19025":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:7135:33337":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:2411:14760":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"16:7396:15752":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:13184:19719":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:11356:16497":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:21688:21388":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"5:7123:8571":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:11125:16266":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"5:3546:2551":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:9791:15973":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:11247:16359":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"4:7948:27891":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"4:878:8573":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:11559:18679":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:5203:14723":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"5:7305:2310":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"4:413:162":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:8202:2062":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:4328:12565":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:43232:3148":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"4:8798:2551":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"4:4983:29839":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:3105:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:11807:111":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"4:10837:8838":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:12934:19312":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"18:564:19895":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:2482:2601":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:42426:3088":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:13231:19729":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:5981:33328":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"4:7792:8640":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"1:44218:21368":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:9820:16020":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"16:7659:15764":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"12:2190:32867":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:38724:2000":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:41743:3042":{"crate_id":1,"path":["core","fmt","FlagV1"],"kind":"enum"},"6:4468:12740":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:586:9350":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:2341:14757":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"4:11170:8846":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:9223:15886":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:7044:33360":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:43394:121":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"6:4871:12781":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:9539:15918":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:4689:15415":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:21800:2645":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:22259:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"12:2080:8583":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:3689:14847":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"5:3969:2321":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"4:4835:8790":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:40683:2551":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"6:4520:12745":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:39475:2963":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"4:11005:8839":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:1663:10262":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:6571:10213":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:10490:16074":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:11370:3173":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"4:11887:1523":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"4:7473:15840":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"4:8155:3155":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"4:8256:8764":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:9183:15864":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:3249:16006":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"4:7704:8619":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:10360:16034":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:39425:2428":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"4:3963:8730":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:11014:16195":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"6:5931:13448":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:9627:15929":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:4606:15404":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"4:10694:129":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:39618:2980":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:45287:8341":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:2605:14768":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"4:5916:203":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"4:1592:8589":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"4:2217:8646":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"1:46641:8265":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"4:6123:27899":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"4:3667:8719":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"4:5347:8834":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"4:4166:8760":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"5:2921:2145":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"5:879:2551":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"5:5771:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"0:28:1609":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"1:20410:26273":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"17:11734:18852":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"4:3201:8705":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:11106:16265":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:9954:3082":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"17:11259:16468":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:46519:8310":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:9021:15860":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:6668:23047":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:43184:3186":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"4:4632:8767":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:30567:2830":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"6:6548:8795":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"18:671:19880":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:2481:8741":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"4:11883:1468":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"9:19:14550":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"4:7275:27892":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"16:6829:33321":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:45317:8344":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"4:11218:26944":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:7195:14244":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:31772:2843":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:44885:8305":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:9553:15861":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:12630:19141":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"4:8967:29862":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:12022:18872":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"5:6715:2364":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"4:8168:3158":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"5:1429:8574":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"18:599:34050":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:8212:15843":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:5122:15656":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:10257:16040":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"4:3199:8704":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:29969:2796":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"7:0:1513":{"crate_id":7,"path":["unwind"],"kind":"module"},"4:7865:8694":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"4:8839:8849":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:4662:15412":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:40699:2083":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"12:2198:32872":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"16:6719:33062":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"12:320:2306":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:42638:3086":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:7201:14245":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:10608:15868":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:40708:2058":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:39378:2938":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:6200:15709":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"4:5686:1949":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"12:810:8575":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"5:7322:2367":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:5596:15686":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"4:8974:27871":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:4476:12741":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"4:3430:2900":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"8:0:1826":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"5:1470:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"18:636:34053":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:2703:1928":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:42670:3162":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:11161:16303":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:41966:21413":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"16:6619:15726":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:43072:3183":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:22358:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:41260:1947":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:4400:1924":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:40767:207":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"4:8790:8841":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"16:5494:15681":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"12:853:8580":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"9:382:14585":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"4:9375:128":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"17:10497:16075":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"5:1459:8577":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"16:2657:14770":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:1652:10261":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"4:2343:2799":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"6:4322:12723":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:4749:15427":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:6530:13861":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:6488:9387":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"5:3744:2310":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"6:1520:10248":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:8631:15853":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"4:2573:8686":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"4:7857:29828":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"4:4498:8783":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:40455:2995":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:8295:15846":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:4218:12714":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:4681:12759":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"16:6676:15728":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"4:9982:8617":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"12:1628:2315":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:20713:8274":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:4408:12733":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:2964:1903":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:493:9338":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:10774:15876":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"4:962:8581":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"11:36:32865":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"4:5378:8836":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}