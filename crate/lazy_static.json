{"root":"0:0:1798","crate_version":"1.4.0","includes_private":false,"index":{"1:12535:28357":{"id":"1:12535:28357","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43901:3533","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12567:29151":{"id":"1:12567:29151","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12200:3504","str::split":"1:12555:26657","prim@char":"4:12019:457","str::split_terminator":"1:12564:29150"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43715:3536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3518","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12205:3518","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12220:3520","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12611:26670":{"id":"1:12611:26670","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12019:457","self::pattern":"1:12200:3504"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41685:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3518","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12205:3518","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12220:3520","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12570:26662":{"id":"1:12570:26662","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12019:457","self::pattern":"1:12200:3504","str::rsplitn":"1:12573:26664"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43751:3461","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3518","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12527:29148":{"id":"1:12527:29148","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12025:1544","crate::ops::IndexMut":"1:3088:2187","str::slice_unchecked":"1:12526:29147"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5520:29826":{"id":"5:5520:29826","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2102","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2102","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12596:29156":{"id":"1:12596:29156","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5519":{"id":"5:5519","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5520:29826","5:5521:3188","5:5524:29827","5:5527:29828","5:5535:29829","5:5536:29830","5:5537:3342","5:5538:26000","5:5539:26001"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:31:1805":{"id":"0:31:1805","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[213,0],"end":[215,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["lazy",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"LazyStatic","id":"0:29:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12614:29162":{"id":"1:12614:29162","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12019:457","self::pattern":"1:12200:3504"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3518","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12205:3518","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12220:3520","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12507:2274":{"id":"1:12507:2274","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12534:21168":{"id":"1:12534:21168","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12533:21135"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43930:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12608:24963":{"id":"1:12608:24963","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12019:457","self::pattern":"1:12200:3504"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41685:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3518","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12505":{"id":"1:12505","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12506:879","1:12507:2274","1:12508:29143","1:12509:29144","1:12511:29145","1:12514:26216","1:12515:29146","1:12516:349","1:12517:348","1:12518:1803","1:12520:21768","1:12522:21769","1:12524:21770","1:12526:29147","1:12527:29148","1:12528:26649","1:12529:26650","1:12530:21146","1:12531:21250","1:12532:24001","1:12533:21135","1:12534:21168","1:12535:28357","1:12536:29149","1:12537:21148","1:12538:21013","1:12541:26668","1:12544:26669","1:12547:2315","1:12551:2273","1:12555:26657","1:12558:21328","1:12561:26660","1:12564:29150","1:12567:29151","1:12570:26662","1:12573:26664","1:12576:26666","1:12579:26667","1:12582:2003","1:12585:29152","1:12588:29153","1:12591:29154","1:12594:29155","1:12596:29156","1:12598:29157","1:12600:29158","1:12601:29159","1:12602:29160","1:12605:29161","1:12608:24963","1:12611:26670","1:12614:29162","1:12617:29163","1:12620:29164","1:12623:29165","1:12625:25998","1:12626:26537","1:12627:26002","1:12628:26003","1:12629:26004","1:12630:29166","1:12632:3261","1:12633:29167"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12585:29152":{"id":"1:12585:29152","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12200:3504","`DoubleEndedIterator`":"1:7582:128","prim@char":"4:12019:457","str::matches":"1:12582:2003"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43869:3539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3518","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12205:3518","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12220:3520","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12528:26649":{"id":"1:12528:26649","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:12529:26650"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12633:29167":{"id":"1:12633:29167","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4582:29167"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43964:3282","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12508:29143":{"id":"1:12508:29143","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28:1798":{"id":"0:28:1798","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[167,0],"end":[179,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"inner":{"macro":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"}},"1:12526:29147":{"id":"1:12526:29147","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12025:1544","str::slice_mut_unchecked":"1:12527:29148","crate::ops::Index":"1:3084:2186"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12601:29159":{"id":"1:12601:29159","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12544:26669":{"id":"1:12544:26669","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12019:457","self::pattern":"1:12200:3504"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3518","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12205:3518","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12220:3520","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12626:26537":{"id":"1:12626:26537","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39634:21006","Self::is_ascii":"1:12625:25998"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41685:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39634:21006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12630:29166":{"id":"1:12630:29166","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4584:29166"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43946:3283","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12579:26667":{"id":"1:12579:26667","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41685:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3518","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12205:3518","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12220:3520","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12564:29150":{"id":"1:12564:29150","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12200:3504","str::split":"1:12555:26657","prim@char":"4:12019:457","`DoubleEndedIterator`":"1:7582:128","str::rsplit_terminator":"1:12567:29151"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43697:3537","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3518","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12600:29158":{"id":"1:12600:29158","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12506:879":{"id":"1:12506:879","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12019:457"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12547:2315":{"id":"1:12547:2315","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41687:202","prim@char":"4:12019:457","self::pattern":"1:12200:3504"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41685:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3518","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1798":{"id":"0:0:1798","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[215,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\n# #[macro_use]\n# extern crate lazy_static;\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.4.0\")]","#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:29:1804","0:31:1805","0:28:1798"],"is_stripped":false}}},"1:12561:26660":{"id":"1:12561:26660","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12200:3504","`DoubleEndedIterator`":"1:7582:128","prim@char":"4:12019:457","str::split":"1:12555:26657"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43665:3463","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3518","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12205:3518","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12220:3520","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12620:29164":{"id":"1:12620:29164","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12019:457","self::pattern":"1:12200:3504"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3518","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12205:3518","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12220:3520","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:29828":{"id":"5:5527:29828","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5538:26000":{"id":"5:5538:26000","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12628:26003"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12628:26003":{"id":"1:12628:26003","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12617:29163":{"id":"1:12617:29163","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12019:457","self::pattern":"1:12200:3504"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3518","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12541:26668":{"id":"1:12541:26668","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:12019:457","self::pattern":"1:12200:3504"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3518","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12623:29165":{"id":"1:12623:29165","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12161:134","`FromStr`":"1:12160:3032"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41830:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12160:3032","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12160:3032","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12576:26666":{"id":"1:12576:26666","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41685:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3518","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12536:29149":{"id":"1:12536:29149","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43911:3535","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12522:21769":{"id":"1:12522:21769","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12514:26216":{"id":"1:12514:26216","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11760:3524"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5524:29827":{"id":"5:5524:29827","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3518","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5539:26001":{"id":"5:5539:26001","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12629:26004"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12625:25998":{"id":"1:12625:25998","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12509:29144":{"id":"1:12509:29144","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12530:21146":{"id":"1:12530:21146","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12019:457"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43617:3532","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12551:2273":{"id":"1:12551:2273","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41687:202","prim@char":"4:12019:457","self::pattern":"1:12200:3504"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41685:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3518","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12205:3518","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12220:3520","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12520:21768":{"id":"1:12520:21768","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41687:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41685:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12524:21770":{"id":"1:12524:21770","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12555:26657":{"id":"1:12555:26657","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12200:3504","`DoubleEndedIterator`":"1:7582:128","prim@char":"4:12019:457","str::split_whitespace":"1:12533:21135","str::rsplit":"1:12561:26660"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43647:3459","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3518","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12518:1803":{"id":"1:12518:1803","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41687:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41685:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12594:29155":{"id":"1:12594:29155","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12627:26002":{"id":"1:12627:26002","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5537:3342":{"id":"5:5537:3342","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12605:29161":{"id":"1:12605:29161","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12019:457","self::pattern":"1:12200:3504"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3518","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12573:26664":{"id":"1:12573:26664","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12019:457","str::splitn":"1:12570:26662","self::pattern":"1:12200:3504"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43769:3457","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3518","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12205:3518","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12220:3520","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12629:26004":{"id":"1:12629:26004","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12591:29154":{"id":"1:12591:29154","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12200:3504","`DoubleEndedIterator`":"1:7582:128","prim@char":"4:12019:457","str::match_indices":"1:12588:29153"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43815:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3518","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12205:3518","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12220:3520","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12598:29157":{"id":"1:12598:29157","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12531:21250":{"id":"1:12531:21250","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12019:457"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43623:3531","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12582:2003":{"id":"1:12582:2003","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12200:3504","`DoubleEndedIterator`":"1:7582:128","prim@char":"4:12019:457","str::rmatches":"1:12585:29152"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43851:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3518","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12533:21135":{"id":"1:12533:21135","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12534:21168"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43921:3534","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12537:21148":{"id":"1:12537:21148","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43939:3542","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12632:3261":{"id":"1:12632:3261","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4585:3261"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43955:3262","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29:1804":{"id":"0:29:1804","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[185,0],"end":[188,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"5:5535:29829":{"id":"5:5535:29829","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12515:29146":{"id":"1:12515:29146","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12529:26650":{"id":"1:12529:26650","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12528:26649"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12511:29145":{"id":"1:12511:29145","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12509:29144"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12538:21013":{"id":"1:12538:21013","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12019:457","self::pattern":"1:12200:3504"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3518","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12588:29153":{"id":"1:12588:29153","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12200:3504","`DoubleEndedIterator`":"1:7582:128","prim@char":"4:12019:457","str::rmatch_indices":"1:12591:29154"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43797:3540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3518","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12602:29160":{"id":"1:12602:29160","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12019:457","self::pattern":"1:12200:3504"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3518","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12205:3518","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12225:3519","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5521:3188":{"id":"5:5521:3188","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3518","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12532:24001":{"id":"1:12532:24001","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43633:3530","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12516:349":{"id":"1:12516:349","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12517:348","`u8`":"4:12036:1650"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12517:348":{"id":"1:12517:348","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12036:1650"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12558:21328":{"id":"1:12558:21328","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12019:457","self::pattern":"1:12200:3504"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12016:3472","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:3518","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536:29830":{"id":"5:5536:29830","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2102","`String`":"5:7490:255"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2102","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"4:8189:3378":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"4:12022:1154":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"4:645:8976":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"4:3274:9122":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"7:78:15022":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"4:11440:2804":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:32141:21156":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"6:4710:13289":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:9886:16391":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"5:687:117":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:2861:2169":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:47758:8712":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:4461:13263":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:5130:13335":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:9632:3422":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"17:11062:16593":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"11:1010:2930":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:43930:3543":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"4:11342:24996":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"4:11184:9087":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"16:7067:31100":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:13611:20520":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:2950:2183":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:3003:2195":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"4:8315:9211":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:10278:16438":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:40342:3364":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:7616:13499":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:6270:3359":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"18:96:20600":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"14:40:19247":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:4462:15798":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:2849:112":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"6:5111:13332":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:4871:3331":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"4:5069:25676":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:1013:2706":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:1537:10647":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"4:5733:2145":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:5033:13325":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:1749:3221":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"4:5958:2784":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:10214:16441":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:5009:13322":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"5:1376:98":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:43201:3477":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"11:427:30993":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:8294:135":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"15:288:15198":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:13739:20527":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:10316:16444":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"11:1869:9007":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:40149:3285":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"18:574:32187":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:13101:3603":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:44053:3558":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:8671:2257":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:41813:2350":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:654:9808":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:42001:85":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:6171:218":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:548:9754":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"4:12038:1648":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"6:1650:10657":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"4:2940:135":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"4:945:9001":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:13228:19804":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:13876:20535":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:7523:16247":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"0:0:1798":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"1:9282:21071":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:40665:3378":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:43500:3354":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:41745:2943":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"4:8847:9269":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"4:1743:664":{"crate_id":4,"path":["std","env"],"kind":"module"},"1:23005:193":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:2804:259":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:46483:21238":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:4079:3265":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"18:590:21394":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"4:6057:2778":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:12846:19779":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:9884:3439":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:2722:15266":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"5:2051:2948":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"4:7514:16341":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:5921:14000":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:507:9750":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:10005:2821":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:10575:16496":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:11244:16376":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"6:6741:10786":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:11173:16597":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:3052:139":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:43955:3262":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:10735:3457":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:2920:2176":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:4764:13293":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"11:817:8996":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:41736:174":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"4:7990:25699":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:12305:19272":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:9660:32051":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"4:909:8996":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:5743:16185":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:13008:2780":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"4:8893:9267":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:13723:20526":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:4745:15889":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:12737:19772":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:10916:16512":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"5:7240:9010":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:1604:10654":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"4:4167:9177":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"4:3923:9143":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"4:11990:8981":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:9852:16389":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"4:11524:9140":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:7694:16257":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:14522:20585":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:7360:31498":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:12790:19776":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:10383:16435":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:5004:13321":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"4:10830:26139":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:7635:2100":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:9998:16400":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:44683:21402":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:41889:2278":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:30351:3193":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:44620:3600":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:1514:10644":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:22807:199":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"6:6764:10771":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:48064:8634":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:10726:16551":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"16:6189:31467":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:12208:19265":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"16:6456:16213":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:2794:2097":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"5:7323:2278":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:6687:16223":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:39364:226":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:43545:3467":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"4:4025:9150":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:5963:16192":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:9521:16359":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:6944:31297":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:6927:14437":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:4363:2117":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:9867:16390":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"5:3240:9009":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:10366:16449":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"4:8221:9136":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"4:12042:1706":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"1:40525:3377":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:30445:21954":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"4:7920:2945":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"4:7854:9076":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"6:1710:10663":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:41873:2943":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:10103:2829":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:4447:2121":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"4:12019:457":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"4:8909:9265":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"18:736:20613":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:12790:148":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"6:1703:9169":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:13244:19805":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:40050:3289":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:9650:16362":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:2184:3206":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"4:4298:9179":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:6868:14433":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:4449:13262":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:8003:3351":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"4:8209:3533":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"6:4847:13303":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:6844:16228":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:4044:21423":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"16:5588:16176":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"4:6597:2157":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:43647:3459":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:3055:140":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"4:3917:9144":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"5:3214:9006":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"16:7102:16237":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"6:533:9752":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:3182:223":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:10430:16491":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"4:951:9002":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:2305:15248":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:14056:20551":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:42040:92":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"5:6915:276":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"11:1855:2747":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"6:6913:14436":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:2696:15265":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:42717:21949":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:5633:3369":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:11098:16568":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"4:10770:24912":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:10962:16510":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:9912:16393":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:10165:16429":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"4:3154:25950":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:9051:16323":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:7633:13501":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"4:11599:15207":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:3272:2194":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"18:564:20628":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:14420:20577":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:10980:16362":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:42437:3423":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"4:9457:136":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"4:3193:9123":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:2883:2167":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:44225:3565":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:4496:13267":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:4351:13254":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:12997:19788":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:46976:8683":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"11:1541:2935":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:6691:14425":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:13851:20533":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:47969:8627":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:7639:13502":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"4:12030:699":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"4:11327:25038":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"5:5376:9310":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:9711:32170":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:12205:3518":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:21296:8656":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:40689:3380":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:42118:93":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:12876:19780":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:22252:21278":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:12698:19769":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:44236:3566":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"4:849:2944":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"4:9185:25610":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"4:4951:9218":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"14:187:15182":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:12267:19269":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:12576:19762":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:43633:3530":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:11573:16374":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:9455:31798":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:3266:2192":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:12373:19753":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"15:394:15210":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:40364:3356":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:2797:257":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:2954:2184":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:1501:10642":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:7534:16248":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:1913:10829":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:41822:217":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"5:3722:2945":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:22447:3034":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"4:1545:2747":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:4833:22495":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"4:4687:9210":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"11:2238:9003":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"4:2345:3196":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"5:2133:2725":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:4557:15821":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:13148:19798":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:43964:3282":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"4:1819:2421":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"4:5382:9248":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"16:2321:15249":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:6513:16217":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"5:4428:2737":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:261:31952":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:44402:3573":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"4:12031:805":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"0:29:1804":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"18:681:20617":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"4:10958:25309":{"crate_id":4,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"16:5830:16188":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:41881:2944":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:45916:8669":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"11:2461:30998":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"4:918:8998":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:563:9756":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"18:699:20619":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:11389:16366":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:11507:16371":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:10588:16497":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"9:177:15149":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:2787:249":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:42989:21284":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:11281:16591":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"16:536:31387":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:22028:9083":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"4:5812:2154":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"16:6753:16225":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:14076:20553":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:14469:20581":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"4:8817:9256":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"11:1687:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:6893:31465":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"4:3975:9147":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:11971:19249":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"6:7622:13500":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:4556:13275":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"4:7012:2789":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:9640:218":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:7038:23973":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:8780:3518":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:7259:3338":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"5:7453:9055":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"4:10066:9034":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"16:7544:16249":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:9701:16363":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:12220:3520":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:40889:1945":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"4:11503:9138":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:5866:16189":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:5485:2734":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"4:859:2278":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"10:0:2029":{"crate_id":10,"path":["adler"],"kind":"module"},"17:12465:16556":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:0:538":{"crate_id":1,"path":["core"],"kind":"module"},"16:7568:16251":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:43513:3468":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"11:2494:8990":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:13451:20514":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:2798:256":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"16:6545:16219":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:9625:118":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"6:1521:10645":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"4:10782:9079":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:45753:8668":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:2209:16462":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"5:1505:8998":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"4:5418:9250":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"1:43921:3534":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"16:3315:15281":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"16:6560:2693":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"4:2938:238":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"4:10930:9042":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:10456:16463":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:21584:9083":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:21560:9083":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"5:7479:2743":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"4:7884:126":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"4:9023:16238":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:1646:640":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"16:2933:15275":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:3088:2187":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"4:5767:2147":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:13802:20529":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"5:7574:2747":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:13981:20544":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:47904:8718":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:495:9748":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:9086:16174":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"4:1903:9053":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"4:4727:9159":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:13085:19794":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"4:3360:3343":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"1:11760:3524":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:4893:13309":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:10607:3473":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:9896:16392":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"4:11463:9139":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:22939:191":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"5:3737:2948":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:12513:19758":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:40062:21301":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:1591:10652":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:6263:14047":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:12293:19271":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:40196:105":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:45975:8730":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"4:8948:2148":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:4814:13299":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:6813:14430":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:7371:14810":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:21591:8652":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"16:2359:15251":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:12825:22295":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:13113:19796":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:41416:171":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"11:2303:15168":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"17:14460:20580":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:12007:19251":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:7054:31437":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"11:1850:2728":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"4:836:2943":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"4:8263:3392":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:7645:13503":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"5:5861:2728":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"4:7832:9078":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"17:582:16341":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:588:9760":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"11:841:2926":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:44174:3563":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:1772:2965":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:4989:13319":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"4:4556:9201":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"11:1145:9005":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"5:784:2709":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:4755:13292":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:4497:15809":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"9:0:2028":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:47366:8700":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:40411:21118":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:11991:19250":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:9642:3426":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:11351:16604":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:44670:3604":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"4:2363:9067":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"17:11327:16602":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"5:1674:2706":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"5:7515:9317":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:44658:3606":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:22426:24481":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"16:6569:16220":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:7679:13507":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:2871:2165":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"6:7388:14811":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:40511:3376":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:46900:8671":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"5:6798:2745":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:9574:32100":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:14346:20573":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:10059:16404":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:4878:13307":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:3764:15292":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"11:796:2747":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:41645:3393":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"4:7904:25677":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:6873:2286":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:4789:13296":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:44628:3601":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"11:992:9003":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:9488:31883":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:6467:16214":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:10547:16495":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"16:3461:15282":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:10071:2824":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"6:5146:13337":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:4676:13286":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:10637:16501":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:40286:3327":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"18:515:20625":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:30551:21940":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"16:3032:15277":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"5:3583:2943":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:7999:3350":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"11:2058:9003":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:10685:16507":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:41685:205":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:2629:123":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"6:4364:13255":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:8686:16342":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:44031:3557":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:5075:13329":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:21461:8643":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:42782:76":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"16:5696:16182":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:44382:3517":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:43617:3532":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"6:4955:13316":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"4:4146:9175":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:22284:21291":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"11:1635:2700":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:2681:3238":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"4:10420:9254":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"14:7:15174":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:6268:31481":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:9445:16358":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:47820:8733":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:44398:3511":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:13989:20545":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:2864:15272":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:1683:1193":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"4:7827:9077":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"5:1475:8995":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:9945:16408":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:12271:3551":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:10507:16464":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"18:614:32213":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:10494:16466":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:40463:3358":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:11448:16368":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:4921:15921":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:9242:16355":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"11:2487:30999":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:41439:3388":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"4:8202:3459":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"1:40163:3287":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:42950:21136":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:1718:10664":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:2574:15260":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:13487:20515":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:2341:132":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"17:3565:16534":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"5:4395:2734":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"6:6934:14438":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:39440:2191":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:44147:3562":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:2832:15271":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:119:9427":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:10788:16553":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:629:28532":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:44068:3559":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:43939:3542":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:4902:13310":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:3245:2190":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"5:4004:2728":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"11:2351:2278":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1:40393:3367":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:4595:13279":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"4:8855:2278":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:14145:20561":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:2799:115":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"4:4729:9162":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:7660:16256":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"5:2961:2341":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:47010:8732":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"18:690:20618":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:13667:20522":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:21481:8646":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:39634:21006":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"4:922:8999":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:13868:20534":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:44366:3509":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"4:1534:2943":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:14324:20571":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"4:7895:8992":{"crate_id":4,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"17:9137:16328":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"5:7252:2728":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"4:8374:9222":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:43197:22008":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"7:31:15015":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:45956:8681":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:9959:16403":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:7722:16259":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"4:7702:8979":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:11281:3471":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:14296:20568":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:21210:3205":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"16:4527:15815":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:8195:16275":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:2510:2993":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:12043:19253":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:256:31962":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:11661:16326":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:2810:15270":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:13890:20536":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:1528:10646":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"18:636:32206":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"9:393:15045":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:43769:3457":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:11490:16370":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:3049:138":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"17:10534:16465":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:11111:16567":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"4:8534:2943":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"4:3416:9080":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"17:10714:16550":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:2795:2126":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"16:7128:16238":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:4932:13314":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"4:5115:215":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"17:13897:20537":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:11215:16564":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"4:8482:9239":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"16:6531:16218":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:10088:2770":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"6:6079:14010":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:46354:8738":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:14033:20549":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"4:8880:9264":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"4:8215:9137":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"4:8158:9082":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"11:2467:24133":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:48079:8635":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:10112:16426":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"4:7584:2793":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:13135:19797":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"4:9010:25376":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:14100:20556":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"4:1538:2278":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:5791:263":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:43374:21346":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"4:637:8974":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:9095:83":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:9630:127":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:23071:195":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"4:11580:9286":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"1:40102:3291":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:43474:3469":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:4666:13285":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"4:7628:9083":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"4:11369:25721":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:39461:3257":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:1682:10660":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:5816:31085":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"4:939:2926":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:11162:16561":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"11:122:2694":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:10280:9083":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:10468:16493":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:11151:16596":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"4:3388:2734":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"1:2288:110":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"17:10750:16508":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:5897:13998":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"4:6631:245":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:5140:13336":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"4:11277:2802":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:11730:3450":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"4:7995:25380":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"5:6984:2764":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:6017:16195":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"4:6583:2156":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"5:2972:28635":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:22433:3035":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:6898:14435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"16:5322:16154":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"16:7436:16241":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"4:10728:9212":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:10646:16547":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:13826:20531":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:10672:16549":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:2269:102":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:6261:16201":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"16:6226:16199":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:11639:16377":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"14:221:15184":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:44378:3513":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:8978:16351":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:13046:152":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:10698:16529":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:12888:19781":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:1184:16413":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:6804:14429":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"4:11375:25715":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:6781:10769":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:40923:3346":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:44567:231":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"17:14024:20548":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"5:4365:2737":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:6792:16226":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:6100:14012":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:2012:16443":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:30949:3228":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"17:14282:20567":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:47942:8739":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:542:9753":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:12970:19786":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:4641:15833":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"4:5038:25676":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:13274:16379":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"11:666:2943":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:4418:2119":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:46186:8664":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:44585:219":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"4:3722:9138":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:12531:19759":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:1507:10643":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:14269:20566":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"4:8861:9266":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:14126:20559":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:123:9428":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:1496:10641":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:7862:16265":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"11:2085:9004":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:5941:13958":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:5976:2143":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:7884:16266":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"5:5138:2143":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:45993:8736":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:13298:19808":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:41770:2254":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"5:7390:8991":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:9921:16418":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"11:1092:2932":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"4:11202:24992":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:12172:19262":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:39181:2197":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:40035:3262":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:40092:3290":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:4603:13280":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:11048:16581":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:14001:20546":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:7041:31489":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:12214:3521":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:43526:3466":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:2546:79":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"17:400:16339":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"16:6083:15220":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:4529:13271":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:8239:16277":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:6169:14018":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"4:2419:1966":{"crate_id":4,"path":["std","io"],"kind":"module"},"16:7582:16252":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:10628:16500":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"18:766:20614":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:13188:19801":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:41761:2278":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"17:12496:19757":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"5:7590:2751":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"4:5402:9249":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"4:11803:2808":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:4488:13266":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:12877:3598":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:12484:16555":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"4:10528:9121":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"16:6485:16215":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:43605:3528":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:48094:8636":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"4:6530:2152":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:8848:16347":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"5:7262:2718":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"4:533:2767":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"1:21160:8648":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:22030:8644":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:48117:8637":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:4294:2109":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"6:4480:13265":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:11381:16606":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:32159:2118":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"1:45938:8675":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"16:2618:15262":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"4:10145:25700":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:44390:3516":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:2670:15264":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"4:4138:9174":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:43851:3538":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:2895:2172":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:10139:16428":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"16:6332:16204":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:47618:8706":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:10447:15160":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"4:3657:9135":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"6:4628:13283":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:13174:19800":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:41923:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:4824:13300":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"11:0:2030":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:41753:2944":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"5:6666:2706":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:4455:13103":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:234:238":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:10370:16436":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:10949:16509":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:46086:8704":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:40276:2812":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:22381:21309":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:6696:15193":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:14536:20586":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:14083:20554":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"16:5661:16180":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:10530:3472":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:12473:16554":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:7343:9706":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"4:1556:9007":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:9636:3424":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:7996:3263":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:14118:20558":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:5910:13999":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:40373:3365":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:44259:3522":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"5:5372:9309":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"16:7513:16246":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"4:10525:9125":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"5:7331:2278":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:11316:16592":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:14401:20576":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"16:5574:16175":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:21918:24713":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"11:344:30986":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"6:4401:13258":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:6352:16206":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:6136:30510":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"4:1874:9052":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"16:8167:16273":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"5:261:2706":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"4:12029:697":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"5:6468:2728":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"4:6344:186":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:9100:90":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"18:491:32205":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:5049:15953":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"11:759:8994":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"4:2193:136":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"11:423:30991":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"4:10752:26353":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"6:7651:13504":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:40486:3374":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:43751:3461":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"5:1120:2937":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"4:9469:2795":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:2887:2170":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:4506:13268":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:11788:16611":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:12621:19764":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"5:7423:9057":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"5:6587:2278":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"4:8196:3530":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"5:4350:277":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:12778:19775":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"4:5612:232":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:2744:15267":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:11742:16381":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:11322:3219":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"4:9088:246":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"5:3180:9007":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:32145:16277":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"16:4862:15910":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:8594:16325":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:4373:2118":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:11905:3547":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:42458:3425":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"4:3317:9111":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"4:5619:2784":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:22360:21166":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:4427:2120":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:2844:2098":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"4:9015:25387":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"9:330:15100":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"9:357:15060":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:1560:2734":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:40122:3262":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"4:2202:9059":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"17:12111:19258":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"16:6818:16227":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"4:4037:9153":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:22972:192":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"5:3173:2943":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"4:6149:2783":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:11910:19246":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:11719:16380":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:40913:2819":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"4:6284:232":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:8134:16271":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"4:557:2952":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:12225:19266":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:6700:14426":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"4:4612:9148":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:13567:20518":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:6401:16210":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:9841:153":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"5:7302:28545":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:10929:16513":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:4032:21404":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"16:6721:16224":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"16:8281:16278":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"5:4988:2734":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"5:3596:2944":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"5:1304:9005":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:12911:19782":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"4:10934:24937":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"16:5712:16183":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"4:7723:9041":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"16:2907:15274":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:22873:201":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:40243:3303":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"6:1576:10651":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"18:531:20626":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:7089:3335":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:43901:3533":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"17:14110:20557":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:2172:641":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"4:8524:9240":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"4:11034:2800":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:2841:3245":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:40313:3354":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:10763:3458":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:8825:16346":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:10097:16398":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:46138:8716":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"5:6959:2760":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"16:8050:16267":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"16:7554:16250":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:2596:15261":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"5:2172:28629":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"18:719:20612":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:41962:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"10:36:30984":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"16:6415:16211":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:12225:3519":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:12945:19784":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"4:3953:9145":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:574:9758":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"4:4622:25968":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:5085:13330":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:40425:3370":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:7556:14970":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"4:4626:25972":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"4:1562:9008":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:43443:2971":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:2640:135":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:22459:3036":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:12724:19771":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:8115:16270":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"5:5945:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:40078:3288":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"16:7708:16258":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:2788:15269":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:4745:13291":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"5:1275:9004":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:2766:15268":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:4375:13256":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"5:7490:255":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"0:28:1798":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"17:9003:16352":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"4:11294:25377":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"11:829:9000":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:46506:21272":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:11248:3470":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:4474:2122":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:21208:22021":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"4:12041:854":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"4:3272:9121":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"4:3482:25283":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:9564:16360":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:5573:2734":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"16:5121:15977":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"5:2692:28924":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"5:5328:2706":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:7365:14809":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"4:10087:25654":{"crate_id":4,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"16:7677:222":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"5:7294:222":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"5:1104:28977":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"6:4516:13269":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:43946:3283":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"4:12033:803":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"1:4148:2130":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:13071:19793":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:42958:3441":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:40931:3348":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:4860:13305":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:5691:3357":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"18:0:2036":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:43715:3536":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"18:481:20623":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"16:2406:15253":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:7691:179":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:41456:3389":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:44370:3512":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"5:1516:222":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:6425:16212":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"4:11592:25666":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:10036:16406":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:14514:20584":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"4:8803:9255":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"4:914:8997":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:44374:3514":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:12765:19774":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:4841:13302":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:3960:2734":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:21565:8642":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:12422:19754":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:22320:21286":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:10462:2944":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"4:6417:2149":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"4:357:8968":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:3530:2728":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:2899:2171":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:40383:3366":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"5:6514:2706":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"7:0:1696":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:43434:3455":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:6071:14009":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:22268:22128":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:4914:13312":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"4:7525:25696":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:1837:189":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:10240:16408":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"4:12035:800":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"11:1036:9004":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:6159:14017":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:14090:20555":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:9600:142":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"6:6682:9629":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:9372:16357":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:2549:78":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"16:6361:16207":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:6156:16197":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"4:9175:25622":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"4:12044:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"6:4698:13288":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"11:822:8999":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:46232:8670":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"4:2198:2765":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"17:11393:135":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"4:10943:9251":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"16:5634:16178":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"4:1054:2930":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:21158:9083":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"4:7121:25717":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:43591:3529":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"14:165:15175":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:9207:16354":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"4:5368:9247":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"16:4806:15902":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:10771:16528":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"16:6041:16196":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:7474:16243":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:5088:15968":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:9531:32169":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"5:2143:28967":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:10438:2943":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:11934:19247":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"4:1040:9003":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:11201:16562":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:43697:3537":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:14173:20564":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:5068:13328":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"4:9153:25674":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"11:101:30985":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"4:8126:3338":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"1:10680:3464":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:21007:20708":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:4543:13273":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"4:3434:2954":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:14316:20570":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"5:7223:9011":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:13202:19802":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"4:8551:9242":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"5:1428:2944":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:4647:13284":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:7782:16262":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"4:363:8969":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"11:868:9002":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:4884:13308":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:7604:13497":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:40229:3328":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:3255:266":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:11473:16369":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"4:3157:26471":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:44577:239":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:45886:8663":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:7492:16244":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"11:1876:9008":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:12252:19268":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:3300:2127":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"4:2654:9116":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"18:507:32187":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:4968:13317":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:12959:19785":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"6:6107:14013":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:10290:251":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:0:2034":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:2372:206":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"16:2450:15255":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:4473:13264":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:42733:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"4:12043:1253":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"11:772:8995":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"4:11157:26144":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:39298:222":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"16:7621:16254":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:13792:20528":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:13215:19803":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:8672:2256":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:13632:20521":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"5:35:2702":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"16:4949:15925":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"4:2195:9058":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"1:22146:21251":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:12711:19770":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"4:8297:9182":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"4:6453:2155":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:14163:20563":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:13024:19790":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"4:9464:9078":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:46710:8711":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:7613:16253":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:10903:16514":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"4:8341:9161":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:39322:224":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:13922:20540":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:22:738":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"17:8713:16343":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:10126:16427":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"5:880:2714":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:8659:16322":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:14221:20565":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"16:6901:16230":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"5:2463:2938":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:555:9755":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:1734:10665":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"5:1778:2747":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:12136:19260":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"4:8973:8956":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:2558:270":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"4:4893:9208":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:12200:3504":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"16:7090:31398":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:4812:426":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:21252:8655":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"4:8925:9268":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:5648:16179":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:12658:19766":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:14335:20572":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"4:9961:21342":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"6:6248:14046":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:1691:10661":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:7507:3352":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:5123:13334":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:10227:16440":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:22906:194":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"5:2962:30138":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:8926:16349":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"13:110:31051":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:7610:13498":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:45641:8696":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"18:671:20616":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:41898:207":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"4:8146:2955":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"1:43182:3501":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"9:450:15044":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"14:0:2032":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"5:7232:2278":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:501:9749":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:4440:13261":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"4:12024:1512":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"1:12433:118":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"11:1051:15164":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"16:3830:15310":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:22774:198":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:3665:2278":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:13422:20513":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:2552:163":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"4:6133:2780":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:11000:16517":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:6583:16221":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:46586:8699":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:4922:13313":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:4854:13304":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:2509:9083":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"4:11357:25039":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:22840:196":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"6:5974:14003":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:1596:10653":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:3888:15344":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"4:7743:21156":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"1:42742:70":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"17:11191:16377":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:44386:3515":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"8:0:2027":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:40443:3381":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"5:7272:28956":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:47980:8628":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"11:2317:2943":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:2946:2182":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:15:2004":{"crate_id":1,"path":["core","write"],"kind":"macro"},"16:3915:15347":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"6:6819:14431":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:40182:3281":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:12803:165":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:5363:16171":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:7702:14999":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:39267:2188":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"0:31:1805":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"1:21593:8646":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:41803:2255":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"4:7844:9079":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"17:14308:20569":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"4:11023:2799":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"11:324:30990":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:40041:3266":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:42687:70":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"16:4417:15777":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:44641:181":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:9102:16327":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"11:680:2944":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"5:1413:2943":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"4:5433:111":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"1:43815:3541":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:42276:96":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"11:2074:2930":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:14355:20574":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:6281:2818":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"18:707:3521":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:12645:19765":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"5:3570:183":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"9:237:9237":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:6059:14008":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:7736:16260":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"4:8179:3364":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"4:6798:9272":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:14068:20552":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:9823:16388":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:11981:3548":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"11:1846:2278":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:46116:8710":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:7582:128":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:46040:8640":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:9427:3437":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"5:3206:9008":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"11:693:2278":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:3034:2128":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:13055:19792":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"4:1072:9005":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"4:8319:9213":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"5:4236:2943":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:149:2690":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:11872:16614":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"16:3232:15280":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:22335:21329":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:39282:225":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:4:1117":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"5:3219:28966":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"4:8281:9172":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:20992:24709":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"6:4584:13278":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"4:1550:9006":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:21415:8641":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:40114:3282":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"5:7504:9316":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:9070:16173":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"11:1562:15167":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"4:1541:2728":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"9:507:15047":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:40156:3286":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"11:1882:9009":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:43911:3535":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:10478:16488":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"16:8154:16272":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:5969:14002":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:14013:20547":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"4:10757:9075":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:2856:2164":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"16:2472:15256":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:39447:3243":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"6:4830:13301":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:11272:16600":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:46405:21373":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:44082:3560":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:1674:10659":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:2877:2168":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:4686:13287":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:4578:13277":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"4:3473:3294":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"16:6968:16234":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:5955:13959":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:21343:3205":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"18:644:32187":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:11815:16612":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"4:11968:25312":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:44421:129":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:41586:21345":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:12024:19252":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:9985:16401":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:9752:16364":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:11407:16367":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:21022:20711":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:14434:20578":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"4:10747:24926":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:20977:24709":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:42705:116":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:10265:16439":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:6837:14432":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:5435:31427":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"6:6012:14006":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:5403:16173":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:504:16340":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:23518:248":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:2925:2177":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:6228:13170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"4:10792:137":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"4:6527:2151":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:42444:3422":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:5052:13327":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"5:6335:9273":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"4:1758:9023":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"16:7015:16236":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"5:0:320":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:6742:15192":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"4:8275:9181":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:8205:16276":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:43665:3463":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:48041:8633":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"5:678:262":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:13546:20516":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:40675:3379":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:43425:3456":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:11261:16590":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"18:755:20621":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"11:2473:30992":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:46262:8676":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:13973:20543":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"16:6243:16200":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:4179:2131":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"4:3824:9140":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:12196:19264":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"4:3491:9081":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"6:4808:13298":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"4:9136:9271":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"4:7674:2797":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"4:11606:15207":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"4:10522:9123":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:21382:8647":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:43453:3465":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:42997:21253":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"13:226:31004":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:4428:13259":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:10487:3459":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"6:4434:13260":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:9644:3427":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:30921:207":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:47696:8678":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"16:6929:16232":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:569:9757":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"4:4902:9209":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:13710:20525":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"6:6889:14434":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:7342:31442":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"4:4154:9176":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:39220:2196":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:21814:8657":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"11:483:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:42451:3424":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:11942:3549":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:46664:8705":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:40898:3341":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:13838:20532":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:2881:15273":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"4:1760:9024":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"5:1525:9013":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:41830:238":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"4:7629:8970":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:12830:19778":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"18:727:20620":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:5885:13996":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"4:5740:2146":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"4:8135:9128":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"2:0:482":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"4:588:8971":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:11535:16372":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:7462:16242":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:10749:3462":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:4299:2110":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:43797:3540":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:4724:13290":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:9634:3423":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:6276:24480":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"6:4616:13282":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:6222:14045":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:5995:16194":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:7828:16264":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"4:482:2766":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:2150:16477":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:30317:3192":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:7792:16263":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"4:4478:9184":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"4:10463:2796":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"5:4849:229":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"5:897:2943":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"15:327:15203":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:48015:8631":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"4:12039:1649":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"5:4034:2706":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:43555:2975":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:12086:19256":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:46330:8737":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"4:12017:408":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"1:21329:8651":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"4:12034:804":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"6:5023:13324":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:22343:21406":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:8670:2258":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"16:2284:15221":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:2526:15258":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:4610:13281":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:12016:3472":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"4:3195:9124":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:7503:16245":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:40434:3371":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:11586:16375":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"4:1910:710":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"16:5760:16186":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"4:12040:1646":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"17:11226:16598":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"4:6426:1946":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"6:4908:13311":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:5152:13338":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:4986:15938":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:2644:15263":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:9350:16324":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"16:4889:15913":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:41502:21952":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:7692:14998":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"4:7653:8962":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"17:13101:19795":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"4:893:2728":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:12160:3032":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:5117:13333":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"6:7668:13506":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"4:4218:9178":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:41622:3392":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"4:5487:9251":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"1:45685:8697":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"6:6114:14014":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"5:207:2704":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:42979:9237":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"14:160:15174":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:4613:15829":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:7598:13496":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:21005:20705":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:43623:3531":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:5017:15945":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:40454:3372":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:47960:8626":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:42942:3442":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"4:11985:25388":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:11074:16594":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:12671:19767":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:6386:16209":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"4:12032:802":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"17:12154:19261":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:10569:3460":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:44211:3564":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:5982:14004":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:32152:21370":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"5:3671:2706":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:21906:3453":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:39342:227":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"5:1466:8994":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:2903:2173":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:39386:228":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:1018:1944":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"6:6047:14007":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"4:7717:8980":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"5:4166:2734":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"5:276:2102":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"4:6181:25372":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:3285:24707":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:32105:3233":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:9638:3425":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"4:3233:9125":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"16:3065:15279":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"4:9058:25292":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"4:415:185":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:11124:16566":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:2182:3205":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"16:8181:16274":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:11337:16603":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:12543:19760":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"4:2511:9114":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"5:2968:28636":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:0:884":{"crate_id":6,"path":["libc"],"kind":"module"},"16:7597:31299":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:3021:124":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:5891:13997":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:11965:3546":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"4:12018:1036":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"17:13778:16407":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:6279:16202":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"4:8839:2943":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:2942:2181":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"4:8791:210":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"1:44446:3574":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:9933:16412":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:13914:20539":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:12437:19755":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:4566:13276":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:10616:16499":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"16:7269:31429":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"15:306:15199":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:5859:13994":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:6960:16233":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:5939:16191":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"4:7867:137":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"17:14448:20579":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"4:8270:9180":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:11547:16373":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:42315:2144":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"18:652:32187":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"11:703:8997":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:3337:2129":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:42196:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:6204:16198":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"4:504:2725":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:12184:19263":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"11:860:9001":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:14499:20583":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"5:7466:9056":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:13259:19806":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"16:7768:16261":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:7553:2101":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:10738:16552":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:5727:16184":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"11:731:8998":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"4:928:9000":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:12997:113":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"6:4523:13270":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:7006:16235":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:2936:2180":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"4:9083:187":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"4:12036:1650":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"17:10440:16492":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"16:2380:15252":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"5:5634:2745":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:3232:16511":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"14:31:15174":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:12598:19763":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:9582:3294":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"5:1484:8996":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:40201:3329":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"4:4370:9173":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"11:1862:9006":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:4939:1103":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"4:8831:9257":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"11:1072:31003":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"3:0:2025":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"4:621:8972":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:10420:16490":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:42157:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:10340:16442":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"4:11221:162":{"crate_id":4,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"1:4651:3275":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"16:5673:16181":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:41664:3394":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:7540:144":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:7651:16255":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:3084:2186":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"17:0:2035":{"crate_id":17,"path":["object"],"kind":"module"},"4:2578:2772":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"9:52:15063":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:1664:10658":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"4:3981:9148":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:4977:13318":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"11:785:2728":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"5:2964:28634":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:4912:860":{"crate_id":1,"path":["core","iter"],"kind":"module"},"16:7391:16240":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:13966:20542":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:5612:16177":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:30357:3194":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:13693:20512":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:45707:8702":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"4:6236:2784":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"5:7378:8990":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"4:1796:9034":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"6:1639:10656":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:8097:16269":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:12074:19255":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:10197:16455":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"4:4456:9183":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:2378:213":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:13554:20517":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:9328:3530":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:13010:19789":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:32166:3242":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"16:2339:15250":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"4:7837:9075":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:11023:16515":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"4:2361:9066":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"5:3144:99":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"4:11145:9256":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:13040:19791":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"5:6827:2759":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:22741:197":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:14478:20582":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:30387:21950":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"9:486:15043":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"4:1965:208":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"16:5798:16187":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:25920:279":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:2915:2175":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:2548:15259":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:3045:2099":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:5829:13930":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:12237:19267":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:44458:3575":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"4:5626:9261":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:10520:16494":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"4:10812:2955":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"4:8442:9237":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"17:8765:16344":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"4:8980:24953":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:9277:16356":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:30373:70":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:48000:8630":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"11:357:2696":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"4:12025:1544":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"16:4585:15825":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:4998:13320":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"6:4776:13294":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:4222:1942":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"6:5015:13323":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:21399:9083":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"6:5044:13326":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:580:9759":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:40495:3375":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:1075:16405":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:9762:32003":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"4:11165:3573":{"crate_id":4,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"5:7437:21360":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"4:1406:156":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:2908:2178":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"17:13906:20538":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:3655:15284":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:20964:3228":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"4:10821:26146":{"crate_id":4,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:12685:19768":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:4947:13315":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:475:9745":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:12554:19761":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:3260:145":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:40333:3355":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:4774:15894":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:41473:3390":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:10012:16362":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:483:9746":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:4800:13297":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"4:4116:25720":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:11710:16379":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"4:48:1707":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"1:42079:86":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:21024:20709":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"5:1140:28978":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"4:7365:25381":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"4:10085:2958":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"6:6711:14427":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"11:298:2923":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:4835:15907":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"18:624:32196":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"11:389:2698":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:13676:20523":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"4:8967:113":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:11137:16565":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:1934:2968":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:46946:8677":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"4:8540:9241":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"5:7286:2278":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:8072:16268":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:39408:2189":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"16:5905:16190":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:6915:16231":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"4:8289:9137":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:3797:15301":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"15:0:2033":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:9972:16402":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"4:8392:9236":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"4:10328:2959":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:10023:16363":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"4:9098:162":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"18:609:32202":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:40130:3283":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:48156:8638":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"11:2334:2944":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:14042:20550":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:40535:3361":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:46308:8731":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:45731:8662":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"18:521:20622":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:40306:3332":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"5:2225:29135":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:22308:3033":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"4:6883:2788":{"crate_id":4,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"4:4029:9151":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:11295:16601":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"4:3160:26467":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:11951:19248":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:12934:19783":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"18:113:20601":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:9780:16365":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:2266:101":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"6:1632:10655":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:9172:16353":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:10603:16498":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"4:3967:9146":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:9607:16361":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:12852:216":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"11:1525:15166":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"4:12023:346":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"5:6817:2757":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:6376:16208":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"5:4076:2944":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:10721:3461":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:7657:13505":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:2504:15257":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:12098:19257":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"4:9093:247":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:13816:20530":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"4:11131:9255":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"4:5555:9252":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"6:6128:14016":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:11306:16379":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:8895:16348":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"4:8000:9117":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:4719:15887":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:11086:16595":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"4:7890:8993":{"crate_id":4,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:2852:3218":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"17:10186:16430":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"4:903:2747":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:32253:3248":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"4:7912:9115":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"4:7565:2791":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"5:3332:2747":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:2959:2185":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"5:7406:106":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"16:4053:15461":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:48026:8632":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:42967:157":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:46452:21416":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"5:2037:2945":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"5:2245:28593":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:6798:14428":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:1570:10650":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:10642:3463":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:47508:8672":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"4:9264:2421":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:49980:8659":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"11:2260:2930":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:2847:3142":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"16:2969:15276":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"4:10311:111":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"4:12026:1631":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"17:11687:16378":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:42237:89":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:13949:20541":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:6318:16203":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:5384:16172":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:45855:8715":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:13575:20519":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:14156:20562":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:45815:8703":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"18:599:32186":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"4:4690:9183":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"11:1842:2943":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:62:9373":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"4:2592:2770":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"4:7739:9042":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"5:1494:8997":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:4290:233":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"6:596:9761":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:2555:143":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"4:8962:25360":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:45837:8709":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:4056:107":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:6092:3382":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"4:4624:25970":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"16:5982:16193":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:2178:16437":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"4:6970:25980":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:2336:212":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"4:5295:127":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"1:46822:8665":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:11886:19245":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:10410:16456":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:42760:135":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"4:3719:9139":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"5:6101:2734":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"4:4015:9149":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:1546:10648":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:8953:16350":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"4:1567:9009":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:13758:20511":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:44246:3567":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:527:9751":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"19:0:1134":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:40904:3343":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:46740:8717":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:40402:3368":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"4:4808:9158":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"4:12020:1666":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"11:2394:2747":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"14:202:9315":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:5419:16174":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:12280:19270":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:6974:3363":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:1653:3168":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:47160:8666":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:10084:16399":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"4:2347:9062":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:5867:13995":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:434:15223":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:9287:22116":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:2562:269":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:3421:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"5:780:100":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"12:0:2031":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:40476:3373":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:10661:16548":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:11358:16605":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"4:10568:2797":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"16:3049:15278":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"4:4785:2776":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"4:7648:8960":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"16:6879:16229":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:2930:2179":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:12810:19777":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"5:4196:2734":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"5:5997:2949":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:9889:3440":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"18:660:20615":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:6943:14439":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:4388:13257":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"4:3498:9102":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"17:12123:19259":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"16:4344:15728":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:3441:16516":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:43463:2973":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"5:3185:28953":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"11:2368:2728":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:11617:16376":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"6:1558:10649":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:6961:14440":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:41609:3391":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:40875:21424":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"16:2428:15254":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"4:8785:9254":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"5:1444:2278":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:40355:2961":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"11:2165:15160":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:21196:8650":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"17:10561:16461":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"6:4783:13295":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:6120:14015":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"4:2905:2775":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:9849:157":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"6:5992:14005":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"10:44:15154":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:40137:3284":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"6:5104:13331":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:40213:21360":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"4:11300:9260":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"4:2614:9107":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"4:5227:214":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"6:6666:10601":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:9790:31898":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"4:9117:9087":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"16:6346:16205":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:7544:166":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"4:5558:9253":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"1:11746:3452":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"4:4731:9163":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:4738:9142":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"4:0:1536":{"crate_id":4,"path":["std"],"kind":"module"},"16:7284:2254":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:12062:19254":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:6658:9796":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:44099:3561":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"18:538:20627":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:13286:19807":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"4:11040:2801":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"4:880:8995":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"4:2373:9072":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"17:9617:32142":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:6499:16216":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"4:640:8975":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:44279:3523":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"6:6086:14011":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:8040:21033":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"4:8465:9238":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"4:10802:126":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:47866:8684":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:30090:2994":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"5:824:2712":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:40882:3339":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"11:2286:9004":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:21809:8649":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"14:215:15183":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:11845:16613":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:22708:200":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"4:5974:232":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"4:12001:25299":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:45661:8661":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:3600:15283":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"6:4535:13272":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:11761:16382":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"4:8226:9134":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"1:42677:21951":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"4:9003:25648":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:1763:21941":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:4870:13306":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:14134:20560":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:11367:16569":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:21459:9083":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"11:2479:31002":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:14378:20575":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"9:426:15046":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:12452:19756":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"4:10237:9259":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"6:1697:10662":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"18:80:20599":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"4:1063:9004":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"5:1290:2930":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:9390:136":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"13:0:2026":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:7319:2108":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"4:3235:9126":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:2809:2125":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"4:6413:1945":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"4:723:154":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:13162:19799":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:2891:2174":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"4:867:8994":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"4:9037:25305":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"4:1821:2953":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"17:8794:16345":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:2866:2166":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:6718:9213":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:7503:3353":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:43535:2974":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:46284:8682":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:23038:190":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:43869:3539":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:12983:19787":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:45785:8698":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:44394:3510":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"4:12037:1647":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"4:1962:209":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:4549:13274":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:10397:16489":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:7318:16239":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:22397:21434":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"4:10976:9257":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:11235:16599":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"5:1259:9003":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"5:3802:2747":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"16:6600:16222":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:13685:20524":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:5928:14001":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:489:9747":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"11:1127:15165":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:10292:16362":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:22199:21435":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:47989:8629":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:12750:19773":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:21467:8645":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"18:582:3228":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}