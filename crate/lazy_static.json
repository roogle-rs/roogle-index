{"root":"0:0:1578","crate_version":"1.4.0","includes_private":false,"index":{"1:3368:1951":{"id":"1:3368:1951","crate_id":1,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3370:266"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13941:150":{"id":"1:13941:150","crate_id":1,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13942:181","1:13943:150","1:13944:767"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8543:136":{"id":"1:8543:136","crate_id":1,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8545:684"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13659:57551":{"id":"1:13659:57551","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:13202:2427","`DoubleEndedIterator`":"1:8591:120","prim@char":"4:15986:1737","str::rmatch_indices":"4:15992:1742"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"1:49741:2753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13212:2428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13582:57542":{"id":"1:13582:57542","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"4:15992:1742"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23036:2343":{"id":"1:23036:2343","crate_id":1,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23037:2340","1:23038:1247","1:23039:1272"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3729:224":{"id":"1:3729:224","crate_id":1,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3730:181","1:3731:1973","1:3732:686","1:3733:369"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FromResidual","id":"1:3734:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"1:3729:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:8616:1868":{"id":"1:8616:1868","crate_id":1,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8617:793","1:8618:2060"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8748:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3175:135":{"id":"1:3175:135","crate_id":1,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3177:681"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6887:2977":{"id":"4:6887:2977","crate_id":4,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6888:57206"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13665:57553":{"id":"1:13665:57553","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3577:1967":{"id":"1:3577:1967","crate_id":1,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3579:181","1:3580:753"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3274:1865","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:3648:1970":{"id":"1:3648:1970","crate_id":1,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3650:51342","1:3651:51343","1:3652:51344"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3274:1865","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"4:1075:3025":{"id":"4:1075:3025","crate_id":4,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:1076:2127","4:1077:2958","4:1078:55743","4:1079:55744","4:1080:54588","4:1081:54589","4:1082:54590"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:39:1584":{"id":"0:39:1584","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[185,0],"end":[188,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8510:2368":{"id":"1:8510:2368","crate_id":1,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8512:2118"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6090":{"id":"5:6090","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5903:1340","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6091:58199","5:6092:2885","5:6095:58200","5:6098:58201","5:6110:58202","5:6111:58203","5:6112:3076","5:6113:55743","5:6114:55744"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:23624:2344":{"id":"1:23624:2344","crate_id":1,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23625:1270","1:23626:1269","1:23627:1267","1:23628:1266"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialEq","id":"1:23036:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3376:1953":{"id":"1:3376:1953","crate_id":1,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3378:893"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13700:57563":{"id":"1:13700:57563","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"4:15986:1737"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"1:49890:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13598:57544":{"id":"1:13598:57544","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"1:3581:1968","str::slice_unchecked":"4:15992:1742","`str`":"4:15992:1742"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:8556:1869":{"id":"1:8556:1869","crate_id":1,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8558:2061","1:8560:2062","1:8561:2063"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13576":{"id":"1:13576","crate_id":1,"name":null,"span":null,"visibility":{"restricted":{"parent":"1:12662:1340","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["1:13577:793","1:13578:2060","1:13579:57540","1:13580:57541","1:13582:57542","1:13585:54237","1:13586:57543","1:13587:304","1:13588:54642","1:13589:1583","1:13591:50892","1:13593:50893","1:13595:50894","1:13597:3158","1:13598:57544","1:13599:54661","1:13600:54662","1:13601:2783","1:13602:2456","1:13603:3161","1:13604:14279","1:13605:14317","1:13606:3716","1:13607:57545","1:13608:14308","1:13609:51344","1:13612:54677","1:13615:54678","1:13618:2101","1:13622:2059","1:13626:54343","1:13629:13889","1:13632:54671","1:13635:57546","1:13638:57547","1:13641:54673","1:13644:54675","1:13647:57548","1:13650:57549","1:13653:1764","1:13656:57550","1:13659:57551","1:13662:57552","1:13665:57553","1:13667:57554","1:13669:57555","1:13671:57556","1:13672:57557","1:13673:57558","1:13676:57559","1:13679:33715","1:13682:54679","1:13685:57560","1:13688:57561","1:13691:57562","1:13694:2644","1:13696:2958","1:13697:54588","1:13698:54589","1:13699:54590","1:13700:57563","1:13702:3027","1:13703:57564"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:38:1578":{"id":"0:38:1578","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[167,0],"end":[179,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"kind":"macro","inner":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"},"1:3411:1960":{"id":"1:3411:1960","crate_id":1,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3413:181","1:3414:1233"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:23629:28358":{"id":"1:23629:28358","crate_id":1,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23630:51514","1:23631:51513","1:23632:51515"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialOrd","id":"1:23624:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3384:1954":{"id":"1:3384:1954","crate_id":1,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3386:1103"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13653:1764":{"id":"1:13653:1764","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"`DoubleEndedIterator`":"1:8591:120","prim@char":"4:15986:1737","str::matches":"4:15992:1742","self::pattern":"1:13202:2427"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"1:49795:2756","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13212:2428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3417:1961":{"id":"1:3417:1961","crate_id":1,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3419:181","1:3420:1236"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6461:2972":{"id":"4:6461:2972","crate_id":4,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6462:3334","4:6463:3335","4:6464:54125","4:6465:54126","4:6467:54130","4:6469:54127","4:6470:54128","4:6472:54129"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"4:10589:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3182:227":{"id":"1:3182:227","crate_id":1,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3184:127","1:3185:1416"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6113:55743":{"id":"5:6113:55743","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"4:15992:1742"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6092:2885":{"id":"5:6092:2885","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13212:2428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13671:57556":{"id":"1:13671:57556","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13644:54675":{"id":"1:13644:54675","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"str::splitn":"4:15992:1742","prim@char":"4:15986:1737","self::pattern":"1:13202:2427"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"1:49713:2723","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13212:2428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13212:2428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13227:2426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3352:1946":{"id":"1:3352:1946","crate_id":1,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3354:181","1:3355:558"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3740:1973":{"id":"1:3740:1973","crate_id":1,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3742:52698"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13676:57559":{"id":"1:13676:57559","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"1:13202:2427","prim@char":"4:15986:1737"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13212:2428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3812:1978":{"id":"1:3812:1978","crate_id":1,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9408:2041":{"id":"1:9408:2041","crate_id":1,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13656:57550":{"id":"1:13656:57550","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"str::matches":"4:15992:1742","self::pattern":"1:13202:2427","`DoubleEndedIterator`":"1:8591:120","prim@char":"4:15986:1737"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"1:49813:2757","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13212:2428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13212:2428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13227:2426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3401:1957":{"id":"1:3401:1957","crate_id":1,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3403:181","1:3404:353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13672:57557":{"id":"1:13672:57557","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4051:2470":{"id":"1:4051:2470","crate_id":1,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4052:56927"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5837:3363":{"id":"5:5837:3363","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5839:181","5:5840:14403"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:4748:3054":{"id":"4:4748:3054","crate_id":4,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4749:54339","4:4750:54340","4:4751:54342","4:4753:3053","4:4754:54341","4:4756:54343","4:4757:3716"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Read","id":"4:4666:3000","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:5669:2967":{"id":"4:5669:2967","crate_id":4,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5670:54318","4:5671:3454"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"4:10589:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13579:57540":{"id":"1:13579:57540","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13669:57555":{"id":"1:13669:57555","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13697:54588":{"id":"1:13697:54588","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3396:1956":{"id":"1:3396:1956","crate_id":1,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3398:181","1:3399:351"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13688:57561":{"id":"1:13688:57561","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"1:13202:2427","prim@char":"4:15986:1737"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13212:2428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10723:2488":{"id":"1:10723:2488","crate_id":1,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10724:146","1:10725:13680","1:10726:51061"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"src/inline_lazy.rs","begin":[16,0],"end":[16,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"import","inner":{"source":"self::std::sync::ONCE_INIT","name":"ONCE_INIT","id":"4:8939:1712","glob":false}},"1:10390:2267":{"id":"1:10390:2267","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10391:1533","1:10392:51462","1:10394:51463"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13608:14308":{"id":"1:13608:14308","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"1:49883:2762","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13578:2060":{"id":"1:13578:2060","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2888:104":{"id":"1:2888:104","crate_id":1,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2889:408","1:2890:410"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6418:223":{"id":"5:6418:223","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6419:1397"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3423:1962":{"id":"1:3423:1962","crate_id":1,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3425:352"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13662:57552":{"id":"1:13662:57552","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"`DoubleEndedIterator`":"1:8591:120","prim@char":"4:15986:1737","self::pattern":"1:13202:2427","str::match_indices":"4:15992:1742"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"1:49759:2754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13212:2428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13212:2428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13227:2426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13600:54662":{"id":"1:13600:54662","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"4:15992:1742"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3364:1948":{"id":"1:3364:1948","crate_id":1,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3365:181","1:3366:913"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6709:2989":{"id":"4:6709:2989","crate_id":4,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6710:56817","4:6711:54252","4:6712:54253","4:6713:54255","4:6714:54254","4:6715:54256","4:6716:54257","4:6717:54259","4:6718:54260","4:6719:54263","4:6720:54264","4:6721:54265","4:6722:54266","4:6723:54267","4:6724:54268","4:6725:54261","4:6726:54262"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13577:793":{"id":"1:13577:793","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:15986:1737"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:783:222":{"id":"5:783:222","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:784:2127","5:785:2128","5:786:2129"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2957:177":{"id":"1:2957:177","crate_id":1,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2958:415","1:2959:2105","1:2960:2106","1:2961:2126"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2926:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2967:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:6883:2974":{"id":"4:6883:2974","crate_id":4,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6884:54539"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13587:304":{"id":"1:13587:304","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"4:16003:1751","str::as_mut_ptr":"4:15992:1742"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3516:1867":{"id":"1:3516:1867","crate_id":1,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3517:578"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6110:58202":{"id":"5:6110:58202","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13580:57541":{"id":"1:13580:57541","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3169:74":{"id":"1:3169:74","crate_id":1,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3171:2052"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3274:1865","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:13591:50892":{"id":"1:13591:50892","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:47628:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47628:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:11082:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11082:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10449:2272":{"id":"1:10449:2272","crate_id":1,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10450:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6483:3004":{"id":"4:6483:3004","crate_id":4,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6484:56781","4:6485:36628","4:6486:56782","4:6487:56783","4:6488:56784","4:6489:56785"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"4:10589:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13585:54237":{"id":"1:13585:54237","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12673:2914"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:22999:2573":{"id":"1:22999:2573","crate_id":1,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23000:51098","1:23001:1227","1:23002:1228","1:23003:51099","1:23004:51100","1:23005:51101","1:23006:51102","1:23007:51103","1:23008:51104","1:23009:51105"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"1:23012:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4000:68":{"id":"1:4000:68","crate_id":1,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4001:1429"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"1:3347:1947":{"id":"1:3347:1947","crate_id":1,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3349:181","1:3350:892"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13618:2101":{"id":"1:13618:2101","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"prim@char":"4:15986:1737","self::pattern":"1:13202:2427","`None`":"1:47628:176"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47628:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13212:2428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5757:2988":{"id":"4:5757:2988","crate_id":4,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5758:54050","4:5759:54275"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13601:2783":{"id":"1:13601:2783","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:15986:1737"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"1:49561:2743","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6111:58203":{"id":"5:6111:58203","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:8368:216","`Box<str>`":"5:432:1870"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1870","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8113:3369","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13626:54343":{"id":"1:13626:54343","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"`DoubleEndedIterator`":"1:8591:120","str::split_whitespace":"4:15992:1742","prim@char":"4:15986:1737","str::rsplit":"4:15992:1742","self::pattern":"1:13202:2427"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"1:49591:2715","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13212:2428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13682:54679":{"id":"1:13682:54679","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:15986:1737","self::pattern":"1:13202:2427"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47628:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13212:2428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13212:2428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13227:2426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3559:1976":{"id":"1:3559:1976","crate_id":1,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3561:237","1:3562:206","1:3563:51748"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6091:58199":{"id":"5:6091:58199","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1870","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8113:3369","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1870","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8113:3369","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3525:132":{"id":"1:3525:132","crate_id":1,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3527:181","1:3528:378"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13696:2958":{"id":"1:13696:2958","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13694:2644":{"id":"1:13694:2644","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"1:13141:2349","FromStr::Err":"1:13141:2349"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47753:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"1:13141:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:13141:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3380:1952":{"id":"1:3380:1952","crate_id":1,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3382:559"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3581:1968":{"id":"1:3581:1968","crate_id":1,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3583:754"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3274:1865","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Index","id":"1:3577:1967","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13595:50894":{"id":"1:13595:50894","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:11082:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11082:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:8547:151":{"id":"1:8547:151","crate_id":1,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8548:2064","1:8549:2065","1:8550:768"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6112:3076":{"id":"5:6112:3076","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3342:1950":{"id":"1:3342:1950","crate_id":1,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3344:181","1:3345:1355"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:7819:3215":{"id":"4:7819:3215","crate_id":4,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:7820:56897"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5797:2990":{"id":"4:5797:2990","crate_id":4,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5798:54321","4:5799:54322","4:5800:54323","4:5801:54324"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2863:97":{"id":"1:2863:97","crate_id":1,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2865:1727"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3274:1865","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:13679:33715":{"id":"1:13679:33715","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"1:13202:2427","prim@char":"4:15986:1737"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47628:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13212:2428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5749:2987":{"id":"4:5749:2987","crate_id":4,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5750:54050","4:5751:54499","4:5752:54500"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5763:2989":{"id":"4:5763:2989","crate_id":4,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5764:56187","4:5765:56188","4:5766:54050","4:5767:56189","4:5768:3334","4:5769:3335","4:5770:56190","4:5771:1304","4:5772:56191","4:5773:56192","4:5774:56193","4:5775:56194","4:5776:56195","4:5777:56196","4:5778:56197","4:5779:56198"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:20:1713":{"id":"0:20:1713","crate_id":0,"name":"Lazy","span":{"filename":"src/inline_lazy.rs","begin":[19,0],"end":[19,48]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3281:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"1:2967:184":{"id":"1:2967:184","crate_id":1,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2969:997","1:2970:826","1:2971:792","1:2972:713","1:2973:696"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3274:1865","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2921:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3358:1949":{"id":"1:3358:1949","crate_id":1,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3360:181","1:3361:1102"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13615:54678":{"id":"1:13615:54678","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:15986:1737","self::pattern":"1:13202:2427"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13212:2428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13212:2428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13227:2426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13141:2349":{"id":"1:13141:2349","crate_id":1,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13142:126","1:13143:51808"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10459:2265":{"id":"1:10459:2265","crate_id":1,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10460:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:14325:141":{"id":"1:14325:141","crate_id":1,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:14326:277","1:14327:518","1:14328:280","1:14329:1079"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13647:57548":{"id":"1:13647:57548","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47628:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13212:2428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:4723:2267":{"id":"4:4723:2267","crate_id":4,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4724:1765","4:4725:57028","4:4727:57029","4:4728:3639","4:4729:57030","4:4730:57031","4:4731:51463","4:4740:2090"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:4666:3000":{"id":"4:4666:3000","crate_id":4,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4667:2886","4:4668:56263","4:4670:56264","4:4671:56265","4:4672:3048","4:4673:56266","4:4674:54307","4:4676:56267","4:4677:2090","4:4678:3161","4:4679:2072","4:4681:2084"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8071:2467":{"id":"1:8071:2467","crate_id":1,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8072:51985","1:8073:51986","1:8074:51990","1:8075:51988","1:8076:51987","1:8077:51991","1:8078:51989"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2888:104","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2967:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13926:138":{"id":"1:13926:138","crate_id":1,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13927:181","1:13928:1013"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5008:3008":{"id":"4:5008:3008","crate_id":4,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5009:2629","4:5010:56761"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8748:157":{"id":"1:8748:157","crate_id":1,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8749:2064","1:8750:922","1:8751:2066","1:8754:2067","1:8755:495","1:8757:2068","1:8760:2069","1:8761:2070","1:8762:2071","1:8763:2072","1:8765:2073","1:8767:2074","1:8768:2075","1:8770:841","1:8773:2076","1:8780:2077","1:8782:2078","1:8785:2079","1:8786:2080","1:8787:2081","1:8789:2082","1:8791:2083","1:8794:1308","1:8795:2084","1:8796:2085","1:8800:2086","1:8803:2087","1:8804:2088","1:8805:2089","1:8807:2090","1:8808:1875","1:8810:2091","1:8813:2092","1:8815:2093","1:8825:2094","1:8840:2095","1:8842:2096","1:8846:2097","1:8855:2098","1:8858:2099","1:8860:2100","1:8863:276","1:8870:294","1:8877:2101","1:8884:2102","1:8893:2103","1:8903:1014","1:8910:2104","1:8917:2105","1:8918:2106","1:8919:2107","1:8931:2108","1:8938:2109","1:8950:2110","1:8957:2111","1:8958:2112","1:8963:2113","1:8966:2114","1:8969:2115","1:8970:2116","1:8972:2117","1:8974:2118","1:8976:415","1:8979:2119","1:8982:997","1:8985:2120","1:8988:604","1:8991:2121","1:8994:907","1:8996:826","1:8998:792","1:9000:713","1:9002:696","1:9004:2122","1:9005:2123","1:9013:2124"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:0:1578":{"id":"0:0:1578","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[215,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\n# #[macro_use]\n# extern crate lazy_static;\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.4.0\")]","#![no_std]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:39:1584","0:41:1585","0:38:1578"],"is_stripped":false}},"1:9028:2328":{"id":"1:9028:2328","crate_id":1,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8748:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13673:57558":{"id":"1:13673:57558","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:15986:1737","self::pattern":"1:13202:2427"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13212:2428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13212:2428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:13232:2431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23933:2342":{"id":"1:23933:2342","crate_id":1,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:23934:2340"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:23929:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"1:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13609:51344":{"id":"1:13609:51344","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:15986:1737","self::pattern":"1:13202:2427"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13212:2428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:2572:127":{"id":"4:2572:127","crate_id":4,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:2573:2843","4:2575:57217","4:2576:57218","4:2577:56927"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10440:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Display","id":"1:10447:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:12649:2951":{"id":"1:12649:2951","crate_id":1,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:12650:2064","1:12651:50989"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3269:211":{"id":"1:3269:211","crate_id":1,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4783:2397":{"id":"1:4783:2397","crate_id":1,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4784:2064","1:4785:53603","1:4786:2067"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10688:146":{"id":"1:10688:146","crate_id":1,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10689:652","1:10690:1765","1:10691:53304","1:10692:53305","1:10693:53306","1:10694:53307","1:10695:53308","1:10696:53309","1:10697:53310","1:10698:53311","1:10699:53312","1:10700:53313","1:10701:53314","1:10702:53315","1:10703:53316","1:10704:1533"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3372:1955":{"id":"1:3372:1955","crate_id":1,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3374:1356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5811:2992":{"id":"4:5811:2992","crate_id":4,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5812:56163"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"4:10589:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10457:189":{"id":"1:10457:189","crate_id":1,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10458:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3279:106":{"id":"1:3279:106","crate_id":1,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2888:104","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13607:57545":{"id":"1:13607:57545","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"1:49855:2759","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13604:14279":{"id":"1:13604:14279","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"4:15992:1742"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"1:49865:2760","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13588:54642":{"id":"1:13588:54642","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:16003:1751"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6095:58200":{"id":"5:6095:58200","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13212:2428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13685:57560":{"id":"1:13685:57560","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"1:13202:2427","prim@char":"4:15986:1737"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13212:2428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13212:2428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13227:2426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:22910:2335":{"id":"1:22910:2335","crate_id":1,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:22911:2340","1:22912:51098","1:22913:51499","1:22914:51500","1:22915:51501","1:22916:39517","1:22917:51502","1:22918:51503","1:22919:51504","1:22920:51505","1:22921:51506","1:22922:51507","1:22923:51508","1:22924:51509","1:22925:51510","1:22926:51511","1:22927:51142","1:22928:51512","1:22929:51513","1:22930:51514","1:22931:51515","1:22932:51099","1:22933:51100","1:22934:51101","1:22935:51102"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"1:23012:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:9035:2466":{"id":"1:9035:2466","crate_id":1,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Step","id":"1:8071:2467","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3166:75":{"id":"1:3166:75","crate_id":1,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3168:305"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3274:1865","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:3337:1945":{"id":"1:3337:1945","crate_id":1,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3339:181","1:3340:265"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2866:2416":{"id":"1:2866:2416","crate_id":1,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2868:50611"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3274:1865","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2863:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10453:2274":{"id":"1:10453:2274","crate_id":1,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10454:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3492:116":{"id":"1:3492:116","crate_id":1,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3493:221","1:3494:543"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:11082:214":{"id":"1:11082:214","crate_id":1,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:11084:181","1:11085:1583","1:11086:50892","1:11087:50893","1:11088:50894","1:11089:753","1:11090:754"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3274:1865","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:11073:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:5741:2986":{"id":"4:5741:2986","crate_id":4,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5742:57148","4:5743:57150","4:5744:57149","4:5745:57151"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10461:2276":{"id":"1:10461:2276","crate_id":1,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10462:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5819:2985":{"id":"4:5819:2985","crate_id":4,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5820:54050"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6098:58201":{"id":"5:6098:58201","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3389:1959":{"id":"1:3389:1959","crate_id":1,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3390:181","1:3391:952"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10440:109":{"id":"1:10440:109","crate_id":1,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10441:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3277:218":{"id":"1:3277:218","crate_id":1,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3519:130":{"id":"1:3519:130","crate_id":1,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3521:376"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3522:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13605:14317":{"id":"1:13605:14317","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"4:15992:1742"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"1:49874:2761","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13606:3716":{"id":"1:13606:3716","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"1:49845:2758","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3717:1971":{"id":"1:3717:1971","crate_id":1,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3274:1865","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3648:1970","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6114:55744":{"id":"5:6114:55744","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"4:15992:1742"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9031:2331":{"id":"1:9031:2331","crate_id":1,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8748:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10455:2275":{"id":"1:10455:2275","crate_id":1,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10456:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3440:1966":{"id":"1:3440:1966","crate_id":1,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3442:1237"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5675:2965":{"id":"4:5675:2965","crate_id":4,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5676:4111","4:5677:54237"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"4:10589:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13635:57546":{"id":"1:13635:57546","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:13202:2427","str::split":"4:15992:1742","`DoubleEndedIterator`":"1:8591:120","str::rsplit_terminator":"4:15992:1742","prim@char":"4:15986:1737"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"1:49641:2749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13212:2428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3310:1866":{"id":"1:3310:1866","crate_id":1,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3178:228":{"id":"1:3178:228","crate_id":1,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3180:127","1:3181:1417"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:9367:3007":{"id":"4:9367:3007","crate_id":4,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:9368:56879","4:9369:56880","4:9370:56881","4:9371:56882","4:9372:56883","4:9373:28738","4:9374:56878"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"4:10589:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10678:142":{"id":"1:10678:142","crate_id":1,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10679:715","1:10681:53680"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13603:3161":{"id":"1:13603:3161","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"1:49577:2745","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13698:54589":{"id":"1:13698:54589","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2921:183":{"id":"1:2921:183","crate_id":1,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2923:604","1:2924:907"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3274:1865","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:13599:54661":{"id":"1:13599:54661","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"4:15992:1742"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13586:57543":{"id":"1:13586:57543","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:3775:1895":{"id":"1:3775:1895","crate_id":1,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3274:1865","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:23248:28339":{"id":"1:23248:28339","crate_id":1,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23249:50854","1:23250:50855","1:23251:50856"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:23241:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13622:2059":{"id":"1:13622:2059","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"1:13202:2427","`None`":"1:47628:176","prim@char":"4:15986:1737"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47628:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13212:2428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13212:2428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13227:2426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3734:137":{"id":"1:3734:137","crate_id":1,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3736:687"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"1:3729:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13589:1583":{"id":"1:13589:1583","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:47628:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47628:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:11082:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11082:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3247:115":{"id":"1:3247:115","crate_id":1,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3248:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13597:3158":{"id":"1:13597:3158","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"str::slice_mut_unchecked":"4:15992:1742","`str`":"4:15992:1742","crate::ops::Index":"1:3577:1967"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:13232:2431":{"id":"1:13232:2431","crate_id":1,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13227:2426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3435:1965":{"id":"1:3435:1965","crate_id":1,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3437:1234"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3522:131":{"id":"1:3522:131","crate_id":1,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3524:377"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3525:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3281:220":{"id":"1:3281:220","crate_id":1,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3274:1865":{"id":"1:3274:1865","crate_id":1,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:23099:2345":{"id":"1:23099:2345","crate_id":1,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:23089:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13632:54671":{"id":"1:13632:54671","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"prim@char":"4:15986:1737","str::split":"4:15992:1742","`DoubleEndedIterator`":"1:8591:120","self::pattern":"1:13202:2427"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"1:49609:2719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13212:2428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13212:2428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13227:2426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2926:124":{"id":"1:2926:124","crate_id":1,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2921:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13593:50893":{"id":"1:13593:50893","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:11082:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11082:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:14401:2482":{"id":"1:14401:2482","crate_id":1,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:14402:53476","1:14403:53477","1:14404:53478","1:14405:53479","1:14406:53480","1:14407:53481","1:14408:2090"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4:1567":{"id":"0:4:1567","crate_id":0,"name":"lazy","span":{"filename":"src/inline_lazy.rs","begin":[8,0],"end":[57,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(not(feature = \"spin_no_std\"))]","#[path = \"inline_lazy.rs\"]","#[doc(hidden)]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:17","0:20:1713"],"is_stripped":true}},"1:10447:119":{"id":"1:10447:119","crate_id":1,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10448:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13602:2456":{"id":"1:13602:2456","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:15986:1737"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"1:49567:2744","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3406:1958":{"id":"1:3406:1958","crate_id":1,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3408:181","1:3409:356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6811:2970":{"id":"4:6811:2970","crate_id":4,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6812:54518","4:6813:56176"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"4:10589:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13212:2428":{"id":"1:13212:2428","crate_id":1,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13214:2430","1:13215:53437","1:13216:53442","1:13217:53438","1:13218:53440","1:13219:53439","1:13220:53441"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5807:2991":{"id":"4:5807:2991","crate_id":4,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5808:56188"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6814:2972":{"id":"4:6814:2972","crate_id":4,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6815:54306"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"4:10589:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3104:2425":{"id":"1:3104:2425","crate_id":1,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:3103:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:6885:2976":{"id":"4:6885:2976","crate_id":4,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6886:56488"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13650:57549":{"id":"1:13650:57549","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47628:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13212:2428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13212:2428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13227:2426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6983:2973":{"id":"4:6983:2973","crate_id":4,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6984:56771"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8506:2369":{"id":"1:8506:2369","crate_id":1,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8508:2117"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13702:3027":{"id":"1:13702:3027","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"4:15986:1737"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"1:49899:2764","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13641:54673":{"id":"1:13641:54673","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"1:13202:2427","prim@char":"4:15986:1737","str::rsplitn":"4:15992:1742"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"1:49695:2722","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13212:2428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13638:57547":{"id":"1:13638:57547","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:13202:2427","str::split_terminator":"4:15992:1742","str::split":"4:15992:1742","prim@char":"4:15986:1737"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"1:49659:2750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13212:2428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13212:2428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13227:2426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8591:120":{"id":"1:8591:120","crate_id":1,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8592:2054","1:8593:2055","1:8594:2056","1:8595:2057","1:8599:2058","1:8602:2059"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8748:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:6581:2959":{"id":"4:6581:2959","crate_id":4,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6582:56810","4:6583:56811"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5833:3365":{"id":"5:5833:3365","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5835:181","5:5836:432"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3274:1865","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:22963:2597":{"id":"1:22963:2597","crate_id":1,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:22964:2340","1:22965:51098","1:22966:1227","1:22967:1228","1:22968:39517","1:22969:51138","1:22970:51139","1:22971:51140","1:22972:51141","1:22973:51142","1:22974:51099","1:22975:51100","1:22976:51101","1:22977:51102","1:22978:51103","1:22979:51104","1:22980:51105"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"1:23012:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13691:57562":{"id":"1:13691:57562","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"1:13202:2427","prim@char":"4:15986:1737"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13212:2428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13212:2428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13227:2426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9407:2042":{"id":"1:9407:2042","crate_id":1,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13612:54677":{"id":"1:13612:54677","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"1:13202:2427","prim@char":"4:15986:1737"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13212:2428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13667:57554":{"id":"1:13667:57554","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3505:1896":{"id":"1:3505:1896","crate_id":1,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3506:545"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Deref","id":"1:3492:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3427:1963":{"id":"1:3427:1963","crate_id":1,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3429:354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13629:13889":{"id":"1:13629:13889","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:15986:1737","self::pattern":"1:13202:2427"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"1:12994:2716","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13212:2428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13227:2426":{"id":"1:13227:2426","crate_id":1,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:13229:2054","1:13230:51970","1:13231:51971"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Searcher","id":"1:13221:2430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13221:2430":{"id":"1:13221:2430","crate_id":1,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:13223:2449","1:13224:922","1:13225:50808","1:13226:50809"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:4741:3051":{"id":"4:4741:3051","crate_id":4,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4742:56943","4:4743:36478","4:4744:56944","4:4745:56945"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3172:149":{"id":"1:3172:149","crate_id":1,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3174:2053"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:23296:2524":{"id":"1:23296:2524","crate_id":1,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdElement","id":"1:23933:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"1:23287:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13699:54590":{"id":"1:13699:54590","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3278:217":{"id":"1:3278:217","crate_id":1,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3431:1964":{"id":"1:3431:1964","crate_id":1,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3433:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13703:57564":{"id":"1:13703:57564","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"4:15986:1737"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"1:49908:2765","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10451:2273":{"id":"1:10451:2273","crate_id":1,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10452:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:41:1585":{"id":"0:41:1585","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[213,0],"end":[215,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["lazy",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"LazyStatic","id":"0:39:1584","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}}},"paths":{"1:32469:2628":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:11335:4130":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:53277:2563":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:9240:4097":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:10530:44159":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:4157:4192":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"4:12242:1918":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:11282:43955":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"4:9885:4362":{"crate_id":4,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"1:49561:2743":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"18:645:4227":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"4:13420:3326":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:5208:1891":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:4716:42923":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"12:0:1795":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"17:13584:49984":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"5:8345:3453":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:11628:44681":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:1531:37638":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:12673:2914":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"12:1162:3666":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:3178:228":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:49713:2723":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"4:9757:3306":{"crate_id":4,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"12:353:4437":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:46588:100":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:9407:2042":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:10461:2276":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:6656:4063":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:5260:40386":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:46408:2764":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:510:43926":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:57756:51713":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"5:8137:3096":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"5:8462:3403":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"5:3894:3477":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:12634:48904":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:12237:48816":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:46824:2366":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:4148:39775":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"5:8210:2065":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:11754:44860":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"7:38:41484":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"5:1215:3492":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:4509:39811":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"5:8153:57337":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:48950:146":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:49855:2759":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:6243:40842":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"16:4628:42907":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"18:621:60390":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"5:994:3483":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:3933:39751":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"4:1518:3103":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"18:729:60386":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"5:1011:2629":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:51250:2547":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:13141:2349":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"12:952:3103":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:47685:2065":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"17:9826:4142":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:3406:1958":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"4:12087:54100":{"crate_id":4,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"4:1415:2629":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:6643:4062":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:24338:5076":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"4:15041:3226":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"4:11445:3333":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:12026:48740":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:5405:40419":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"4:7816:3213":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"9:157:3552":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"1:3275:1894":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"16:6407:3845":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:5293:40411":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"9:963:3600":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:49641:2749":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:10723:2488":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"11:46:59487":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"14:11:42231":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:10660:44165":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"6:545:36754":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"5:4215:3096":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"9:27:3584":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"17:10147:44018":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"4:6581:2959":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"4:7687:3206":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"1:51635:2561":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"0:38:1578":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"1:24172:5042":{"crate_id":1,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"16:0:1798":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:13755:50032":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"4:6461:2972":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:47812:2065":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"6:565:36755":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:6129:40835":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"12:2412:59490":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:580:32467":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:11073:2338":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"16:6012:3766":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"12:1238:3669":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:11212:4162":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:48925:2492":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:13361:49931":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:521:36750":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"4:1507:3102":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:9988:44000":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:11433:44356":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"4:8313:3259":{"crate_id":4,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"1:2219:1050":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"5:3039:57415":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"4:15996:1744":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"17:9756:60362":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:4362:39794":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:46605:2830":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:5176:43167":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"18:694:4230":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"5:8302:3451":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"12:869:3096":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:53534:19783":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:5668:3825":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"5:5788:4320":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"4:10723:31198":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:6931:39942":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"5:3772:2630":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:4048:39762":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:3269:211":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:24193:2651":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"5:8390:3378":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:14122:51627":{"crate_id":1,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"4:15990:1740":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"5:2553:3498":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"16:7264:194":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"5:3839:4320":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:46555:2937":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"6:1680:37653":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:4410:39800":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:3007:4028":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"6:4081:39767":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"18:811:4216":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:13539:49979":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:5229:40407":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:6097:37582":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:11769:44863":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:6035:3806":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"12:1121:3107":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:13212:2428":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:11068:4134":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"12:928:3098":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:12170:48811":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:4340:39791":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"16:3129:4039":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:10545:44160":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:4142:39774":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"4:11155:2745":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"17:11890:48629":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:50087:2440":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:46925:2380":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:45944:1977":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:48098:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"12:971:3104":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:46117:1969":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"16:6931:4072":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:12660:48906":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"4:9663:4451":{"crate_id":4,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"4:15993:1743":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"4:1075:3025":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:52229:2562":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:10422:44059":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:3358:1949":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:50008:2435":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"4:3736:3063":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:48402:2274":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:3896:39748":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:13817:50039":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:49874:2761":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:50165:2443":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:3278:217":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:51781:2541":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:5331:40414":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:9561:4136":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"6:5998:36630":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:47745:188":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"6:1544:37640":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:1455:1710":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"4:8997:1928":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:10459:2265":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:49890:2763":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:11381:44347":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:2508:2398":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:23933:2342":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:24979:164":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:13430:109":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:48395:2272":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"4:7465:185":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"1:12105:2738":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:11457:44357":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"16:5217:4018":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:1912:37796":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:50176:2444":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:13421:49962":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:39004:2395":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"12:1256:3109":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:4160:39776":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:50186:2445":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:6774:51496":{"crate_id":1,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"4:5990:3359":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"4:7653:3204":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"9:603:41714":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:13345:49602":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"4:3194:3269":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"17:2484:44048":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"4:1651:3109":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:12731:48916":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"4:12017:181":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"1:11466:2719":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:6979:41392":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:47846:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"4:12029:3210":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"1:5631:779":{"crate_id":1,"path":["core","iter"],"kind":"module"},"4:6003:3360":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:10440:109":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"17:13257:49532":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"16:3103:4040":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:48713:71":{"crate_id":1,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"5:4628:235":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:46451:2603":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"5:8183:3376":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:88:36372":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:5311:40413":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"4:12135:2065":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:51304:2568":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:14325:141":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:24284:5073":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:38941:2424":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:12883:2748":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"5:3336:3125":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"16:4316:42811":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:2310:3514":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:12770:48982":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:13938:50076":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:12646:48905":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:8748:157":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:6205:40839":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:53508:19781":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:10447:119":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"5:4443:2629":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:12360:48825":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:3166:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:56455:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:6034:33437":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"12:979:3105":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:10390:2267":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"4:2395:31184":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"4:6721:54265":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"4:12403:4445":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:46183:2497":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:49659:2750":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:4903:42966":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:11474:44572":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"4:10601:54279":{"crate_id":4,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"1:47930:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:11945:44166":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:9259:42311":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"5:1457:3108":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:5101:1886":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:53027:2539":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"5:1235:3493":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"16:3314:4015":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"12:2392:59492":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"5:2330:3494":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:12003:48683":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:2769:579":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"5:8128:3484":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:49176:2955":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:48014:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:46754:2359":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:52341:2550":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:13323:49600":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"4:11309:54245":{"crate_id":4,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"16:7090:3859":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"4:4748:3054":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"1:47140:11413":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:5516:4006":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"4:8498:202":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:10435:4104":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:12716:48915":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:22695:2478":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"12:2253:3106":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"6:1588:37645":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:47677:2630":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"16:5685:3826":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"4:5741:2986":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"19:0:994":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:5443:3817":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:13953:50081":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"16:3029:4029":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:9183:4133":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:10949:44221":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:13859:50048":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:11311:2715":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:53675:19790":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"16:4775:42934":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:4067:39765":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"5:4699:4325":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"5:8362:57339":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"14:216:42240":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:3169:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"16:6549:3785":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:11579:44643":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"4:7956:4448":{"crate_id":4,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"17:10899:44233":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"5:5875:4329":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"4:5811:2992":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"4:11223:3014":{"crate_id":4,"path":["std","net","ip","IpAddr"],"kind":"enum"},"4:0:1331":{"crate_id":4,"path":["std"],"kind":"module"},"12:2072:3127":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"5:2262:3495":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:51405:2548":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:10874:44134":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"4:10886:3290":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"12:2419:3116":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"5:3488:3097":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"6:6925:39941":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:3368:1951":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"4:12057:3212":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"16:4743:42926":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"18:739:60394":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:10455:2275":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"4:5797:2990":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:50306:2771":{"crate_id":1,"path":["core","str","LinesAnyMap"],"kind":"struct"},"18:849:4219":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:11142:43952":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"4:8512:3138":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"14:0:1796":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"4:8663:1914":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"18:611:4225":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:12674:48907":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:24388:2818":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:13369:49932":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"12:114:59496":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:9587:60353":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"17:10489:44061":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:13840:50042":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:48266:1913":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"5:8145:3485":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:13147:49440":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"5:2218:3425":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:46774:2361":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:12482:48833":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:10445:44060":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:10394:4169":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"12:2404:59489":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:53423:2566":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:4474:39808":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:47804:2630":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"17:12620:48903":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"9:809:3178":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"16:7208:3866":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"4:3351:3283":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"4:1190:4443":{"crate_id":4,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"17:13887:50072":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:3461:4037":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"4:11161:2715":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"6:1748:37660":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:8543:136":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"4:16006:1754":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"6:6671:41205":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:51924:51060":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:3525:132":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:7033:2367":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:3743:4185":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:5030:1879":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"17:11689:44740":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"5:6482:3096":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"4:1493:3099":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:6914:39940":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:52885:2571":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:53583:19786":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:13221:2430":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:48652:133":{"crate_id":1,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"6:4277:39784":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:13233:49529":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:8510:2368":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:4218:39780":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"4:3682:3056":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:47122:11412":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:12209:48814":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:11102:43950":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"16:7200:3786":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:11968:48636":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"5:6418:223":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"4:14617:118":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"9:1056:3595":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:10595:51696":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:49390:2727":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:12649:2951":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"4:16000:1748":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"1:46792:51322":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:10253:4096":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:13529:49978":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:4008:44135":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:11234:4160":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:13452:49967":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:10240:4093":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:14:1765":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:46156:2468":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"8:0:1791":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:10455:4140":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"5:4242:4320":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"4:1488:3098":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"4:14601:129":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:12959:2755":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"4:8434:3476":{"crate_id":4,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"4:2937:179":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:50039:2439":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"18:857:4220":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"16:6089:3836":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"5:69:3402":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:13227:2426":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"15:248:3689":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:12070:48747":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:6873:2038":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:5605:2414":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"16:7141:3864":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:10048:44019":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:9646:60354":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"18:720:51718":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:11031:43949":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"5:8368:216":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:12758:48979":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:23099:2345":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:4315:39788":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:13595:49990":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:22708:51725":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"17:9361:43937":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:56429:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:9004:43931":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:4271:42790":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"4:9198:54286":{"crate_id":4,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"1:3581:1968":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:10571:4191":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:53488:19779":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:12585:48853":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:50022:2438":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:46904:2378":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:45917:1979":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"11:54:3656":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"16:547:4008":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"12:1703:3681":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:2863:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"16:5639:3823":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"1:3505:1896":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:5784:3830":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:11354:2716":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"16:7449:3777":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:2292:2516":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"16:6980:3855":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:612:36761":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:5447:40424":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:9911:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:12957:49377":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:12417:48828":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"4:7356:186":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"4:11534:3168":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"5:3951:3097":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"4:10690:3110":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:48409:2275":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:11591:44644":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"4:15115:3219":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:626:36763":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:2397:1897":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"4:6723:54267":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:10407:4168":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"4:16002:1750":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"1:4051:2470":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"1:10678:142":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:50488:4457":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"4:12281:3226":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"5:1644:3095":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:56046:2505":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"4:4512:3070":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:51494:2525":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:10451:2273":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"4:8932:1711":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"1:53215:2543":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:3274:1865":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"16:2839:4024":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:10136:43945":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:52529:2527":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:22999:2573":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:51356:2560":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:13926:138":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"5:1843:4320":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"4:10861:129":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"1:49172:2956":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:11181:43954":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:4728:2419":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"16:5998:3738":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"18:651:4224":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:47660:2064":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"4:696:3232":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"4:2159:2065":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"6:4332:39790":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"4:4397:3297":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"16:7684:3779":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"4:5974:3356":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"4:11105:3050":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"16:6050:3835":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"4:2171:3124":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:11002:44245":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"4:10390:43928":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:13481:49970":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:4346:39792":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"12:2059:3125":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:32831:2592":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"4:7141:33439":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"4:14568:2998":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"5:3300:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:10464:4139":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"9:900:41637":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"4:6883:2974":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"5:6679:1912":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:10775:44133":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:4:979":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"4:11174:3010":{"crate_id":4,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"17:13180:49485":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:11907:48630":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"4:4723:2267":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"1:11545:2722":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"4:12247:1919":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:5419:40420":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"4:15984:1735":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"1:3279:106":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"4:15465:54270":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"1:46884:2376":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"4:11439:3313":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:12469:48832":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:3743:42358":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:46435:2601":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:46541:2935":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"17:13472:49969":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:11810:44878":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:24249:2646":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:8547:151":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:7295:3774":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:9033:43932":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:4230:39781":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:4351:42822":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:4020:39759":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"0:39:1584":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"1:51803:2544":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:24400:2817":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"4:15394:3319":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:7100:3860":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"4:10826:3268":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"4:15170:3152":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:294:60368":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:4256:39783":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:3907:39749":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:4942:42981":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:13129:49438":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:50114:2441":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:4803:42938":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:2981:4038":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:7025:3760":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:11305:43956":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"5:920:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"5:3375:3423":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:7121:3862":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"4:14926:4369":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:52465:2542":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"14:189:42231":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"4:12127:3136":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"4:15335:3311":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:10925:44243":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:11725:44851":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"5:7856:4340":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:7110:3861":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"5:1618:2065":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"5:8122:2065":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:4110:39770":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:5366:40415":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"16:6075:3768":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:5698:3827":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"4:2572:127":{"crate_id":4,"path":["std","error","Error"],"kind":"trait"},"6:6665:41204":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"4:8051:3259":{"crate_id":4,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"17:13961:50083":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:13557:49981":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:13404:49961":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:4740:2420":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:46176:2496":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"17:9948:43947":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:13094:49434":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"4:15456:35157":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"17:13565:49982":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:3775:1895":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:5247:40409":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:9517:2745":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:1764:37661":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"5:8379:3377":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:3384:1954":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"4:10707:31191":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"17:10058:4202":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:13232:2431":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:46574:2605":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"16:6310:3843":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:49399:2728":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"4:15009:3210":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"4:1619:3106":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:4379:39796":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"4:8762:1927":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:50375:2851":{"crate_id":1,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"1:53545:19784":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:5186:40403":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"4:9618:4358":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"5:5315:200":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:23624:2344":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:23287:2338":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"4:9491:56425":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:9064:43933":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"4:14948:4371":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:3729:224":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:9873:43945":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"4:15373:3312":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:5178:40402":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"5:3048:57416":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"5:3396:3127":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"16:6858:4069":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:46698:2355":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"4:10902:3064":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:11587:2725":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:50478:201":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"17:9706:43942":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"4:2162:3096":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:3389:1959":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"16:7741:3869":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:22723:51725":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"5:7831:4334":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:1733:3325":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:1567:37643":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:11286:2630":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"4:820:4362":{"crate_id":4,"path":["std","thread","local","os","Key"],"kind":"struct"},"4:10611:3241":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"6:3883:39747":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:5948:4023":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:6159:3771":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"9:722:3536":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"5:7627:3407":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:2905:4026":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:46745:2358":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:24946:167":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:13247:49531":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"4:7819:3215":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"4:15991:1741":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"4:14581:54066":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:9028:2328":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:53613:19788":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:48749:2271":{"crate_id":1,"path":["core","fmt","FlagV1"],"kind":"enum"},"5:8445:3097":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"1:0:488":{"crate_id":1,"path":["core"],"kind":"module"},"17:10516:44062":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:14017:187":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"16:7659:3868":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:11354:4129":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"4:4741:3051":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"4:14624:3050":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"5:8269:3117":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:3310:1866":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"4:12119:2629":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:11504:2720":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:4066:2474":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"1:48182:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:4127:39772":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"5:1663:3099":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"4:10476:4365":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"6:1551:37641":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:5238:42313":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"4:1302:143":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:13774:50034":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:32535:51905":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"12:466:59497":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:10453:2274":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"5:1472:3107":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:51374:50998":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:52259:2565":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:13917:50075":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:527:36751":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:6949:4073":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:24847:168":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:24913:166":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"12:2269:3107":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"4:15998:1746":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"16:3494:42314":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:46518:2934":{"crate_id":1,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"4:16010:1758":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"6:618:36762":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"6:6184:40838":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:46475:2939":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"4:4473:3074":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:22763:51954":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:6533:4056":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"16:3199:4032":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:4373:39795":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"4:13585:4452":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"16:5887:4013":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:4446:39805":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"15:230:3688":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:11713:44850":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"4:10700:3111":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"6:4296:39786":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"4:4394:3296":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"4:14232:3073":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:49501:2735":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"5:8257:3116":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:1606:37647":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:7281:3773":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:4464:39807":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:4434:39803":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"4:4732:56924":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:3492:116":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:46414:10727":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:586:36757":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"5:5415:3040":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:5855:3831":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"4:11463:2971":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:2792:3756":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:11985:48639":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:11393:2717":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"4:16003:1751":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"4:3339:3277":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"16:3770:42361":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"9:692:3535":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"5:1486:3109":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"12:1881:145":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"4:894:3236":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:5530:3820":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:46495:2933":{"crate_id":1,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"17:9716:60358":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"4:15986:1737":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"4:9087:1922":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"18:744:60389":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:49591:2715":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"12:1203:3668":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:5374:3813":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:14401:2482":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"18:169:50439":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:48941:2491":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"16:2772:4050":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"4:5982:3357":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"4:7951:3258":{"crate_id":4,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"18:896:4223":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:2866:2416":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:9291:43919":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:49813:2757":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:2926:124":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"17:13763:50033":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"16:5902:3832":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"9:234:3560":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"17:12143:48809":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"4:12080:54291":{"crate_id":4,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"4:16011:1759":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"16:2959:4027":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"7:85:41491":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"10:0:1793":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:7810:2073":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:13167:49484":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"12:764:2630":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"19:117:60395":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"1:23241:2338":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"12:940:3102":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"16:7471:3765":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:1712:37656":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:10211:44020":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"16:2813:4043":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:6679:4065":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"6:6688:41206":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:601:36759":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:52002:51026":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:13495:49972":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:3177:4031":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:3396:1956":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"4:2155:2629":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:23929:2338":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:12093:48748":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:6717:3853":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"4:15078:3148":{"crate_id":4,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:37761:178":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"6:3960:39752":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:46534:2763":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:6190:3841":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:49695:2722":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:4392:39798":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"5:5536:1912":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:9529:2428":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"6:3877:39746":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"4:12300:3227":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"18:790:4214":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"4:2934:180":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:47131:3079":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"4:14027:3208":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:49381:2726":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:4416:39801":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:6060:3807":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:5460:3818":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:4689:42920":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"4:7531:119":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"4:12189:3142":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:6250:40843":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:5745:3829":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:7369:3770":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:4075:39766":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:49430:2731":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:7184:4074":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:4975:42990":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"15:269:3693":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:3342:1950":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:7063:3857":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"5:374:3432":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:50219:2839":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"6:6214:40840":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"5:3970:4320":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:4516:39812":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:9087:43934":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"12:162:3670":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"5:1560:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"4:9790:4360":{"crate_id":4,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"4:15992:1742":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"12:2066:3126":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:11082:214":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:3287:1893":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"4:3658:4342":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:10598:44163":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:13352:49614":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"5:8316:2830":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"4:4300:3081":{"crate_id":4,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"16:5605:3822":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:13522:49977":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:12512:48835":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:3247:115":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:51272:2535":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:10390:4141":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:48691:127":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"4:2188:3127":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:634:36764":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:4242:39782":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"4:12252:1925":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:4467:42842":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:4055:39763":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:51705:2549":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"4:4471:3073":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:10988:44218":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:48661:67":{"crate_id":1,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"17:13377:49959":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:3746:1975":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:6277:3842":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"3:0:1787":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:49865:2760":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:49845:2758":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"5:6695:3435":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:46872:2375":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"4:1428:2630":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:6120:40834":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:5455:58838":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:6130:3838":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:2194:7584":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"5:3759:2629":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"4:15985:1736":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"18:678:142":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"4:9367:3007":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:46806:2363":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:24715:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:13073:49433":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"6:1669:37652":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:24649:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:49469:2732":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:5959:3759":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"6:1634:37650":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:12920:2751":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"4:10732:2356":{"crate_id":4,"path":["std","error","Chain"],"kind":"struct"},"1:23835:51723":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:28191:2501":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:8902:43929":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"4:4400:3298":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"4:10971:3199":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:5185:1890":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:24276:5055":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:46935:2321":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"5:4643:4325":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"9:41:3585":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"12:1147:3108":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:13440:49966":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"4:8505:3137":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"4:11489:2975":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:23093:2339":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"4:14942:4370":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"5:3748:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:6264:3407":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:9031:2331":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"4:11168:2758":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"6:1621:37648":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"4:11138:2356":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"17:8954:4135":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:57777:51697":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"1:2269:2511":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:7247:3801":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"4:8412:3178":{"crate_id":4,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"1:9408:2041":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:4005:39757":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:12687:48908":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:53499:19780":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:46835:2371":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"14:231:3380":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"9:749:3537":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"16:2733:3740":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:5378:40416":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"4:16004:1752":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"1:4965:1708":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:2921:183":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"18:668:4229":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:50338:2773":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:607:36760":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:49577:2745":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"12:1183:3667":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:49409:2729":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:50363:2850":{"crate_id":1,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"4:2456:4445":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"16:5412:3815":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:7415:3788":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:3337:1945":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"16:4198:42741":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"9:927:41603":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:10291:4124":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:48980:51711":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:1727:37658":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"5:7118:4334":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"6:1694:37654":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:5257:42311":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"4:15217:3160":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"4:11682:3183":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"1:4000:68":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:4783:2397":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"12:1784:4318":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:49795:2756":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:24225:5030":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"4:5819:2985":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"4:7756:3209":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"17:10093:4197":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:12282:48819":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:13029:49430":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"4:11365:3313":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:47888:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"12:472:59493":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"5:7264:4320":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:10851:44136":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"4:4510:3069":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:9035:2466":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:21:672":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"1:12943:2752":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:49567:2744":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"0:41:1585":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"17:0:1799":{"crate_id":17,"path":["object"],"kind":"module"},"13:0:1790":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:7768:3775":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:4179:39777":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"12:2280:3108":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"4:7999:4344":{"crate_id":4,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"17:13306:49599":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:50318:2775":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:9206:43936":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:9466:43940":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:46915:2379":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:46031:195":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"4:10684:30222":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:3104:2425":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"4:15987:1738":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"4:14563:54246":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:14289:201":{"crate_id":1,"path":["core","task","ready","Ready"],"kind":"struct"},"17:1236:44017":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:4321:39789":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:2187:578":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:49511:2736":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:5165:1889":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:32635:51944":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"1:47736:2130":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"12:432:3671":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"5:3038:2127":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:10104:4198":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:10115:4199":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:51559:2569":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:1626:37649":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:6135:40836":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:5111:1887":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"13:120:42186":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:48224:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"4:16005:1753":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"17:12892:49375":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:50314:2776":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:12543:48837":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:4061:39764":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"5:783:222":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:11409:44355":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"5:1091:4320":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"12:843:3094":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"4:12065:54284":{"crate_id":4,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"4:9651:4450":{"crate_id":4,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"4:6961:2978":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"4:11148:2379":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"4:11607:3179":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"5:8332:3452":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"5:5837:3363":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:4871:42958":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"12:1682:3680":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:10198:44014":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:10082:4196":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:51512:50999":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:3265:4035":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:24030:2798":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:3521:42315":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"12:2045:3097":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"4:9658:4359":{"crate_id":4,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"1:53385:2546":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:10975:44219":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"4:3325:3273":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:50496:190":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"9:996:3601":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"9:776:3582":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"16:5362:3812":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:3812:1978":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"4:15480:3697":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"4:5675:2965":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:6856:41365":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:53598:19787":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"4:10878:118":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:12431:48829":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"6:5210:40405":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:4840:42951":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"4:2793:3029":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"4:13566:31196":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"4:10838:3270":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"5:1635:3094":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:24781:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"4:16009:1757":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"6:3987:39602":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"5:1597:2629":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:32295:2866":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"4:2458:4446":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"16:5427:3816":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:50539:2787":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:23629:28358":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"4:14235:3069":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"12:777:2065":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:3411:1960":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:5941:3834":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"18:837:2430":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:50199:2838":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"4:2166:3097":{"crate_id":4,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"4:4080:127":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"4:6814:2972":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"18:637:60382":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"4:3192:128":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"12:2398:50854":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:4287:39785":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"14:194:42232":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"4:1642:3108":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:13941:150":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"9:1075:3603":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"4:4684:3049":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"4:11413:3010":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:8307:53238":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:3648:1970":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"18:136:50437":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:593:36758":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:46423:2600":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"16:5396:3814":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:10801:4188":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:56416:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:13155:49482":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"5:3341:3422":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:13735:49996":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:1576:37644":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:5034:1880":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"17:8929:43930":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"5:1685:194":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"4:10641:2260":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"1:48765:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:6514:2364":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"6:4012:39758":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"4:2027:145":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:12348:48824":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:11671:44684":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"4:5669:2967":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:11784:44864":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"4:1530:3105":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:5547:39662":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:11603:44679":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:13721:49995":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:3522:131":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:10610:44164":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:9786:43944":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"4:11693:3184":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:23248:28339":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:49330:2721":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:6908:39939":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:2937:4049":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:13331:49601":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"4:2397:31185":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"1:50330:2778":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:2754:4017":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"4:1501:3101":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"4:4032:3202":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"4:2183:3126":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:6153:40837":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:3966:39753":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:10831:4142":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"4:11676:2629":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"0:0:1578":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"17:9275:42310":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"5:6961:3371":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:56403:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:13428:49965":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:12302:48820":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:12383:48826":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:13976:51579":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:49741:2753":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"12:1666:3679":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:13549:49980":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:4116:39771":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:4135:39773":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:11168:43953":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"4:11624:3180":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"16:4439:42838":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"12:2040:3096":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:51457:2540":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:6943:39944":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:11573:2724":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:4921:1899":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"4:70:1492":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"4:10451:4363":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"5:3882:3064":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:9431:43939":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:5498:3819":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"4:11096:3080":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"1:46863:2374":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"5:8204:2065":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:299:60364":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:3243:4034":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:5301:40412":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"4:1472:3096":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:11314:4131":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:48628:67":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"6:5478:40425":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"12:1103:3106":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"5:3044:57414":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:321:205":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:3175:135":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"6:4208:39779":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:6591:2365":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:46815:2370":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:6482:4058":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:53137:2559":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:50151:2442":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:4356:39793":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:50310:2774":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"16:3051:4086":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"18:704:60382":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"4:15313:3017":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:5216:40406":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"18:774:60382":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"4:11420:3355":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"4:8939:1712":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"17:12196:48813":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:6691:3852":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:11262:2629":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:3352:1946":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"5:3040:57310":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"16:6331:3685":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"12:895:3658":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"1:51827:2526":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:9958:60370":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:10728:2490":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:48972:51721":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:46764:2360":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:3376:1953":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:32483:51946":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"1:3740:1973":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"18:801:4215":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:13196:49486":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:9160:4161":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:6518:3783":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:5156:1888":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"4:3341:3278":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"17:13747:50031":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:51204:2567":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"6:1600:37646":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:6027:40832":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"5:1195:58683":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:48388:2273":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:13785:50035":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:50322:2779":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:7792:3804":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:12994:2716":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:11797:44865":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:45991:196":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:12746:43956":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:3077:4087":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:11956:44167":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:1311:4203":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"4:15185:3153":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:1537:37639":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:11822:44879":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:4098:39769":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:53636:19789":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:10340:4173":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:24748:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"4:11376:3315":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"6:4532:39814":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:4885:1898":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:2512:4170":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"6:5433:40422":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"4:12742:4367":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:13215:49488":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:10586:44162":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:9636:43941":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"4:15997:1745":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"1:14228:2399":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"4:15107:54242":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"6:6643:36708":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:46593:2829":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"4:4434:3072":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:12496:48834":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:4493:39810":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:12157:48810":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:4088:39768":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:12318:48821":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:3172:149":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"4:10401:54308":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"4:2362:600":{"crate_id":4,"path":["std","env"],"kind":"module"},"4:3561:3060":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"4:1459:3095":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:4752:102":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"6:672:36793":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"16:2883:4044":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"5:6771:3040":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"5:1674:3100":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"9:686:3533":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"2:0:430":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"4:3200:3048":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"6:5982:37578":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"4:12257:1926":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"4:4607:3079":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"6:6937:39943":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"4:9163:1924":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:13281:49596":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"4:12262:3148":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"1:24261:2647":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"14:244:42233":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:47821:178":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:6342:3844":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"4:11209:3012":{"crate_id":4,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"12:379:3673":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"12:880:3097":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"17:12117:48807":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"6:4538:39815":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:6114:40833":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:24814:2668":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:13293:49598":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:51605:2557":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:13899:50073":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"9:0:1792":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:24322:5065":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"4:15059:54101":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:47694:2038":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"5:3329:2629":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"4:1633:3107":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:8616:1868":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:50342:121":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:46051:198":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"4:5749:2987":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:24209:53540":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"4:7639:3203":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"4:7310:54299":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:46853:2373":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:23298:2340":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"4:2177:3125":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"12:815:3100":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:10223:4102":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:7309:3772":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"16:7355:3769":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:49456:2355":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:47628:176":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"6:5204:40404":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:6604:3851":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"4:1041:2964":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"4:5952:3354":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:7238:3787":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"4:14096:4368":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"16:7637:3867":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:6896:39937":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:46723:2356":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"4:8827:162":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:10457:189":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"17:9796:60367":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"4:11089:3078":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"16:6026:3764":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:10028:44002":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:23089:2338":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:533:36752":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:14238:2788":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"16:3478:4036":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:10122:2701":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:13202:2427":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"17:10913:44242":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:9836:60360":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:12921:49376":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:3364:1948":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:11013:43948":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:10558:44161":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:53560:19785":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:13138:49439":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"4:12141:3139":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:12527:48836":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"4:4078:205":{"crate_id":4,"path":["std","io","error","Result"],"kind":"typedef"},"4:11329:54089":{"crate_id":4,"path":["std","net","parser","AddrKind"],"kind":"enum"},"17:13573:49983":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:49883:2762":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:3440:1966":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"4:15999:1747":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"1:53461:2531":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:2543:4138":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:12222:48815":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:46714:2354":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:56468:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:11530:44634":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"4:12205:3143":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:607:43927":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"5:8113:3369":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"4:1482:3097":{"crate_id":4,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"1:8556:1869":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"4:12173:3141":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:539:36753":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:3981:39755":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"14:47:42231":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:4526:39813":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:5288:40410":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"4:1438:2065":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"4:5008:3008":{"crate_id":4,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"1:22910:2335":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"16:2861:4025":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:12607:48902":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"15:0:1797":{"crate_id":15,"path":["addr2line"],"kind":"module"},"4:10590:3233":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"4:14795:31198":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"6:1740:37659":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"14:56:44357":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:4425:39802":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:3577:1967":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"17:11701:44741":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"6:4198:39778":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"4:13954:3209":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:50552:158":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"4:8670:1915":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"18:829:4218":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"18:0:1800":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:10166:44016":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:48679:107":{"crate_id":1,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"5:432:1870":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"4:12069:54061":{"crate_id":4,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"1:49993:2432":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"4:6221:3330":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:49759:2754":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:10127:4142":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"5:1694:3490":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:8323:1878":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"17:11256:43918":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"4:12160:3140":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:10962:44220":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:46073:197":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:681:43928":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:5240:40408":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:2283:2515":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:32435:2825":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"4:5085:3167":{"crate_id":4,"path":["std","net","ip","display_buffer","IpDisplayBuffer"],"kind":"struct"},"4:6983:2973":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:5426:40421":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"4:5398:3312":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:5303:3809":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:10443:109":{"crate_id":1,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"11:0:1794":{"crate_id":11,"path":["adler"],"kind":"module"},"1:23036:2343":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"4:12011:3208":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"1:53339:2528":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:13794:50038":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"4:3323:2510":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"17:13463:49968":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:1662:37651":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:5149:40358":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"4:1524:3104":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"4:8863:54286":{"crate_id":4,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"16:3908:42475":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:25381:2659":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:24880:165":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:49549:2351":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:6902:39938":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:4386:39797":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"5:2777:3497":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"4:11516:33440":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:3277:218":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:3576:42316":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"6:157:36438":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:52183:2558":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"4:13916:3207":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"4:4432:3071":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"18:766:60377":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:4454:39806":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:1704:37655":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:22740:51959":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"4:6885:2976":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:56442:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:11653:44683":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"5:8285:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"18:820:4217":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"4:11584:3178":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"16:7379:3790":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:12015:48739":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:8506:2369":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:3417:1961":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"4:3197:2886":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"1:7896:2319":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:22761:51956":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:46007:194":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"17:9920:43946":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:52105:2570":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"4:1157:30224":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"16:6504:3849":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"6:4308:39787":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"18:782:60382":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"4:15968:54065":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:46487:2765":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:11922:48631":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:3559:1976":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"5:5889:4332":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"6:0:798":{"crate_id":6,"path":["libc"],"kind":"module"},"4:16007:1755":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"16:4495:42846":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"5:8175:194":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"4:11117:3052":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"1:10688:146":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"5:792:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"5:7460:4320":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:6007:40830":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"4:5522:3319":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:10400:134":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"16:6468:3847":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:11563:44642":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"4:10589:2338":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"4:11467:33437":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:12455:48831":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:6595:3782":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:50326:2777":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"16:7826:2496":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:1558:37642":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"5:8167:2065":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:6490:3848":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:12406:48827":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:6099:3837":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"5:6659:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"16:5649:3824":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:4028:39760":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:23296:2524":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"4:9084:1921":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:46668:4374":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:51971:51022":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"4:15021:3211":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:5869:189":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"18:754:60380":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"4:13779:3217":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:12072:2737":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:11085:4164":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"12:750:2629":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"4:12228:1917":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:49908:2765":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"16:6173:3840":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:13975:50117":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:13708:49994":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:4660:42915":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"4:11425:3358":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"4:11666:3181":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"17:13016:49378":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"4:14593:3270":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"4:10821:3001":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"5:1441:3106":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"16:3686:42325":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:13515:49976":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:7323:3789":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"1:3103:2338":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"4:14310:2260":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:23823:2341":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"16:6381:3781":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"5:5833:3365":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:6229:40841":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:2062:3040":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:50531:2786":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:4270:3332":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"5:3362:3126":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:22742:51957":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:47106:11410":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:46621:2831":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:47796:2629":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"17:9539:4159":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:3401:1957":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:23152:2340":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:51334:2556":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"5:923:3482":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:10318:4142":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"4:7279:54299":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:10449:2272":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"5:4599:4323":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"1:51657:2564":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"4:10669:30219":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:49609:2719":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"16:7051:3856":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"12:559:143":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"4:783:4362":{"crate_id":4,"path":["std","thread","local","fast","Key"],"kind":"struct"},"16:6141:3839":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:46894:2377":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"4:1132:3030":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"4:5395:3311":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:3347:1947":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"12:2052:3124":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:49535:2834":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:6268:40844":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:10068:4121":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"4:8714:1916":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"5:2200:4322":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:4378:2065":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:7649:3408":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:8001:2418":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"16:4599:42902":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"12:399:3672":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:5584:11123":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"4:15211:3159":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"4:11197:3011":{"crate_id":4,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"4:8949:2258":{"crate_id":4,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"6:5390:40417":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:49491:2734":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"4:6811:2970":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:9131:43935":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:47669:2629":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:8071:2467":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"4:8404:3259":{"crate_id":4,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"1:53479:19778":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"4:7673:3205":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"1:47113:1711":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:2888:104":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"4:14229:3071":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"4:4666:3000":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"17:10266:4121":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:22963:2597":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"4:15957:30225":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"4:6343:3331":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"6:3972:39754":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:50334:2772":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:13278:2434":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"4:11371:3314":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:3519:130":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:47151:11415":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"4:15989:1739":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"12:787:3099":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"4:1446:3094":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:11431:2718":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"16:4381:42828":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:13271:49534":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"4:5763:2989":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:3423:1962":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:542:3744":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:3427:1963":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:3431:1964":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"4:8156:3259":{"crate_id":4,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"4:10848:2999":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"1:51160:51028":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"4:2594:54301":{"crate_id":4,"path":["std","error","from","StringError"],"kind":"struct"},"4:10894:3062":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:4485:39809":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:46548:2936":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"17:12442:48830":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"12:2032:2629":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"4:10976:3200":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"4:900:3237":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:48056:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:51180:51025":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:46783:2362":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"4:14543:2980":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"4:15736:4372":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:13612:49992":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"4:1149:30221":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"4:9742:3305":{"crate_id":4,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"17:12130:48808":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"5:0:277":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:5566:3821":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"12:183:3674":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"13:232:59498":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:24101:2801":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:11937:44168":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:12205:4380":{"crate_id":1,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"4:15033:54057":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:52495:2545":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:4402:39799":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:2314:4172":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:3380:1952":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:13037:49432":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:7169:3784":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:24682:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:3758:2264":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"4:10727:3501":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"1:9409:2040":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"4:15199:3154":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:49482:2733":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:4440:39804":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:24367:5075":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"4:4639:3040":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"16:5348:3811":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"4:1152:30223":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"4:12043:3211":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:6967:41391":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"5:7787:234":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:11742:44859":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:8591:120":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:12573:48839":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:46512:2764":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:47753:205":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"17:11494:44573":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:9579:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"6:5439:40423":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:49971:2429":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"5:1939:3097":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"16:3155:4030":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:48962:3178":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"17:10187:44015":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"4:6887:2977":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:11017:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"16:6907:3854":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"4:5757:2988":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:7702:3778":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:5974:36671":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"18:866:4221":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:10476:4143":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"4:10616:3257":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"1:51751:2537":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:48933:51705":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"4:16001:1749":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"4:11352:32834":{"crate_id":4,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"17:13873:50066":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:8849:4158":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:5488:40426":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:49899:2764":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:11615:44680":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:3340:4016":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:13660:49993":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:10937:44244":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"4:6709:2989":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:5408:2930":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"4:1497:3100":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"5:4515:3465":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"16:7721:3780":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:3920:39750":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:11514:44633":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:56481:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:11640:44682":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:2957:177":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:3516:1867":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:6557:3850":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:9746:43943":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"4:15952:56904":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"7:0:1481":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:10127:2702":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:2967:184":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:11130:43951":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"6:161:36439":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"5:7219:3096":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:52679:2551":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:53519:19782":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:10788:44132":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:51873:2530":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:48140:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:11559:2723":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"4:5880:3351":{"crate_id":4,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"1:46095:199":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"4:6719:54263":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"16:7754:3870":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:13908:50074":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"4:2751:3028":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"14:250:42239":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"18:885:4222":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:10015:44001":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"4:6104:3321":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"5:7386:2065":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"12:2036:2065":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:12183:48812":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:24301:5074":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:46736:2357":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"4:11263:3016":{"crate_id":4,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"16:7131:3863":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:4411:42834":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:7868:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:46235:2621":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:9676:60356":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:23012:2338":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:13602:49991":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"16:6433:3846":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:25012:2804":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:32475:2856":{"crate_id":1,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"6:1721:37657":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:51475:51021":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"4:15491:3697":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:5289:3767":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:12700:48914":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"18:661:4228":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:3372:1955":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:9326:4128":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"12:856:3095":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"6:513:36749":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"4:16008:1756":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"1:52025:51027":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"4:11280:3166":{"crate_id":4,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"17:10304:4127":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"6:4038:39761":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"9:1020:3602":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:13507:49975":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:6080:37579":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"4:14634:54091":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:3297:4088":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:46844:2372":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:14052:14407":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"4:13653:3196":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:5039:1881":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:10814:4189":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:50569:2487":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"16:6630:4061":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:6016:40831":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:51849:2529":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:51435:2536":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:10039:44003":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:3221:4033":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"4:12771:54294":{"crate_id":4,"path":["std","sys","unix","fs","TimespecDebugAdapter"],"kind":"struct"},"1:47727:2039":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"4:3648:3061":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:6286:3686":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"4:14558:54250":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:8250:3078":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"12:933:3101":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:4573:42900":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:5582:40455":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:6954:39945":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:3717:1971":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:52419:2538":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:37785:2478":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"4:14812:3212":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"6:5541:40453":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:24374:2871":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:5567:40454":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"4:14799:2968":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"16:5721:3828":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:5273:42310":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:3435:1965":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"16:7782:3776":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:5398:40418":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:1526:37637":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:12557:48838":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"4:8217:4344":{"crate_id":4,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"4:6483:3004":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"18:152:50438":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"4:12740:3268":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"6:571:36756":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"4:5807:2991":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:5923:3833":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:46190:1887":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"1:46465:2938":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:7155:3865":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:10503:4144":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:10364:4171":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"18:712:2478":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"4:7701:3207":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"4:13932:4453":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"5:3370:3124":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"16:3402:3757":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:3366:4041":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"4:12733:128":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"16:5326:3810":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:10643:44146":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"6:3993:39756":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"5:1607:2630":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"4:1017:3259":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"17:9883:60365":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"4:10981:3065":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:4670:3040":{"crate_id":1,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"17:12048:48741":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:9396:43938":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:51226:2555":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"4:2433:31196":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"1:3297:2394":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:3734:137":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:6057:37605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:50581:2485":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:9916:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:10622:44131":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:3182:227":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:47972:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:46149:1972":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"9:469:41609":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:7079:3858":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"5:4306:2630":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:9930:60355":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"4:11246:3015":{"crate_id":4,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"1:3281:220":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:49419:2730":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:12262:48818":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:11547:44641":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:12250:48817":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"5:1653:3098":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"4:10831:2998":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"4:11431:3324":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:46678:11124":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"4:9795:4361":{"crate_id":4,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"1:48646:70":{"crate_id":1,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"6:5274:40387":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"}},"external_crates":{"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":18}