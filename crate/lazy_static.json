{"root":"0:0:1530","crate_version":"1.4.0","includes_private":false,"index":{"5:5522:3306":{"id":"5:5522:3306","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5524:163","5:5525:14183"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6463:3022":{"id":"4:6463:3022","crate_id":4,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6464:55438","4:6465:55439"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13259:56517":{"id":"1:13259:56517","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"str::rmatch_indices":"4:15730:1694","prim@char":"4:15725:1689","`DoubleEndedIterator`":"1:8233:112","self::pattern":"1:12813:2313"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"1:49266:2687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12823:2312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:39:1536":{"id":"0:39:1536","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[185,0],"end":[188,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10714:194":{"id":"1:10714:194","crate_id":1,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:10716:163","1:10717:1535","1:10718:53051","1:10719:53052","1:10720:53053","1:10721:721","1:10722:722"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3182:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10705:2428","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:2565:119":{"id":"4:2565:119","crate_id":4,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:2566:50188","4:2568:1753","4:2569:56211","4:2570:56212"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"1:10098:103","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"1:10105:111","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13229:13695":{"id":"1:13229:13695","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"1:12813:2313","prim@char":"4:15725:1689"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"1:12605:2649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12823:2312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6693:3019":{"id":"4:6693:3019","crate_id":4,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6694:55002","4:6695:55003"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10425:2428","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13247:56514":{"id":"1:13247:56514","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47158:158","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12823:2312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13209:50856":{"id":"1:13209:50856","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:15725:1689","self::pattern":"1:12813:2313"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12823:2312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8189:143":{"id":"1:8189:143","crate_id":1,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8190:2007","1:8191:2008","1:8192:736"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8152:2410":{"id":"1:8152:2410","crate_id":1,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8154:2059"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:4899:3002":{"id":"4:4899:3002","crate_id":4,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4900:2556","4:4901:56132"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3182:1817":{"id":"1:3182:1817","crate_id":1,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13241:53830":{"id":"1:13241:53830","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:15725:1689","self::pattern":"1:12813:2313","str::rsplitn":"4:15730:1694"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"1:49220:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12823:2312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3638:129":{"id":"1:3638:129","crate_id":1,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3640:657"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"1:3633:203","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5627:2921":{"id":"4:5627:2921","crate_id":4,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5628:55279","4:5629:55281","4:5630:55280","4:5631:55282"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13204:14059":{"id":"1:13204:14059","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"4:15730:1694"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"1:49390:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13205:14097":{"id":"1:13205:14097","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"4:15730:1694"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"1:49399:2695","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2834:116":{"id":"1:2834:116","crate_id":1,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"1:2829:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10321:138":{"id":"1:10321:138","crate_id":1,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10322:622","1:10323:1717","1:10324:50427","1:10325:50428","1:10326:50429","1:10327:50430","1:10328:50431","1:10329:50432","1:10330:50433","1:10331:50434","1:10332:50435","1:10333:50436","1:10334:50437","1:10335:50438","1:10336:50439","1:10337:1485"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13253:1716":{"id":"1:13253:1716","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"prim@char":"4:15725:1689","str::matches":"4:15730:1694","self::pattern":"1:12813:2313","`DoubleEndedIterator`":"1:8233:112"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"1:49320:2690","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12823:2312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3218:1818":{"id":"1:3218:1818","crate_id":1,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13191:53051":{"id":"1:13191:53051","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:47158:158"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47158:158","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10714:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10714:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12843:2317":{"id":"1:12843:2317","crate_id":1,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12838:2316","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13176":{"id":"1:13176","crate_id":1,"name":null,"span":null,"visibility":{"restricted":{"parent":"1:12273:1301","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["1:13177:761","1:13178:2003","1:13179:56506","1:13180:56507","1:13182:56508","1:13185:55838","1:13186:56509","1:13187:279","1:13188:53798","1:13189:1535","1:13191:53051","1:13193:53052","1:13195:53053","1:13197:3103","1:13198:56510","1:13199:53817","1:13200:53818","1:13201:2717","1:13202:2342","1:13203:3106","1:13204:14059","1:13205:14097","1:13206:3651","1:13207:56511","1:13208:14088","1:13209:50856","1:13212:53459","1:13215:53461","1:13218:2043","1:13222:2002","1:13226:53825","1:13229:13695","1:13232:53828","1:13235:56512","1:13238:56513","1:13241:53830","1:13244:53832","1:13247:56514","1:13250:56515","1:13253:1716","1:13256:56516","1:13259:56517","1:13262:56518","1:13265:56519","1:13267:56520","1:13269:56521","1:13271:56522","1:13272:56523","1:13273:56524","1:13276:56525","1:13279:33391","1:13282:53834","1:13285:56526","1:13288:56527","1:13291:56528","1:13294:2538","1:13296:2892","1:13297:53744","1:13298:53745","1:13299:53746","1:13300:56529","1:13302:3035","1:13303:56530"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5767:57164":{"id":"5:5767:57164","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:1822","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7778:3310","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:1822","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7778:3310","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2777:2419":{"id":"1:2777:2419","crate_id":1,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2779:50014"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3182:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"1:2774:92","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:6365:2904":{"id":"4:6365:2904","crate_id":4,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6366:55353","4:6367:36365","4:6368:55354","4:6369:55355","4:6370:55356","4:6371:55357"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10425:2428","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:5697:2920":{"id":"4:5697:2920","crate_id":4,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5698:55983"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10425:2428","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:5561:2938":{"id":"4:5561:2938","crate_id":4,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5562:4121","4:5563:55838"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10425:2428","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10098:103":{"id":"1:10098:103","crate_id":1,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10099:630"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13299:53746":{"id":"1:13299:53746","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12260:2899":{"id":"1:12260:2899","crate_id":1,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:12261:2007","1:12262:51743"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13180:56507":{"id":"1:13180:56507","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13195:53053":{"id":"1:13195:53053","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10714:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10714:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"4:5635:2922":{"id":"4:5635:2922","crate_id":4,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5636:55218","4:5637:55842","4:5638:55843"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3904:67":{"id":"1:3904:67","crate_id":1,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3905:1386"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"1:13271:56522":{"id":"1:13271:56522","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8185:128":{"id":"1:8185:128","crate_id":1,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8187:654"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6765:2907":{"id":"4:6765:2907","crate_id":4,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6766:56272"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3155:108":{"id":"1:3155:108","crate_id":1,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3156:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13925:133":{"id":"1:13925:133","crate_id":1,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:13926:253","1:13927:491","1:13928:256","1:13929:1048"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5788:2983":{"id":"5:5788:2983","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8073:196"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8073:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13193:53052":{"id":"1:13193:53052","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10714:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10714:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:772:201":{"id":"5:772:201","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:773:2068","5:774:2069","5:775:2070"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3309:1900":{"id":"1:3309:1900","crate_id":1,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3311:163","1:3312:327"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8666:2272":{"id":"1:8666:2272","crate_id":1,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"1:7713:2273","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10107:2215":{"id":"1:10107:2215","crate_id":1,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10108:630"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3074:73":{"id":"1:3074:73","crate_id":1,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3076:280"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3182:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:8258:1820":{"id":"1:8258:1820","crate_id":1,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8259:761","1:8260:2003"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8384:149","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:4621:2961":{"id":"4:4621:2961","crate_id":4,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4622:55010","4:4623:55011","4:4624:55012","4:4626:2960","4:4627:55013","4:4629:53825","4:4630:3651"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"4:4539:2935","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10113:2208":{"id":"1:10113:2208","crate_id":1,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10114:630"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2829:165":{"id":"1:2829:165","crate_id":1,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2831:575","1:2832:875"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3182:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"5:5768:2827":{"id":"5:5768:2827","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8073:196"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8073:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12823:2312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12832:2315":{"id":"1:12832:2315","crate_id":1,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:12834:2335","1:12835:890","1:12836:51651","1:12837:51652"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3080:141":{"id":"1:3080:141","crate_id":1,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3082:1996"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:22774:28126":{"id":"1:22774:28126","crate_id":1,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:22775:50537","1:22776:50538","1:22777:50539"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22767:2428","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3463:1919":{"id":"1:3463:1919","crate_id":1,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3465:213","1:3466:188","1:3467:51612"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13232:53828":{"id":"1:13232:53828","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"prim@char":"4:15725:1689","str::split":"4:15730:1694","self::pattern":"1:12813:2313","`DoubleEndedIterator`":"1:8233:112"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"1:49134:2652","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12823:2312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12823:2312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12838:2316","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5649:2924":{"id":"4:5649:2924","crate_id":4,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5650:56142","4:5651:53301","4:5652:55218","4:5653:56143","4:5654:3275","4:5655:3276","4:5656:56144","4:5657:1265","4:5658:56145","4:5659:56146","4:5660:56147","4:5661:56148","4:5662:56149","4:5663:56150","4:5664:56151","4:5665:56152"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3189:199":{"id":"1:3189:199","crate_id":1,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13296:2892":{"id":"1:13296:2892","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13187:279":{"id":"1:13187:279","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"4:15730:1694","`u8`":"4:15739:1703"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3343:1908":{"id":"1:3343:1908","crate_id":1,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3345:1195"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5643:2923":{"id":"4:5643:2923","crate_id":4,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5644:55218","4:5645:55421"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:22819:2426":{"id":"1:22819:2426","crate_id":1,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"1:23468:2420","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22810:2428","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13262:56518":{"id":"1:13262:56518","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12813:2313","prim@char":"4:15725:1689","`DoubleEndedIterator`":"1:8233:112","str::match_indices":"4:15730:1694"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"1:49284:2688","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12823:2312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12823:2312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12838:2316","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3552:1913":{"id":"1:3552:1913","crate_id":1,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3554:50854","1:3555:50855","1:3556:50856"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3182:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:3485:1911":{"id":"1:3485:1911","crate_id":1,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3487:722"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3182:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"1:3481:1910","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:12823:2312":{"id":"1:12823:2312","crate_id":1,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:12825:2315","1:12826:50874","1:12827:50875","1:12828:50876","1:12829:50878","1:12830:50877","1:12831:50879"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13291:56528":{"id":"1:13291:56528","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:15725:1689","self::pattern":"1:12813:2313"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12823:2312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12823:2312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12838:2316","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13238:56513":{"id":"1:13238:56513","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12813:2313","str::split":"4:15730:1694","prim@char":"4:15725:1689","str::split_terminator":"4:15730:1694"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"1:49184:2684","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12823:2312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12823:2312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12838:2316","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3679:1846":{"id":"1:3679:1846","crate_id":1,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3182:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:3633:203":{"id":"1:3633:203","crate_id":1,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3634:163","1:3635:1916","1:3636:656","1:3637:343"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"1:3638:129","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"1:3633:203","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3426:123":{"id":"1:3426:123","crate_id":1,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3428:351"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"1:3429:124","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13208:14088":{"id":"1:13208:14088","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"1:49408:2696","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5705:2928":{"id":"4:5705:2928","crate_id":4,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5706:55218"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13244:53832":{"id":"1:13244:53832","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:15725:1689","str::splitn":"4:15730:1694","self::pattern":"1:12813:2313"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"1:49238:2656","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12823:2312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12823:2312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12838:2316","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13203:3106":{"id":"1:13203:3106","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"1:49102:2679","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3272:1891":{"id":"1:3272:1891","crate_id":1,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3273:163","1:3274:881"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5693:2926":{"id":"4:5693:2926","crate_id":4,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5694:53301"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3255:1890":{"id":"1:3255:1890","crate_id":1,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3257:163","1:3258:860"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:38:1530":{"id":"0:38:1530","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[167,0],"end":[179,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"kind":"macro","inner":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"},"1:3644:1916":{"id":"1:3644:1916","crate_id":1,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3646:52381"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3077:72":{"id":"1:3077:72","crate_id":1,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3079:1995"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3182:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:3621:1914":{"id":"1:3621:1914","crate_id":1,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3182:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"1:3552:1913","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:4539:2935":{"id":"4:4539:2935","crate_id":4,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4540:2828","4:4541:55991","4:4543:55992","4:4544:55993","4:4545:2955","4:4546:55994","4:4547:55802","4:4549:55995","4:4550:2032","4:4551:3106","4:4552:2014","4:4554:2026"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13222:2002":{"id":"1:13222:2002","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"1:12813:2313","prim@char":"4:15725:1689","`None`":"1:47158:158"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47158:158","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12823:2312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12823:2312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12838:2316","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10119:2219":{"id":"1:10119:2219","crate_id":1,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10120:630"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3420:1819":{"id":"1:3420:1819","crate_id":1,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3421:549"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12752:2413":{"id":"1:12752:2413","crate_id":1,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:12753:118","1:12754:50067"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2865:159":{"id":"1:2865:159","crate_id":1,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2866:388","1:2867:2047","1:2868:2048","1:2869:2067"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"1:2834:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"1:2875:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3250:1893":{"id":"1:3250:1893","crate_id":1,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3252:163","1:3253:1316"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13282:53834":{"id":"1:13282:53834","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"1:12813:2313","prim@char":"4:15725:1689"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47158:158","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12823:2312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12823:2312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12838:2316","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6767:2909":{"id":"4:6767:2909","crate_id":4,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6768:55253"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13186:56509":{"id":"1:13186:56509","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"4:4596:2210":{"id":"4:4596:2210","crate_id":4,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4597:1717","4:4598:53317","4:4600:53318","4:4601:3573","4:4602:53319","4:4603:53320","4:4604:50619","4:4613:2032"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13298:53745":{"id":"1:13298:53745","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3335:1906":{"id":"1:3335:1906","crate_id":1,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3337:328"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3288:1895":{"id":"1:3288:1895","crate_id":1,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3290:530"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3292:1897":{"id":"1:3292:1897","crate_id":1,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3294:1072"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12838:2316":{"id":"1:12838:2316","crate_id":1,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:12840:1997","1:12841:50405","1:12842:50406"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"1:12832:2315","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:4614:2958":{"id":"4:4614:2958","crate_id":4,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4615:53214","4:4616:36217","4:4617:53215","4:4618:53216"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10111:2217":{"id":"1:10111:2217","crate_id":1,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10112:630"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13276:56525":{"id":"1:13276:56525","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:15725:1689","self::pattern":"1:12813:2313"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12823:2312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13273:56524":{"id":"1:13273:56524","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"1:12813:2313","prim@char":"4:15725:1689"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12823:2312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12823:2312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"1:12843:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6094:202":{"id":"5:6094:202","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6095:2071"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13200:53818":{"id":"1:13200:53818","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"4:15730:1694"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13285:56526":{"id":"1:13285:56526","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"1:12813:2313","prim@char":"4:15725:1689"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12823:2312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12823:2312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12838:2316","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13215:53461":{"id":"1:13215:53461","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:15725:1689","self::pattern":"1:12813:2313"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12823:2312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12823:2312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12838:2316","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3260:1889":{"id":"1:3260:1889","crate_id":1,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3262:163","1:3263:529"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:7681:3148":{"id":"4:7681:3148","crate_id":4,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:7682:55145"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5683:2925":{"id":"4:5683:2925","crate_id":4,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5684:55504","4:5685:55505","4:5686:55506","4:5687:55507"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2875:166":{"id":"1:2875:166","crate_id":1,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2877:966","1:2878:794","1:2879:760","1:2880:683","1:2881:666"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3182:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"1:2829:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:0:1530":{"id":"0:0:1530","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[215,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\n# #[macro_use]\n# extern crate lazy_static;\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.4.0\")]","#![no_std]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:39:1536","0:41:1537","0:38:1530"]}},"5:5789:54898":{"id":"5:5789:54898","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"4:15730:1694"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8073:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3177:192":{"id":"1:3177:192","crate_id":1,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5774:57166":{"id":"5:5774:57166","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8073:196"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8073:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8384:149":{"id":"1:8384:149","crate_id":1,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8385:2007","1:8386:890","1:8387:2009","1:8388:468","1:8390:2010","1:8393:2011","1:8394:2012","1:8395:2013","1:8396:2014","1:8398:2015","1:8400:2016","1:8401:2017","1:8403:809","1:8406:2018","1:8413:2019","1:8415:2020","1:8418:2021","1:8419:2022","1:8420:2023","1:8422:2024","1:8424:2025","1:8427:1269","1:8428:2026","1:8429:2027","1:8433:2028","1:8436:2029","1:8437:2030","1:8438:2031","1:8440:2032","1:8441:1827","1:8443:2033","1:8446:2034","1:8448:2035","1:8458:2036","1:8473:2037","1:8475:2038","1:8479:2039","1:8488:2040","1:8491:2041","1:8493:2042","1:8496:252","1:8503:269","1:8510:2043","1:8517:2044","1:8526:2045","1:8536:983","1:8543:2046","1:8550:2047","1:8551:2048","1:8552:2049","1:8564:2050","1:8571:2051","1:8583:2052","1:8590:2053","1:8591:2054","1:8596:2055","1:8599:2056","1:8602:2057","1:8603:2058","1:8605:2059","1:8607:388","1:8610:2060","1:8613:966","1:8616:2061","1:8619:575","1:8622:2062","1:8625:875","1:8627:794","1:8629:760","1:8631:683","1:8633:666","1:8635:2063","1:8636:2064","1:8644:2065"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:1075:3033":{"id":"4:1075:3033","crate_id":4,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:1076:2068","4:1077:2892","4:1078:54898","4:1079:54899","4:1080:53744","4:1081:53745","4:1082:53746"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13188:53798":{"id":"1:13188:53798","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:15739:1703"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3314:1901":{"id":"1:3314:1901","crate_id":1,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3316:163","1:3317:330"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3280:1898":{"id":"1:3280:1898","crate_id":1,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3282:1317"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9118:1985":{"id":"1:9118:1985","crate_id":1,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10311:134":{"id":"1:10311:134","crate_id":1,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10312:685","1:10314:50735"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:23468:2420":{"id":"1:23468:2420","crate_id":1,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:23469:2425"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:23464:2428","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"1:3187:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3481:1910":{"id":"1:3481:1910","crate_id":1,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3483:163","1:3484:721"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3182:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:13250:56515":{"id":"1:13250:56515","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47158:158","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12823:2312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12823:2312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12838:2316","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3245:1888":{"id":"1:3245:1888","crate_id":1,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3247:163","1:3248:241"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13541:142":{"id":"1:13541:142","crate_id":1,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13542:163","1:13543:142","1:13544:735"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13294:2538":{"id":"1:13294:2538","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12752:2413","`FromStr`":"1:12752:2413"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47285:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"1:12752:2413","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"1:12752:2413","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5555:2936":{"id":"4:5555:2936","crate_id":4,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5556:55500","4:5557:3397"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10425:2428","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13218:2043":{"id":"1:13218:2043","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:47158:158","self::pattern":"1:12813:2313","prim@char":"4:15725:1689"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47158:158","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12823:2312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3297:1902":{"id":"1:3297:1902","crate_id":1,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3298:163","1:3299:921"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3012:2363":{"id":"1:3012:2363","crate_id":1,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:3011:2428","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13302:3035":{"id":"1:13302:3035","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"4:15725:1689"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"1:49424:2698","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13997:2478":{"id":"1:13997:2478","crate_id":1,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:13998:51681","1:13999:51682","1:14000:51683","1:14001:51684","1:14002:51685","1:14003:51686","1:14004:2032"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3423:122":{"id":"1:3423:122","crate_id":1,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3425:350"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"1:3426:123","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:22625:2427":{"id":"1:22625:2427","crate_id":1,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22615:2428","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3284:1896":{"id":"1:3284:1896","crate_id":1,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3286:861"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3331:1905":{"id":"1:3331:1905","crate_id":1,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3333:326"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8662:2270":{"id":"1:8662:2270","crate_id":1,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8384:149","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13269:56521":{"id":"1:13269:56521","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13201:2717":{"id":"1:13201:2717","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:15725:1689"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"1:49086:2677","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13265:56519":{"id":"1:13265:56519","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3325:1904":{"id":"1:3325:1904","crate_id":1,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3327:163","1:3328:1197"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6769:2910":{"id":"4:6769:2910","crate_id":4,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6770:55861"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3319:1903":{"id":"1:3319:1903","crate_id":1,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3321:163","1:3322:1194"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13300:56529":{"id":"1:13300:56529","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"4:15725:1689"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"1:49415:2697","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5790:54899":{"id":"5:5790:54899","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"4:15730:1694"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8073:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6696:2903":{"id":"4:6696:2903","crate_id":4,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6697:55790"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10425:2428","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:2774:92":{"id":"1:2774:92","crate_id":1,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2776:1678"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3182:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:3716:1921":{"id":"1:3716:1921","crate_id":1,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:41:1537":{"id":"0:41:1537","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[213,0],"end":[215,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["lazy",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"LazyStatic","id":"0:39:1536","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"1:13189:1535":{"id":"1:13189:1535","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:47158:158"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47158:158","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10714:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10714:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13267:56520":{"id":"1:13267:56520","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13202:2342":{"id":"1:13202:2342","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:15725:1689"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"1:49092:2678","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6343:2903":{"id":"4:6343:2903","crate_id":4,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6344:3275","4:6345:3276","4:6346:55789","4:6347:55900","4:6349:55904","4:6351:55901","4:6352:55902","4:6354:55903"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10425:2428","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13235:56512":{"id":"1:13235:56512","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::rsplit_terminator":"4:15730:1694","prim@char":"4:15725:1689","self::pattern":"1:12813:2313","str::split":"4:15730:1694","`DoubleEndedIterator`":"1:8233:112"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"1:49166:2683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12823:2312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3185:198":{"id":"1:3185:198","crate_id":1,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13279:33391":{"id":"1:13279:33391","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"1:12813:2313","prim@char":"4:15725:1689"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47158:158","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12823:2312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3339:1907":{"id":"1:3339:1907","crate_id":1,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3341:331"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3083:127":{"id":"1:3083:127","crate_id":1,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3085:651"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4682:2252":{"id":"1:4682:2252","crate_id":1,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4683:2007","1:4684:50118","1:4685:2009"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6591:2924":{"id":"4:6591:2924","crate_id":4,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6592:55445","4:6593:55380","4:6594:55381","4:6595:55383","4:6596:55382","4:6597:55384","4:6598:55385","4:6599:55387","4:6600:55388","4:6601:55391","4:6602:55392","4:6603:55393","4:6604:55394","4:6605:55395","4:6606:55396","4:6607:55389","4:6608:55390"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13212:53459":{"id":"1:13212:53459","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:15725:1689","self::pattern":"1:12813:2313"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12823:2312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13297:53744":{"id":"1:13297:53744","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5518:3304":{"id":"5:5518:3304","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5520:163","5:5521:405"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3182:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:8233:112":{"id":"1:8233:112","crate_id":1,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8234:1997","1:8235:1998","1:8236:1999","1:8237:2000","1:8241:2001","1:8244:2002"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8384:149","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:7713:2273":{"id":"1:7713:2273","crate_id":1,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7714:50548","1:7715:50549","1:7716:50546","1:7717:50544","1:7718:50550","1:7719:50547","1:7720:50545"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"1:2799:98","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"1:2875:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:8659:2269":{"id":"1:8659:2269","crate_id":1,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8384:149","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3086:205":{"id":"1:3086:205","crate_id":1,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3088:119","1:3089:1374"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13198:56510":{"id":"1:13198:56510","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:15730:1694","crate::ops::IndexMut":"1:3485:1911","str::slice_unchecked":"4:15730:1694"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:10048:2210":{"id":"1:10048:2210","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10049:1485","1:10050:50618","1:10052:50619"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3276:1894":{"id":"1:3276:1894","crate_id":1,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3278:242"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13526:130":{"id":"1:13526:130","crate_id":1,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13527:163","1:13528:982"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13178:2003":{"id":"1:13178:2003","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5786:57167":{"id":"5:5786:57167","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8073:196"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8073:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2799:98":{"id":"1:2799:98","crate_id":1,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2800:382","1:2801:384"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10356:2307":{"id":"1:10356:2307","crate_id":1,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10357:138","1:10358:13485","1:10359:51440"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13182:56508":{"id":"1:13182:56508","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"4:15730:1694"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13206:3651":{"id":"1:13206:3651","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"1:49370:2692","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13199:53817":{"id":"1:13199:53817","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"4:15730:1694"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13288:56527":{"id":"1:13288:56527","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:15725:1689","self::pattern":"1:12813:2313"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12823:2312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8148:2411":{"id":"1:8148:2411","crate_id":1,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8150:2058"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10117:2218":{"id":"1:10117:2218","crate_id":1,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10118:630"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3304:1899":{"id":"1:3304:1899","crate_id":1,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3306:163","1:3307:325"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5787:57168":{"id":"5:5787:57168","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:421:1822","`String`":"5:8073:196"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:1822","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7778:3310","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8073:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13185:55838":{"id":"1:13185:55838","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12284:2857"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10109:2216":{"id":"1:10109:2216","crate_id":1,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10110:630"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3429:124":{"id":"1:3429:124","crate_id":1,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3431:163","1:3432:352"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13179:56506":{"id":"1:13179:56506","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13177:761":{"id":"1:13177:761","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:15725:1689"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9119:1984":{"id":"1:9119:1984","crate_id":1,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8198:1821":{"id":"1:8198:1821","crate_id":1,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8200:2004","1:8202:2005","1:8203:2006"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3409:1847":{"id":"1:3409:1847","crate_id":1,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3410:516"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"1:3396:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13207:56511":{"id":"1:13207:56511","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"1:49380:2693","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13272:56523":{"id":"1:13272:56523","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3090:204":{"id":"1:3090:204","crate_id":1,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3092:119","1:3093:1373"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13197:3103":{"id":"1:13197:3103","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:15730:1694","crate::ops::Index":"1:3481:1910","str::slice_mut_unchecked":"4:15730:1694"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:13226:53825":{"id":"1:13226:53825","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"prim@char":"4:15725:1689","str::rsplit":"4:15730:1694","str::split_whitespace":"4:15730:1694","self::pattern":"1:12813:2313","`DoubleEndedIterator`":"1:8233:112"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"1:49116:2648","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12823:2312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6857:2906":{"id":"4:6857:2906","crate_id":4,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6858:56368"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3396:109":{"id":"1:3396:109","crate_id":1,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3397:200","1:3398:514"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3187:100":{"id":"1:3187:100","crate_id":1,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"1:2799:98","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:9205:3018":{"id":"4:9205:3018","crate_id":4,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:9206:55231","4:9207:55232","4:9208:55233","4:9209:55234","4:9210:2729","4:9211:28514","4:9212:55230"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10425:2428","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:5766":{"id":"5:5766","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5586:1301","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5767:57164","5:5768:2827","5:5771:57165","5:5774:57166","5:5786:57167","5:5787:57168","5:5788:2983","5:5789:54898","5:5790:54899"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:10105:111":{"id":"1:10105:111","crate_id":1,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10106:630"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10115:171":{"id":"1:10115:171","crate_id":1,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10116:630"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3266:1892":{"id":"1:3266:1892","crate_id":1,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3268:163","1:3269:1071"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3186:197":{"id":"1:3186:197","crate_id":1,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3348:1909":{"id":"1:3348:1909","crate_id":1,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3350:1198"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5771:57165":{"id":"5:5771:57165","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8073:196"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8073:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12823:2312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13303:56530":{"id":"1:13303:56530","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"4:15725:1689"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"1:49433:2699","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13256:56516":{"id":"1:13256:56516","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"prim@char":"4:15725:1689","str::matches":"4:15730:1694","self::pattern":"1:12813:2313","`DoubleEndedIterator`":"1:8233:112"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"1:49338:2691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12823:2312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12823:2312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12838:2316","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"1:10228:50848":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"17:13282:48943":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"5:6158:3047":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:11915:48040":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:49399:2695":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"4:10226:43339":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"5:5940:3347":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:47631:78":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:48945:2663":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:9809:59469":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"9:469:41319":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:49220:2655":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"4:11269:2908":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:46275:2390":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"4:15691:56264":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"4:5697:2920":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"5:1000:2556":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:14:1717":{"crate_id":1,"path":["core","write"],"kind":"macro"},"5:2887:57821":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:46085:2697":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:3679:1846":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"18:694:4165":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"5:4019:2557":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:11015:43656":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"4:5990:3262":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:3077:72":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"17:10656:43557":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:49848:2712":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:9162:4100":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:5580:3941":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"12:1667:3614":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:23941:2766":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"4:2188:3169":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:3309:1900":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:6208:3769":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"4:1302:135":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:24258:2745":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"6:670:36530":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:10887:43545":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:45703:2483":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"17:9296:43330":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:5231:42578":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"12:925:3049":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"12:2005:2556":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:7073:3786":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"5:7292:3347":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:6577:3779":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:632:36501":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"14:56:43768":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:10420:4107":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:2875:166":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"16:3041:3964":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:4852:42349":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"4:1524:3055":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:45783:2565":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"4:6605:55395":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"16:7823:3710":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:13828:2254":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:22397:51741":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"4:3251:3218":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"1:8152:2410":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:23759:4938":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:50907:50377":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:11628:44090":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"5:1433:3060":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"4:14686:4304":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:49102:2679":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"4:4614:2958":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"17:13041:48789":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:10353:4112":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:52956:2450":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:10081:4068":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:11024:2650":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"4:6107:3271":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:11616:44055":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"4:14021:2978":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"16:5433:3744":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"4:3440:2967":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:3331:1905":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"5:7054:2008":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:3743:4049":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:7236:3795":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"12:556:135":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:13062:48843":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:46424:2382":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"16:7378:3703":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"4:10513:29996":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"4:10700:110":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:46393:2379":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:12247:48226":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:50684:50393":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:22378:51671":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:10160:43429":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"12:892:3592":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"17:11750:44262":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:13394:49343":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:12605:2649":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"4:10979:2679":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"4:5693:2926":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:6964:1981":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:22395:51739":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:11696:44095":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:6780:3783":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"9:900:41347":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:6106:40547":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:22615:2428":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:10926:43653":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:9971:59464":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"16:3338:3950":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:605:36497":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:3604:41727":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:47337:2557":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"16:7295:3716":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:5649:2386":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:11304:43366":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:46322:50307":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:13506:49381":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:10115:171":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:13576:51604":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:3549:41726":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:11482:43768":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"4:12531:120":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"4:5649:2924":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:38480:2362":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:48179:125":{"crate_id":1,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"1:3343:1908":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"4:1132:3028":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"4:3539:4275":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:3245:1888":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:49284:2688":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:13318:49009":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"4:14818:3039":{"crate_id":4,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"12:784:3050":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:12771:43367":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:6768:4000":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:9649:43352":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:2211:2517":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"12:949:3054":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:12752:2413":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"4:2155:2556":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"16:3064:4021":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:47922:2215":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"4:6693:3019":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:607:43338":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:3409:1847":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:5432:747":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:48499:50180":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:13884:49459":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:46140:95":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:12456:48240":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"4:10804:2972":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"5:1837:3048":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"6:161:36178":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"4:3563:2963":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"4:1157:29998":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:5969:36367":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:3423:122":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"4:8368:3084":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:48917:2660":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"4:1482:3048":{"crate_id":4,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"4:14027:2976":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:12671:48316":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:10331:4083":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"9:41:3519":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"17:11993:48047":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:3862:39470":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:6491:3776":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"16:6269:3772":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"11:0:1746":{"crate_id":11,"path":["adler"],"kind":"module"},"1:47354:160":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:10061:43430":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:6636:40915":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:2889:3979":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:32031:2797":{"crate_id":1,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"4:8740:1661":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"2:300:187":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:11097:2652":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"4:15195:34832":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"4:9578:3246":{"crate_id":4,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"16:5960:3948":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:12712:48319":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:4203:39504":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"16:6072:3717":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"4:10912:2985":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"1:22416:51737":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:1723:37393":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"4:1018:3200":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"17:11767:44270":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:47329:2556":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"5:421:1822":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:9886:43356":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:12095:48158":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:10912:43644":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"13:120:41597":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:4970:1840":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:46000:2586":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:4325:39515":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"18:766:59484":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:53034:2435":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:5528:39386":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"4:15737:1701":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"4:11199:3294":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"5:5572:4265":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"1:46414:2381":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"4:4512:2947":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"6:5282:40133":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:4395:39524":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:11962:43579":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:51177:2465":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:7264:3714":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:10988:43630":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:12408:48237":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"4:1041:3025":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"0:38:1530":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"4:8802:1867":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"12:2045:3169":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"1:22678:2425":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"4:11993:3089":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"14:244:41644":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"5:7125:4255":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"4:1149:29995":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"5:6893:3047":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:5347:40136":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:10119:2219":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:23838:4982":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:9280:41721":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:6424:3775":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"14:250:41650":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"16:7146:3787":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:1658:37386":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:6731:3997":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:4293:39511":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:4033:39486":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"4:15736:1700":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"16:4448:42245":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:3276:1894":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"16:2945:3984":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:45532:178":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"4:5868:3296":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:11100:4103":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:12262:48227":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:6935:41102":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:7216:3793":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:7119:3690":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:2843:3959":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:50970:2440":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"4:3233:2511":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"17:13627:49402":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:10403:4082":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:12142:48218":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"5:6447:2947":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:11406:43758":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:7804:3708":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:8849:4097":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:13733:49405":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"4:2166:3048":{"crate_id":4,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"17:11947:48042":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:4145:39500":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:3365:3951":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:5159:40123":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:8929:43341":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:24190:2743":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:12659:48315":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:49025:2669":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:47929:2217":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"16:6176:3768":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:616:36499":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:51555:50351":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:3335:1906":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:11118:43361":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:24224:2744":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:3090:204":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"6:6887:39666":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:5210:40128":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"4:10724:2971":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:46015:2882":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"4:11052:3011":{"crate_id":4,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"1:51817:2469":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"4:11314:3108":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"17:10477:4080":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:10407:4108":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:10028:43412":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"4:1459:3046":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:5379:40139":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"5:3928:3047":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"5:2202:3423":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:4127:39498":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"14:216:41651":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"4:15120:3253":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:53053:19565":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"16:5736:3756":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:4494:39535":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:4671:42318":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"4:11022:3005":{"crate_id":4,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"16:7571:3695":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:22767:2428":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:52909:2432":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:9440:43350":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"4:3908:3163":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:7333:3718":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"9:776:3516":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"1:23369:2423":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"4:7907:3200":{"crate_id":4,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"1:7643:2367":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:51350:2448":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"5:0:253":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:1572:37379":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"16:7279:4009":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:2968:3962":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"4:6601:55391":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:3250:1893":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"4:10557:3430":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"1:3396:109":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:3650:1918":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:3918:39475":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"4:14325:55416":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"17:2512:4109":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:12307:48230":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:47463:76":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:5975:3763":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:11720:2672":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"18:720:50356":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"4:2852:162":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:2318:1848":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:47158:158":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"5:4333:4258":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:23876:4984":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"16:0:1750":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:2733:3936":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:10458:43471":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"4:12037:1864":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:22774:28126":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:10101:103":{"crate_id":1,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"1:9785:2635":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"4:10928:2957":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"6:4005:39483":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:10058:126":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"5:772:201":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"12:968:3055":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:9574:4077":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:10529:43473":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"4:894:3177":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:4823:42345":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:22350:2494":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:6893:39667":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:23704:4950":{"crate_id":1,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"1:7455:2015":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"5:3123:2556":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:13620:49401":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:50993:2444":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"16:5360:3740":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:1717:37392":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:49424:2698":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:48206:101":{"crate_id":1,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"4:14542:2939":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"12:429:3605":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"4:4899:3002":{"crate_id":4,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"1:38543:2250":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"4:7569:3140":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"4:15735:1699":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"1:9120:1983":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:12343:48232":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"4:14538:30970":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"4:1493:3050":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:3288:1895":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:5436:57885":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:1584:37380":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:13377:49025":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:45971:2583":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"4:15732:1696":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"5:2896:57744":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:46354:2391":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"16:7894:3735":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:4639:2354":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:47225:1981":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"4:11828:3144":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:13331:49010":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:9961:43358":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:49074:2415":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"5:7452:211":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:45573:177":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:6807:3784":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:10705:2428":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:3420:1819":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"13:232:58602":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:46063:2698":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"5:781:102":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"4:15082:3252":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:6644:3781":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"19:117:59500":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"17:13453:49376":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:49882:2791":{"crate_id":1,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"1:4:948":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"17:10140:4083":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"5:8073:196":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"4:9721:4296":{"crate_id":4,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"12:1688:3615":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:12982:48788":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:24564:2753":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:22619:2424":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"4:5876:3298":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"4:10287:4297":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:11231:4101":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"7:0:1436":{"crate_id":7,"path":["unwind"],"kind":"module"},"4:14692:4305":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:12699:48318":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:3083:127":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"17:10200:43426":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:13541:142":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:2865:159":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"16:4477:42249":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:4961:1839":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:4574:2947":{"crate_id":1,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"6:5428:40145":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:4425:39528":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:2794:3684":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:12467:48241":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:12073:48152":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"4:10708:3230":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"4:15141:3260":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"4:9499:4385":{"crate_id":4,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"17:13370:49013":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"9:996:3535":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"4:7147:55784":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:10599:43573":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:53108:19570":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:6214:40553":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:49433:2699":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:24428:2749":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"4:1530:3056":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"12:774:2008":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:10489:4084":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"4:14779:3040":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"12:354:4371":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"13:0:1742":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:2912:3961":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:8258:1820":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"4:15724:1688":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"9:686:3467":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"12:1100:3057":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:8659:2269":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:48703:2890":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:50778:2451":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"5:69:3321":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:23464:2428":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:4839:1831":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:31850:2807":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"17:11434:43766":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"12:840:3045":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:3272:1891":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"4:4383:2976":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:13477:49378":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:9368:43348":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"5:1586:3050":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"4:13368:4386":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"4:7009:33115":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"4:3116:2955":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"6:6852:39661":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:50888:2464":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:2690:550":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:32037:50394":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"17:10236:4037":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"18:782:59480":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:49370:2692":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:49059:2782":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"16:5488:3747":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:6881:39665":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"5:2182:3448":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:9065:43344":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:12442:48239":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:6464:3711":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"16:7226:3794":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:45696:1915":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"4:696:3173":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:10864:43547":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:51523:50364":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"4:7521:3137":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"4:10985:2648":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"6:4083:39493":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:51051:50249":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"4:3953:187":{"crate_id":4,"path":["std","io","error","Result"],"kind":"typedef"},"4:10656:3209":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"4:8268:3118":{"crate_id":4,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"18:801:4150":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:46046:2877":{"crate_id":1,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:46175:2780":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:4112:39496":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"12:1144:3059":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"4:15745:1709":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"5:3485:2557":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:4060:39490":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:7250:3796":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:13348:49011":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"4:10470:2202":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"1:48452:2310":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:5292:40134":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"4:12091:3041":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"4:11813:3143":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"1:47673:85":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:50730:2471":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"4:5561:2938":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"16:5790:3759":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:10111:2217":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"5:983:3363":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:49860:113":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"4:2162:3047":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"4:1497:3051":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"4:15734:1698":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"17:10516:4085":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:27745:2418":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:46345:2376":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:11794:44274":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:10962:43632":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:4317:39514":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:4511:39537":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"4:1152:29997":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:4255:3273":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:49415:2697":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:6124:40548":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"5:3461:152":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:46374:2393":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:3205:2249":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"5:7496:4267":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:4023:39485":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:23797:2541":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:13598:49394":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"4:10682:121":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"12:2315:58601":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"4:10447:3182":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"4:1075:3033":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"18:811:4151":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:3905:39474":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:12221:48224":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:50052:2720":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:49086:2677":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"4:5683:2925":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:47200:2556":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:55693:2501":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"4:4273:3239":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"5:3152:3169":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:11001:43629":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:0:403":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"16:3800:41772":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:10975:43631":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:12537:48246":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"4:15060:3013":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"5:1545:2008":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:45738:1838":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"1:51739:2462":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:49007:2667":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:46313:2373":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"4:11458:2556":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"1:55773:2357":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:13865:49453":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:50061:2721":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"4:7541:3138":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"4:5284:3253":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:4401:39525":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:48981:2665":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:1596:37381":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"15:0:1749":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:24360:2599":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"5:7521:4273":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:4627:2353":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"5:1219:3422":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:9210:43347":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:50834:2472":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:5346:3697":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:50093:2482":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:6068:37315":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:3714:41736":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:10001:43411":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"18:712:2494":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:46223:4308":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"4:5889:3299":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:45617:179":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"16:5927:3762":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:3868:39471":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"4:8519:1859":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:24530:2752":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:11687:2671":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"4:12042:1870":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:12494:2682":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"4:5860:3295":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:12823:2312":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:5998:40543":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"4:7678:3146":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"17:12040:48150":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"5:1410:3059":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:13240:48899":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:32089:50305":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"1:52783:2447":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"18:754:59489":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:45984:2584":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"12:2039:3168":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"4:15738:1702":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"1:12832:2315":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:3892:39473":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:1708:37391":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"4:11388:3119":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:11378:4054":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:49640:2327":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:10814:4052":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:13574:49391":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:10041:43413":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:11030:119":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:52243:2455":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:11186:43364":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:45484:1920":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"4:1446:3045":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:4916:1838":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"6:5469:40147":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:10950:43655":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"14:11:41642":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:4906:1837":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"4:15744:1708":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"4:1619:3057":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:12028:48094":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"12:853:3046":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"1:52092:2431":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:6864:39663":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:5414:40143":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:23820:4981":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:11147:43362":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:11082:4058":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:11254:4099":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:5029:42401":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"4:9456:4292":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"6:6910:39669":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:12610:48264":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:1736:37394":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:5406:2206":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"4:14330:55377":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:49840:2713":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:5130:40081":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:5197:40127":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:11277:43329":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:5505:3748":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:9600:59459":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"16:3772:41769":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:47379:79":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"12:1253:3060":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:6870:39664":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:10801:43543":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:1729:3266":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"4:4480:2986":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"4:5838:3293":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:6366:3620":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:13154:48849":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:10502:43472":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:4164:39501":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"4:4270:3238":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"4:7855:4278":{"crate_id":4,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"4:6765:2907":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:46099:2880":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:49565:2325":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"4:9487:4384":{"crate_id":4,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"16:4734:42331":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:11519:43984":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"6:4040:39487":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:599:36496":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:46643:1660":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:4762:42334":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"4:4346:2981":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:4470:39533":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:13402:49370":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:10211:43425":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"4:1190:4377":{"crate_id":4,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"17:13746:49406":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"4:6591:2924":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:537:36490":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:2777:2419":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:52026:2446":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:4215:39505":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:48276:2214":{"crate_id":1,"path":["core","fmt","FlagV1"],"kind":"enum"},"5:7778:3310":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:11981:43578":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:4387:39523":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:1617:37383":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:2829:165":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"16:5855:3761":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:5400:40141":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:12155:48219":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"4:6463:3022":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:22418:51742":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:49613:2326":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:13799:49445":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:46434:2388":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:12598:48250":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:4358:39519":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"4:10425:2428":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"4:4385:2977":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"4:2765:3027":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"12:877:3048":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"6:4431:39529":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:11337:4076":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:10448:4039":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"4:15219:3631":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:4013:39484":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:50801:2439":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:2202:2516":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"16:3218:3967":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"12:396:3606":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:4230:42152":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:4331:39516":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"4:7681:3148":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"4:4621:2961":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"5:2888:57321":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:13609:49395":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"5:6792:4267":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"4:11843:3145":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"17:10266:4031":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"5:7802:3047":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:510:43337":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"16:5595:3751":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"4:8260:3200":{"crate_id":4,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"14:47:41642":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:5459:40146":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:4066:39491":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"4:8799:1866":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:10844:4083":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:3644:1916":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:12838:2316":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:3304:1899":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:47915:2216":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:11555:44045":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:6136:3738":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"4:14955:3104":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:12260:2899":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"5:3145:3166":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"5:7908:2008":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"4:1518:3054":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"4:11087:55409":{"crate_id":4,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"17:10938:43654":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:3939:41886":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:3189:199":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"4:10553:30970":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:46465:2385":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:4347:39518":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"4:10237:55794":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:13933:49485":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"4:13349:30968":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"16:4386:42233":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"4:7178:55784":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"4:1501:3052":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"4:3113:2828":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"17:9592:120":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"4:2027:137":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:3011:2428":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:10571:43572":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:13306:49007":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:23860:4973":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:3284:1896":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"16:3145:3974":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:3185:198":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"9:27:3518":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"18:729:59492":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:10468:4081":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"16:6166:3767":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:8384:149":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"4:14102:2202":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:22821:2425":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:7541:2395":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:4241:39507":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:12843:2317":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:4052:39489":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:37299:160":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:7965:1855":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:52704:2463":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:10279:4068":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:13043:13925":{"crate_id":1,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"4:4173:2988":{"crate_id":4,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"17:13772:49442":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:7514:3719":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:10179:43427":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:46383:2378":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"4:12071:3040":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"16:5707:3754":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"12:181:3608":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:49166:2683":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"4:7807:3199":{"crate_id":4,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"4:11405:3120":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"17:10224:43431":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"4:9494:4293":{"crate_id":4,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"12:2323:58597":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:10584:4061":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"5:1558:3045":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"12:2303:58599":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"4:14555:3145":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"6:6091:40545":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:32189:50346":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"17:10071:4137":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:52593:2443":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:9240:2312":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"4:11055:3012":{"crate_id":4,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"9:1020:3536":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:12813:2313":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"12:2032:3167":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:5407:3742":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:46284:2370":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:51375:2430":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:12756:48327":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"5:7818:57324":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:49519:2318":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"16:6110:3737":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:1602:37382":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:5385:10962":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"6:5386:40140":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"5:8168:3343":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:48240:70":{"crate_id":1,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"4:10498:29993":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"16:6391:3774":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:13963:49487":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"6:5563:40176":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"4:12538:3209":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"4:8750:2200":{"crate_id":4,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"6:5191:40126":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"4:8073:4278":{"crate_id":4,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"1:3218:1818":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"17:12725:48325":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:23743:50370":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"5:1524:2556":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:3182:1817":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"6:531:36489":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"4:11155:3256":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"16:5996:3764":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:3241:3968":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"12:463:58596":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"4:2458:4380":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"17:9528:2679":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:7477:3721":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:12568:48248":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"9:927:41313":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"18:739:59499":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:10253:4028":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:47589:84":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"14:194:41643":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"6:4193:39503":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:0:766":{"crate_id":6,"path":["libc"],"kind":"module"},"1:3280:1898":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:11026:43359":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:10435:43470":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:6357:3773":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:53073:19567":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"5:1396:3057":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"4:14335:2933":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:53210:19576":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:53119:19571":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"12:2309:50537":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:13497:49380":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:3978:39480":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:3522:41725":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:6718:3996":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"5:7810:3365":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:47259:1982":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"4:11475:3124":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:11572:44052":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:10117:2218":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"5:1534:2557":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"4:15743:1707":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"17:9245:4032":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:12182:48221":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"5:6355:1858":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:48292:71":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"4:11448:3121":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"4:15204:55376":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"12:930:3052":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:3260:1889":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"4:1642:3059":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:4095:39494":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"12:2025:3166":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:1540:37375":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"4:7224:168":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"4:7399:111":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"17:299:59463":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:6085:40544":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"4:1633:3058":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"16:3287:3970":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"4:820:4296":{"crate_id":4,"path":["std","thread","local","os","Key"],"kind":"struct"},"12:937:3053":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:12494:48243":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"6:4281:39510":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:46304:2372":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"4:11204:3297":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:4377:39522":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"5:1080:4255":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:4501:39536":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:10788:43544":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"5:5002:182":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:4272:39509":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:563:36492":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:10106:4132":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:3325:1904":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:47936:2208":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"4:70:1446":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"16:2816:3978":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"4:15728:1692":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"1:53134:19572":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:10985:2649":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"16:5421:3743":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:11822:44276":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:624:36500":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:13564:49390":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"4:6857:2906":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:7174:3789":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"4:11928:3085":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"16:6682:3712":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:52450:2475":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:5672:3753":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:46038:2699":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:22810:2428":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"5:1595:3051":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"4:5555:2936":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:12570:2689":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"4:15741:1705":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"5:1500:89":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"4:5643:2923":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:48218:119":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"18:644:4162":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:9264:41722":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"4:3249:3217":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"12:761:2557":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"4:1651:3060":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"4:10519:3061":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"6:4523:39539":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"4:8354:184":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"5:3683:4255":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:6252:3771":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"18:636:59480":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:4790:42337":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:24496:2751":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"4:15742:1706":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"4:900:3178":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:9759:43354":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"5:8035:3395":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:49035:2670":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:50008:4391":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"5:909:91":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:46336:2375":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"16:7158:3788":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"4:2456:4379":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"1:49712:2331":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:13205:48896":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:11358:4055":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"4:14024:2980":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:12795:48393":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:2108:549":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:2004:2947":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"16:5753:3757":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:4133:39499":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:10321:138":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:12889:2320":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"4:10799:3161":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"17:10149:43356":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:11218:2658":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"4:6343:2903":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"4:11210:3265":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"4:15723:1687":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"4:2433:30968":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"18:667:4164":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:53172:19574":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:511:36486":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"8:0:1743":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:2429:2253":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"4:5635:2922":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:12195:48222":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"4:12540:4301":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"18:829:4153":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:45548:176":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"6:5420:40144":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:9622:74":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"4:13440:3155":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"16:7453:3699":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:9404:43349":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:49134:2652":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"12:469:58592":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:7928:2527":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:0:1751":{"crate_id":17,"path":["object"],"kind":"module"},"16:4922:42369":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"15:269:3627":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"4:2183:3168":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:3945:39476":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:3195:3966":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"5:7968:3068":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"4:14385:2957":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"6:4300:39512":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:3186:197":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:10311:134":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:48477:138":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:1522:37372":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"15:230:3622":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:49496:2314":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:46233:10963":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"17:13119:48845":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:7738:3798":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"5:7955:3067":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:11328:43367":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:22625:2427":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:2799:98":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"4:11914:3082":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:591:36495":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"4:9081:3171":{"crate_id":4,"path":["std","lazy","SyncOnceCell"],"kind":"struct"},"1:3662:2289":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"12:1855:137":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:3319:1903":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:11932:48041":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:49832:2710":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:2834:116":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:53082:19568":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:12287:48229":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:10827:4053":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:6028:37338":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:5359:40137":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:5548:40175":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:13054:48841":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"4:11906:2556":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:13446:49373":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"4:6227:3272":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:46402:2380":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:6087:3696":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:10623:43575":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:4120:39497":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:3426:123":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:6152:3698":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:3187:100":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:3012:2363":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"4:13742:3142":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"5:2093:3373":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"4:15707:55228":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:48155:66":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:49828:2708":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:10543:43570":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:12480:48242":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"4:8570:1861":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:6691:3782":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:48699:2889":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:6518:3777":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"4:10536:30963":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"4:11130:32528":{"crate_id":4,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"17:2314:4111":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"4:14753:3143":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"18:650:4159":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:45594:180":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:6899:39668":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"5:3472:2556":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"4:11296:33116":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"4:1415:2556":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:23562:2737":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:12783:48390":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:48994:2666":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"4:7507:3136":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"6:4101:39495":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"4:8628:154":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"4:8169:3200":{"crate_id":4,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"1:52846:2467":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:294:59457":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:9849:59462":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:3195:1844":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:53157:19573":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:45640:181":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:12118:48159":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"4:6603:55393":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:5945:36408":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:13386:49342":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"9:0:1744":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"6:4439:39530":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:49238:2656":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:157:36177":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"16:3264:3969":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"4:2397:30957":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"16:6744:3998":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:5717:3755":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"4:6365:2904":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:51660:2474":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"18:660:4163":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:3429:124":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:47285:187":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:47421:86":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:13258:48940":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:1690:37389":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:13788:49444":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"5:1613:3419":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:11190:2656":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"12:2018:3048":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"6:1554:37377":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:24934:2590":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"4:11464:3123":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"1:23906:4983":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:13819:49449":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:21:642":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"17:13520:49383":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:12554:2686":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:12685:48317":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"18:136:49848":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:0:461":{"crate_id":1,"path":["core"],"kind":"module"},"4:9205:3018":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:10361:2308":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:11820:4314":{"crate_id":1,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"16:7549:3707":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:3018:3963":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"4:2565:119":{"crate_id":4,"path":["std","error","Error"],"kind":"trait"},"1:46652:11251":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"4:10529:3062":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"18:849:4154":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:10673:43576":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:13038:13924":{"crate_id":1,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"6:6185:40551":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"18:169:49850":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"18:857:4155":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:55786:2357":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:24326:2747":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"7:85:41201":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:4157:4062":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"4:4596:2210":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"17:11458:43767":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:7185:3790":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:2754:3952":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:12010:48050":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:5522:3749":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"18:896:4158":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"5:5518:3304":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"5:7985:96":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"0:0:1530":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"6:5371:40138":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:7360:176":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"4:2177:3167":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"16:2991:3973":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"4:15729:1693":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"1:11062:2651":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:9186:4057":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:5273:3953":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:13780:49443":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"5:3237:3048":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"16:6949:4004":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:10128:4134":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:12431:48238":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"12:866:3047":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:578:32159":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:525:36488":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:49338:2691":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"4:12032:1863":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:13590:49393":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"4:1428:2557":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:3091:4022":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:1547:37376":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:7467:3700":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"5:7862:176":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:4995:42392":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:50865:2460":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:11665:44093":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:8762:1662":{"crate_id":1,"path":["core","lazy","Lazy"],"kind":"struct"},"4:5766:3290":{"crate_id":4,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"17:12373:48235":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"4:0:1292":{"crate_id":4,"path":["std"],"kind":"module"},"4:11224:3274":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"4:1507:3053":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:8198:1821":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:4704:42326":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"4:14395:55531":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"5:3552:4255":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:11539:44044":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"4:11873:54999":{"crate_id":4,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"4:10661:2933":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:6923:41101":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:6591:3780":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"12:1200:3602":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:8233:112":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:10117:4133":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"4:9626:4294":{"crate_id":4,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"1:49380:2693":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"16:5472:3746":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"5:6335:68":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"5:1567:3046":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:11499:43983":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:13997:2478":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:6678:2392":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:57108:50347":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"4:2159:2008":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:11847:44290":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:51786:2466":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"9:603:41424":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"4:3617:2970":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"4:2171:3166":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"5:7793:3364":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"4:1488:3049":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:6620:3991":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"4:15475:4306":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"4:8910:55799":{"crate_id":4,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:11588:44053":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:3080:141":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"17:9719:43353":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"5:2075:4257":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:5221:40129":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:11970:43577":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:3990:39481":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"4:8526:1860":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:13180:48893":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:48460:50355":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:4073:39492":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:14000:49528":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:51249:2453":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:5953:37311":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:51475:50196":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:51398:2433":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:50016:172":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"4:4344:2980":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"4:15726:1690":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"1:8189:143":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"4:5406:3260":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:4046:39488":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"4:4605:55524":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"18:790:4149":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"9:722:3470":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"1:7892:2985":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:9332:4075":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"12:1180:3601":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"5:4228:3408":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"4:10919:2987":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"5:6371:3390":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:47277:170":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"4:4307:2979":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:46125:2588":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:4835:1830":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:46069:2878":{"crate_id":1,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"1:6236:2374":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"18:744:59483":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:10095:4131":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"12:160:3604":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:11604:44054":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:5314:41722":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:1676:37388":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:1311:4138":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:2138:1019":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:49895:2792":{"crate_id":1,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"4:11855:55214":{"crate_id":4,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"1:8148:2411":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"4:14927:3098":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:48857:2654":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:3297:1902":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"4:2362:571":{"crate_id":4,"path":["std","env"],"kind":"module"},"1:51032:2429":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:5456:3745":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"6:5274:40132":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:9476:43351":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:46445:2383":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:7713:2273":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"6:5255:40110":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:4410:39526":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:45956:2698":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:4262:39508":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:4535:42257":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"4:15739:1703":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"5:1179:57381":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:45731:2528":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"4:8361:3083":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"5:7886:3371":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"4:15230:3631":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:6569:3993":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"9:692:3469":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"16:6605:3713":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:51146:2461":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"4:8733:1660":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"4:13203:3267":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:11726:44152":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"5:2418:3427":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:46025:2883":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:11199:43365":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"4:11851:55398":{"crate_id":4,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"17:13942:49486":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:6101:3694":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:49691:2329":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:5269:40131":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"18:0:1752":{"crate_id":18,"path":["memchr"],"kind":"module"},"5:2134:3424":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:13838:2722":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:51579:50400":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:3429:3685":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"4:10437:55415":{"crate_id":4,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"4:4305:2978":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:5407:40142":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"5:7314:3348":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:3339:1907":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:12531:2685":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"5:8151:3048":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"5:8003:3394":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"12:747:2556":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:23812:4963":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:45962:10597":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"5:6938:4255":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"16:7843:3800":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:4614:42311":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:13582:49392":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"4:11794:3141":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"16:4304:42201":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"18:620:59498":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:6032:3689":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"9:1075:3537":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:48173:69":{"crate_id":1,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"1:49844:2711":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"4:1472:3047":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:4651:2356":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"9:234:3494":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"5:3955:4255":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:13272:48942":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"5:8018:2779":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:5941:171":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"9:157:3486":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"1:4990:1841":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:10304:4071":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:3488:3972":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:55825:2357":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:3664:3048":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"1:5213:2874":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"4:14798:55209":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:12741:48326":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:47757:87":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:49677:2328":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:10098:103":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"16:547:3943":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"4:12194:4379":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"6:5185:40125":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:49856:2707":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:7884:3706":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"12:377:3607":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"5:7787:2008":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:10635:43542":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"4:9631:4295":{"crate_id":4,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"6:6858:39662":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:4682:2252":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:88:36111":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:9088:43345":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:10317:4074":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:3266:1892":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:610:36498":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"4:2395:30956":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"1:23913:2812":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"4:14310:3021":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"6:6051:37312":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:24394:2748":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:9119:1984":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:4419:39527":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:12507:48244":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"18:774:59480":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:5330:41721":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"12:976:3056":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:12645:48314":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:50939:2452":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:13652:14187":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:1700:37390":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"4:2855:161":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"5:1748:4255":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:55812:2357":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:4371:39521":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"5:7870:3370":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"4:15731:1695":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"4:11243:3020":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"4:7624:3142":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"4:5281:3252":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"4:11948:3086":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:3155:108":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:10894:2556":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:9943:59472":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:49016:2668":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:12946:48787":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:9896:59465":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"5:8096:3313":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:49824:2705":{"crate_id":1,"path":["core","str","LinesAnyMap"],"kind":"struct"},"18:866:4156":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:51200:2468":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:13842:49450":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"0:39:1536":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"1:46661:2986":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:8662:2270":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:11738:44261":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"5:375:3322":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"4:783:4296":{"crate_id":4,"path":["std","thread","local","fast","Key"],"kind":"struct"},"4:3110:3210":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"1:3074:73":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:1455:1659":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"1:48935:2662":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"11:46:58591":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"1:45663:1912":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"9:809:3118":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:55851:2357":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:51423:2434":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:6430:51606":{"crate_id":1,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"5:1199:3421":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:13617:169":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:47191:2007":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:8724:2601":{"crate_id":1,"path":["core","lazy","OnceCell"],"kind":"struct"},"1:57087:50349":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"5:1576:3049":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"7:38:41194":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:6812:41075":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"4:10940:2959":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"6:1630:37385":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:13465:49377":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:5815:3760":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"18:610:4160":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:10052:43414":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:8902:43340":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:55799:2357":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:6413:3619":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:47216:2008":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"17:13172:48851":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"12:1118:3058":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"4:8875:1869":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:9780:2634":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:9729:59468":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"12:1235:3603":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"5:3130:3167":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"4:10962:2369":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"17:11835:44289":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:13540:49387":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:51099:2473":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"4:14348:55219":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:11159:43363":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:47715:80":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:9689:59474":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:10356:2307":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:46365:2377":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:3320:4023":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"5:7856:2008":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"4:10312:4299":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:49390:2694":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"18:704:59480":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:13554:49389":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:3086:205":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"4:9140:3172":{"crate_id":4,"path":["std","lazy","SyncLazy"],"kind":"struct"},"4:7555:3139":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"1:12284:2857":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:47208:2557":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"16:6021:3958":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"5:8049:3396":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:12521:48245":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:51296:2441":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:584:36494":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:13925:133":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:9839:4083":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"4:14961:3105":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:1665:37387":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:6126:3766":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:4008:43546":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:13192:48895":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:49548:2324":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"9:963:3534":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:6239:40555":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:13978:49492":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:10048:2210":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"4:15725:1689":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"4:7812:4382":{"crate_id":4,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"16:4350:42222":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:5100:2947":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:12552:48247":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"6:4459:39532":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"4:15747:1711":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"4:8012:3200":{"crate_id":4,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"17:10377:4110":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:12234:48225":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:13986:49494":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:9118:1985":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:13889:183":{"crate_id":1,"path":["core","task","ready","Ready"],"kind":"struct"},"1:51012:50401":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:7342:3732":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"12:1159:3600":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:48489:3118":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"6:4341:39517":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:6014:3765":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:10113:2208":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"3:0:1739":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:3485:1911":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:7042:4008":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:4770:1657":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"17:9034:43343":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:4364:39520":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"5:1422:3058":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:50075:150":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"4:3261:3223":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"17:11714:44151":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:11809:44275":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:49725:13926":{"crate_id":1,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"4:15727:1691":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"17:13296:48945":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"5:4386:4258":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:5978:40541":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"4:4267:3237":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:51327:2445":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:11204:2657":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:5312:40135":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"4:13888:4302":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"11:54:3590":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"6:4227:39506":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:4449:39531":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:7420:3720":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"1:45456:1922":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:8954:4059":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:10109:2216":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"16:4890:42362":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"4:11247:33113":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"4:6769:2910":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:47547:77":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"4:11144:3254":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"4:4557:2956":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"4:14670:4303":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"4:14848:55399":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:51900:2454":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:6309:2389":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:10714:194":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"14:189:41642":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:6100:40546":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"4:11025:3006":{"crate_id":4,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"4:15733:1697":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"1:3552:1913":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"4:3955:119":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"17:11678:44094":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"4:10426:3174":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"5:8067:57326":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"15:248:3623":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"14:0:1748":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"4:1438:2008":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:6614:36445":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:6644:40916":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"12:812:3051":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:32025:2552":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:4282:2008":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:31990:2774":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:9799:43355":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:22363:51671":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:46092:2879":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:10107:2215":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"18:837:2315":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:3314:1901":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:2484:43459":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"18:677:134":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"4:11218:3254":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:2773:3985":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:46266:2387":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"16:7205:3792":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"5:5522:3306":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:49998:183":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:24462:2750":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:13547:49388":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"4:10716:2969":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:46670:11252":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:1527:37373":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:6005:33113":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:7392:3704":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:49116:2648":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"4:5705:2928":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:13488:49379":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"16:7870:3705":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:49320:2690":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"4:14766:3144":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:11135:2653":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:12275:48228":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"5:3137:3168":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:13526:130":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"16:5561:3750":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:4517:39538":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"4:13704:3140":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"12:2009:2008":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:3904:67":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"16:7024:4007":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:23784:2540":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:6554:3778":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:3463:1919":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"5:2892:57745":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"19:0:963":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:3183:1845":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"17:13429:49372":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:48188:66":{"crate_id":1,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"1:13722:51605":{"crate_id":1,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"1:49836:2709":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"5:8084:3312":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"4:2723:3026":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"1:22819:2426":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"4:13815:3141":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:23468:2420":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"0:41:1537":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"16:3392:3976":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"5:7832:90":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:2866:3960":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"4:11800:163":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"1:3348:1909":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:6176:40550":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:49266:2687":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:12327:48231":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"4:3235:3213":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:1236:43428":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:8185:128":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:12917:48786":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"6:5167:40124":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:4844:1832":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:48468:2309":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"4:10972:2383":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"1:8666:2272":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:543:36491":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:13810:49446":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:48955:2664":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"10:0:1745":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"4:6696:2903":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:3172:3965":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:12385:48236":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:3951:39477":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"12:0:1747":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"1:50105:2480":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:49702:2330":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"4:10992:2692":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"16:7406:3702":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:52057:2449":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"16:4955:42377":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:12168:48220":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"6:4306:39513":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"4:14361:121":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:47505:83":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:55838:2357":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:11176:2655":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:2543:4079":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:7856:3801":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:48926:2661":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"5:3607:3442":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:3255:1890":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:4183:39502":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"4:11365:3118":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"17:13221:48897":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:5013:1842":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:3716:1921":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:4506:42253":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"18:152:49849":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"4:12046:1871":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"4:11150:3255":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:11779:44271":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:49408:2696":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"4:14856:3152":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:7195:3791":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:53187:19575":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:46294:2371":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:46106:2881":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"6:1622:37384":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"4:8664:55799":{"crate_id":4,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:3481:1910":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"17:11045:43360":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:3118:3975":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:1563:37378":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:13637:49403":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"4:11058:3156":{"crate_id":4,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"1:3970:2489":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"17:12051:48151":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:46253:2369":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:542:3671":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"12:1651:3613":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"5:3595:2971":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"4:14942:3099":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:12632:48313":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:7303:3797":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:4478:39534":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:12208:48223":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:4417:42239":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:13356:49012":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:2774:92":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"4:9593:3247":{"crate_id":4,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"4:11028:3010":{"crate_id":4,"path":["std","net","ip","IpAddr"],"kind":"enum"},"4:7333:167":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"4:12017:1862":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"4:10794:3160":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:6636:3715":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"4:11922:2008":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"4:9329:55888":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:13163:48850":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:3633:203":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:50753:2459":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"4:11961:3087":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:4641:42313":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:9769:59470":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:49534:2321":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:47268:2072":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"5:2634:3426":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"14:231:3315":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"4:8290:3441":{"crate_id":4,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"1:51979:2442":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"12:2013:3047":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:9551:4098":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:52995:2470":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:3621:1914":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:9133:43346":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:5987:40542":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:24292:2746":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"5:1604:176":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"9:1056:3529":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:3966:39479":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"5:912:3362":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"4:11866:55809":{"crate_id":4,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"4:13567:3150":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"16:7971:119":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:6219:3770":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:10105:111":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"16:7786:3709":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:1760:37396":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:53093:19569":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"5:2886:2068":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"4:11977:3088":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:5632:3752":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"4:6837:2911":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"4:14911:3097":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"12:112:58595":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:13098:48844":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"4:12051:3039":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"18:820:4152":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:48908:2659":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:3506:3971":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:45724:2527":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"17:13924:49484":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:12582:48249":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:3177:192":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:23633:2740":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"16:6238:3701":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:23726:2545":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:48507:50179":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:46158:2779":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:46455:2384":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:53062:19566":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:6200:40552":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:13532:49386":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"4:10651:3032":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"6:3972:39326":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"12:1762:4253":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"4:4539:2935":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"4:10452:3198":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"4:11107:55225":{"crate_id":4,"path":["std","net","parser","AddrKind"],"kind":"enum"},"4:11192:3004":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:9627:81":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"4:15740:1704":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"18:885:4157":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:13760:49407":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:3638:129":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"4:15730:1694":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"6:6221:40554":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:49184:2684":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"4:15746:1710":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"1:46145:2778":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:681:43339":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:1533:37374":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:50705:50265":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"5:7902:2008":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:11653:44092":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:5228:40130":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:46681:11254":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:569:36493":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:49092:2678":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:23928:2767":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:9933:43357":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"5:4156:2556":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:10918:2557":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:1744:37395":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"4:3529:2968":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"5:5473:4255":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:7761:3799":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:2113:7479":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"4:13720:4387":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:37323:2494":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"6:3881:39472":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"16:5766:3758":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"4:10998:3004":{"crate_id":4,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"16:5384:3741":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:6155:40549":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"12:2331:3067":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:10942:2648":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"16:6999:3785":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:13898:49477":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:5241:40109":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:1908:37531":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"4:14378:110":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"4:10668:2934":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"17:10611:43574":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:46636:11249":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:13912:49483":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"4:3108:120":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"4:6767:2909":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"5:5221:1858":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:5295:41724":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:3957:39478":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"5:5558:4262":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"5:4318:212":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:53249:19577":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:9659:59458":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:11640:44091":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:49852:2706":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"4:15696:29999":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"4:5627:2921":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"9:749:3471":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"1:47345:2008":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"17:13685:49404":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:10558:43571":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:519:36487":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"4:10562:2369":{"crate_id":4,"path":["std","error","Chain"],"kind":"struct"},"1:3292:1897":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"4:2582:55810":{"crate_id":4,"path":["std","error","from","StringError"],"kind":"struct"},"17:9005:43342":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:3997:39482":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"5:6635:3302":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:5522:40174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:2188:2510":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"5:6094:202":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:7949:52933":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"}},"external_crates":{"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":15}