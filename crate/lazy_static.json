{"root":"0:0:2379","crate_version":"1.5.0","includes_private":false,"index":{"1:13754:27036":{"id":"1:13754:27036","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12511:1896"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13745:30288":{"id":"1:13745:30288","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5718:31011":{"id":"5:5718:31011","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:297:2733","`String`":"5:7759:256"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2733","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13831:30299":{"id":"1:13831:30299","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:13437:3792","`DoubleEndedIterator`":"1:8393:133","prim@char":"4:12492:490","str::match_indices":"1:13828:30298"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44740:3828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:3806","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13443:3806","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13458:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5701":{"id":"5:5701","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5702:31007","5:5703:2720","5:5706:31008","5:5709:31009","5:5717:31010","5:5718:31011","5:5719:3524","5:5720:28209","5:5721:28210"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13828:30298":{"id":"1:13828:30298","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:13437:3792","`DoubleEndedIterator`":"1:8393:133","prim@char":"4:12492:490","str::rmatch_indices":"1:13831:30299"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44722:3827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:3806","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13834:30300":{"id":"1:13834:30300","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13753:350":{"id":"1:13753:350","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13754:27036","`u8`":"4:12511:1896"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13875:3537":{"id":"1:13875:3537","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:5060:3537"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44880:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5719:3524":{"id":"5:5719:3524","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7759:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13748:30290":{"id":"1:13748:30290","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:13746:30289"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5720:28209":{"id":"5:5720:28209","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13868:26973"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13857:30308":{"id":"1:13857:30308","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12492:490","self::pattern":"1:13437:3792"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:3806","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13813:27068":{"id":"1:13813:27068","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12492:490","str::splitn":"1:13810:27066","self::pattern":"1:13437:3792"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44694:3748","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:3806","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13443:3806","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13458:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13784:27073":{"id":"1:13784:27073","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12492:490","self::pattern":"1:13437:3792"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:3806","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13443:3806","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13458:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13742":{"id":"1:13742","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13743:1024","1:13744:2823","1:13745:30288","1:13746:30289","1:13748:30290","1:13751:26932","1:13752:30291","1:13753:350","1:13754:27036","1:13755:2384","1:13757:24471","1:13759:24472","1:13761:24473","1:13763:30292","1:13764:30293","1:13765:27055","1:13766:27056","1:13767:27059","1:13768:27060","1:13770:23631","1:13771:23869","1:13772:21883","1:13773:23615","1:13774:23629","1:13775:29581","1:13776:30294","1:13777:23633","1:13778:24003","1:13781:27072","1:13784:27073","1:13787:2864","1:13791:2822","1:13795:27061","1:13798:23620","1:13801:27064","1:13804:30295","1:13807:30296","1:13810:27066","1:13813:27068","1:13816:27070","1:13819:27071","1:13822:2593","1:13825:30297","1:13828:30298","1:13831:30299","1:13834:30300","1:13836:30301","1:13838:30302","1:13840:30303","1:13841:30304","1:13842:30305","1:13845:30306","1:13848:26403","1:13851:27074","1:13854:30307","1:13857:30308","1:13860:30309","1:13863:30310","1:13865:26969","1:13866:26970","1:13867:26972","1:13868:26973","1:13869:26974","1:13870:26976","1:13871:26977","1:13872:26978","1:13873:30311","1:13875:3537","1:13876:30312"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13822:2593":{"id":"1:13822:2593","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:13437:3792","`DoubleEndedIterator`":"1:8393:133","prim@char":"4:12492:490","str::rmatches":"1:13825:30297"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44776:3825","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:3806","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13778:24003":{"id":"1:13778:24003","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12492:490","self::pattern":"1:13437:3792"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:3806","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13854:30307":{"id":"1:13854:30307","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12492:490","self::pattern":"1:13437:3792"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:3806","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13443:3806","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13458:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5721:28210":{"id":"5:5721:28210","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13869:26974"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13764:30293":{"id":"1:13764:30293","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12498:1765","crate::ops::IndexMut":"1:3621:2800","str::slice_unchecked":"1:13763:30292"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13766:27056":{"id":"1:13766:27056","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:13765:27055","str::split_at_mut_checked":"1:13768:27060"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13767:27059":{"id":"1:13767:27059","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13768:27060"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42580:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13773:23615":{"id":"1:13773:23615","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13774:23629"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44846:3821","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13795:27061":{"id":"1:13795:27061","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:13437:3792","`DoubleEndedIterator`":"1:8393:133","prim@char":"4:12492:490","str::split_whitespace":"1:13773:23615","str::rsplit":"1:13801:27064"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:44572:3750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:3806","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13755:2384":{"id":"1:13755:2384","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42582:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42580:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13759:24472":{"id":"1:13759:24472","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13765:27055":{"id":"1:13765:27055","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:13767:27059","str::split_at_mut":"1:13766:27056"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5717:31010":{"id":"5:5717:31010","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7759:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13836:30301":{"id":"1:13836:30301","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5702:31007":{"id":"5:5702:31007","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2733","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:297:2733","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13825:30297":{"id":"1:13825:30297","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:13437:3792","`DoubleEndedIterator`":"1:8393:133","prim@char":"4:12492:490","str::matches":"1:13822:2593"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44794:3826","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:3806","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13443:3806","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13458:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13791:2822":{"id":"1:13791:2822","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42582:202","prim@char":"4:12492:490","self::pattern":"1:13437:3792"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42580:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:3806","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13443:3806","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13458:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13865:26969":{"id":"1:13865:26969","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13752:30291":{"id":"1:13752:30291","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13810:27066":{"id":"1:13810:27066","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12492:490","self::pattern":"1:13437:3792","str::rsplitn":"1:13813:27068"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44676:3752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:3806","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13860:30309":{"id":"1:13860:30309","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12492:490","self::pattern":"1:13437:3792"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:3806","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13443:3806","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13458:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13744:2823":{"id":"1:13744:2823","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13842:30305":{"id":"1:13842:30305","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12492:490","self::pattern":"1:13437:3792"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:3806","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13443:3806","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:13463:3807","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13774:23629":{"id":"1:13774:23629","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13773:23615"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44855:3830","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13763:30292":{"id":"1:13763:30292","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12498:1765","str::slice_mut_unchecked":"1:13764:30293","crate::ops::Index":"1:40131:2799"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13768:27060":{"id":"1:13768:27060","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13767:27059"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42580:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13870:26976":{"id":"1:13870:26976","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1151:36965"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13770:23631":{"id":"1:13770:23631","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12492:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:44542:3819","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13761:24473":{"id":"1:13761:24473","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13777:23633":{"id":"1:13777:23633","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44864:3829","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13807:30296":{"id":"1:13807:30296","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:13437:3792","str::split":"1:13795:27061","prim@char":"4:12492:490","str::split_terminator":"1:13804:30295"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:44640:3823","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:3806","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13443:3806","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13458:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13867:26972":{"id":"1:13867:26972","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13872:26978":{"id":"1:13872:26978","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1151:36965"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13873:30311":{"id":"1:13873:30311","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:5059:30311"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44871:3559","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13776:30294":{"id":"1:13776:30294","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44836:3822","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13772:21883":{"id":"1:13772:21883","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:44558:3217","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13819:27071":{"id":"1:13819:27071","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42580:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:3806","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13443:3806","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13458:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13863:30310":{"id":"1:13863:30310","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:13398:148","`FromStr`":"1:13397:3292"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42845:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:13397:3292","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:13397:3292","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2379":{"id":"0:0:2379","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[208,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\nuse lazy_static::lazy_static;\n\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\nuse lazy_static::lazy_static;\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.5.0\")]","#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:29:2385","0:31:2386","0:28:2379"],"is_stripped":false}}},"1:13841:30304":{"id":"1:13841:30304","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13757:24471":{"id":"1:13757:24471","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42582:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42580:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13845:30306":{"id":"1:13845:30306","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12492:490","self::pattern":"1:13437:3792"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:3806","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13848:26403":{"id":"1:13848:26403","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12492:490","self::pattern":"1:13437:3792"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42580:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:3806","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13804:30295":{"id":"1:13804:30295","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:13437:3792","str::split":"1:13795:27061","prim@char":"4:12492:490","`DoubleEndedIterator`":"1:8393:133","str::rsplit_terminator":"1:13807:30296"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:44622:3824","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:3806","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13751:26932":{"id":"1:13751:26932","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12960:3812"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13775:29581":{"id":"1:13775:29581","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44826:3820","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13866:26970":{"id":"1:13866:26970","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:40484:3504","Self::is_ascii":"1:13865:26969"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42580:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:40484:3504","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28:2379":{"id":"0:28:2379","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[161,0],"end":[173,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"inner":{"macro":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"}},"1:13869:26974":{"id":"1:13869:26974","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13816:27070":{"id":"1:13816:27070","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42580:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:3806","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29:2385":{"id":"0:29:2385","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[179,0],"end":[182,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"1:13876:30312":{"id":"1:13876:30312","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:5057:30312"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44889:3558","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13838:30302":{"id":"1:13838:30302","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5709:31009":{"id":"5:5709:31009","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7759:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13743:1024":{"id":"1:13743:1024","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12492:490"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13851:27074":{"id":"1:13851:27074","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12492:490","self::pattern":"1:13437:3792"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42580:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:3806","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13443:3806","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13458:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13868:26973":{"id":"1:13868:26973","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13746:30289":{"id":"1:13746:30289","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13787:2864":{"id":"1:13787:2864","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42582:202","prim@char":"4:12492:490","self::pattern":"1:13437:3792"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42580:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:3806","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5703:2720":{"id":"5:5703:2720","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7759:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:3806","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13801:27064":{"id":"1:13801:27064","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:13437:3792","`DoubleEndedIterator`":"1:8393:133","prim@char":"4:12492:490","str::split":"1:13795:27061"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:44590:3754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:3806","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13443:3806","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13458:3808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13840:30303":{"id":"1:13840:30303","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5706:31008":{"id":"5:5706:31008","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7759:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:3806","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13871:26977":{"id":"1:13871:26977","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1151:36965"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31:2386":{"id":"0:31:2386","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[206,0],"end":[208,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\nuse lazy_static::lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["lazy",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"LazyStatic","id":"0:29:2385","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13781:27072":{"id":"1:13781:27072","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"4:12492:490","self::pattern":"1:13437:3792"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:3806","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13771:23869":{"id":"1:13771:23869","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12492:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:44548:3818","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13798:23620":{"id":"1:13798:23620","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12492:490","self::pattern":"1:13437:3792"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:13227:3763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13443:3806","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"16:5647:16980":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:40051:2810":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"5:1378:9306":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:13452:3809":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"16:2818:16090":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:7635:2836":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"4:6498:3189":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"4:11071:9565":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"1:44429:3760":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:47898:8930":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:10878:164":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"4:11927:3203":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"11:292:3128":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:15076:20738":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:5271:14077":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"5:4284:3529":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:538:10074":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:15778:21476":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:11740:3160":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:46681:8959":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"5:4511:3529":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"16:7835:17071":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:43404:3715":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:12134:17344":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"11:1885:9309":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:6749:14834":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"4:11168:26574":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:10295:17178":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:6157:17009":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:15956:21492":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:41250:3632":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:5529:14108":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"5:282:30169":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:5405:14094":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"16:8220:17093":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:8266:14287":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"18:0:2627":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:46952:22874":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:10792:17193":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"1:41281:3633":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"5:1222:3152":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:33560:2775":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"18:481:21727":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:3058:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:46903:9015":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:14326:17409":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:3419:2797":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:44722:3827":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:11215:24319":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"17:15089:20739":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:45175:3810":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:16125:21502":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:15585:21462":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"4:11030:3188":{"crate_id":4,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"1:33772:2778":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:45490:230":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:3357:3480":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"1:24147:247":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:5740:17000":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:582:17168":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"4:3411:9440":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:4890:14038":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:1727:10990":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:6398:14802":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:43654:3481":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"18:80:21704":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:41054:3561":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"5:3297:31587":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:16180:21507":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:2872:146":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"6:6638:14820":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:43944:168":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"5:1206:30122":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"4:9510:9584":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:41835:3618":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:41015:3560":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"18:113:21706":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:41147:3595":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:38893:2794":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:40293:2804":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"4:11039:26414":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"4:2762:9419":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:532:10073":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"4:8361:29125":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:6571:17023":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:15707:21469":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:11113:17199":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"4:11390:29155":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:14334:17407":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"16:6967:17046":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:1563:10975":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:2682:16084":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:40148:224":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:40223:225":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:13192:17466":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:8809:3571":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:12279:17401":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:2746:16087":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:42910:207":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"5:3331:31593":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:47921:8931":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:43119:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"4:3682:9392":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"4:4367:9495":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"5:7233:30204":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:43966:22740":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:14417:163":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:47705:8968":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"5:3076:31594":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:4816:14032":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"4:3607:9391":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"4:8284:9429":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:47528:8956":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"4:8646:9451":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:23499:3294":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:11566:251":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"4:1877:9332":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"17:14018:20194":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:14572:20705":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:23129:9062":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:14268:20688":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:11732:17277":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:14415:20696":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:13113:3834":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:1597:10979":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:7326:15241":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"5:1777:30169":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"16:5415:16794":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"4:9451:245":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:10921:3731":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:15495:21457":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:4150:16127":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:41008:3559":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:13470:17216":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:41319:23012":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:40163:221":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"4:703:9275":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:22150:25976":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"4:9466:2763":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"0:31:2386":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"16:7347:33057":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:15120:20741":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:14283:20689":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"4:9474:173":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"16:2448:16073":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"5:4465:279":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:16534:21678":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"16:2948:16096":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:39472:2795":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:12370:17359":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:22640:8942":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"17:10629:17188":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:4950:2703":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:42893:3161":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"16:6806:17034":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"4:3625:3187":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"4:8243:151":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"5:5405:9621":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"1:42780:221":{"crate_id":1,"path":["core","range","Range"],"kind":"struct"},"1:2224:3485":{"crate_id":1,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"6:6659:14823":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:2666:694":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:47079:8989":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:16356:21520":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:46529:8986":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:10096:17171":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"1:41159:3217":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"1:3316:260":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:7001:24208":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"17:15898:21486":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:13969:20191":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"16:6911:17043":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"5:7782:9632":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:32742:3503":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"16:8134:17088":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"16:7209:16015":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"4:9354:29120":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"4:11822:29146":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"6:5311:14082":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:8118:221":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:485:10068":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:5301:14081":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"18:718:21716":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:11652:17253":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:5450:14098":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:12175:17346":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"4:437:196":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:22129:25979":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"17:15732:21471":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"5:5814:9649":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"4:3409:9439":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:42599:184":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:23601:22976":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"1:14181:216":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"17:11552:17252":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:1632:10981":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:12960:3812":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"11:1579:15990":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:11591:17249":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:13870:20184":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:23656:22877":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"6:1500:10968":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"4:9367:17069":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:23579:22815":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"17:12905:17444":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"4:9380:26440":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"4:12508:924":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"6:465:10065":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"4:8085:9277":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"4:12475:26502":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"4:11429:3202":{"crate_id":4,"path":["std","sys","exit_guard","PThread"],"kind":"struct"},"9:0:2619":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:44826:3820":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"11:2354:3160":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:12055:17342":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"9:490:15870":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:26547:281":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"16:8595:17104":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:5585:14114":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:44548:3818":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:11909:3764":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"18:659:21719":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:1922:3415":{"crate_id":1,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"5:7604:2828":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"11:1703:167":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"5:1569:9295":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:5640:14120":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"11:820:9302":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"16:3693:16107":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:43269:98":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:7494:15248":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:13634:17503":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:14030:20195":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:909:201":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"17:12710:17448":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"5:1393:3142":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:12203:17348":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"4:11758:9551":{"crate_id":4,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"17:13204:17204":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:13180:17467":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"17:16592:20181":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"6:5088:14060":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:41420:3643":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:47647:8996":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"5:4194:3161":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:41241:3625":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"0:29:2385":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"1:41351:3648":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"4:6395:3227":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:14519:20701":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:6121:17007":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"4:11086:26455":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:8334:2732":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:8708:17109":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:11578:17250":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:564:10078":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:11871:3751":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:5550:14110":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:16499:21677":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"17:15660:21465":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:16138:21503":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:10030:17170":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"19:0:1323":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"9:168:15972":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:44992:3846":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:14345:17408":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:11400:17233":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:901:33208":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"5:7185:278":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:10393:17181":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:12027:17341":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"4:904:3161":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:10937:33723":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:15869:21483":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"5:297:2733":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:14707:20714":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:7762:17070":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:10802:3217":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"5:4544:3529":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"4:8739:9535":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:23452:22817":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:32876:2729":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"17:12748:17419":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:3569:2707":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"16:6186:17011":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:46544:8946":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:2829:3492":{"crate_id":1,"path":["core","clone","InitializingSlice"],"kind":"struct"},"4:11862:26407":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:12215:17349":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"18:581:3498":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:7804:33222":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:6452:14807":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:4871:16641":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:6419:17020":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:42712:3687":{"crate_id":1,"path":["core","range","iter","IterRange"],"kind":"struct"},"6:4842:14034":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"5:3326:9308":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"4:8549:3645":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"5:5951:264":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"4:5626:9561":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"1:15:2594":{"crate_id":1,"path":["core","write"],"kind":"macro"},"6:5568:14112":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"5:7060:9649":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:13450:17215":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"5:3256:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"18:515:21729":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:6744:14833":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"1:11553:9394":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"4:9142:9568":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"6:8175:15786":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:7013:17049":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:12043:17312":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"4:12492:490":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"17:10548:17000":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"11:1136:9307":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:16077:21501":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:40958:3564":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:46806:9000":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:7390:11096":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:13797:20180":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:15966:21493":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:41434:3644":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:3074:270":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"17:12930:17219":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:42825:223":{"crate_id":1,"path":["core","range","RangeFrom"],"kind":"struct"},"17:321:33207":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"4:8034:9257":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"4:11848:26499":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"4:12067:9600":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"17:16789:21693":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:45292:3801":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:14206:3889":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"4:2026:810":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"4:2089:209":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:586:10081":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"11:1063:32745":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:45280:3797":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"5:6502:9671":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"1:46696:8965":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:6300:17015":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:7407:11094":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:6267:17014":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:4505:111":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:44977:3845":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:41088:3562":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"17:14298:20690":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"1:34803:2787":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"16:7956:17077":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:473:10066":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"16:894:33184":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"16:3306:16104":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"16:6981:17047":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:7880:17072":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"4:9308:29128":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"16:2618:16081":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"4:3502:9422":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:41000:3538":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"5:3680:193":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:22:842":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"16:2918:16095":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"4:7751:29769":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"5:2246:9247":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:16799:20188":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"1:46629:8999":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:44472:3757":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:0:582":{"crate_id":1,"path":["core"],"kind":"module"},"16:7518:33121":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"11:1042:15987":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"4:9201:9582":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"5:7576:221":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"4:558:9268":{"crate_id":4,"path":["std","thread","thread_name_string","ThreadNameString"],"kind":"struct"},"1:23379:23463":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:44461:3759":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:42664:3670":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:43644:22978":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"6:6602:14816":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:13384:17212":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"18:538:21731":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:16378:21522":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:23568:22986":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"18:765:21718":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:16276:21514":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"4:5996:2752":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:5395:14093":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"5:7084:9650":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:12318:17380":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:45622:23887":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"4:10672:9568":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:16716:21687":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"4:9326:26434":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"16:8666:17108":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:7308:9947":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:4613:2708":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"18:706:3809":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:13463:3807":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"4:3921:9452":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:16249:21512":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:42560:3661":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"16:3012:16099":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:15430:21454":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:4831:2698":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"4:9347:29124":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:34178:2782":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:12065:3749":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:40135:2801":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:14482:20699":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"4:8519:9393":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"1:42804:225":{"crate_id":1,"path":["core","range","RangeInclusive"],"kind":"struct"},"4:5110:9519":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"6:6472:14767":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:6756:14835":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"16:6694:17028":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"4:994:3136":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:3124:16102":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"4:8804:9551":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"4:3673:30064":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:13189:3835":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:553:10076":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:45019:3848":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"4:2560:2551":{"crate_id":4,"path":["std","io"],"kind":"module"},"16:4842:16635":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:10166:17174":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"18:531:21730":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:3592:154":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:11015:17197":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:13144:17463":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:4405:3529":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"11:1871:9297":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:23002:3466":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"4:1118:9306":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"4:2332:150":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"1:22191:9394":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:44558:3217":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:11064:17198":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"4:1127:9307":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:0:2625":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:7551:17068":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:11514:17267":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:8237:14283":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"4:11873:26375":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"5:1516:3160":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"4:969:9299":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:6645:14821":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:1696:9485":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"4:1634:3166":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"4:9753:150":{"crate_id":4,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"4:9295:2755":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"4:11147:26586":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"4:5889:9574":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"4:973:9300":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:13490:17217":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:43927:23893":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:12346:17404":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:40932:3565":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"4:8909:9556":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"4:10795:9439":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"18:670:21720":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:544:32899":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:8276:3623":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"16:2838:16091":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:1507:10969":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:6779:17032":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:2484:16075":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:41342:3638":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:6670:14824":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"4:8019:9269":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"4:2504:9378":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"7:0:1948":{"crate_id":7,"path":["unwind"],"kind":"module"},"6:6679:14825":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"4:11063:9349":{"crate_id":4,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"5:3084:31721":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"4:4182:9462":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"4:6443:29104":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"4:8257:130":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:41779:23855":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"4:9595:3184":{"crate_id":4,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"1:40131:2799":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:46871:8960":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:13982:20192":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"4:9259:9578":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"5:4314:3529":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"4:1649:9309":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:47241:8967":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"5:1608:9300":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"4:11447:9367":{"crate_id":4,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"5:1881:9297":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"16:7935:17075":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"16:6438:17021":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:7220:17056":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"5:3442:9297":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"4:8292:3162":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"11:2513:23639":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:13514:17218":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:15548:21460":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"4:1095:9305":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:9601:3806":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:15829:21479":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:4692:2528":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"4:11950:9453":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"5:720:30287":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:32795:23864":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:3394:2779":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:14871:20724":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"4:8120:9349":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:46935:9022":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:8243:14284":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"4:504:26565":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:44380:3747":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"11:427:32748":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:10441:17183":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:2231:3212":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:14472:3898":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"6:4976:14048":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:16320:21518":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:5319:14083":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"4:11018:29127":{"crate_id":4,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"6:6702:14828":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"6:5557:14111":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:5280:16751":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"14:0:2623":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:10671:3716":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:46482:8980":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:45127:3851":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:8162:17090":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:11280:17202":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"18:491:34015":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:13718:17506":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"6:7524:15250":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:23330:24197":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"4:4176:9461":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:45486:175":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:13094:17470":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"1:47573:8990":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:3832:16108":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"11:2099:9305":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"4:6833:2759":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"4:4948:9477":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"5:1242:30120":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"16:6254:33063":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"4:5025:9472":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:3321:2705":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"17:15620:21447":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"4:12491:1204":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"17:13661:17504":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:46643:8947":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"14:219:16007":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"4:12495:1348":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"1:8393:133":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:5196:14068":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:2680:3466":{"crate_id":1,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"6:5375:14090":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:4900:16647":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:5139:14064":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:15912:21487":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:47676:9017":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"11:1652:32731":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:14151:20204":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"4:0:1757":{"crate_id":4,"path":["std"],"kind":"module"},"1:22175:25983":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:42320:181":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"4:591:3180":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"4:5746:9565":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"16:8562:17102":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:15674:21466":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:1684:10986":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:15314:21450":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:12982:17458":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:15556:21448":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:15638:17256":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:5025:14054":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"4:1109:3142":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"4:4124:9457":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"4:10296:23477":{"crate_id":4,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"1:46739:8934":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:7741:3573":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"4:12506:936":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"4:8581:9450":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"11:1858:3160":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"4:5692:116":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"1:22360:9394":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:12017:17340":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:12944:3743":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"4:9232:9577":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:34044:2780":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:22662:3744":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:3038:3238":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:10667:3714":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"17:15009:20733":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:11526:17261":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:5341:14086":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"1:3796:2805":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:42402:22800":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:578:10080":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"5:7584:30126":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"11:481:165":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:7421:17065":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"4:12496:349":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"6:5441:14097":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"6:8260:14286":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:14691:20713":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:41199:3581":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"4:7188:9585":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"4:8276:26839":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:45141:3852":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"16:5111:16720":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"4:1938:3185":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"6:6651:14822":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:11357:17231":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:2702:16085":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:13889:20185":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"4:1660:9311":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"4:11103:9570":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"5:2138:3162":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:15974:21494":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"5:6021:3166":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"11:1866:3166":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:12334:17403":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"4:11299:26418":{"crate_id":4,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"5:6158:3173":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:16809:20190":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"5:1628:9319":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:11431:17235":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"4:4168:9460":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:12408:17406":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"6:5604:14115":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:22775:9394":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"16:2528:16077":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"4:4834:29408":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"4:2801:9430":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:23531:9394":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"16:7997:17081":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:5503:14105":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"16:7355:17061":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:12961:17456":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:32819:250":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"0:28:2379":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"4:5483:214":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"1:46561:8952":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:1539:10973":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:42608:3160":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"16:3585:16106":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"16:6082:17004":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:10486:17184":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"4:6237:231":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:23368:3293":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:15159:20743":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:6864:17039":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:10662:17189":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"11:686:9299":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"4:12513:1884":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"6:4792:14030":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"4:9193:3160":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:41116:107":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:14139:20203":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:3037:9394":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"8:0:2618":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"14:159:15997":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"5:1479:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:15601:21463":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:16152:21504":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:8176:17091":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"4:8562:3750":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"4:6715:2532":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"1:47324:22987":{"crate_id":1,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"17:10822:17194":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:15939:21490":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:12582:17361":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"4:9185:9570":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"17:13005:17459":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:6729:17030":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"5:4119:3166":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"4:9782:130":{"crate_id":4,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"4:11828:9573":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"5:4149:30169":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:43418:3716":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:2298:200":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:13305:17208":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"4:9760:9389":{"crate_id":4,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"1:40185:223":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"4:10952:9525":{"crate_id":4,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"4:10402:9341":{"crate_id":4,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"17:15147:20742":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:7424:15243":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:8815:3621":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"4:1990:9359":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"1:2682:3467":{"crate_id":1,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"4:8057:3200":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"4:11990:9452":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:11616:17201":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:3108:16101":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"16:8633:17107":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:15417:21453":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:5265:14076":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"7:78:15846":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:2867:212":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:3064:174":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:2222:3484":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:11901:17293":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"4:3575:3529":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"1:10302:24467":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:14749:20716":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"4:4316:26377":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"4:4944:9473":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"4:695:9273":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:42508:3658":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"9:318:15923":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"4:891:3160":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:559:10077":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:15539:21459":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:4990:14050":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"16:6841:17037":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:3589:153":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"4:8638:9488":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"5:6555:9587":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"1:4547:3541":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"17:1338:17262":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:5230:14072":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:6835:17036":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:6893:14866":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"5:7857:9646":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"4:12505:758":{"crate_id":4,"path":["std","f128"],"kind":"primitive"},"4:12499:1855":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"17:12107:17343":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"5:3292:9309":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:13027:17465":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"1:31205:2727":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:4964:14046":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:1675:10985":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:43919:3734":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:7492:33061":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:13944:20189":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:13932:20188":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:5351:452":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:3586:152":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"6:7284:10118":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:5412:1004":{"crate_id":1,"path":["core","iter"],"kind":"module"},"16:6939:17044":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:3580:2730":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:38728:2791":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:5179:9484":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:5007:14052":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:13908:20186":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:22246:8935":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:14437:20697":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"5:1117:30169":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:11502:17240":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"1:41593:3647":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:8284:14290":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:4970:14047":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:2226:17292":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:14546:20703":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:43683:22891":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"6:5224:14071":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:1703:10988":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:7990:15624":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"9:435:15867":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:15845:21481":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"4:4338:9492":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"4:6905:2767":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"1:10677:3718":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"14:213:16006":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"4:8892:3160":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"11:344:32740":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"17:471:17167":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:12919:17454":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"6:5658:14122":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:4239:16170":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:41169:3597":{"crate_id":1,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"1:41802:3612":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"5:6813:2828":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:5482:14102":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:4063:3166":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"16:8206:17092":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:6747:17031":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:46725:9020":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:6428:14805":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:13437:3792":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"16:8543:17101":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:8500:17099":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"4:9319:9253":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:43738:149":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"6:6590:14815":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:7445:15246":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:42704:3665":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:3424:2798":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1:2044:3529":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"11:389:3134":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:2770:16088":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"4:12278:26562":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:906:3295":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"1:13397:3292":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:44590:3754":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"4:4354:9494":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:3139:16103":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"11:663:3161":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:6306:3627":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:5165:14066":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"11:0:2621":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"4:3358:9438":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:5170:16733":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"18:521:21726":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:10608:237":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"16:6887:17041":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:14559:20704":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:11208:24323":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"1:22264:8936":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:16012:21498":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:6950:17045":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:5019:14053":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:545:10075":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:2779:103":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"17:15805:21477":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:42342:3655":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:15946:21491":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:5611:14116":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"16:6606:217":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"4:935:9296":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:12568:3762":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1:41569:3645":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"4:646:9270":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"4:8569:3820":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"1:46497:8945":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"11:2519:32738":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:12549:17364":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"4:5553:132":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"17:16775:21692":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"1:43008:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:2964:16097":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:3404:2777":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"4:8366:29126":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"1:2127:2722":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"16:4265:16173":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:40243:227":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:15474:21456":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:8609:17105":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:11172:33283":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"4:10792:9437":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"5:7504:2828":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"4:2251:132":{"crate_id":4,"path":["std","ffi","os_str","Display"],"kind":"struct"},"4:8039:9258":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"6:4805:14031":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:10627:155":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"17:11447:17236":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"4:11360:173":{"crate_id":4,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"1:4644:2709":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:3853:17385":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"4:7821:29227":{"crate_id":4,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"1:45316:3864":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"0:0:2379":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"11:1878:9308":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"4:5290:29122":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:4829:14033":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"5:923:9313":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:38783:2792":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:41793:2532":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:7302:17059":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:44501:3226":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:505:16045":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"4:8231:9387":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"17:12233:17398":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:40943:22859":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:15438:21455":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:13221:17205":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:2405:17286":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:6850:17038":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"5:5551:9624":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"11:2323:9306":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"17:11804:17290":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:12672:17434":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:11982:3755":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:10695:17190":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"9:345:15883":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"4:3081:237":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"4:7342:29268":{"crate_id":4,"path":["std","sys","backtrace","print","DisplayBacktrace"],"kind":"struct"},"4:12498:1765":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"5:7679:9362":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:15770:21475":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:15035:20735":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:3621:2800":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"5:6902:30169":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:14089:3637":{"crate_id":1,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"1:45541:3894":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:12358:17405":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"4:2527:9385":{"crate_id":4,"path":["std","fs","exists"],"kind":"function"},"4:12507:918":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"1:2157:1393":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:8446:2731":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:10976:33497":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:14532:20702":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"6:1521:10971":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"4:7809:29225":{"crate_id":4,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"1:32818:248":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:40992:3558":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"4:11325:9397":{"crate_id":4,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"4:10838:3200":{"crate_id":4,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"18:623:34021":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:12065:17337":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:8089:2689":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"4:7436:26588":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:14795:20718":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"5:4557:30195":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:5381:14091":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:12190:17347":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"4:378:9266":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:43759:3219":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"16:4402:16287":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:6727:14831":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"6:7962:10025":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:5707:16998":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"4:9456:246":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"4:8492:3609":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"1:41272:3626":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:8326:15823":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"4:12011:9454":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:45304:3804":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:12686:17446":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"16:4118:16118":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:8280:3622":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:40896:3538":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"11:2275:9305":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"17:13957:20190":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:10669:3715":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"6:6802:14837":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:14126:20202":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"10:36:32730":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"4:958:9297":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"4:9359:29117":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"4:2019:9360":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"17:2436:17311":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"4:8209:9389":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"1:12051:3753":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:6486:14768":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:5521:14107":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:12604:17200":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"4:8018:9394":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"1:9488:3672":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:4914:14040":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:11420:17234":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:8316:15822":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:15982:21495":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"5:7695:9363":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:40263:2802":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:3564:2706":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:41121:3594":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:11787:17304":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:6116:3529":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"4:1501:167":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"4:8204:9388":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"17:16029:21500":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:23393:22814":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:42374:3657":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:5241:14073":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:12023:3752":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:4929:14042":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:10777:17192":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"16:6736:33191":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:6638:17025":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"17:14962:20730":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:42358:3656":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"16:5377:16779":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"4:6728:2533":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"4:5119:9520":{"crate_id":4,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"5:3837:3162":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"16:6678:17027":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"17:11456:17237":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"16:7041:17051":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"10:0:2620":{"crate_id":10,"path":["adler"],"kind":"module"},"17:16473:20177":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"6:6441:14806":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:40311:3532":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:44572:3750":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"6:5617:14117":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:16211:21510":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"4:2726:9428":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"14:31:15997":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"5:212:3150":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:6416:14803":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:41579:3646":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"4:8697:9475":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"16:7946:17076":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"4:4154:9459":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"4:8371:9431":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:6171:17010":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:4881:14037":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"11:1862:2828":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:11789:3750":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"4:8842:9553":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"17:16172:21506":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:10675:217":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:41363:3639":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:10331:17179":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:16727:21688":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:22121:3498":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:15694:21468":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:41395:3641":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:23082:9394":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"14:201:9630":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:23096:9063":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"1:42752:3689":{"crate_id":1,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"1:44846:3821":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:12007:17339":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:2722:16086":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:16611:21679":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"1:3389:2774":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"4:2740:3782":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"4:11162:26567":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:23053:3466":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"17:15724:21470":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:47451:8984":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:15285:21449":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:11997:17305":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"14:186:16005":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:4957:14045":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:47793:8923":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"5:7664:9292":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:6459:14808":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"5:7723:9364":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:11080:24324":{"crate_id":1,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"6:7562:15253":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:42580:205":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"16:6623:33193":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:44418:3224":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:12896:17453":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"16:7027:17050":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:43306:2751":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:42901:2828":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:46710:9014":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"5:7759:256":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:13173:3833":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"18:689:21722":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:16311:21517":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"4:11307:3864":{"crate_id":4,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"1:7857:3606":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"4:1638:9297":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:16164:21505":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:5387:14092":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:666:17169":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:45562:23873":{"crate_id":1,"path":["core","task","wake","ExtData"],"kind":"enum"},"16:7398:33019":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"16:8063:17085":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:13168:17498":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:3551:127":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:10842:17195":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"15:0:2624":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:23623:22812":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"11:787:9297":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"4:8652:9491":{"crate_id":4,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"1:47129:9001":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:41404:3642":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:316:33208":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:16262:21513":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:13426:17214":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"4:5817:9567":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"4:2341:9370":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"6:5069:14059":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"4:8268:9293":{"crate_id":4,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"1:41817:3614":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"4:384:9267":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:5349:14087":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"17:11290:33521":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"6:6500:14809":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"3:0:2616":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"17:14932:20728":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"13:0:2617":{"crate_id":13,"path":["std_detect"],"kind":"module"},"4:3856:9449":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:13609:17223":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"4:8556:3217":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"17:10417:17182":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"4:8510:3188":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"1:44855:3830":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:4481:23458":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"16:8230:17094":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"18:735:21717":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:23486:3308":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:13691:17505":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:16763:21691":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"16:7728:3669":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"5:7772:9631":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:42633:3669":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"9:380:15868":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:10665:132":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:42616:3161":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:3194:3509":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"1:3142:126":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"5:3080:31722":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"5:979:9314":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:47868:8928":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"5:7534:9316":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"4:5133:9521":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"4:983:9302":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:8525:17100":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:8025:17083":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"4:948:3166":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:47764:8920":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:13546:17220":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"1:10679:3719":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:14806:20719":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"4:12093:16030":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:16645:21682":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"11:763:9296":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:3311:120":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"17:12786:17414":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"4:6411:26568":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:16202:21509":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:23634:22803":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"16:4954:16655":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:11565:17251":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:4528:3540":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"4:4946:9476":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"11:2394:2828":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"17:14311:20691":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"4:2337:3472":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"4:8827:9552":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:13591:17222":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:45312:3799":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:7966:17078":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:5370:3602":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"4:10489:9572":{"crate_id":4,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"1:2419:3216":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:4896:13870":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:2815:3491":{"crate_id":1,"path":["core","clone","CloneToUninit"],"kind":"trait"},"5:1531:3161":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"4:11055:9523":{"crate_id":4,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"16:3439:16105":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:3867:131":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:47845:8927":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:2903:206":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"4:4023:9454":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:5151:14065":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:6026:17001":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:10307:24381":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"18:573:33992":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:5117:14062":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:15880:21484":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"4:8675:9527":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"4:12515:1872":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"16:2658:16083":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:45308:3798":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"4:3356:9437":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:6873:17040":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:11351:24325":{"crate_id":1,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"14:7:15997":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:1494:10967":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:4762:2690":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"17:14000:20193":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:13837:20182":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:47258:9016":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"4:9313:118":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:45610:3899":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:13509:3838":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:4808:16624":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"4:9209:2828":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:23262:23068":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:6878:14865":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"4:4785:9518":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:5205:14069":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"5:3285:3160":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"4:6836:2760":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"4:2486:3455":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"11:750:9295":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:12606:3482":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"16:3046:16100":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:15023:20734":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:12775:17449":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:4997:14051":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:11877:17200":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"6:7430:15244":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:7463:15247":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:2588:16080":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:45334:134":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"17:14626:20709":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"11:676:2828":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:41333:3637":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"4:3664:3570":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"1:10121:92":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:4888:2700":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:3061:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"16:5222:16739":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:15105:20740":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:12951:17455":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"4:2654:9427":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"4:4419:9496":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:10926:3732":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:10515:17185":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"11:1558:3148":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"4:8099:9278":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:1711:10989":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:5186:14067":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:12975:17457":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"18:548:164":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:11925:17291":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:4947:14044":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:6695:14827":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"17:12735:17420":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"11:718:9300":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:45296:3805":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:12930:3741":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:43721:3481":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:3830:115":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"4:1000:9303":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:44740:3828":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:12825:17415":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:42520:3659":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:4875:14036":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:14844:20722":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:12248:17399":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"4:6075:2764":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"4:615:3183":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:7279:17058":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"11:2533:32733":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"5:4981:228":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"5:7653:9291":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:14392:20694":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"5:7747:9622":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:44398:3222":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"4:11275:9524":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:6523:14812":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"4:9461:2762":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"6:5051:14057":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:16705:21686":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:34457:2785":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:14066:3891":{"crate_id":1,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"4:2502:9377":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"1:41808:3613":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:4897:2701":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"4:11513:9366":{"crate_id":4,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"18:589:23891":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:7515:15249":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:5575:14113":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:13289:17207":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"4:7914:29109":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:47773:8921":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:3957:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"17:15409:21452":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"5:3318:9310":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"4:9428:2756":{"crate_id":4,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"13:229:32762":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:8806:161":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"5:7258:30208":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"5:2152:3165":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"16:6387:17018":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"4:6221:3189":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:5304:17475":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"6:5366:14089":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:11957:17285":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"4:4685:9500":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:4981:16659":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:23417:22961":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:44694:3748":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:16574:20180":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"5:2358:31720":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:6142:17008":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:43232:91":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:11984:17338":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"4:4238:9467":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:13013:17474":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"16:3985:16110":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"17:14083:20199":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:15572:21461":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"4:3083:149":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"1:41291:145":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:47034:8983":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:14374:20693":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:44389:3746":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"11:102:32746":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:0:2626":{"crate_id":17,"path":["object"],"kind":"module"},"6:479:10067":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"4:3918:9453":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:2909:213":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:10114:17172":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:3712:222":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"11:423:32752":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:11756:17278":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:11074:33945":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:7439:15245":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"5:7544:9321":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"17:10217:17175":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"4:10992:26404":{"crate_id":4,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"6:6422:14804":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:1569:10976":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:11308:17203":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:44836:3822":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:10660:122":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"16:6995:17048":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"16:7575:17069":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:13069:17200":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"6:7367:11111":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:7413:17064":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:6237:17013":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:41385:3640":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:46664:8953":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:8325:176":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"4:12514:1890":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"1:22139:25979":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"4:9159:9524":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"11:1898:9311":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:13054:17257":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"1:44889:3558":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:23612:22876":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"16:2988:16098":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:11764:3161":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"4:8586:9448":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"4:12504:779":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"4:7959:26579":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:12839:17417":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:13156:17462":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"1:44871:3559":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"4:7833:29226":{"crate_id":4,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"1:43425:3717":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:47618:8962":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:12722:17421":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"9:412:15869":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"16:6711:17029":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:14831:20721":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"4:9436:3529":{"crate_id":4,"path":["std","sync","poison","Guard"],"kind":"struct"},"1:22193:8940":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:45583:191":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:43956:9551":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"6:6513:14811":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"5:6137:2750":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"4:7847:29224":{"crate_id":4,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"12:0:2622":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"4:4904:9522":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:13756:20178":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"4:7405:26577":{"crate_id":4,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"4:533:9247":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:32906:3416":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"17:13081:17201":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"1:11832:3763":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:10533:16999":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"4:11001:9390":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"1:46789:8994":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"5:7512:9315":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:12815:17216":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"5:2285:31679":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:13553:17227":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"17:13208:149":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:45193:3811":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:13920:20187":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"6:4869:14035":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"4:2092:208":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"4:12512:1878":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"5:3352:9311":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"16:2898:16094":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:14459:20698":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"11:2374:3161":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:10886:168":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"17:10860:150":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"4:11047:26443":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:12868:17215":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"18:563:21732":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:8278:14289":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"6:6858:13945":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"4:1879:9333":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"5:3706:3161":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"4:8898:9555":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"17:10927:17196":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:23510:3309":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"4:12464:9279":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"5:2573:3153":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:46888:8966":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:497:10070":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"5:7708:3599":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:31167:2726":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:22372:8936":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:40484:3504":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"4:9244:9580":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:42845:237":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"17:15746:21472":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:14154:24144":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"4:10580:3199":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"1:40203:226":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:32809:3514":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"6:5664:14123":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"11:2525:32737":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:8294:14291":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"5:1407:9307":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:517:10071":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:7156:17054":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"16:8480:17098":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"16:155:16048":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"4:4230:9465":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:6617:14818":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:43699:22981":{"crate_id":1,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"6:1657:10983":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:1625:10980":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"4:8632:9499":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:12292:17358":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:10245:17176":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:23667:22967":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"6:570:10079":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"6:5057:14058":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:43045:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:3502:17362":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:12850:17451":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"4:5367:215":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"5:6734:30169":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:5318:24560":{"crate_id":1,"path":["core","ffi","va_list","sealed_trait","VaArgSafe"],"kind":"trait"},"16:7505:33212":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:4764:16603":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:12037:3748":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"4:12502:760":{"crate_id":4,"path":["std","f16"],"kind":"primitive"},"17:11863:17287":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:22163:25973":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:47019:23004":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:5036:14055":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:7580:15254":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:8231:14282":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:14858:20723":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:13348:17210":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:3887:16109":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:44794:3826":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:7383:17063":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:7055:17052":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"6:6631:14819":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:3533:2808":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"4:7503:26381":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:3785:267":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:14337:118":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:45500:238":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"4:11011:151":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"17:5130:17469":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"17:15652:21464":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:11318:33411":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"11:813:9301":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:22974:9394":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"17:11629:17255":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"16:5058:16713":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"5:3693:3160":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"11:2126:9306":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"4:964:9298":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:4937:14043":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:11776:17279":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:15837:21480":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"16:7539:32910":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"9:470:15866":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"5:1587:9298":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"16:7713:33183":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"4:10715:26582":{"crate_id":4,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"1:47108:8995":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:1643:10982":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:8314:157":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:4984:14049":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:9451:3671":{"crate_id":1,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"4:12079:29133":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:3719:17367":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:15135:17219":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:44450:3624":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"4:5002:9478":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:6737:14832":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"4:4346:9493":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:5512:14106":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"1:13227:3763":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:16619:21680":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"1:3067:156":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:42674:3673":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"4:4118:9458":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:5044:14056":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:14049:23861":{"crate_id":1,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"4:3313:29770":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:45599:3901":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"16:8623:17106":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"5:996:3160":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:47191:8955":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:1219:17254":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:15822:21478":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:10273:17177":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"5:879:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:3070:271":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"4:8730:9536":{"crate_id":4,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"1:43671:22959":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"11:1118:15988":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:12034:15983":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:15924:21488":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"11:1542:15989":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:14071:20198":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:44408:3756":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:5630:14119":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:22635:9394":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:14380:3229":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"1:44329:23872":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"4:3692:9414":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"17:14772:20717":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:3474:2788":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:23590:22963":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"1:41224:3624":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:6806:3649":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:45478:22962":{"crate_id":1,"path":["core","future","async_drop","Noop"],"kind":"struct"},"1:41444:3631":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:11951:17298":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"4:8627:9498":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"11:983:9305":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:12624:17368":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:1530:10972":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"4:4907:9500":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:31220:3481":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:46821:8948":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"4:10423:29152":{"crate_id":4,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"11:1892:9310":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:45063:3849":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"4:7904:17169":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:46512:8981":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"6:7292:10922":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"16:6820:17035":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"4:1655:9310":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"4:11834:26427":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:46614:8993":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:7317:15240":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:43935:3733":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:44676:3752":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:13569:17221":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:14996:20732":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:14611:20708":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"4:134:2531":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"1:22988:9070":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"4:9274:9581":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:6505:14810":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:42673:3674":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"16:8720:149":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"4:12493:1918":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"1:45358:3865":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"5:5555:9625":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:2225:3455":{"crate_id":1,"path":["core","ptr","metadata","metadata"],"kind":"function"},"18:96:21705":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"4:8539:3632":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"17:12121:17314":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"15:327:16026":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:41827:3616":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"4:8263:9294":{"crate_id":4,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:41132:3599":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"4:9215:9579":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:14404:20695":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:11474:17239":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"1:45369:3866":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:41301:3634":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:22912:9068":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"17:12647:17366":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"5:1597:9299":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"4:784:165":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"4:914:2828":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"4:8501:9442":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"16:6500:16042":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:45549:3895":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"4:9148:210":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"6:5107:14061":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:6203:17012":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:4182:16136":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"5:883:9312":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:6543:14813":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"11:2440:9297":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"17:12698:17447":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:41372:3628":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"16:4927:16651":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:47883:8929":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:6460:17022":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:11221:17201":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:44531:3816":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"11:2115:3142":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:1589:10978":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:22950:9069":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:16191:21508":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:7806:24565":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"5:4480:30195":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"5:3073:2888":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:12885:17443":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:5494:14104":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"14:40:20179":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"4:679:9271":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"18:613:34018":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:5420:14095":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:11538:17257":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:7987:17080":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:4692:16554":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"5:2804:30163":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:3790:158":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"4:5200:9531":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"4:10971:29183":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"1:47220:8961":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:2377:17326":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:5412:1275":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"4:4832:29406":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"1:47784:8922":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"11:2507:32739":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:5142:16728":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"4:11602:26571":{"crate_id":4,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"17:14974:20731":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:1547:2828":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"4:12517:1958":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"1:13668:122":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:12391:17379":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"11:832:3136":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:6769:32421":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:14901:20726":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:5282:14078":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"4:977:9301":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:491:10069":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:22165:25981":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:10140:17173":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:46597:8987":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:42542:3660":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"4:11342:26409":{"crate_id":4,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"17:16001:21497":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"4:12497:1731":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"6:6390:14801":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:42971:97":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:47819:8925":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:2878:16093":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:7904:17073":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"4:6755:2765":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:4758:232":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"16:2794:16089":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:47353:22892":{"crate_id":1,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"16:8295:17096":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:5477:14101":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:22673:25971":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"5:3074:31850":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:12224:17350":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"4:8221:9390":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"1:10609:3570":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"4:1627:3160":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"4:1936:3184":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"5:6536:9586":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:11830:17257":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:14946:20729":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:16019:21499":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"4:5640:9562":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"1:43974:22739":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:6710:14829":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"1:44159:22968":{"crate_id":1,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"17:16302:21516":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"4:6960:244":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"18:598:34002":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:6096:17005":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:7984:15623":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:12797:17450":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:5130:3551":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:47830:8926":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"5:3786:30169":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:7568:2828":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:16633:21681":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"1:44542:3819":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"4:5875:231":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:11162:17200":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:14585:20706":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:5447:16803":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:5462:14099":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:34976:2789":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"4:5321:29122":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"14:164:15998":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:45090:3850":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"18:680:21721":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:2568:16079":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"16:8011:17082":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"11:357:3132":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"4:6719:2757":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"5:7735:9365":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"5:6105:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"16:5083:16715":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"11:321:32744":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:23645:22964":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"6:0:1029":{"crate_id":6,"path":["libc"],"kind":"module"},"4:9423:198":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:11123:33924":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:8007:15625":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:11970:17284":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:7468:17067":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:6610:14817":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"4:1862:719":{"crate_id":4,"path":["std","env"],"kind":"module"},"5:774:263":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:38838:2793":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"4:5814:9566":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"17:12859:17452":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:44864:3829":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:14219:20687":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:3351:3517":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"5:2163:9320":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"5:1578:9296":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:23678:22868":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"1:2782:104":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:13118:17468":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"17:15682:21467":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:7977:17079":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:5325:14084":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:12761:17418":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:43713:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:14054:20197":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"4:6030:2754":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:5652:14121":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"4:12490:434":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"1:45162:3854":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:22777:8938":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:13040:17464":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"11:776:3166":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:14098:20200":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"6:8272:14288":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:5255:14075":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"18:507:33992":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:46850:8954":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:22370:8937":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:45300:3803":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"4:5660:9563":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"16:5755:33043":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"6:6578:14814":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"4:10798:9435":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"17:15530:21458":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:47960:8932":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"16:7256:17057":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:5295:14080":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"11:2414:3166":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:47804:8924":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:44176:3768":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:13443:3806":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:2120:693":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"6:7553:15252":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"16:8317:17097":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:23315:22849":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:40971:3566":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:3802:2807":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:2465:16074":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:14820:20720":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:44518:3817":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:8225:14281":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:8055:17084":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"11:851:9303":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:12991:17422":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:14885:20725":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:8264:17095":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"11:859:9304":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"11:808:9298":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"5:7524:3166":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:16341:21519":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"5:7495:9317":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"4:3048:3186":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:5357:14088":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"18:635:34014":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"5:2256:31588":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:1489:10966":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"4:8882:9554":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"4:6319:26563":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"16:2858:16092":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"4:3316:26827":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:3416:2796":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"1:42934:90":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:44880:3538":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:23437:22856":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:47146:8949":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:12094:17313":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:523:10072":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:15063:20737":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:32820:257":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"5:7554:31577":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:45006:3847":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:12536:17363":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:12081:17315":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:10116:85":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:42486:23480":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"4:12516:993":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"5:0:323":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:6687:14826":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"17:12940:17445":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:6852:14864":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:31199:2530":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:16678:21684":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"17:10563:17186":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:16691:21685":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"4:10981:9386":{"crate_id":4,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"1:4493:23405":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:23124:9064":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:45573:3893":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"4:11879:26352":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"18:698:21723":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"11:123:3125":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:12569:17360":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"4:8575:9451":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"4:9172:9569":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:5539:14109":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:5249:14074":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:6719:14830":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"11:2340:15991":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:23345:22806":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:43411:3714":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:41263:3208":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:44172:23347":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:3309:276":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"17:11385:17232":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:12523:17365":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:8040:32979":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:11605:17200":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"4:3545:3613":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"17:16486:20178":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"17:13853:20183":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:16661:21683":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"17:11690:17247":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:7344:9527":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:0:524":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"17:11677:17248":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"4:5882:3189":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:12305:17402":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"4:9492:9397":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"4:4830:29404":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"17:10367:17180":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:30937:3239":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:40087:2809":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:42885:3160":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:32802:2699":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"1:4767:2691":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"4:12511:1896":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"4:12518:1456":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"1:40300:3515":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:40902:3542":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:22868:9067":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:16752:21690":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"4:1006:9304":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:8853:24430":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"16:2638:16082":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:11817:17289":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:15350:21451":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:32788:17108":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"1:23689:22813":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"16:7189:17055":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"5:7841:9297":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"4:8620:3659":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"16:6040:17002":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:2805:114":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:46920:9021":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:11231:17239":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:8102:17087":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:906:33207":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"1:45483:162":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"5:3919:9297":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"6:5127:14063":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:16364:21521":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:1551:10974":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"16:6406:17019":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"4:12509:930":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"16:7369:17062":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:41786:3610":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:11025:33293":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:23209:23078":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:13360:17211":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"4:6609:197":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:6995:3629":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"6:1690:10987":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:7334:17060":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:234:237":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:7459:17066":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"4:2488:9373":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:5125:3529":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:14113:20201":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:41103:3557":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:22252:8939":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:15753:21473":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"6:7539:15251":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:14357:20692":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:45508:218":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"16:2548:16078":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"4:1643:9308":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"16:7786:33149":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:47374:8950":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:4163:2828":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"4:12443:26445":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"4:8214:9386":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:15889:21485":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:11719:17276":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:47726:9002":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:8304:14292":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:43193:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"4:4226:9464":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"4:9765:3197":{"crate_id":4,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"1:36852:2790":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:7072:17053":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:31605:3498":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:8501:189":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:10673:3717":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"5:2338:31711":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:44491:3758":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:12148:17310":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:14651:20711":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"4:10976:29390":{"crate_id":4,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"16:6901:17042":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:45288:3802":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"5:6688:3166":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:13817:20181":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"4:6546:231":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:15857:21482":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:41179:3596":{"crate_id":1,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"1:44956:3844":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"15:394:16033":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"6:5334:14085":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"17:14506:20700":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:4841:2699":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:31231:22957":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"5:3852:3165":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"10:44:15977":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"4:6003:2753":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"4:3452:9435":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"9:226:9551":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:13265:17206":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:15990:21496":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"4:9400:26393":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:46576:8982":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"4:8105:9348":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"1:44481:3225":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:47279:23003":{"crate_id":1,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"6:5217:14070":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:10783:33329":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"1:14360:3227":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"6:8249:14285":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:14737:20715":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"5:1619:221":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"4:1913:9341":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"16:2433:16072":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"16:8093:17086":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:4919:2702":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:22244:9394":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:16738:21689":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"11:1027:9306":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:16290:21515":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:5316:16764":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"5:1362:9305":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"15:288:16021":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:3775:2803":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:5428:14096":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:3153:149":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"16:7916:17074":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"4:4707:9501":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:13321:17209":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"5:39:9328":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"16:6366:17017":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"4:8756:9550":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"4:6891:2766":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"4:10421:3198":{"crate_id":4,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"17:15762:21474":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:7165:16016":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"16:8148:17089":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"18:651:33992":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:44776:3825":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"4:3454:9436":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:33348:2776":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:5471:14100":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"6:7337:15242":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"4:12519:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"11:2297:3142":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:34630:2786":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:23039:9071":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:46768:8988":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"5:5506:30169":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:12259:17400":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"11:2206:15983":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"16:6062:17003":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:47747:9023":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"4:4500:9497":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:32908:117":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:31578:207":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"5:5280:2750":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:42695:3682":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:42770:3688":{"crate_id":1,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"1:42624:2828":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"16:5725:16999":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:5488:14103":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"4:12510:911":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"17:11464:17238":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"6:4902:14039":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:23000:23809":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"13:110:32761":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:44640:3823":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:3815:23680":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:12535:3761":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:34111:2784":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:13458:3808":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"4:2334:9369":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"4:4820:9462":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"18:726:21724":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"4:4216:9463":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:13536:17219":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:22152:25982":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:23401:22878":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"4:8671:9523":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"4:12086:16030":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"7:31:15839":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:41095:3563":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"struct"},"1:45284:3800":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:34245:2781":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:6193:3636":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"4:4574:9489":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"4:698:9274":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:4:1288":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:44622:3824":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"4:12503:763":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"1:23479:24203":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:47002:22861":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"16:5346:16771":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:10447:3729":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"16:6109:17006":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"4:922:9295":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:34312:2783":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:32784:23117":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:8029:3609":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:41217:3603":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:41310:3635":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:7006:24229":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"11:649:3160":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:14598:20707":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"4:11288:9569":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"18:608:34008":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:45152:3853":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:40981:3567":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:15932:21489":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"11:2540:9291":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:11850:17288":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"5:7612:2828":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:43156:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:11705:17275":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"5:783:121":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:13397:17213":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:14042:20196":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:2413:16043":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"4:1631:2828":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"4:3319:26831":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:12162:17345":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"6:5288:14079":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:10596:17187":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:6656:17026":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:5623:14118":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:4921:14041":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:46981:22966":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"5:4354:3160":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"4:12459:29766":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:1514:10970":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:6586:17024":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"11:1001:3142":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:5253:16747":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"9:49:15886":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:11944:3754":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"4:5676:9564":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"11:1083:3144":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:43082:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:13150:3836":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"18:754:21725":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:16230:21511":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"18:643:33992":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:7740:3572":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"6:6792:14836":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"16:6792:17033":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"17:15049:20736":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"6:1584:10977":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:13780:20179":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:32877:3519":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:14671:20712":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"16:8582:17103":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:14916:20727":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:14639:20710":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"5:7094:9651":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"17:13732:20177":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"16:6335:17016":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:6360:14739":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:5687:16997":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:10728:17191":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:1667:10984":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:2504:16076":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"4:12110:26590":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"5:6263:3529":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"15:306:16022":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"4:10563:116":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"16:5196:16736":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"4:2514:9383":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":32}