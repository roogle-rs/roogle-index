{"root":"0:0:2325","crate_version":"1.4.0","includes_private":false,"index":{"1:13351:27621":{"id":"1:13351:27621","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42105:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13360:30611":{"id":"1:13360:30611","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12963:3855","`DoubleEndedIterator`":"1:8335:129","prim@char":"4:12363:471","str::matches":"1:13357:2538"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44208:3889","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12969:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12984:3871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13369:30614":{"id":"1:13369:30614","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13299:27612":{"id":"1:13299:27612","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13298:27611"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42105:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13303:24153":{"id":"1:13303:24153","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43972:3680","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13401:28759":{"id":"1:13401:28759","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:40006:3586","Self::is_ascii":"1:13400:26889"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42105:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:40006:3586","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13274:1000":{"id":"1:13274:1000","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12363:471"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13339:30609":{"id":"1:13339:30609","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12963:3855","str::split":"1:13330:26978","prim@char":"4:12363:471","`DoubleEndedIterator`":"1:8335:129","str::rsplit_terminator":"1:13342:30610"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:44036:3887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13345:27617":{"id":"1:13345:27617","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12363:471","self::pattern":"1:12963:3855","str::rsplitn":"1:13348:27619"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44090:3811","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13283:30605":{"id":"1:13283:30605","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13371:30615":{"id":"1:13371:30615","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13295:30607":{"id":"1:13295:30607","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12369:1726","crate::ops::IndexMut":"1:3491:2733","str::slice_unchecked":"1:13294:30606"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13403:26894":{"id":"1:13403:26894","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13383:26486":{"id":"1:13383:26486","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12363:471","self::pattern":"1:12963:3855"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42105:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13354:27622":{"id":"1:13354:27622","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42105:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12969:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12984:3871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13377:30619":{"id":"1:13377:30619","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12363:471","self::pattern":"1:12963:3855"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12969:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12989:3870","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13363:30612":{"id":"1:13363:30612","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12963:3855","`DoubleEndedIterator`":"1:8335:129","prim@char":"4:12363:471","str::rmatch_indices":"1:13366:30613"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44136:3890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13296:27607":{"id":"1:13296:27607","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:13298:27611","str::split_at_mut":"1:13297:27608"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13282:26714":{"id":"1:13282:26714","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12510:3875"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13411:3616":{"id":"1:13411:3616","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:5025:3616"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44294:3617","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13311:30608":{"id":"1:13311:30608","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44250:3885","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13313:24907":{"id":"1:13313:24907","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12363:471","self::pattern":"1:12963:3855"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13342:30610":{"id":"1:13342:30610","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12963:3855","str::split":"1:13330:26978","prim@char":"4:12363:471","str::split_terminator":"1:13339:30609"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:44054:3886","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12969:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12984:3871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13301:23755":{"id":"1:13301:23755","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12363:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43956:3882","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13402:26893":{"id":"1:13402:26893","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13273":{"id":"1:13273","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13274:1000","1:13275:2824","1:13276:30602","1:13277:30603","1:13279:30604","1:13282:26714","1:13283:30605","1:13284:336","1:13285:27588","1:13286:2330","1:13288:21890","1:13290:21891","1:13292:21892","1:13294:30606","1:13295:30607","1:13296:27607","1:13297:27608","1:13298:27611","1:13299:27612","1:13301:23755","1:13302:21817","1:13303:24153","1:13304:23763","1:13306:23764","1:13309:26979","1:13311:30608","1:13312:23757","1:13313:24907","1:13316:27623","1:13319:27624","1:13322:2865","1:13326:2823","1:13330:26978","1:13333:23738","1:13336:27615","1:13339:30609","1:13342:30610","1:13345:27617","1:13348:27619","1:13351:27621","1:13354:27622","1:13357:2538","1:13360:30611","1:13363:30612","1:13366:30613","1:13369:30614","1:13371:30615","1:13373:30616","1:13375:30617","1:13376:30618","1:13377:30619","1:13380:30620","1:13383:26486","1:13386:27625","1:13389:30621","1:13392:30622","1:13395:30623","1:13398:30624","1:13400:26889","1:13401:28759","1:13402:26893","1:13403:26894","1:13404:26895","1:13405:28762","1:13406:28763","1:13407:28764","1:13408:30625","1:13411:3616","1:13412:30626"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:0:2325":{"id":"0:0:2325","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[215,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\n# #[macro_use]\n# extern crate lazy_static;\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.4.0\")]","#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:29:2331","0:31:2332","0:28:2325"],"is_stripped":false}}},"1:13312:23757":{"id":"1:13312:23757","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44278:3892","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13398:30624":{"id":"1:13398:30624","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12924:136","`FromStr`":"1:12923:3362"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42238:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12923:3362","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12923:3362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13302:21817":{"id":"1:13302:21817","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12363:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43962:3881","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13290:21891":{"id":"1:13290:21891","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13298:27611":{"id":"1:13298:27611","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13299:27612"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42105:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5692:31323":{"id":"5:5692:31323","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7744:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31:2332":{"id":"0:31:2332","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[213,0],"end":[215,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["lazy",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"LazyStatic","id":"0:29:2331","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13357:2538":{"id":"1:13357:2538","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12963:3855","`DoubleEndedIterator`":"1:8335:129","prim@char":"4:12363:471","str::rmatches":"1:13360:30611"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44190:3888","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13326:2823":{"id":"1:13326:2823","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42107:191","prim@char":"4:12363:471","self::pattern":"1:12963:3855"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42105:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12969:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12984:3871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5686:3532":{"id":"5:5686:3532","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7744:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13366:30613":{"id":"1:13366:30613","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12963:3855","`DoubleEndedIterator`":"1:8335:129","prim@char":"4:12363:471","str::match_indices":"1:13363:30612"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44154:3891","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12969:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12984:3871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13333:23738":{"id":"1:13333:23738","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12363:471","self::pattern":"1:12963:3855"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12778:3822","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13284:336":{"id":"1:13284:336","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13285:27588","`u8`":"4:12382:1856"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13408:30625":{"id":"1:13408:30625","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:5024:30625"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44285:3638","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5701:31325":{"id":"5:5701:31325","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:306:2639","`String`":"5:7744:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:306:2639","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13309:26979":{"id":"1:13309:26979","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44240:3883","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5704:26892":{"id":"5:5704:26892","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13404:26895"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13286:2330":{"id":"1:13286:2330","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42107:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42105:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5689:31322":{"id":"5:5689:31322","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7744:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5702:3693":{"id":"5:5702:3693","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7744:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13297:27608":{"id":"1:13297:27608","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:13296:27607","str::split_at_mut_checked":"1:13299:27612"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13279:30604":{"id":"1:13279:30604","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:13277:30603"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13389:30621":{"id":"1:13389:30621","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12363:471","self::pattern":"1:12963:3855"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12969:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12984:3871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13400:26889":{"id":"1:13400:26889","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13277:30603":{"id":"1:13277:30603","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13386:27625":{"id":"1:13386:27625","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12363:471","self::pattern":"1:12963:3855"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42105:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12969:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12984:3871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13406:28763":{"id":"1:13406:28763","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1060:36881"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13306:23764":{"id":"1:13306:23764","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13304:23763"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44269:3893","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13316:27623":{"id":"1:13316:27623","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"4:12363:471","self::pattern":"1:12963:3855"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13404:26895":{"id":"1:13404:26895","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5700:31324":{"id":"5:5700:31324","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7744:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13375:30617":{"id":"1:13375:30617","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13275:2824":{"id":"1:13275:2824","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13276:30602":{"id":"1:13276:30602","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13288:21890":{"id":"1:13288:21890","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42107:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42105:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13294:30606":{"id":"1:13294:30606","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12369:1726","str::slice_mut_unchecked":"1:13295:30607","crate::ops::Index":"1:39651:2732"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13322:2865":{"id":"1:13322:2865","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42107:191","prim@char":"4:12363:471","self::pattern":"1:12963:3855"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42105:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13373:30616":{"id":"1:13373:30616","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13380:30620":{"id":"1:13380:30620","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12363:471","self::pattern":"1:12963:3855"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13407:28764":{"id":"1:13407:28764","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1060:36881"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13285:27588":{"id":"1:13285:27588","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12382:1856"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13348:27619":{"id":"1:13348:27619","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12363:471","str::splitn":"1:13345:27617","self::pattern":"1:12963:3855"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44108:3807","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12969:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12984:3871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13376:30618":{"id":"1:13376:30618","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29:2331":{"id":"0:29:2331","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[185,0],"end":[188,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"1:13405:28762":{"id":"1:13405:28762","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1060:36881"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13292:21892":{"id":"1:13292:21892","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13336:27615":{"id":"1:13336:27615","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12963:3855","`DoubleEndedIterator`":"1:8335:129","prim@char":"4:12363:471","str::split":"1:13330:26978"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:44004:3813","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12969:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12984:3871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5703:26891":{"id":"5:5703:26891","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13403:26894"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28:2325":{"id":"0:28:2325","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[167,0],"end":[179,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"inner":{"macro":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"}},"5:5685:31321":{"id":"5:5685:31321","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:306:2639","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:306:2639","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13304:23763":{"id":"1:13304:23763","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13306:23764"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44260:3884","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13392:30622":{"id":"1:13392:30622","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12363:471","self::pattern":"1:12963:3855"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5684":{"id":"5:5684","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5685:31321","5:5686:3532","5:5689:31322","5:5692:31323","5:5700:31324","5:5701:31325","5:5702:3693","5:5703:26891","5:5704:26892"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13319:27624":{"id":"1:13319:27624","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12363:471","self::pattern":"1:12963:3855"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12969:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12984:3871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13395:30623":{"id":"1:13395:30623","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12363:471","self::pattern":"1:12963:3855"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12969:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12984:3871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13330:26978":{"id":"1:13330:26978","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12963:3855","`DoubleEndedIterator`":"1:8335:129","prim@char":"4:12363:471","str::split_whitespace":"1:13304:23763","str::rsplit":"1:13336:27615"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43986:3809","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12969:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13412:30626":{"id":"1:13412:30626","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:5022:30626"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44303:3637","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"6:4976:14110":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:12342:17453":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"4:12373:737":{"crate_id":4,"path":["std","f16"],"kind":"primitive"},"6:7563:15313":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"4:379:9329":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:6680:14885":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:14079:20741":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"8:0:2563":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"4:8762:9609":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"16:3614:16170":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"5:1395:9366":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:2548:16146":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:2323:16135":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:12443:17481":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"4:10908:26741":{"crate_id":4,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"14:214:16070":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"16:2748:16155":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:13568:20235":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:13308:20217":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:7755:17147":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:47054:9086":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"4:6358:3298":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"4:6922:233":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:13889:115":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"4:4819:26680":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"1:23120:3379":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:42817:3772":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"11:2545:32681":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"16:5995:17077":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:2597:672":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"5:2275:30493":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:14516:20769":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"11:830:9358":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:1563:11037":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:7857:17152":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:5224:14133":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"5:894:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"4:5168:9590":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"6:6716:14889":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"6:5151:14127":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:46113:9063":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"4:8001:9321":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"4:10498:3274":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"1:10399:3774":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"4:680:9336":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:11661:17354":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"18:80:21737":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:12664:3897":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:1690:11049":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"4:5965:2685":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:9755:17210":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:46195:9029":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:42011:24346":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"11:1064:16050":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:40514:3637":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:5603:14176":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:44240:3883":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"17:13855:20727":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:41318:2477":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:30750:23935":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"16:6665:17110":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:40775:3714":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"5:6122:2682":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:43986:3809":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"5:7548:2828":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:14025:20737":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:40638:106":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"16:5831:17071":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"4:11499:26960":{"crate_id":4,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"1:34323:2720":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"4:2467:3539":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"17:13972:20733":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:10137:17211":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"4:6678:2477":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"4:11076:26958":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"16:7306:33085":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"4:10999:9623":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"16:5686:17062":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:5265:14138":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:12289:17450":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"4:3303:29749":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:30724:3505":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:33765:2714":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"18:613:33950":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:3456:140":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"17:11075:17297":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"11:328:32688":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:6723:14890":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"4:2635:9488":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:46210:9078":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:46017:9077":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:40969:3713":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:11042:17282":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"4:4925:9537":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:40610:3641":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:40418:3617":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"5:1496:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:12516:17510":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"4:8328:26858":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"11:1893:9357":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:43133:3565":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:9422:2803":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"5:7514:9376":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:42105:194":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:11402:3813":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:5230:14134":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:46075:9051":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"16:5385:17060":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:15456:21529":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"11:1005:9365":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:261:32892":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:7695:17144":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"4:6374:26973":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"11:2323:3217":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"16:542:32864":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"18:96:21738":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:44595:3873":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:2031:671":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:47175:8991":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:2612:16149":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"4:5844:3264":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"9:176:16035":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:4806:2656":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"4:9271:115":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:5482:14164":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:46586:23990":{"crate_id":1,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"1:2156:3286":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:47267:8995":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:16198:21721":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"6:570:10141":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"4:5515:128":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"11:785:9356":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:13946:20731":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"4:1616:3241":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"6:5007:14114":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:42680:97":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:12584:17258":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"16:6317:17087":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"4:5588:9619":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"4:500:26956":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:44786:150":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"11:881:9364":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:14311:20755":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:13497:20230":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"5:7033:9711":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"4:10903:26665":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"17:11443:17333":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:12993:17270":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"5:3940:9357":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"6:497:10132":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:5069:14121":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:12572:17257":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"1:43903:3817":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:16165:21718":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"6:8261:14345":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:14091:20742":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"4:11704:26467":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"4:2469:9434":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:11341:17330":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:5267:435":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"6:5165:14128":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:46032:9083":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:3196:16167":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:3255:3564":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"16:2660:16151":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"16:8073:17155":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"18:581:3580":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:2344:3290":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:15701:21543":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"16:6620:17107":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"6:7308:10180":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"4:11953:16094":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:15151:21500":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:12399:17489":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"6:5019:14115":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:1489:11028":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:44036:3887":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:559:10139":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"4:953:9360":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:11688:17350":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"4:9542:3259":{"crate_id":4,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"4:12378:894":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"1:40617:3642":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"struct"},"17:14529:20770":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"4:8850:3235":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"5:2304:30506":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:6748:14893":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"4:7715:29916":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"17:10524:17253":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"4:8166:9449":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"4:10950:26766":{"crate_id":4,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"1:44260:3884":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:11743:17388":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:21822:9455":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:46386:9052":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:1539:11035":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"4:10633:26967":{"crate_id":4,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"17:12043:17401":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:40876:3730":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"4:6853:2698":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"6:6638:14880":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:7006:17121":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"4:11187:9627":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:6599:14876":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"16:2728:16154":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"4:10913:9447":{"crate_id":4,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"4:9338:26310":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"4:4817:26678":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"5:2825:30501":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:5533:14169":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:13387:20222":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:3218:2662":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"5:3875:3240":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:8065:2646":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:22260:24268":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:5319:14145":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:8216:17163":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:43571:3852":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:12464:17492":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"5:6143:3248":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:40959:3726":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"4:7981:9330":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"5:7534:30495":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"16:5781:17068":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:3778:16179":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:6731:14891":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"4:432:185":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"9:53:15949":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:6532:17101":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:2961:76":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"16:6442:17095":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"11:1888:3241":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:14994:21479":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"4:12330:29919":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:6940:32927":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:3259:2707":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"6:5205:14131":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:1530:11034":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:13292:20216":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"4:3529:3694":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"1:2970:258":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"17:14341:20757":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"16:7355:17127":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"11:1601:16053":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"18:573:33946":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:13363:20220":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:1584:11039":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:6623:14878":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:9886:17242":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:473:10128":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"16:6895:17116":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:6521:14871":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:13412:20224":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:39723:215":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:4653:2474":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:44811:207":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"4:11721:26738":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"5:3729:3236":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:8286:145":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"5:3703:182":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"11:798:3241":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"4:11346:9428":{"crate_id":4,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"17:11128:17289":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:5415:33113":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:11419:17257":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"5:6874:30417":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:13738:20721":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:47137:8989":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:3663:146":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:40910:3722":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:4468:16685":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:10612:17254":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:3473:17405":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:10350:17251":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:38992:2728":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:13485:20229":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"11:1158:9367":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:2203:17326":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"4:8246:9490":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:6700:14887":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"5:6506:9645":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"4:2315:9430":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"4:527:9310":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"11:1049:9366":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"18:735:21750":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:7397:33070":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:44637:130":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"17:12508:17495":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"4:5779:9625":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"1:5368:980":{"crate_id":1,"path":["core","iter"],"kind":"module"},"17:12371:17268":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"4:5622:9621":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"4:8225:9354":{"crate_id":4,"path":["std","hash","random","RandomState"],"kind":"struct"},"11:2440:3241":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"10:0:2565":{"crate_id":10,"path":["adler"],"kind":"module"},"1:46758:9047":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:13922:20730":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:21938:9455":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:47190:8992":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:44404:3909":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:15206:21505":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:41899:3739":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"5:7504:3241":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:42141:3236":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"16:7539:17133":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:33977:2718":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:5541:14170":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:22733:9127":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"6:7350:15303":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:12056:17402":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"16:5960:17076":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"5:4506:30438":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:40669:3677":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:15521:21532":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"4:6406:26820":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:12989:3870":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"4:11786:3277":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:3462:142":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"4:871:3235":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:11605:17377":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:12433:17227":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:46548:9030":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:23003:23972":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"4:10924:26702":{"crate_id":4,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"6:5366:14151":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:43962:3881":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:40424:3621":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"4:3592:9452":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"18:698:21756":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"5:3716:3235":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"5:7475:9377":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:1514:11032":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"4:1620:9357":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"4:10481:113":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"5:3101:30405":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:14503:20768":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:15313:21514":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:45851:9009":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:7799:17149":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:13844:20726":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"4:957:9361":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:14402:20761":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"4:12385:1850":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"4:6572:186":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:6991:33018":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"4:10407:9631":{"crate_id":4,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"17:13187:20211":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:14260:20751":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"4:9707:9450":{"crate_id":4,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"16:4587:16712":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:8761:3703":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"0:28:2325":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"17:11153:17258":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"4:11670:9632":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:10652:3790":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:8306:2638":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:23211:23860":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"17:13594:20237":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:11063:17301":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:6335:17088":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:15078:17296":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"4:4139:9520":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:13986:20734":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:9671:17214":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"4:5958:2684":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:7648:17141":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:14212:20748":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:11812:17396":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:11825:17418":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"5:6090:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:9781:17240":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"5:7592:2828":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:23299:24077":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"16:6398:17091":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"16:3669:16171":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"3:0:2561":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"17:11647:17383":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:32307:17165":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"16:8188:17161":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:14723:21480":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:13375:20221":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:10044:17246":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:1696:9546":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:10317:17250":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:12824:17263":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:12300:17486":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:22691:9455":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:6968:3711":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:2714:103":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:5462:14161":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:5622:14177":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"5:3373:9371":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:43783:3806":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:11115:17290":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:12683:17503":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"5:1625:9360":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:1955:3609":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"1:4487:3619":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"16:2355:16137":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:4352:16615":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:0:563":{"crate_id":1,"path":["core"],"kind":"module"},"4:1481:156":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:11898:17417":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:40867:3720":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:10905:17260":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"4:2485:9439":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"4:8548:9511":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"16:6098:17082":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:5349:14149":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"4:9408:2694":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"1:23178:23867":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"1:3294:2731":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1:42824:3771":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"4:9325:17126":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"4:11664:26782":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"4:592:3258":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:40625:3636":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"4:8638:9584":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"4:1861:9393":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"17:10068:17225":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:11051:17307":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:4614:16716":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"4:938:9357":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:41327:3692":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:10041:24478":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:26151:267":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"5:6525:9646":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"4:8605:9549":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"4:5602:9620":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"11:708:9359":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"4:1609:3235":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:1727:11052":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:44781:23976":{"crate_id":1,"path":["core","future","async_drop","Noop"],"kind":"struct"},"6:6493:14829":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:4641:16720":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:13606:20238":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:23233:24056":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"16:7379:33105":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"4:4772:9579":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:23109:3364":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:7586:15315":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:11016:17280":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:5347:17058":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"16:7061:17124":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:6758:16080":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:15281:21511":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:12621:17504":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"4:8867:9614":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"6:0:1005":{"crate_id":6,"path":["libc"],"kind":"module"},"1:44054:3886":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:41304:23731":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"4:10884:9585":{"crate_id":4,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"1:39571:2743":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:22978:3363":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:22226:9005":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"4:2705:9489":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:39705:212":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:12969:3869":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:11214:17288":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:4732:2648":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:43932:3880":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"16:6588:17105":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"4:9217:9637":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:15138:21499":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"4:7867:17239":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:6494:17099":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"5:1564:2828":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"16:7528:17132":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"5:2265:9310":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"4:8516:3727":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"17:12724:17262":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:10612:157":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:42033:3740":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:4796:2655":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:46983:9080":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:10405:3776":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:7813:17150":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:5117:14124":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:5057:14120":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:4605:2669":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"9:355:15946":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:4743:16776":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"11:396:3209":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"11:1580:3223":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:46096:9057":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"4:4161:9522":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:15944:20212":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"11:2533:32678":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"4:9266:26844":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:42641:90":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"16:5700:17063":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:5357:14150":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"1:23222:23982":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"6:517:10133":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"19:0:1294":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:47111:8987":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:2438:16141":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"5:40:9388":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:46681:9013":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:22517:9131":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"5:1645:9379":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"16:7686:17143":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"5:221:3225":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:12978:3872":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:1589:11040":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:45950:9010":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:11510:17324":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:12189:17482":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:32338:2634":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:44294:3617":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:15266:21509":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"5:6005:3241":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:32321:2656":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"1:23266:24083":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"10:44:16040":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"4:11945:16094":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:6849:17114":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:12318:17269":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"0:31:2332":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"1:43858:3706":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"5:6248:3609":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:12851:17264":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"4:6718:2697":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:4929:14104":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:22989:24354":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"4:3559:3609":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"1:12041:3821":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"17:14038:20738":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:6342:33123":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:45836:9049":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"16:6047:17079":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:43171:3781":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:2938:3345":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"6:5186:14129":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"18:563:21765":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"4:3906:9513":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:6634:17108":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:41342:3696":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"4:3340:9498":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"4:8642:9586":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:6504:17100":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:15596:21535":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:11290:3822":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"5:3095:30533":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:11574:16046":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:6462:14868":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:5682:14185":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:15342:21517":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:40480:3643":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"5:6704:30417":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"16:5006:16832":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"4:8176:9447":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:4771:16781":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"5:7057:9712":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:22221:9455":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:9533:3869":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"4:9381:187":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:5051:14119":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:2767:201":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:11367:3823":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"4:4354:9556":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:10710:17256":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"4:6799:2692":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:40454:3644":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"11:2137:3217":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:1632:11043":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"4:12376:735":{"crate_id":4,"path":["std","f128"],"kind":"primitive"},"1:39833:3612":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:21842:8999":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:16121:21715":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"17:12127:17406":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:13252:20214":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"6:1657:11045":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"7:79:15908":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"4:9413:2695":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"4:4153:9521":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"4:11870:9515":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:38358:2726":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"13:229:32704":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"16:2338:16136":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:13753:20722":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"6:5179:9545":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:3597:17423":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:44886:180":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:15383:21521":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"11:1725:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:14356:20758":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:8136:17158":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:6758:14894":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"4:1631:9369":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"11:854:3211":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:6437:14865":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:6066:17080":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"4:9106:199":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"17:13325:20218":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"5:7650:9352":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"4:8171:9450":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"17:11524:17378":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:5897:17074":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:11764:17390":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"18:754:21758":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:523:10134":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:15376:21520":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:44190:3888":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"5:7733:9681":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:42522:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:40858:3719":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:8267:14346":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:14475:20766":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"4:3658:27420":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:11198:3235":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"6:8330:14354":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"4:8542:9512":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:13797:20723":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:3675:2740":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:12030:17403":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:3810:16188":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:43956:3882":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:46835:9019":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"11:2539:25397":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:5802:17069":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:2684:16152":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:46178:9023":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"16:5769:17067":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:12659:17498":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"4:12149:26951":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"4:894:2828":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:10397:3773":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:1185:2476":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"17:15249:21508":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:7833:3686":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:43579:3828":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:8388:2637":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"4:12380:906":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"6:6449:14867":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:8118:17157":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:40844:23722":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:10092:17247":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"4:980:9363":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:5520:14168":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"2:0:505":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"6:5036:14117":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:22:819":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"1:10395:3772":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"6:5241:14135":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:8273:14347":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:532:10135":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:16151:21717":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"1:45789:9043":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:12175:17470":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"4:9277:9315":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:11595:17382":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"4:8587:3741":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:3206:2663":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"5:7665:9323":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"16:2478:16143":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:3248:3598":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:44090:3811":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:12949:17269":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:9984:17245":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:6652:14881":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:11853:17440":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:43871:3818":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:4816:14094":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:578:10142":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:41333:3694":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:7454:15306":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"4:12362:1177":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"1:44154:3891":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:2037:17332":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:42199:2805":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"16:6782:17112":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"4:7996:9319":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"1:3274:2710":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:6962:17119":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"4:8599:9560":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:12225:17457":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"4:1089:3217":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:8253:3704":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:2958:77":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"18:521:21759":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"4:949:9359":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"11:2301:9365":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"16:6231:17084":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:32396:2635":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:21722:24275":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:32337:237":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:40537:3639":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"15:394:16097":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:4723:221":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:47100:8986":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:44368:3907":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:6544:14874":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:16079:21712":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"6:5593:14175":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:11788:17437":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:6790:32279":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"5:3306:3235":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:12543:17500":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"4:1107:9367":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:2998:16164":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:7391:11173":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:8290:14349":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:44108:3807":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:12494:17458":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"5:3277:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"13:0:2562":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:14246:20750":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:1597:11041":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"4:2719:21872":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:11313:17319":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"6:5387:14154":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:3450:2636":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"4:10707:9500":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"16:7580:17137":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"6:6659:14882":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"11:102:32695":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:39655:2734":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"5:4377:3235":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:22738:9125":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:14868:21485":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"14:187:16069":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"14:165:16062":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"5:3097:30406":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:1569:11038":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:2809:202":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:5412:1246":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"5:2377:30520":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"4:10750:3275":{"crate_id":4,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"4:4341:9555":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"11:835:9361":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:40746:3706":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:4506:3620":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"1:47205:8993":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"5:1011:3235":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:8319:14353":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:8296:14350":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:3937:3241":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:22871:24485":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:15176:21502":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:5846:17072":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"5:7721:9426":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:513:17238":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:40503:3646":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:6443:14866":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:45904:9050":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"11:809:9357":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"5:7694:3679":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"9:422:15932":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:14284:20753":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:41867:3737":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"18:623:33945":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"4:656:9332":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:43125:73":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"4:8523:3680":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"17:13211:20212":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:33832:2716":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:44483:3912":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:22579:9455":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:8799:24477":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"5:1794:30417":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:15836:21553":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"4:3677:9475":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"1:46157:9017":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"4:12314:26833":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"6:8199:15848":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:32426:3484":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"6:6526:14872":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:7639:9351":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:40522:3617":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"5:3318:30544":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:6300:17086":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"16:5817:17070":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"11:873:9363":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"4:7323:26965":{"crate_id":4,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"6:5107:14123":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:7321:2801":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:42600:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"4:3393:9500":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:32303:25900":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"4:5447:203":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"4:4303:27148":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"4:7877:26481":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:44208:3889":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:11865:17441":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"11:2400:3236":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"16:4882:16800":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:9807:17226":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:6385:17090":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"4:4672:9561":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:42286:3236":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"6:8014:15686":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"4:6509:220":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"5:7206:30458":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:10342:3649":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"16:5756:17066":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:10861:21863":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"4:4821:26682":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"11:0:2566":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"4:10933:9451":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"6:5420:14157":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"5:7492:9375":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:6270:3709":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:7717:3651":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"4:4561:9550":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"4:12386:1832":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"6:6631:14879":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:2068:1361":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"4:2741:9480":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:15368:21519":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"18:507:33946":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:14024:3961":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"4:9457:9643":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:12478:3800":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"5:3094:2889":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"4:5851:9633":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:21737:24270":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:15301:21513":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:13526:20232":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:43792:3805":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"16:6749:17111":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:4574:2668":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"4:11014:26762":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"4:2541:2498":{"crate_id":4,"path":["std","io"],"kind":"module"},"16:7570:17136":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:4821:17505":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"14:160:16061":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"4:9232:9640":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:2175:17366":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"4:12368:1692":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"16:4560:16708":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:23062:24059":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"6:4970:14109":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:13235:20213":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"11:685:3236":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:14587:20773":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:13581:20236":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"4:3342:9499":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"4:1920:3259":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"4:9398:234":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:43331:3792":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"4:11211:29419":{"crate_id":4,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"4:3297:27340":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"5:938:9373":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"4:4325:9553":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:15116:21497":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:11089:17292":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:15126:21498":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"4:7352:26487":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:33698:2715":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:4984:14111":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:7368:9586":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"10:36:32674":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:43884:3816":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:10997:17279":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:7590:17138":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"18:608:33965":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:44865:26065":{"crate_id":1,"path":["core","task","wake","ExtData"],"kind":"enum"},"1:22379:9455":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:10284:17249":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"4:9394:3609":{"crate_id":4,"path":["std","sync","poison","Guard"],"kind":"struct"},"4:11926:9659":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"4:12379:900":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"4:8785:9610":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:41104:3728":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:4890:14100":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:7727:17145":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:43378:24824":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:36372:2723":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"11:698:2828":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:14545:20771":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:21693:24272":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"17:14599:20774":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:8226:17164":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:15992:21710":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"1:4070:2828":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:1595:9356":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:13509:20231":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:8005:3689":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:46259:24096":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"16:2854:16160":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:41118:3729":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:6411:14863":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"4:4694:9562":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"5:7564:30408":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"4:8840:9612":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"16:3014:16165":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"16:3329:16168":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:30739:3565":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"18:689:21755":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:8008:15685":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:42158:2801":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"6:6917:14928":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:12089:17399":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:16069:21711":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"4:8714:9608":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"1:2803:195":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:4364:3609":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"17:10661:17255":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"4:11715:26781":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:7549:17134":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:4914:14102":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"4:128:2472":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"17:11242:17315":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:12557:17297":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"6:5428:14158":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:5325:14146":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:14449:20764":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:1207:17302":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"5:7158:264":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:40493:3645":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:13089:17539":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:40835:3717":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"16:8093:17156":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:7484:2828":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"5:5298:2682":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:23027:23968":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:10846:21872":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:13064:17223":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"5:994:9374":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"5:7556:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:44876:3956":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"1:46453:9012":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:42238:226":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"17:13814:20724":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"5:4217:3236":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"6:4842:14096":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:5255:14137":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"11:2551:32683":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"0:0:2325":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"17:15608:21536":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:5295:14142":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:14436:20763":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:6740:14892":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"5:5490:30417":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"4:4883:9583":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"4:3486:9483":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:12251:17455":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:2572:16147":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:12724:3896":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:15039:21494":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:12900:17267":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:44418:3910":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:32261:3585":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:4727:2647":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"17:9938:17244":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:15678:21542":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"11:1920:9371":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:23244:23974":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"16:5075:16855":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"5:3860:3237":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:41927:23983":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:10573:33911":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:42838:3774":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"16:3842:16197":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:10391:128":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:13932:3300":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"5:1424:9367":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:5641:14180":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:13116:17540":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:13899:20729":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:40929:3724":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"4:12366:1317":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"0:29:2331":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"4:9317:26859":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:12778:3822":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:44913:3962":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"4:5258:26852":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:42045:3741":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:15023:21493":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:44844:3957":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:21824:8998":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:15582:21534":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:6079:3609":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:3439:2666":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"1:41311:3690":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"18:635:33956":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:6160:16106":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:43084:23979":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:10915:33916":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"4:6282:26969":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:7341:15302":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"4:3300:29753":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:40806:3715":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:33080:2708":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"18:538:21764":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:9858:17241":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:13877:20728":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"5:4142:3241":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:465:10127":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"4:8333:26816":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"16:6120:17083":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:3648:2736":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"16:7144:17125":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:16249:21725":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"17:12328:17451":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"5:1533:3235":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:40691:3661":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"4:1859:9392":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"1:42200:2804":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"4:8619:9552":{"crate_id":4,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"6:5249:14136":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:7986:10087":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:16032:20214":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"9:328:15986":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:4881:14099":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:13733:205":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:8752:149":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:47091:8985":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:39743:214":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"5:7842:9708":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"5:1548:3236":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:40719:3675":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:9859:91":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"4:12388:1916":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"4:11200:9628":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:16050:20215":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"5:898:9372":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:15463:21530":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:46242:9085":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:11730:17387":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:12454:17491":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"4:8613:9512":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:13146:17541":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"11:2349:9366":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"16:6480:17098":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:23047:24013":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"4:1642:9371":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:11026:17281":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"4:10943:139":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"4:6867:2699":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"4:974:3211":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"15:288:16085":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"4:7150:9644":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"11:842:9362":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:1703:11050":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"4:9386:2688":{"crate_id":4,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"17:15190:21503":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:1684:11048":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"5:2171:3240":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"4:1075:9365":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:40576:3640":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"4:3841:9510":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"4:8338:9492":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"5:3465:9357":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:40788:3282":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:11634:17353":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:22248:3803":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:42831:3773":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"18:651:33946":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"16:6648:17109":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:15814:21551":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:14177:20746":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:11702:17385":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:3703:2664":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"5:1636:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:14386:20760":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"4:6199:220":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"4:9305:26853":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"16:150:16112":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:5095:3630":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"4:9100:9626":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"1:21739:24265":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:8301:17166":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:15799:21550":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"4:12335:9341":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:22818:24488":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"4:5335:204":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"17:16105:21714":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"17:14968:21489":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:4986:17511":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"16:2394:16139":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"11:2148:9366":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:5742:17065":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"4:1637:9370":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:7769:17148":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:43150:137":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"6:6564:14875":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:15214:21506":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"4:1922:3260":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"4:2076:197":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:6156:3718":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"4:9159:9641":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:7497:17130":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:5326:3682":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:44250:3885":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:14788:21482":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:32328:3595":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"17:16223:21723":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"4:2003:9422":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"1:3688:24597":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:14912:21487":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:21720:24277":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"5:3347:9368":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:12150:17404":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:22660:3550":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"17:11674:17384":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:22381:9001":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:2234:17351":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:45936:9062":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:23189:23937":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"1:44803:227":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:10341:226":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"6:7577:15314":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:7431:11156":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:46309:24065":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:5044:14118":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:46527:9024":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"4:9151:3235":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:5400:17061":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:4997:14113":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:9916:17243":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:16093:21713":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"4:9167:2828":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:42085:3743":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:7448:15305":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:13399:20223":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:1223:30555":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:11247:3809":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"17:14414:20762":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:13538:20233":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"16:7741:17146":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:6813:14898":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"11:488:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"4:3395:9501":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"5:4337:3609":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:11547:17379":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:815:3365":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"6:4947:14106":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:44285:3638":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:10818:17258":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:4964:14108":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:5334:14147":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"16:8202:17162":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"4:884:3236":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:11467:17331":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:14986:21491":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:42561:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:13424:20225":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:3491:2733":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:5307:17041":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"4:1897:9403":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"11:2380:3235":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:32428:114":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:13199:119":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:43821:3295":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"5:4172:30417":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:5471:14162":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"4:12384:1844":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"1:3421:124":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:256:32859":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:6974:25272":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"6:5217:14132":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"18:643:33946":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:818:190":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"9:390:15931":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:10763:3836":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"6:5477:14163":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:12494:3802":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"6:6480:14870":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"4:8553:9509":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"17:10399:3680":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:538:10136":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:45868:9015":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"16:3925:16234":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:12701:3899":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"6:485:10130":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:42327:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:9854:84":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:11269:17317":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:15390:21522":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"12:0:2567":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:15273:21510":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:44902:3964":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:10046:24832":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:11537:17345":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:33292:2711":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:47126:8988":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"4:12364:1878":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"1:42149:2828":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"18:598:33954":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"5:5139:3609":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:5127:14125":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:10647:3789":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"15:306:16086":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"11:1900:9368":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:47228:8994":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:7612:2836":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"4:11302:26753":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:44925:25298":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"14:7:16061":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:43096:24091":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"11:740:9360":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:44852:3958":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"7:32:15901":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:8755:3650":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:12238:17456":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:12362:17488":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"4:8019:3275":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"17:15473:21531":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"4:10710:9496":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"1:44661:3928":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:14066:20740":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:7509:17131":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"5:7524:9381":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"4:11237:9458":{"crate_id":4,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"17:15418:21525":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:11481:3811":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:33564:2713":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"18:680:21754":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:0:2570":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:12984:3871":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"5:1410:3217":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:5658:14182":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"1:3344:2721":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"17:14012:20736":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:14189:20747":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:22593:9133":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"13:110:32703":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:22646:9134":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:44389:3908":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:39607:2742":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"6:1521:11033":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:39668:213":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"6:6419:14864":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:5648:14181":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:6813:17113":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:4531:16702":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"11:1674:32676":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:12485:17494":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"6:1500:11030":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"4:2232:128":{"crate_id":4,"path":["std","ffi","os_str","Display"],"kind":"struct"},"1:2223:189":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:5288:23829":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"11:1105:3219":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:13173:17542":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"11:2228:16046":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"16:2808:16158":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:10018:17218":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"9:445:15930":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:40945:3725":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:6507:14830":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:7757:9690":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"4:12363:471":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"17:11621:17355":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"4:5112:9582":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"4:10320:9403":{"crate_id":4,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"1:39820:3596":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"17:15168:21501":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"4:11272:162":{"crate_id":4,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"17:15769:21548":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"4:8193:9448":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"4:8856:9613":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"17:11392:17328":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:14271:20752":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:8155:17159":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:5367:17059":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"5:5798:9711":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:42483:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"4:3438:9497":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:46326:24061":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"5:4536:3609":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"16:6456:17096":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:41883:3738":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:8031:15687":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:3669:2738":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"4:9117:9627":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"16:2936:16163":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:6574:17104":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"11:1564:16052":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:11799:17438":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:10877:17259":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:15778:21549":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:12929:17268":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:4884:2659":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:46925:9025":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:3286:2729":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"1:22555:9132":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"6:5488:14165":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"1:43347:3791":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:44510:3913":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:11293:17318":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"6:6765:14895":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"16:6263:33118":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"4:2322:9431":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"1:42067:3742":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"16:6543:17102":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"4:4886:9561":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:5983:3609":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:46415:9058":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:8302:14351":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"11:2466:9357":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"6:4937:14105":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"4:9403:235":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"11:1140:16051":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:15092:21495":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"4:9143:9629":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"1:46003:9028":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:11715:17386":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:10720:33922":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:15569:21533":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:3434:2665":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:4792:14092":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:7473:17129":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:2838:16159":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"5:3339:9370":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"4:5089:9580":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"4:7917:26953":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:2133:3568":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:7539:15311":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:2592:16148":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:4976:16825":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:16235:21724":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"4:8219:127":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"5:306:2639":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:6691:14886":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"17:11497:17325":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"4:5654:113":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"4:915:9356":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"4:2318:3556":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"1:39813:2737":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:12107:17257":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"15:0:2569":{"crate_id":15,"path":["addr2line"],"kind":"module"},"18:481:21760":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:10170:17061":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:12478:17493":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:15410:21524":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:7548:15312":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:14855:21484":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:12278:17485":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:5450:14160":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:10251:17248":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:46436:9064":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"4:8529:3809":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"17:11583:17352":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"11:1085:32694":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:1098:17294":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"16:2374:16138":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:15957:21709":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"5:2357:30531":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:43811:3815":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:31124:3580":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"4:1613:2828":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:789:250":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"4:8697:9594":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:45921:9056":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:42294:2828":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"5:3352:30539":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"5:1614:9359":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:5282:14140":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"5:3105:30407":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:5405:14156":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:47033:9065":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"4:5098:9581":{"crate_id":4,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"4:1625:9368":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"4:10980:29422":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:21769:9455":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"6:1494:11029":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:7656:17142":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:5196:14130":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"18:765:21751":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:44793:219":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:3053:137":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"17:3264:17400":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:12647:17499":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"2:234:226":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:3403:2741":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:44278:3892":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:4829:14095":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:1711:11051":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:21705:24272":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"16:3475:16169":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"4:5638:9622":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"6:6882:14007":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"4:6183:3264":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"4:373:9328":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"14:40:20213":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:23096:3378":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:47152:8990":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:4990:14112":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"5:4570:30438":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:12076:17398":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"11:1907:9369":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:15434:21527":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:2768:16156":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:5562:14172":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:8284:14348":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:15333:21516":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"4:8459:3689":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"17:11877:17397":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:10439:17252":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:11440:3814":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"16:7618:17140":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:12969:17215":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"5:7744:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:14051:20739":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:14560:20772":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"16:7428:17128":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:2711:102":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:4915:2660":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:11051:239":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:11557:17380":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:40654:3679":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:12740:3898":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:43339:24819":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"16:4062:16348":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:44004:3813":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:5670:14183":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:11102:17291":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"4:623:9331":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:7782:23759":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"5:5534:9683":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"16:6948:17118":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"16:6353:17089":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:21830:9002":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:13272:20215":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:13706:25463":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"4:12377:912":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"1:44435:3911":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:44269:3893":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:15931:20211":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"4:8664:9536":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"4:928:3241":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"11:2566:9351":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:43067:3565":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"18:0:2572":{"crate_id":18,"path":["memchr"],"kind":"module"},"4:963:9362":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"5:735:30338":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:15426:21526":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:39783:2735":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"4:12361:417":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"1:4464:109":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"16:860:32963":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"1:11509:3812":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"18:718:21749":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:15748:21546":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"11:1023:3217":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:5271:14139":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"4:4201:9524":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"4:12383:1838":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"1:3585:211":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:12422:17490":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:13674:20719":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:15720:21544":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:23200:24014":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"1:41352:3698":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"4:9284:26304":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"15:327:16090":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:10393:3771":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"4:8800:9611":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"4:8205:139":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"1:21771:9003":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:11841:17439":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"16:3029:16166":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"11:1884:2828":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:45804:9008":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"4:8067:9410":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"5:3809:30417":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:38413:2727":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:5494:14166":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"1:10604:153":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"4:9439:9458":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"17:9737:17212":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"1:2135:3569":{"crate_id":1,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"17:12530:17501":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"4:11409:9427":{"crate_id":4,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"16:6079:17081":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:12671:17534":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"16:5863:17073":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:7518:15310":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:3208:117":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"6:1551:11036":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"18:491:33961":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"4:11809:9514":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"4:10962:3263":{"crate_id":4,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"17:15616:21537":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:1507:11031":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:4805:14093":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:40826:3716":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"5:7681:9424":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"4:5289:26852":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"4:2010:787":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"1:45988:9022":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:7316:10984":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:23141:9455":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"4:10590:9626":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:6979:21845":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:15635:21539":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"4:5837:220":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:6466:17097":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:22939:24796":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"4:10704:9498":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"17:437:16109":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"4:3436:9496":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:46128:9011":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"5:1132:30417":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:13473:20228":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"4:2495:9444":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"4:2780:9491":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"4:7470:27149":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"6:5301:14143":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:38303:2725":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"11:2366:16054":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"4:1844:696":{"crate_id":4,"path":["std","env"],"kind":"module"},"1:2611:3550":{"crate_id":1,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"6:5570:14173":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"4:6682:2689":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"4:12370:1816":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"4:675:9335":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:23277:24094":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"4:12375:756":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"1:39651:2732":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"11:2121:9365":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:15102:21496":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:13969:152":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:14575:17227":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"4:10213:24343":{"crate_id":4,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"4:8082:9411":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:7361:15304":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:14235:20749":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"11:772:9355":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:4802:16789":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:7414:11158":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:6606:17106":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:3740:2667":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:23751:236":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:39683:210":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"4:12369:1726":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"17:16187:21720":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:15356:21518":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:40681:3680":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"6:6876:14926":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:7098:32960":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:8249:3705":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:14131:20744":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:12863:17265":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"5:2182:9380":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"6:7487:15309":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:15822:21552":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:22605:25233":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"1:44136:3890":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:11041:9455":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:4853:2657":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:6534:14873":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:43732:23765":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"4:8047:9339":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:46954:9059":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:8343:15884":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:41360:3700":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:5088:14122":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:46660:23973":{"crate_id":1,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"1:43945:3879":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"5:4491:265":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:11324:17344":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:7718:3652":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:13553:20234":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:12792:17221":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:10534:33925":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"4:8254:3237":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:43801:3293":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"4:5708:9623":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"6:6672:14884":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:7888:17153":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:10457:138":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"4:10341:26876":{"crate_id":4,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"4:11094:26952":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:13766:17445":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:33631:2717":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:5107:16864":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:10186:3787":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"4:9173:9638":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:13644:3719":{"crate_id":1,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"1:39763:216":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"4:672:9334":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"5:1586:9355":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:5311:14144":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:12768:17219":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:40816:133":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:10185:17216":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"4:11676:26621":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:13604:25508":{"crate_id":1,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"5:1604:9358":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:2733:112":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"6:5676:14184":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"5:4995:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"9:0:2564":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:10155:17060":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"4:8468:9503":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"17:10954:17277":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:47012:9031":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:23089:25299":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"4:8536:3883":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"1:15:2539":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:42366:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"4:4008:9515":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:12213:17484":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:10829:21868":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:12408:17480":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"16:5722:17064":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:7910:17154":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:43913:3297":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:22473:9130":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:30463:3346":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"4:11849:9513":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:14111:20743":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"4:8477:3263":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"5:4307:3609":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:12008:3820":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"18:659:21752":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:11166:17295":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:12264:17454":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"4:10991:9411":{"crate_id":4,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"11:2559:32679":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:6902:14927":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:6777:14897":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"4:8506:3714":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"16:7052:17123":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:42133:3235":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"5:7709:9425":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:7463:15307":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"5:7826:9357":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"4:12346:26765":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:11523:3808":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"4:3667:9453":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"1:4452:24438":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"4:12367:335":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"1:46565:9079":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:14876:21486":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:34150:2719":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:3042:123":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"17:10218:17217":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"5:5935:251":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:44613:3874":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:42719:2683":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:3830:70":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"17:12695:17502":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"17:403:17237":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:45819:9044":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"14:202:9689":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"14:31:16061":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:2458:16142":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:8308:14352":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"11:351:32684":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:46341:9046":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:4856:16797":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:2147:23993":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"16:7559:17135":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"5:7767:9691":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:15734:21545":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"5:1898:9357":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:15222:21507":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:1675:11047":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"4:758:154":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:13999:20735":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:21683:3580":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:13758:3952":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:13832:20725":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:15646:21540":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"4:3032:3261":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:1643:11044":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:30686:3536":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:13621:3954":{"crate_id":1,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"1:40643:3676":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"4:4981:9539":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:12201:17483":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"4:12387:969":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"17:13723:20720":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:40006:3586":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"6:6823:14899":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:7604:17139":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:12388:17479":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"16:872:32892":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"17:15058:21478":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:40888:3721":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:4957:14107":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"14:220:16071":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:4862:2658":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"16:4424:16664":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:8443:178":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"4:0:1718":{"crate_id":4,"path":["std"],"kind":"module"},"1:44582:3917":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:6976:17120":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"18:515:21762":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"7:0:1906":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:43057:23977":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"4:3649:3649":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"4:4167:9523":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"5:7067:9713":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"1:42405:86":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:11367:17297":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:11493:17338":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:2038:3514":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"16:2788:16157":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"4:6691:2478":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"17:15445:21528":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:10982:17278":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:41845:170":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:10419:17213":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"5:1239:3227":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"16:6872:17115":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"16:6433:17094":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"4:8183:9451":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"17:16176:21719":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"17:10828:33912":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:14489:20767":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"5:7584:2828":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:7604:15316":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:4940:16812":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:1625:11042":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:15655:21541":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"4:11219:3927":{"crate_id":4,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"1:38248:2724":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:14463:20765":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"9:500:15933":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:10360:143":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"18:706:3872":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:13024:17271":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"4:5776:9624":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"16:7085:33015":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"5:7231:30449":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:6427:17093":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"16:8313:137":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:6278:17085":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"4:7395:26971":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:32314:24985":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:44561:3915":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"4:11690:26619":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:3459:141":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"4:986:9364":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:10622:33921":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:22705:9126":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"1:13037:3901":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"4:9358:26785":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"4:9700:138":{"crate_id":4,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"4:10339:3273":{"crate_id":4,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"4:11031:9629":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1:10401:206":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"6:6381:14801":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"4:12381:887":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"1:4:1259":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"4:12389:1422":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"5:1379:9365":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"16:6927:17117":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:11773:17436":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"4:12390:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"4:1974:9421":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"17:12353:17487":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:23255:24060":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"6:4902:14101":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"4:8594:9559":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:4830:16794":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:2974:257":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"6:5629:14178":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:21950:8999":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:13015:17227":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:11222:3236":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:479:10129":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"4:4923:9534":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"4:1098:9366":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"4:4211:9525":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"9:236:9609":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"18:531:21763":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"16:7823:17151":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"4:2313:138":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"4:11088:26948":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"4:4109:9518":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:12707:17261":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:15289:21512":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"6:4896:13932":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:12887:17266":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:15400:21523":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"4:9729:127":{"crate_id":4,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"17:10769:33923":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:2772:134":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"5:1259:30549":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:44572:3916":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:15324:21515":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:30718:3537":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:12808:17222":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:14933:21488":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:11567:17381":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:13437:20226":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"11:434:32689":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:2508:16144":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:6779:3731":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"4:2073:198":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:14847:21483":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"4:4807:9523":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"16:2902:16162":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"4:4333:9554":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:42124:173":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"6:5395:14155":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:8249:14343":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:7469:15308":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:40739:3683":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"6:5635:14179":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"11:1914:9370":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:564:10140":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:13455:20227":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"18:670:21753":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:15760:21547":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:4913:16808":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:5288:14141":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"11:1880:3235":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:11256:17316":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"4:3903:9514":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"5:6785:2828":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"4:9253:2687":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"9:480:15929":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"4:6037:2696":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"4:9202:9639":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:11354:17329":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:10386:119":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"4:902:9355":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:43972:3680":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:11329:3810":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:10403:3775":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:6026:17078":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"18:589:25273":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:40797:3708":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:43112:23980":{"crate_id":1,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"6:5507:14167":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"16:5037:16840":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:12711:137":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:46288:23971":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:16259:20222":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"16:7168:17126":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:40766:3707":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:21948:9000":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:11915:17442":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"4:9130:9628":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"4:4927:9538":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:42230:3746":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:42278:3235":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"5:798:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:40920:3723":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"5:6658:3241":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"5:3313:9369":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:5586:14174":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:2708:16153":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:13959:20732":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:2967:144":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:23288:23984":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"1:2937:9455":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:14298:20754":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"11:299:3203":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:46631:23995":{"crate_id":1,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"17:13344:20219":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:22924:24057":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:45883:9045":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:6611:14877":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:43368:9609":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"16:7132:32872":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:46227:9084":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:12597:17506":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"1:3094:3591":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"1:44789:164":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:42444:93":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"5:2594:3228":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"16:2418:16140":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:8353:15885":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:6412:17092":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"6:5381:14153":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:5927:17075":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:43356:157":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:21751:24279":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:22607:3550":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"6:5375:14152":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:42221:2899":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:11189:17293":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:45971:9016":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:32397:3600":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:545:10137":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:14752:21481":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:47071:8983":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:5139:14126":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"4:9312:26822":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"4:8230:9353":{"crate_id":4,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"17:15197:21504":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:4718:16774":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:6708:14888":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"4:4406:9557":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:12082:3566":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"5:5538:9684":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:12923:3362":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:5025:14116":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"4:11653:9609":{"crate_id":4,"path":["std","sys","thread_local","fast_local","eager","State"],"kind":"enum"},"16:2303:16107":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"14:0:2568":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:41094:3727":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:42303:196":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"4:11938:26831":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"4:11254:26767":{"crate_id":4,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"17:14977:21490":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:2964:163":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:40897:3710":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:16212:21722":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"4:9421:162":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"1:32868:2709":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:597:17239":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"4:12382:1856":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"4:4223:9528":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:13774:17443":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:31097:196":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"17:13046:17224":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:40530:3638":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:44672:3929":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:14147:20745":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:2528:16145":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:6770:14896":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"1:44303:3637":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"4:5992:2686":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"4:7936:26946":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"11:671:3235":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:10887:33928":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:13912:3298":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:12963:3855":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"1:11495:3807":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:1828:3482":{"crate_id":1,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"6:4875:14098":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:6473:14869":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:11405:17327":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"11:430:32693":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"4:3610:3262":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"4:944:9358":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"4:4487:9558":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:10671:33927":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"4:3065:226":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"1:46498:9018":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"4:4103:9519":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:4440:24481":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:42189:2802":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:2613:3551":{"crate_id":1,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"17:0:2571":{"crate_id":17,"path":["object"],"kind":"module"},"6:491:10131":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:15010:21492":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:8175:17160":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"4:9190:9636":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"4:4215:9526":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:44619:3927":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:46880:9053":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:44547:3914":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:4502:16696":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"4:6796:2691":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:11227:17287":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:2636:16150":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"5:2157:3237":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:12510:3875":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"4:6461:3264":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"6:4869:14097":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"4:9712:3272":{"crate_id":4,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"1:43893:3296":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"18:726:21757":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:14325:20756":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:8297:165":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:43832:3819":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:586:10143":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:32339:244":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"11:123:3200":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:43386:24835":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"16:6560:17103":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"4:10971:29415":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:14372:20759":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:15624:21538":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"16:7014:17122":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"4:3067:137":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"6:1667:11046":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:3213:247":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:8335:129":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:8255:14344":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"16:7111:33161":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:867:32859":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"4:8486:9454":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"18:113:21739":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:5914:32890":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:3289:2730":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:3658:254":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"11:364:3207":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:553:10138":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"4:7980:9455":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"4:2483:9438":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"16:3899:16231":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:16269:20224":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"6:6666:14883":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"4:5004:9533":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:6802:16079":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:23011:24019":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"16:2878:16161":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:5341:14148":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"5:291:30417":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:7332:10009":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:34496:2722":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:8259:17165":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:7633:32978":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:3264:2712":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:22955:23996":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:47080:8984":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:40465:24064":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:46046:8997":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:5441:14159":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"4:8061:9340":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"4:568:3255":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"4:12374:740":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"17:11755:17389":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"11:2420:2828":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1:40709:3674":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:4921:14103":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:5551:14171":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:16138:21716":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"4:8238:26874":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:13785:17444":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:11142:17257":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:10759:17257":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":29}